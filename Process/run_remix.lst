GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/11/25 13:30:30 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-pic\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/11/25 13:30:30"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-PIC\Process\data"
  83   
  84  project_hash
  85  project_branch
  86  /;
  87   
  90   
  92   
  93   
  94   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  96  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  97  * SPDX-License-Identifier: BSD-3-Clause
  98   
 101   
 106   
 107  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 129  ;
 130   
 134   
 135  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 140  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 141  * SPDX-License-Identifier: BSD-3-Clause
 142   
 143  * ==== global settings ====
 152   
 156   
 159   
 163  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 165  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 166  * SPDX-License-Identifier: BSD-3-Clause
 167   
 168  * // # sets
 169  * // Sets are the indices of variables and parameters.
 170   
 171  * // ## Reference
 172  * // {special_table_sets}
 173   
 174  * // ## Input Files
 175  * // {special_table_set_input_files}
 753   
 754  map_accNodes(accNodesModel,accNodesModel_aggregation)
 755      $sum((nodesData, nodesModelToCalc)
 756              $( sameas(nodesModelToCalc,accNodesModel)
 757                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 758                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 759   
 760  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 761  map_accNodes(accNodesModel,accNodesModel) = yes;
 762  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 763  map_accLinks(accLinksModel,accLinksModel) = yes;
 764  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 765  map_accYears(accYears,accYears) = yes;
 766   
 767  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 768      $sum((nodesData)
 769              $( map_accNodesLoad(nodesData,accNodesModel)
 770                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 771   
 772  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 773  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 774  map_accLinksToCalc("global",linksModelToCalc) = yes;
 775  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 776  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 777  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 778   
 779  * Duplicate sets for postcalc reporting without horizon and accYears
 780  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 781  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 782  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 783  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 784   
 785  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 786  option map_nodesAccounting < map_accNodes;
 787   
 788  * ==== Generic sets  ====
 789  * These set names are repeated across different profile parameters.
 790  * they are not strictly related to each other and are not input data but
 791  * are needed for validation.
 792  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 793   
 794  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 795  * "Scenario indexes help to differentiate scenarios." /
 796   
 797  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 798  * "Capacity types differentiate investment decisions." /
 799   
 800  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 801  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 803  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 804  * SPDX-License-Identifier: BSD-3-Clause
 805   
 806  * // # accounting_input
 807  * // The parameters in this file describe the accounting of indicators in the model.
 808   
 809  * // ## Variables
 810  * // {special_table_input_variables}
1057   
1058  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1060  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1061  * SPDX-License-Identifier: BSD-3-Clause
1062   
1064   
1066   
1067  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1068  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1069      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1070      = yes;
1071   
1073  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1074  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1075      $sum((nodesData,accnodesData)
1076              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1077                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1078      = smax((nodesData,accnodesData)
1079              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1080                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1081          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1082      - smin((nodesData,accnodesData)
1083              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1084                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1085          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1086   
1087  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1089   
1090  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1091  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1092      $sum((nodesData,accnodesData)
1093              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1094                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1095      = sum((nodesData,accnodesData)
1096              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1097                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1098          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1099      / sum((nodesData,accnodesData)
1100              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1101                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1102          1);
1103   
1104  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1105  loop(accnodes,
1106  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1107      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1108                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1109      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1110              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1111  );
1112   
1113  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1114      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1115      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1116   
1117  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1118  loop(accYears,
1119  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1120      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1121              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1122      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1123              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1124  );
1125   
1126  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1128  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1129  * SPDX-License-Identifier: BSD-3-Clause
1130   
1132   
1134   
1135  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1136  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1137      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1138      = yes;
1139   
1141   
1142  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1143  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1144      $sum((nodesData,accnodesData)
1145              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1146                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1147      = sum((nodesData,accnodesData)
1148              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1149                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1150          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1151      / sum((nodesData,accnodesData)
1152              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1153                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1154          1);
1155   
1156  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1157  loop(accnodes,
1158  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1159      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1160                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1161      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1162              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1163  );
1164   
1165  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1166      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1167      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1168   
1169  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1170  loop(accYears,
1171  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1172      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1173              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1174      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1175              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1176  );
1177   
1178  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1180  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1181  * SPDX-License-Identifier: BSD-3-Clause
1182   
1184   
1186   
1187  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1188  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1189      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1190      = yes;
1191   
1193   
1194  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1195  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1196      $sum((nodesData,accnodesData)
1197              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1198                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1199      = sum((nodesData,accnodesData)
1200              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1201                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1202          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1203      / sum((nodesData,accnodesData)
1204              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1205                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1206          1);
1207   
1208  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1209  loop(accnodes,
1210  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1211      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1212                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1213      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1214              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1215  );
1216   
1217  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1218      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1219      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1220   
1221  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1222  loop(accYears,
1223  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1224      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1225              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1226      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1227              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1228  );
1229   
1230  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1232  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1233  * SPDX-License-Identifier: BSD-3-Clause
1234   
1236   
1238   
1239  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1240  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1241      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1242      = yes;
1243   
1245  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1246  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1247      $sum((nodesData,accnodesData)
1248              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1249                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1250      = smax((nodesData,accnodesData)
1251              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1252                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1253          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1254      - smin((nodesData,accnodesData)
1255              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1256                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1257          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1258   
1259  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1261   
1262  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1263  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1264      $sum((nodesData,accnodesData)
1265              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1266                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1267      = sum((nodesData,accnodesData)
1268              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1269                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1270          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1271      / sum((nodesData,accnodesData)
1272              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1273                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1274          1);
1275   
1276  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1277  loop(accnodes,
1278  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1279      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1280                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1281      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1282              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1283  );
1284   
1285  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1286      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1287      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1288   
1289  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1290  loop(accYears,
1291  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1292      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1293              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1294      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1295              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1296  );
1297   
1298  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1300  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1301  * SPDX-License-Identifier: BSD-3-Clause
1302   
1304   
1306   
1307  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1308  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1309      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1310      = yes;
1311   
1313  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1314  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1315      $sum((linksData,acclinksData)
1316              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1317                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1318      = smax((linksData,acclinksData)
1319              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1320                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1321          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1322      - smin((linksData,acclinksData)
1323              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1324                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1325          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1326   
1327  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1329   
1330  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1331  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1332      $sum((linksData,acclinksData)
1333              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1334                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1335      = sum((linksData,acclinksData)
1336              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1337                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1338          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1339      / sum((linksData,acclinksData)
1340              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1341                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1342          1);
1343   
1344  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1345  loop(acclinks,
1346  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1347      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1348                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1349      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1350              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1351  );
1352   
1353  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1354      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1355      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1356   
1357  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1358  loop(accYears,
1359  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1360      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1361              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1362      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1363              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1364  );
1365   
1366  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1368  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1369  * SPDX-License-Identifier: BSD-3-Clause
1370   
1372   
1374   
1375  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1376  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1377      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1378      = yes;
1379   
1381  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1382  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1383      $sum((linksData,acclinksData)
1384              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1385                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1386      = smax((linksData,acclinksData)
1387              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1388                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1389          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1390      - smin((linksData,acclinksData)
1391              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1392                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1393          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1394   
1395  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1397   
1398  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1399  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1400      $sum((linksData,acclinksData)
1401              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1402                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1403      = sum((linksData,acclinksData)
1404              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1405                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1406          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1407      / sum((linksData,acclinksData)
1408              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1409                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1410          1);
1411   
1412  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1413  loop(acclinks,
1414  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1415      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1416                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1417      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1418              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1419  );
1420   
1421  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1422      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1423      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1424   
1425  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1426  loop(accYears,
1427  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1428      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1429              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1430      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1431              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1432  );
1433   
1434  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1436  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1437  * SPDX-License-Identifier: BSD-3-Clause
1438   
1440   
1442   
1443  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1444  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1445      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1446      = yes;
1447   
1449   
1450  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1451  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1452      $sum((nodesData,accnodesData)
1453              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1454                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1455      = sum((nodesData,accnodesData)
1456              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1457                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1458          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1459      / sum((nodesData,accnodesData)
1460              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1461                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1462          1);
1463   
1464  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1465  loop(accnodes,
1466  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1467      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1468                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1469      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1470              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1471  );
1472   
1473  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1474      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1475      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1476   
1477  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1478  loop(accYears,
1479  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1480      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1481              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1482      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1483              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1484  );
1485   
1486  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1487   
1488  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1489  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1490      = sum((linksData)$sameas(linksModelToCalc,linksData),
1491              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1492   
1493  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1494      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1495              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1496   
1497  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1498  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1499      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1500          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1501   
1502  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1503      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1504      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1505              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1506          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1507   
1508  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1509  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1510      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1511      = yes;
1512   
1513  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1514  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1515      $sum((nodesDataToCalc,accnodesData)
1516              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1517                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1518      = sum((nodesDataToCalc,accnodesData)
1519              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1520                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1521          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1522      / sum((nodesDataToCalc,accnodesData)
1523              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1524                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1525          1);
1526   
1527  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1528   
1529  loop(accNodes,
1530  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1531      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1532              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1533          and map_accNodes(accNodesModel,accNodes)
1534              )
1535      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1536              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1537   
1538  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1539      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1540              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1541          and map_accNodes(accNodesModel,accNodes)
1542          and not sameas(accYears, "horizon"))
1543      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1544              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1545  );
1546   
1547  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1548      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1549          and sameas(accNodesModel,nodesModelToCalc)), 1)
1550      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1551          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1552   
1553  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1554      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1555          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1556      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1557          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1558   
1559   
1560  * Make sure all required indicators end up in the model
1561  set variableIndicators(accNodesModel,accYears,indicator);
1562  variableIndicators(accNodesModel,accYears,indicator)
1563     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1564        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1565     = yes;
1566   
1567  set activeIndicators(accNodesModel,accYears,indicator);
1568  activeIndicators(accNodesModel,accYears,indicator)
1569     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1574        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1575        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1576        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1577          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1578     = yes;
1579   
1580  set activeIndicators_links(linksModel,years,indicator);
1581  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1582     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1583        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1584        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1585     = yes;
1586   
1587  * Clear other dependencies and only add self mapping for variable and qp indicators
1588  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1589      $(variableIndicators(accNodesModel,accYears,indicator))
1590      = 0;
1591  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1592      $(variableIndicators(accNodesModel,accYears,indicator))
1593      = 1;
1594   
1595  * Calculate length of years and discount rates per indicator
1596  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1597  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1598      $(map_accYears(accYears_a,accYears)
1599          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1600      = 1;
1601   
1602  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1603      $(map_accYears(accYears_a,accYears)
1604          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1605          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1606      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1607   
1608  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1609      $(map_accYears(accYears_a,accYears)
1610          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1611          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1612          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1613          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1614      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1615   
1616  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1617      $(map_accYears(accYears_a,accYears)
1618          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1619          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1620          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1621      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1622          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1623                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1624   
1625  * Add self mapping for variable and qp indicators
1626  yearFactor(accNodesModel,accYears,indicator,accYears)
1627      $(variableIndicators(accNodesModel,accYears,indicator))
1628      = 1;
1629   
1630   
1631  * ==== calculate compound indicators for the optimization ====
1632  scalar compIndicators_pre;
1633  scalar compIndicators_post;
1634   
1635  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1636  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1637      $(activeIndicators(accNodesModel,accYears,indicator))
1638      = 1;
1639   
1640  set compoundIndicators_act(accNodesModel,accYears,indicator);
1641  option compoundIndicators_act < compoundIndicators;
1642   
1643  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1644  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1645  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1646      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1647   
1648  compIndicators_pre = 0;
1649  compIndicators_post = 1;
1650   
1651  option sparseval = 1;
1652  while(compIndicators_pre < compIndicators_post,
1653      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1654          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1655   
1656      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1657          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1658              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1659              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1660              and map_accYears(accYears_aa,accYears_a))
1661          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1662              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1663   
1664      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1665   
1666      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1667          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1668              and sum((accNodesModel_a,accYears_a,indicator_a)
1669                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1670          = sum((accNodesModel_a,accYears_a,indicator_a)
1671                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1672              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1673   
1674      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1675          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1676              and sum((accNodesModel_a,accYears_a,indicator_a)
1677                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1678          = sum((accNodesModel_a,accYears_a,indicator_a)
1679                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1680                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1681              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1682          / sum((accNodesModel_a,accYears_a,indicator_a)
1683                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1684                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1685   
1686      option compoundIndicators_act < compoundIndicators;
1687      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1688          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1689  );
1690  option sparseval = 0;
1691   
1692  * map to sub-years and sub-nodes
1693  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1694      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1695          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1696          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1697          and map_accYears(accYears_aa,accYears_a)
1698          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1699      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1700          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1701   
1702  * Remove all accounting regions and accounting years
1703  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1704      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1705          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1706          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1707              or sameas("horizon",accYears_aa)))
1708      = 0;
1709   
1710  * Remove all slack indicators except the ones declared in indicatorBounds
1711  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1712      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1713          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1714                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1715          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1716      = 0;
1717   
1718   
1719  * Map from extended parameter to final parameter
1720  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1721  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1722      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1723          and sum((accNodesModel_a,accYears_a,indicator_a)
1724                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1725      = sum((accNodesModel_a,accYears_a,indicator_a)
1726              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1727          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1728   
1729  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1730      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1731          and sum((accNodesModel_a,accYears_a,indicator_a)
1732                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1733      = sum((accNodesModel_a,accYears_a,indicator_a)
1734              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1735                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1736          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1737      / sum((accNodesModel_a,accYears_a,indicator_a)
1738              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1739                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1740   
1741  * Remove all accounting regions and accounting years
1742  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1743      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1744          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1745          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1746              or sameas("horizon",accYears_aa)))
1747      = 0;
1748   
1749  * Remove all slack indicators except the ones declared in indicatorBounds
1750  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1751      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1752          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1753          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1754      = 0;
1755   
1756   
1757  * ==== compound indicators for the post calculation ====
1758  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1759  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1760      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1761          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1762   
1763  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1764      $(activeIndicators(accNodesModel,accYears,indicator)
1765          or variableIndicators(accNodesModel,accYears,indicator))
1766      = 1;
1767   
1768  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1769  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1770   
1771  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1772  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1773  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1774   
1775  compIndicators_pre = 0;
1776  compIndicators_post = 1;
1777   
1778  option sparseval = 1;
1779  while(compIndicators_pre < compIndicators_post,
1780      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1781          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1782   
1783      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1784          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1785              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1786              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1787              and map_accYears(accYears_aa,accYears_a))
1788          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1789              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1790   
1791      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1792   
1793      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1794          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1795              and sum((accNodesModel_a,accYears_a,indicator_a)
1796                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1797          = sum((accNodesModel_a,accYears_a,indicator_a)
1798                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1799              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1800   
1801      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1802          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1803              and sum((accNodesModel_a,accYears_a,indicator_a)
1804                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1805          = sum((accNodesModel_a,accYears_a,indicator_a)
1806                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1807                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1808              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1809          / sum((accNodesModel_a,accYears_a,indicator_a)
1810                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1811                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1812   
1813      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1814      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1815          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1816  );
1817  option sparseval = 0;
1818   
1819  * map to sub-years and sub-nodes
1820  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1821      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1822          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1823          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1824          and map_accYears(accYears_aa,accYears_a)
1825          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1826      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1827          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1828   
1829  * Remove all accounting regions and accounting years
1830  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1831      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1832          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1833          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1834              or sameas("horizon",accYears_aa)))
1835      = 0;
1836   
1837  * Remove all slack indicators except the ones declared in indicatorBounds
1838  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1839      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1840          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1841                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1842          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1843      = 0;
1844   
1845   
1846  * Map from extended parameter to final parameter
1847  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1848  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1849      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1850          and sum((accNodesModel_a,accYears_a,indicator_a)
1851                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1852      = sum((accNodesModel_a,accYears_a,indicator_a)
1853              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1854          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1855   
1856  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1857      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1858          and sum((accNodesModel_a,accYears_a,indicator_a)
1859                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1860      = sum((accNodesModel_a,accYears_a,indicator_a)
1861              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1862                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1863          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1864      / sum((accNodesModel_a,accYears_a,indicator_a)
1865              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1866                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1867   
1868  * Remove all accounting regions and accounting years
1869  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1870      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1871          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1872   
1873          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1874              or sameas("horizon",accYears_aa)))
1875      = 0;
1876   
1877  * Remove all slack indicators except the ones declared in indicatorBounds
1878  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1879      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1880          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1881          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1882      = 0;
1883   
1884   
1885  * Check if the objective value and optimization sense is set correctly
1886  scalar opti_values, opti_sense;
1887  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1888  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1889  abort$(opti_values < 1)
1890      "Accounting: No indicator specified as objective value"
1891  abort$(opti_values > 1)
1892      "Accounting: Too many indicators specified as objective value"
1893  abort$(opti_sense <> -1 and opti_sense <> 1)
1894      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
1896  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1897  * SPDX-License-Identifier: BSD-3-Clause
1898   
1899  * Calculation of annuities
1900  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1901          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
1902          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1903      "Accounting: Some converter technologies use annuities but have no amortization time"
1904   
1905  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
1906  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1907      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
1908      =
1909      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
1910          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1911          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
1912      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1913          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
1914   
1915   
1916  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1917          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
1918          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1919      "Accounting: Some storage technologies use annuities but have no amortization time"
1920   
1921  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
1922  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1923      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
1924      =
1925      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
1926          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1927          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
1928      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1929          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
1930   
1931   
1932  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1933          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
1934          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1935      "Accounting: Some transfer technologies use annuities but have no amortization time"
1936   
1937  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
1938  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1939      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
1940      =
1941      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
1942          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1943          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
1944      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1945          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
1946   
1947   
1948   
1949  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
1950          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
1951          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
1952      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
1953   
1954  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
1955  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
1956   
1957  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
1958      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
1959      =
1960      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
1961          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
1962          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
1963      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
1964          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
1965   
1969   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
1971  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1972  * SPDX-License-Identifier: BSD-3-Clause
1973   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
1978  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1979  * SPDX-License-Identifier: BSD-3-Clause
1980   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
1985  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1986  * SPDX-License-Identifier: BSD-3-Clause
1987  * // # Output data
1988  * // This is the reference data model of the REMix output.
1989  * //
1990  * // ## Standard output
1993   
2000   
2002   
2003  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2004  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2005  set profileType / "upper", "fixed", "lower" /;
2006  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2007   
2008  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2009  * // ### indicator_accounting
2010  * // Title: Accounting indicators Post-calculation
2011  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2012  * //
2013  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2014  * // ### indicator_accounting_ref
2015  * // Title: Accounting indicators reference
2016  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2017  * //
2018  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2019  * // ### indicator_accounting_var
2020  * // Title: Accounting indicators variable states
2021  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2022  * //
2023  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2024  * // ### indicator_accounting_comp
2025  * // Title: Accounting indicators composition
2026  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2027  * //
2028  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2029  * // ### indicator_accounting_detailed
2030  * // Title: Accounting indicators detail
2031  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2032  * //
2033  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2034  * // ### indicator_accounting_links
2035  * // Title: Accounting indicators per transfer link
2036  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2037  * //
2038  parameter converter_ratedInput(techs,vintage,commodity);
2039  parameter converter_ratedOutput(techs,vintage,commodity);
2040  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2041  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2042   
2043  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2044  * // ### converter_caps
2045  * // Title: Coverter capacities post-calculation
2046  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2047  * //
2048  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2049  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2050   
2051  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2052  * // ### converter_units
2053  * // Title: Coverter units post-calculation
2054  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2055  * //
2056  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2057   
2058  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2059  parameter max_transfer_coefficient(techs,commodity);
2060  parameter min_transfer_coefficient(techs,commodity);
2061  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2062  * // ### transfer_links
2063  * // Title: Transfer post-calculation
2064  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2065  * //
2066  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2067  * // ### transfer_caps
2068  * // Title: Transfer capacities post-calculation
2069  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2070  * //
2071  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2072  * // ### transfer_flows
2073  * // Title: Transfer hourly flows
2074  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2075  * //
2076  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2077  * // ### transfer_flows_annual
2078  * // Title: Transfer annual flows
2079  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2080  * //
2081  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2082  * // ### transfer_losses
2083  * // Title: Transfer hourly losses
2084  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2085  * //
2086  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2087  * // ### transfer_losses_annual
2088  * // Title: Transfer annual losses
2089  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2090  * //
2091  parameter storage_size_max(nodesModel,years,techs,commodity);
2092  parameter storage_size_min(nodesModel,years,techs,commodity);
2093  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2094  * // ### storage_units
2095  * // Title: Storage units post-calculation
2096  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2097  * //
2098  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2099  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2100  * // ### storage_caps
2101  * // Title: Storage capacities post-calculation
2102  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2103  * //
2104  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2105  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2106  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2107  * // ### storage_level_out
2108  * // Title: Storage level
2109  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2110  * //
2111  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2112  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2113  * // ### storage_flows
2114  * // Title: Storage hourly flows
2115  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2116  * //
2117  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2118  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2119  * // ### storage_flows_annual
2120  * // Title: Storage annual flows
2121  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2122  * //
2123  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2124  * // ### storage_losses_out
2125  * // Title: Storage hourly losses
2126  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2127  * //
2128  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2129  * // ### storage_losses_annual
2130  * // Title: Storage annual losses
2131  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2132  * //
2133  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2134  * // ### commodity_balance
2135  * // Title: Hourly commodity balance
2136  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2137  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2138  * //
2139  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2140  * // ### commodity_balance_annual
2141  * // Title: Annual commodity balance
2142  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2143  * //
2144  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2145  * // ### marginals_sourcesink_profile
2146  * // Title: Source-sink marginals
2147  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2148  * //
2149  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2150  * // ### marginals_balance
2151  * // Title: Nodel balance marginals
2152  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2153  * //
2154  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2155  * // ### marginals_sourcesink_sum
2156  * // Title: Source-sink annual marginals
2157  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2158  * //
2159  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2160  * // ### marginals_indicator_bounds
2161  * // Title: Indicator bounds marginals
2162  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2163  * //
2164  * // ## REMix-AMIRIS interface output
2165  * //
2166  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2167  * // ### r2a_annuity_cost_converter
2168  * // Title: Converter annuity cost
2169  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2170  * //
2171  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2172  * // ### r2a_spec_cost_converter
2173  * // Title: Converter specific cost
2174  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2175  * //
2176  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2177  * // ### r2a_spec_cost_fuel
2178  * // Title: Commodity specific cost
2179  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2180  * //
2181  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2182  * // ### r2a_spec_cost_indicator
2183  * // Title: Indicator specific cost
2184  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2185  * //
2186  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2187  * // ### r2a_converter_efficiencies
2188  * // Title: Indicator specific cost
2189  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2190  * //
2191  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2192  * // ### r2a_converter_avail_factor
2193  * // Title: Converter availability factor
2194  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2195  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2196  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2197  * //
2198  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2199  * // ### r2a_storage_e2p
2200  * // Title: E2P Storage
2201  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2202  * //
2203  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2204  * // ### r2a_storage_selfdischarge
2205  * // Title: Storage self discharge rates
2206  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2207   
2208  set attribute(*)
2209       /
2210      "variables"
2211      "equations"
2212      "iterations"
2213      /;
2214   
2215  parameter diagnostics(attribute);
2216   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2220  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2221  * SPDX-License-Identifier: BSD-3-Clause
2222   
2223  * ==== global settings ====
2225   
2227   
2229   
2231   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2233  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2234  * SPDX-License-Identifier: BSD-3-Clause
2235   
2236  * // # core_converter
2237  * // The equations in this file describe the converters in the model.
2238   
2239  * // ## Advanced features
2240  * //
2241  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2242  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2243  * //
2244  * // In the following table you can see which modifications you have to make to your data to use the different features.
2245  * //
2246  * // | Feature | Modification |
2247  * // | ------ | ------ |
2248  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2249  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2250  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2251  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2252  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2253  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2254   
2255  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2256  * //
2257  * // ### set_converter_techs.dat
2258  * // In this file all converter technologies are listed that can be used within your model.
2259  * //
2260  * // ### set_activities.dat
2261  * // All modes with which the converter technologies can be operated need to be added here.
2262  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2263  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2264  * //
2265  * // ### set_commodities.dat
2266  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2267  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2268   
2269  * // ## Variables
2270  * // {special_table_converter_variables}
2544   
2545  * // ## Load units from gdx file
2547   
2548   
2549  * ==== calculation of mappings ====
2550   
2551  * Technologies with a lifeTime > 0 are available
2552  set converter_availTech(nodesModel,years,converter_techs,vintage);
2553  converter_availTech(nodesModel,years,converter_techs,vintage)
2554      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
2555          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
2556   
2557  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
2558  converter_availTech(nodesModel,years,converter_techs,vintage)
2559      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
2560   
2561  * Technologies already built become unavailable if they have an unitsBuild of 0
2562  converter_availTech(nodesModel,years,converter_techs,vintage)
2563      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
2564   
2565  * Used technologies are available technologies over their technical lifeTime
2566  set converter_usedTech(nodesModel,years,converter_techs,vintage);
2567  converter_usedTech(nodesModel,years,converter_techs,vintage)
2568      $(vintage.val <= years.val
2569          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
2570                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
2571          ) = yes;
2572   
2573  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
2574  set converter_decomTech(nodesModel,years,converter_techs,vintage);
2575  converter_decomTech(nodesModel,years,converter_techs,vintage)
2576    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2577                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2578      and sum(yearsToCalc
2579        $(sameas(years, yearsToCalc)
2580          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2581          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2582    = yes;
2583   
2584  converter_decomTech(nodesModel,years,converter_techs,vintage)
2585    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2586                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2587      and sum(yearsToCalc
2588        $(sameas(years, yearsToCalc)
2589          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2590          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2591    = yes;
2592   
2593  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
2594  converter_decomTech(nodesModel,years,converter_techs,vintage)
2595    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
2596      and sum(yearsToCalc
2597        $(sameas(years, yearsToCalc)
2598          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
2599    = yes;
2600   
2601  * Extend the decom frame to the model year after the last model year of usedTech
2602  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2603    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
2604      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
2605    = yes;
2606   
2607  * Mapping for used activities and commodities
2608  set converter_usedActCom(converter_techs,vintage,activity,commodity);
2609  option converter_usedActCom < converter_coefficient;
2610   
2611  set converter_usedAct(converter_techs,vintage,activity);
2612  option converter_usedAct < converter_usedActCom;
2613   
2614  set converter_usedCom(converter_techs,vintage,commodity);
2615  option converter_usedCom < converter_usedActCom;
2616   
2617  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
2618  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
2619      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2620          and converter_usedAct(converter_techs,vintage,activity))
2621      = yes;
2622   
2623  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
2624  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2625    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2626      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
2627    = 1;
2628   
2629  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
2630  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2631    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2632      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
2633    = 1;
2634   
2635   
2636  * ==== aggregation of profiles ====
2637   
2638  * derive upper and lower profiles then aggregate
2639  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
2640  option converter_activity_hasProfileIn < converter_activityProfileIn;
2641   
2642  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
2643  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2644      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2645              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
2646   
2647  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
2648  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
2649   
2650  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
2651  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2652      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2653              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
2654   
2655  * aagregate time dimension
2656  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
2657  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2658    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2659    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
2660            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2661            / timeLength(timeModelToCalc));
2662  option clear = converter_activityProfileIn;
2663   
2664  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2665  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
2666  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
2667      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
2668  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
2669      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
2670   
2671   
2672  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2673  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2674      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
2675          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
2676   
2677  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2678  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2679      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
2680   
2681  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2682      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2683          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2684      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2685                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
2686                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2687                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
2688      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2689              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2690   
2691  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2692      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2693          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2694      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2695                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
2696                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
2697      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2698                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2699              1);
2700  option clear = converter_activityProfileIn_aggTime;
2701   
2702  * for fixed profiles overwrite upper and lower profile
2703  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
2704      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2705      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2706   
2707  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
2708      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2709      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2710   
2714   
2715  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2716  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
2717  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2718      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
2719   
2720  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2721      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2722          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
2723      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2724            sum(timeData$timeMapping(timeData,timeModelToCalc),
2725                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2726                / timeLength(timeModelToCalc)
2727              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
2728      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2729              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2730   
2731  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2732      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2733          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2734      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2735                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2736            sum(timeData$timeMapping(timeData,timeModelToCalc),
2737                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2738                / timeLength(timeModelToCalc))
2739      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2740                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
2741   
2744   
2745  * reduce coefficient delay based on time resolution
2746  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
2747    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
2748    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
2750   
2751  * ==== prepare partial load behavior parameters ====
2752   
2753  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
2754  alias(commodity, com);
2755  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
2756      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
2757        and converter_usedAct(converter_techs,vintage,activity))
2758      = 1;
2759   
2760  * indicate that at least one activity of a technology makes use of partial load behavior
2761  set converter_hasMaxLoad(converter_techs,vintage);
2762  converter_hasMaxLoad(converter_techs,vintage)
2763    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2764              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
2765   
2766  set converter_hasMinLoad(converter_techs,vintage);
2767  converter_hasMinLoad(converter_techs,vintage)
2768    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2769              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
2770   
2771  set converter_hasConstantFluxInActivity(converter_techs,vintage);
2772  converter_hasConstantFluxInActivity(converter_techs,vintage)
2773    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2774                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
2775   
2776  * setting up a requirements parameter to avoid having to cycle through commodities in equations
2777  set pc_converter_activityRequirements
2778      /
2779      minLoad             "Lower profile for converter activity"
2780      maxLoad             "Upper profile for converter activity"
2781      /;
2782  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
2783  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
2784    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
2785  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
2786    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
2787   
2788  * ==== activate MIP units for MIP dispatch or partial load technologies ====
2789   
2790  set converter_hasMinUptime(converter_techs,vintage);
2791  converter_hasMinUptime(converter_techs,vintage)
2792    $(converter_techParam(converter_techs,vintage,"minUptime")
2793      and converter_techParam(converter_techs,vintage,"mipDispatch"))
2794    = yes;
2795   
2796  set converter_hasMinDowntime(converter_techs,vintage);
2797  converter_hasMinDowntime(converter_techs,vintage)
2798    $(converter_techParam(converter_techs,vintage,"minDowntime")
2799      and converter_techParam(converter_techs,vintage,"mipDispatch"))
2800    = yes;
2801   
2802  * require integer unit counts if online state is to be tracked
2803  converter_techParam(converter_techs,vintage,"mipUnits")
2804      $(converter_techParam(converter_techs,vintage,"mipDispatch")
2805        or converter_hasMinLoad(converter_techs, vintage)
2806        or converter_hasMaxLoad(converter_techs, vintage)
2807        or converter_hasConstantFluxInActivity(converter_techs,vintage))
2808      = 1;
2809   
2810  * ==== floor mip converter units to integer values ====
2811  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
2812      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
2813      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
2814  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
2815      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
2816      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2817   
2818  * ==== scalars and sets for minUptime and minDowntime ====
2819   
2820  scalar converter_maxUptimeReq;
2821  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
2822  set uptimeSearchRange(timeModelToCalc);
2823  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
2824   
2825  scalar converter_maxDowntimeReq;
2826  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
2827  set downtimeSearchRange(timeModelToCalc);
2828  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
2829   
2830  * ==== definition of variables ====
2831   
2832  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
2833      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
2834        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
2835      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
2836  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
2837      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
2838        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
2839      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
2840  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
2841      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
2842        and (converter_hasMinLoad(converter_techs, vintage)
2843              or converter_hasMaxLoad(converter_techs, vintage)))
2844      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
2845   
2846   
2847  * Initialise variables for unitsBuild
2848  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
2849      $converter_availTech(nodesModel,years,converter_techs,vintage)
2850      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
2851  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
2852      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
2853      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
2854  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
2855      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
2856      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
2857   
2858  * Initialise variables for unitsDecom
2859  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
2860    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
2861      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
2862    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
2863                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
2864                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
2865                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
2866          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
2867   
2868  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
2869    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2870    = sum(years$
2871          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
2872            and converter_availTech(nodesModel,years,converter_techs,vintage)
2873            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
2874            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
2875        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
2876      + sum(yearsToCalc_a$
2877          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
2878            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
2879            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
2880            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
2881        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
2882        ;
2883   
2884  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
2885      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
2886          and not converter_techParam(converter_techs,vintage,"freeDecom"))
2887      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
2888   
2889   
2891   
2892   
2893  * Calculate planned unit expansion
2894  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
2895  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
2896  loop(years,
2897    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
2898      =
2899      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
2900          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
2901      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
2902          $converter_availTech(nodesModel,years,converter_techs,vintage)
2903      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
2904          $converter_decomTech(nodesModel,years,converter_techs,vintage);
2905  );
2906   
2907  * Set initial state for planned units
2908  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
2909    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
2910   
2911   
2912  * // ## Load units from gdx file
2914   
2915  * Calculate if planned unit expansion is bounded by upper and lower limits
2916  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
2917  converter_unitBoundsFixed(nodesModel,years,converter_techs)
2918    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
2919          converter_techParam(converter_techs,vintage,"freeDecom"))
2920    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
2921          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
2922      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
2923    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
2924          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
2925      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
2926    = yes;
2927   
2928  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
2929  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
2930    $(converter_availTech(nodesModel,years,converter_techs,vintage)
2931      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
2932    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
2933  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
2934    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2935      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
2936    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
2937  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
2938    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2939      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
2940    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
2941   
2942   
2943  * Add parameter for fixing capacities during myopic runs
2944  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
2945  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
2946  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
2947   
2948  * Fix activities of upper limit if upper limit is zero
2949  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
2950    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2951      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
2952      = 0;
2953   
2954   
2955  * ==== declaration of equations ====
2956   
2957  equations
2958    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
2959      ) "Ensures the units balance over the planning period."
2960    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
2961      ) "Ensures the units balance over the planning period."
2962    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
2963      ) "Restricts the free decommissioning of units over the planning period."
2964    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
2965      ) "Upper bound for the total number of units."
2966    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
2967      ) "Lower bound for the total number of units."
2968    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
2969      ) "Fixed bound for the total number of units."
2970    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
2971      ) "Fixes the total number of units to the corresponding integer variable."
2972    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
2973      ) "Fixes the number of online units to the corresponding integer variable."
2974   
2975    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
2976      ) "Lower limit on the activity."
2977    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
2978      ) "Upper limit on the activity."
2979   
2980    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
2981      ) "Fixed limit on the activity."
2982    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
2983      ) "Positive ramping of unit activity."
2984    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
2985      ) "Negative ramping of unit activity."
2986    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
2987      ) "Restrict ramping up of unit activity."
2988   
2989    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
2990      ) "Set online units to total number of operational units."
2991    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
2992      ) "Allow shutting down units."
2993    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
2994      ) "Variable counting the number of unit startups."
2995    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
2996      ) "Variable tracking the number of unit shutdowns."
2997    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
2998      ) "Limit the number of startup cycles a unit can perform."
2999    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3000      ) "Require recently started units to remain online for their respective minimum uptime."
3001    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3002      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3003    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3004      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3005    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3006      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3007    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3008      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3009    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3010      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3011    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3012      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3013    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3014      ) "Limit usage of an activity to corresponding units."
3015    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3016      ) "Limit usage of an activity to corresponding units."
3017    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3018      ) "Limit the number of units in one particular mode to the number of operational units."
3019    ;
3020   
3021  * ==== equation definition ====
3022  * // ## Equations
3023  * // ### Converter Units Balance
3024  * // Ensures that the total units are consistent with the built and decommissioned units.
3025  * // {Eq_converter_unitsBalance}
3026   
3027  * Equation using build only
3028  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3029      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3030            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3031          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3032          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3033      ..
3034      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3035      =e=
3036      sum ((years_a)
3037              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3038                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3039                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3040                  and years_a.val <= yearsSel.val ),
3041            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3042   
3043      + sum ((yearsToCalc)
3044              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3045                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3046                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3047                  and yearsToCalc.val <= yearsSel.val ),
3048            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3049   
3050  * Equation using build and decom
3051  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3052      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3053            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3054          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3055          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3056      ..
3057      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3058      =e=
3059      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3060        sum(years$sameas(years, yearsToCalc),
3061          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3062            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3063      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3064        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3065          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3066      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3067          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3068      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3069          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3070      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3071          ;
3072   
3073  * // ### Converter Units Free Decommission
3074  * // Restricts the free decommissioning of units over the planning period.
3075  * // {Eq_converter_unitsFreeDecom}
3076  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3077      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3078          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3079      ..
3080      sum(years$
3081            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3082              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3083          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3084      + sum(yearsToCalc$
3085            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3086              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3087              and yearsToCalc.val <= yearsSel.val),
3088          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3089      =g=
3090      sum(years$
3091            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3092              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3093              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3094          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3095      + sum(yearsToCalc$
3096            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3097              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3098              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3099          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3100   
3101  * // ### Converter Units Upper Limit
3102  * // Upper bound for the total number of units.
3103  * // {Eq_converter_unitsUpperLimit}
3104  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3105      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3106          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3107          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3108              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3109      ..
3110      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3111          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3112      =l=
3113      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3114   
3115  * // ### Converter Units Lower Limit
3116  * // Lower bound for the total number of units.
3117  * // {Eq_converter_unitsLowerLimit}
3118  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3119      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3120          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3121              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3122      ..
3123      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3124          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3125      =g=
3126      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3127   
3128  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3129      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3130          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3131      ..
3132      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3133          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3134      =e=
3135      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3136   
3137  * // ### Converter Units Total MIP
3138  * // Fixes the total number of units to the corresponding integer variable.
3139  * // {Eq_converter_unitsTotalMIP}
3140  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3141      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3142          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3143      ..
3144      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3145      =e=
3146      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3147   
3148  * // ### Converter Units Online MIP
3149  * // Fixes the number of online units to the corresponding integer variable.
3150  * // {Eq_converter_unitsOnlineMIP}
3151  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3152      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3153          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3154      ..
3155      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3156      =e=
3157      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3158   
3159  * // ### Converter Activity Lower Limit
3160  * // Lower limit on the activity.
3161  * // {Eq_converter_activityLowerLimit}
3162  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3163      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3164          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3165          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3166              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3167          and not converter_hasMinLoad(converter_techs, vintage))
3168      ..
3169      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3170          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3171      )
3172      =g=
3173      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3176      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3179   
3180  * // ### Converter Activity Upper Limit
3181  * // Upper limit on the activity.
3182  * // {Eq_converter_activityUpperLimit}
3183  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3184      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3185          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3186          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3187               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3188      ..
3189      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3190          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3191      )
3192      =l=
3193      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3196      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3199   
3200  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3201      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3202          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3203               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3204      ..
3205      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3206          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3207      )
3208      =e=
3209      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3212      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3215   
3216  * // ### Converter Positive Ramping
3217  * // Positive ramping of unit activity.
3218  * // {Eq_converter_rampPos}
3219  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3220    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3221        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3222      ..
3223      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3224      =g=
3225      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3226              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3227              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3228   
3229  * // ### Converter Negative Ramping
3230  * // Negative ramping of unit activity.
3231  * // {Eq_converter_rampNeg}
3232  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3233    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3234        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3235      ..
3236      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3237      =g=
3238      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3239              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3240              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3241   
3242  * // ### Converter Ramping Limit
3243  * // Restrict ramping up of unit activity.
3244  * // {Eq_converter_rampLimit}
3245  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3246    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3247          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3248      ..
3249      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3250              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3251              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3252    =l=
3253    converter_techParam(converter_techs,vintage,"activityRampLimit")
3256      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3259   
3262   
3263  * // ### Converter Units Online
3264  * // Set converter units online to total converter units for non-MIP case.
3265  * // {Eq_converter_unitsOnline}
3266  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3267      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3268          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3269    ..
3270    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3271    =e=
3272    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3273      ;
3274   
3275  * // ### Converter MIP Units Shutting Down
3276  * // Allow shutting down units.
3277  * // {Eq_converter_unitsOnlineUC}
3278  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3279      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3280          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3281    ..
3282    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3283    =l=
3284    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3285      ;
3288   
3289  * // ### Converter Activity Startups
3290  * // Variable counting the number of unit startups.
3291  * // {Eq_converter_activityStartups}
3292  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3293    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3294          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3295      ..
3296      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3297      =g=
3298          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3299      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3300   
3301  * // ### Converter Activity Shutdowns
3302  * // Variable tracking the number of unit shutdowns.
3303  * // {Eq_converter_activityShutdowns}
3304  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3305    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3306          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3307          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3308      ..
3309      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3310      =g=
3311          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3312      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3313   
3314  * // ### Converter Activity Startup Limit
3315  * // Limit the number of startup cycles a unit can perform.
3316  * // {Eq_converter_limitStartups}
3317  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3318    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3319          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3320      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3321      ..
3322      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3323    =l=
3324    converter_techParam(converter_techs,vintage,"startupLimit")
3325    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3326   
3327  alias(timeModelToCalc,ttc);
3328   
3329  * // ### Converter Units Minimum Uptime
3330  * // Require recently started units to remain online for their respective minimum uptime.
3331  * // {Eq_converter_minUptime}
3332  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3333    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3334          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3335      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3336      ..
3337      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3338          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3339              nodesModelSel,yearsSel,converter_techs,vintage))
3340          =l=
3341          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3342   
3343  * // ### Converter Units Minimum Downtime
3344  * // Require recently shut down units to remain offline for their respective minimum downtime.
3345  * // {Eq_converter_minDowntime}
3346  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3347    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3348          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3349      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3350      ..
3351      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3352          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3353              nodesModelSel,yearsSel,converter_techs,vintage))
3354          =l=
3355          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3356      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3357   
3358  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3359  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3360  alias(activity, act);
3361   
3362  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3363  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3364  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3365  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3366    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3367          and converter_hasMinLoad(converter_techs, vintage)
3368          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3369      ..
3370      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3371                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3372               and converter_usedAct(converter_techs,vintage,act)),
3373      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3374    =l=
3375    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3376      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3377                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3378                 and converter_usedAct(converter_techs,vintage,act)),
3379      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3380   
3381  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3382  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3383  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3384  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3385    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3386          and converter_hasMaxLoad(converter_techs,vintage)
3387          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3388      ..
3389      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3390                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3391               and converter_usedAct(converter_techs,vintage,act)),
3392      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3393    =l=
3394      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3395                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3396               and converter_usedAct(converter_techs,vintage,act)),
3397      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3398            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3399            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3400   
3401  * This equation is meant to enforce the lower limit requirements of activities in use.
3402  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3403  * because these activities can only run on units in the respectively strict activation state.
3404   
3405  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3406  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3407  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3408  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3409    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3410          and converter_hasMinLoad(converter_techs, vintage)
3411          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3412      ..
3413      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3414                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3415               and converter_usedAct(converter_techs,vintage,act)),
3416      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3417    =g=
3418      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3419                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3420               and converter_usedAct(converter_techs,vintage,act)),
3421      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3422            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3423            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3424   
3425   
3426  * Simple one-activity-per-unit partial load equations
3427  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3428  * // Enforce MIP units partial load upper limit.
3429  * // {Eq_converter_activityUpperLimitPartLoad}
3430  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3431    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3432          and (converter_hasMinLoad(converter_techs, vintage)
3433                or converter_hasMaxLoad(converter_techs, vintage)
3434                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3435          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3436      ..
3437      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3438    =l=
3439    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3440          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3441          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3442   
3443  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3444  * // Enforce MIP units partial load lower limit.
3445  * // {Eq_converter_activityLowerLimitPartLoad}
3446  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3447    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3448          and (converter_hasMinLoad(converter_techs, vintage)
3449                or converter_hasMaxLoad(converter_techs, vintage))
3450          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3451      ..
3452      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3453    =g=
3454    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3455          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3456          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3457   
3458  * // ### Converter MIP Units Idle Online Units
3459  * // Counts idle online units at every time step
3460  * // {Eq_converter_noOnlineIdle}
3461  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3462    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3463          and (converter_hasMinLoad(converter_techs, vintage)
3464              or converter_hasMaxLoad(converter_techs, vintage)
3465              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3466          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3467      ..
3468      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3469      =e=
3470      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3471            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3472   
3473  * // ### Converter MIP Units Idle Online Units Partial load
3474  * // Counts idle online units at every time step
3475  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3476  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3477    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3478          and (converter_hasMinLoad(converter_techs, vintage)
3479                  or converter_hasMaxLoad(converter_techs, vintage))
3480          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3481      ..
3482      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3483      =l=
3484      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3485            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3486   
3487  * // ### Converter MIP activity model limit
3488  * // Converter activity model limit
3489  * // {Eq_converter_activityModeLimit}
3490  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3491    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3492          and (converter_hasMinLoad(converter_techs, vintage)
3493                or converter_hasMaxLoad(converter_techs, vintage))
3494          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3495      ..
3496      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3497      =g=
3498      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3499   
3500  * ==== model definition ====
3501   
3502  Model M_converter
3503  /
3504    Eq_converter_unitsBalance
3505    Eq_converter_unitsBalanceFreeDecom
3506    Eq_converter_unitsFreeDecom
3507    Eq_converter_unitsUpperLimit
3508    Eq_converter_unitsLowerLimit
3509    Eq_converter_unitsFixedLimit
3510    Eq_converter_unitsTotalMIP
3511    Eq_converter_unitsOnlineMIP
3512    Eq_converter_activityUpperLimit
3513    Eq_converter_activityLowerLimit
3514    Eq_converter_activityFixedLimit
3515    Eq_converter_rampPos
3516    Eq_converter_rampNeg
3517    Eq_converter_rampLimit
3520    Eq_converter_unitsOnline
3521    Eq_converter_unitsOnlineUC
3524    Eq_converter_activityStartups
3525    Eq_converter_activityShutdowns
3526    Eq_converter_limitStartups
3527    Eq_converter_minUptime
3528    Eq_converter_minDowntime
3529    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
3530    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
3531    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
3532    Eq_converter_activityUpperLimitPartLoad
3533    Eq_converter_activityLowerLimitPartLoad
3534    Eq_converter_noOnlineIdle
3535    Eq_converter_noOnlineIdleDetailedPartLoad
3536    Eq_converter_activityModeLimit
3537  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
3539  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
3540  * SPDX-License-Identifier: BSD-3-Clause
3541   
3542  * // # core_storage
3543  * // The equations in this file describe the storages in the model.
3544   
3545  * // ## Variables
3546  * // {special_table_storage_variables}
3809   
3810   
3811  * === SoC mappings ===
3812  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
3813  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
3814      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
3815        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
3816      = yes;
3817   
3818  set storage_validSoCRange(storage_techs,vintage);
3819  storage_validSoCRange(storage_techs,vintage)
3820      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
3821        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
3822   
3823  * === Translate SoC parameters to ordered SoC-set ===
3824  * set ordered_socs / soc1*soc20 /;
3825  * alias(soc_states, soc_states_c);
3826  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
3827  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
3828  *     $storage_validSoCRange(storage_techs,vintage)
3829  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
3830  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
3831  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
3832  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
3833  *
3834  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
3835  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
3836  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
3837  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
3838  *     = yes;
3839   
3840  parameter storage_bigM(storage_techs,vintage);
3841  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
3842  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
3843  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
3844   
3845  * === calculate the number of years represented by single year to calc ===
3846  alias(yearsToCalc, yearsToCalc_a)
3847  parameter representedYears(years);
3848  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
3849                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
3850   
3851  * ==== calculation of mappings ====
3852   
3853  * Technologies with a lifeTime > 0 are available
3854  set storage_availTech(nodesModel,years,storage_techs,vintage);
3855  storage_availTech(nodesModel,years,storage_techs,vintage)
3856      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3857          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3858   
3859  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3860  storage_availTech(nodesModel,years,storage_techs,vintage)
3861      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
3862   
3863  * Technologies already built become unavailable if they have an unitsBuild of 0
3864  storage_availTech(nodesModel,years,storage_techs,vintage)
3865      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
3866   
3867  * Used technologies are available technologies over their technical lifeTime
3868  set storage_usedTech(nodesModel,years,storage_techs,vintage);
3869  storage_usedTech(nodesModel,years,storage_techs,vintage)
3870      $(vintage.val <= years.val
3871          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
3872                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
3873          ) = yes;
3874   
3875  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
3876  set storage_decomTech(nodesModel,years,storage_techs,vintage);
3877  storage_decomTech(nodesModel,years,storage_techs,vintage)
3878    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
3879                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
3880      and sum(yearsToCalc
3881        $(sameas(years, yearsToCalc)
3882          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
3883          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
3884    = yes;
3885   
3886  storage_decomTech(nodesModel,years,storage_techs,vintage)
3887    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
3888                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
3889      and sum(yearsToCalc
3890        $(sameas(years, yearsToCalc)
3891          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
3892          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
3893    = yes;
3894   
3895  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
3896  storage_decomTech(nodesModel,years,storage_techs,vintage)
3897    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
3898      and sum(yearsToCalc
3899        $(sameas(years, yearsToCalc)
3900          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
3901    = yes;
3902   
3903  * Extend the decom frame to the year after the last year of usedTech
3904  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
3905    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
3906      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
3907    = yes;
3908   
3909  * Mapping for used commodities
3910  set storage_usedCom(storage_techs,vintage,commodity);
3911  option storage_usedCom < storage_sizeParam;
3912   
3913  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
3914  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
3915      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
3916          and storage_usedCom(storage_techs,vintage,commodity))
3917      = yes;
3918   
3919   
3920  * // ## Load units from gdx file
3922   
3923   
3924  * ==== aggregation of profiles ====
3925  * derive upper and lower profiles then aggregate
3926  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
3927  option storage_level_hasProfileIn < storage_levelProfileIn;
3928   
3929  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
3930  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
3931      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3932              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
3933   
3934  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3935  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
3936  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
3937      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
3938  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
3939      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
3940   
3941  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
3942  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
3943                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
3944   
3945  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
3946      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
3947          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
3948      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3949              sum(timeData$timeMapping(timeData,timeModelToCalc),
3950                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
3951                / timeLength(timeModelToCalc)
3952              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
3953      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3954              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
3955   
3956  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
3957      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
3958          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3959                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
3960      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3961                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
3962              sum(timeData$timeMapping(timeData,timeModelToCalc),
3963                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
3964                / timeLength(timeModelToCalc))
3965      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3966                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
3967   
3968  * for fixed profiles overwrite upper and lower profile
3969  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
3970      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
3971      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
3972   
3973  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
3974      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
3975      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
3976   
3977  * storage initial level
3978   
3979  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
3980      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
3981          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
3982      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3983            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
3984              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
3985      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3986              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
3987   
3988  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
3989      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
3990          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3991                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
3992      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3993                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
3994            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
3995      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3996                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
3997   
3998  * ==== parameter modifications ====
3999  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4000          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4001      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4002  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4003          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4004      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4005   
4006   
4007  * ==== definition of variables ====
4008   
4009  * Initialise variables for unitsBuild
4010  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4011      $storage_availTech(nodesModel,years,storage_techs,vintage)
4012      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4013  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4014      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4015      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4016  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4017      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4018      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4019   
4020  * Initialise variables for unitsDecom
4021  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4022      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4023        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4024      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4025                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4026                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4027                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4028          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4029   
4030  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4031    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4032    = sum(years$
4033          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4034            and storage_availTech(nodesModel,years,storage_techs,vintage)
4035            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4036            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4037        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4038      + sum(yearsToCalc_a$
4039          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4040            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4041            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4042            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4043        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4044        ;
4045   
4046  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4047      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4048        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4049      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4050   
4051   
4053   
4054   
4055  * Calculate planned unit expansion
4056  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4057  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4058  loop(years,
4059    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4060      =
4061      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4062          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4063      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4064          $storage_availTech(nodesModel,years,storage_techs,vintage)
4065      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4066          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4067  );
4068   
4069  * Set initial state for planned units
4070  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4071    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4072   
4073  * // ## Load units from gdx file
4075   
4076  * Calculate if planned unit expansion is bounded by upper and lower limits
4077  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4078  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4079    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4080          storage_techParam(storage_techs,vintage,"freeDecom"))
4081    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4082          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4083      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4084    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4085          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4086      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4087    = yes;
4088   
4089  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4090  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4091    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4092      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4093    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4094  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4095    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4096      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4097    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4098  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4099    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4100      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4101    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4102   
4103  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4104      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4105        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4106      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4107   
4108  * Add parameter for fixing capacities during myopic runs
4109  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4110  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4111  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4112   
4113  * ==== declaration of equations ====
4114   
4115  equations
4116    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4117      ) "Ensures the units balance over the planning period."
4118    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4119      ) "Ensures the units balance over the planning period."
4120    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4121      ) "Restricts the free decommissioning of units over the planning period."
4122    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4123      ) "Upper bound for the total number of units."
4124    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4125      ) "Lower bound for the total number of units."
4126    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4127      ) "Fixes the total number of units to the corresponding integer variable."
4128   
4129    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4130      ) "Upper bound for the total number of units."
4131    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4132      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4133    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4134      ) "Lower bound for the total number of units."
4135    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4136      ) "Stored commodities lost due to self discharge."
4137    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4138      ) "Currently available units must have been built at some point in time and have some state of degradation."
4139    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4140      ) "There cannot be more units from a certain year than the amount built in that year."
4141    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4142      ) "There is no recovery."
4143    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4144      ) "Limit charging rate based on unit capacity."
4145    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4146      ) "Limit discharging rate based on unit capacity."
4147    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4148      ) "Positive change in state of charge is influx."
4149    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4150      ) "Negative change in state of charge is outflux."
4151   
4152    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4153      ) "Sum of degradation class storage levels is the global level."
4154    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4155      ) "Upper bound for units of a certain state."
4156    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4157      ) "Positive change in state of charge is influx for each degradation class."
4158    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4159      ) "Determine degradation states of storage units."
4160    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4161      ) "All decomminsioned units must have a degradation state."
4162    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4163      ) "Only allow one range of degradation states per year and age group."
4164    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4165      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4166   
4167    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4168      ) "Every unit has a state of charge."
4169    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4170      ) "Every unit has a state of charge."
4171    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4172      ) "Number of units in particular SoC."
4173    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4174      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4175   
4176    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4177      ) "Limit charging rate based on unit capacity."
4178    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4179      ) "Limit discharging rate based on unit capacity."
4180    ;
4181   
4182  * ==== equation definition ====
4183  * // ## Equations
4184  * // ### Storage Units Balance
4185  * // Ensures that the total units are consistent with the built and decommissioned units.
4186  * // {Eq_storage_unitsBalance}
4187   
4188  * Equation using build only
4189  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4190      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4191            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4192          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4193          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4194      ..
4195      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4196      =e=
4197      sum ((years_a)
4198                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4199                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4200                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4201                          and years_a.val <= yearsSel.val ),
4202              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4203   
4204      + sum ((yearsToCalc)
4205                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4206                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4207                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4208                          and yearsToCalc.val <= yearsSel.val ),
4209              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4210   
4211  * Equation using build and decom
4212  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4213      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4214            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4215          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4216          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4217      ..
4218      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4219      =e=
4220          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4221        sum(years$sameas(years, yearsToCalc),
4222          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4223            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4224      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4225        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4226          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4227      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4228          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4229      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4230          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4231      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4232          ;
4233   
4234  * // ### Storage Units Free Decommission
4235  * // Restricts the free decommissioning of storage units over the planning period.
4236  * // {Eq_storage_unitsFreeDecom}
4237  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4238      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4239          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4240      ..
4241      sum(years$
4242            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4243              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4244          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4245      + sum(yearsToCalc$
4246            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4247              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4248              and yearsToCalc.val <= yearsSel.val),
4249          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4250      =g=
4251      sum(years$
4252            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4253              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4254              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4255          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4256      + sum(yearsToCalc$
4257            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4258              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4259              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4260          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4261   
4262  * // ### Storage Units Lower Limit
4263  * // Lower bound for the total number of storage units.
4264  * // {Eq_storage_unitsLowerLimit}
4265  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4266      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4267      ..
4268      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4269          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4270      =g=
4271      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4272   
4273  * // ### Storage Units Upper Limit
4274  * // Upper bound for the total number of storage units.
4275  * // {Eq_storage_unitsUpperLimit}
4276  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4277      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4278          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4279      ..
4280      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4281          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4282      =l=
4283      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4284   
4285  * // ### Storage Units Total MIP
4286  * // Fixes the total number of storage units to the corresponding integer variable.
4287  * // {Eq_storage_unitsTotalMIP}
4288  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4289      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4290          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4291      ..
4292      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4293      =e=
4294      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4295   
4296  * // ### Storage Level Lower Limit
4297  * // Lower limit on the storage level.
4298  * // {Eq_storage_levelLowerLimit}
4299  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4300      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4301          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4302      ..
4303      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4304      =g=
4305      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4306      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4307      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4308   
4309  * // ### Storage Level Upper Limit
4310  * // Upper limit on the storage level.
4311  * // {Eq_storage_levelUpperLimit}
4312  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4313      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4314          and not storage_hasDegradation(storage_techs,vintage)
4315          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4316      ..
4317      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4318      =l=
4319      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4320      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4321      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4322   
4323  * // ### Storage Level Upper Limit (degradation)
4324  * // Upper limit on the storage level if the storage technology accounts for degradation.
4325  * // {Eq_storage_levelUpperLimit_degradation}
4326  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4327      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4328          and storage_hasDegradation(storage_techs,vintage)
4329          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4330      ..
4331      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4332      =l=
4333      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4334      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4335      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4336              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4337                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4338                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4339   
4340  * // ### Storage Unit States Sum (degradation)
4341  * // The number of units in all degradation state must match the total unit number.
4342  * // {Eq_storage_unitsBalanceStates}
4343  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4344      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4345        and storage_hasDegradation(storage_techs,vintage))
4346      ..
4347      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4348      =e=
4349      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4350            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4351   
4352  * // ### Storage Unit States Upper Limit(degradation)
4353  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4354  * // {Eq_storage_unitsUpperLimitPerState}
4355  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4356      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4357          and storage_hasDegradation(storage_techs,vintage))
4358      ..
4359      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4360            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4361            + sum(years$(years.val <= yearsSel.val),
4362                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4363      =e=
4364      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4365   
4366  * // ### Storage Unit States Progression (degradation)
4367  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4368  * // {Eq_storage_unitsStatesNoRecovery}
4369  alias(degradation_states, dc_states);
4370  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4371      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4372        and yearsToCalc.val > yearsCom.val
4373        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4374      ..
4375      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4376                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4377              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4378              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4379      =l=
4380      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4381                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4382              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4383              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4384   
4385  * // ### Storage Losses
4386  * // Accumulation of storage losses.
4387  * // {Eq_storage_losses}
4388  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4389      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4390      ..
4391      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4392      =e=
4393      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4394          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4395        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4396            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4397        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4398            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4399            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4400            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4401                and ord(timeModelToCalc)=1))
4402      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4403      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4404      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4405          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4406        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4407          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4408      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4409        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4410          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4411      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4412        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4413                          and storage_validSoCRange(storage_techs,vintage)),
4414              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4415              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4416              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4417   
4418  * // ### C-Rate Limit
4419  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4420  * // {Eq_storage_cRateLimit}
4421  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4422      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4423        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4424      ..
4425      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4426      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4427          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4428      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4429          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4430      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4431          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4432          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4433          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4434              and ord(timeModelToCalc)=1)
4435      =l=
4436      storage_techParam(storage_techs,vintage,"maxCRate")
4437      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4438      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4439   
4440  * // ### E-Rate Limit
4441  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4442  * // {Eq_storage_eRateLimit}
4443  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4444      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4445        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4446      ..
4447      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4448      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4449          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4450      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4451          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4452      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4453          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4454          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4455          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4456              and ord(timeModelToCalc)=1)
4457      =g=
4458      - storage_techParam(storage_techs,vintage,"maxERate")
4459      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4460      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4461   
4462  * // ### Storage Charging
4463  * // Increases in storage levels are accounted as charging amounts.
4464  * // {Eq_storage_charge}
4465  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4466      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4467        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4468      ..
4469      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4470      =g=
4471      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4472      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4473          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4474      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4475          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4476      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4477          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4478          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4479          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4480              and ord(timeModelToCalc)=1);
4481   
4482  * // ### Storage Discharging
4483  * // Decreases in storage levels are accounted as discharging amounts.
4484  * // {Eq_storage_discharge}
4485  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4486      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4487        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4488      ..
4489      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4490      =g=
4491      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4492          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4493      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4494          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4495      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4496          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4497          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4498          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4499              and ord(timeModelToCalc)=1)
4500      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4501   
4502  * // ### Storage Level Sum (degradation)
4503  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4504  * // {Eq_storage_levelStateSum}
4505  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4506      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4507        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4508      ..
4509      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4510      =e=
4511      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4512   
4513  * // ### Storage Level Upper Limit per Age Group (degradation)
4514  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4515  * // {Eq_storage_levelUpperLimitPerAge}
4516  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4517      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4518        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4519      ..
4520      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4521      =l=
4522      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4523      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4524      * sum(degradation_states,
4525              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4526                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4527                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4528   
4529  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4530  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4531  * // {Eq_storage_chargeBasedDegradationDistribution}
4532  alias(years, prev_years);
4533  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4534      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4535        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4536      ..
4537      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
4538          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
4539      =l=
4540      storage_sizeParam(storage_techs,vintage,commodity,"size")
4541      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
4542          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
4543          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
4544             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
4545   
4546  * // ### Storage Charging per Commissioning Year (degradation)
4547  * // Increases in storage levels are accounted as charging amounts.
4548  * // {Eq_storage_chargingPerAge}
4549  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4550      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4551        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4552      ..
4553      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4554      =g=
4555      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4556      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
4557   
4558  * // ### Storage Unit Decommissioning States Sum (degradation)
4559  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
4560  * // {Eq_storage_unitsDecomStateSum}
4561  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
4562      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
4563      ..
4564      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4565      =e=
4566      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4567          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4568   
4569  * // ### Storage Unit Sequential Degradation (degradation)
4570  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
4571  * // {Eq_storage_unitsDegradation}
4572  alias(degradation_states, degradation_states_a, degradation_states_b);
4573  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4574      $(storage_techParam(storage_techs,vintage,"usageDegradation")
4575        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4576      ..
4577      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4578                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
4579                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4580                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
4581                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
4582                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
4583          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
4584      * storage_bigM(storage_techs,vintage)
4585      =g=
4586      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
4587   
4588  * // ### Storage Unit Sequential Degradation Range (degradation)
4589  * // Only one degradation range can be active.
4590  * // {Eq_storage_unitsDegradation_onlyOneRange}
4591  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4592      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4593      ..
4594      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4595            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
4596      =e= 1;
4597   
4598  * // ### Storage Unit Sequential State of Charge (SoC)
4599  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
4600  * // {Eq_storage_unitsSoC}
4601  alias(soc_states, soc_states_a, soc_states_b);
4602  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4603      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4604      ..
4605      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4606                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
4607                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4608                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
4609                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
4610                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
4611          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
4612      * storage_bigM(storage_techs,vintage)
4613      =g=
4614      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
4615   
4616  * // ### Storage Unit Sequential State of Charge Range (SoC)
4617  * // Only one state of charge range can be active.
4618  * // {Eq_storage_unitsSoC_onlyOneRange}
4619  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4620      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4621      ..
4622      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4623            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
4624   
4625  * // ### Storage Unit State of Charge Sum (SoC)
4626  * // Each storage unit must have one state of charge.
4627  * // {Eq_storage_unitsSoC_sum}
4628  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4629      $storage_validSoCRange(storage_techs,vintage)
4630      ..
4631      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4632      =e=
4633      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4634            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4635   
4636  * // ### Storage Level State of Charge Sum (SoC)
4637  * // The total storage level must be represented by units in their specific states of charge.
4638  * // {Eq_storage_levelSoC}
4639  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4640      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
4641      ..
4642      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4643      =e=
4644      storage_sizeParam(storage_techs,vintage,commodity,"size")
4645      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4646              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4647              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
4648   
4649  * // ### C-Rate Limit (SoC)
4650  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4651  * // {Eq_storage_cRateLimit_SoC}
4652  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4653      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4654        and storage_validSoCRange(storage_techs,vintage)
4655        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
4656      ..
4657      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4658      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4659          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4660      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4661          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4662      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4663          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4664          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4665          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4666              and ord(timeModelToCalc)=1)
4667      =l=
4668      storage_sizeParam(storage_techs,vintage,commodity,"size")
4669      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4670                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
4671                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4672   
4673  * // ### E-Rate Limit (SoC)
4674  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4675  * // {Eq_storage_cRateLimit_SoC}
4676  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4677      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4678        and storage_validSoCRange(storage_techs,vintage)
4679        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
4680      ..
4681      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4682      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4683          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4684      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4685          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4686      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4687          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4688          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4689          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4690              and ord(timeModelToCalc)=1)
4691      =g=
4692      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4693      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4694                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
4695                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4696   
4697   
4698  * ==== model definition ====
4699   
4700  Model M_storage
4701  /
4702    Eq_storage_unitsBalance
4703    Eq_storage_unitsBalanceFreeDecom
4704    Eq_storage_unitsFreeDecom
4705    Eq_storage_unitsLowerLimit
4706    Eq_storage_unitsUpperLimit
4707    Eq_storage_levelUpperLimit_degradation
4708    Eq_storage_unitsTotalMIP
4709    Eq_storage_levelLowerLimit
4710    Eq_storage_levelUpperLimit
4713    Eq_storage_losses
4716    Eq_storage_unitsBalanceStates
4717    Eq_storage_unitsUpperLimitPerState
4718    Eq_storage_unitsStatesNoRecovery
4719    Eq_storage_cRateLimit
4720    Eq_storage_eRateLimit
4721    Eq_storage_charge
4722    Eq_storage_discharge
4723    Eq_storage_levelStateSum
4724    Eq_storage_levelUpperLimitPerAge
4725    Eq_storage_chargeBasedDegradationDistribution
4726    Eq_storage_chargingPerAge
4727    Eq_storage_unitsDecomStateSum
4728    Eq_storage_unitsDegradation
4729    Eq_storage_unitsDegradation_onlyOneRange
4730   
4731    Eq_storage_unitsSoC
4732    Eq_storage_unitsSoC_sum
4733    Eq_storage_unitsSoC_onlyOneRange
4734    Eq_storage_levelSoC
4735    Eq_storage_cRateLimit_SoC
4736    Eq_storage_eRateLimit_SoC
4737  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
4739  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4740  * SPDX-License-Identifier: BSD-3-Clause
4741   
4742  * // # core_transfer
4743  * // The equations in this file describe the commodity transfer in the model.
4744   
4745  * // ## Variables
4746  * // {special_table_transfer_variables}
4749   
4754   
4950   
4951  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
4952  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
4953      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
4954   
4955   
4956  * ==== calculation of mappings ====
4957   
4958  * Technologies with a lifeTime > 0 are available
4959  set transfer_availTech(linksModel,years,transfer_techs,vintage);
4960  transfer_availTech(linksModel,years,transfer_techs,vintage)
4961      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4962          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4963   
4964  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
4965  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
4966      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
4967   
4968  * Technologies already built become unavailable if they have a linksBuild of 0
4969  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
4970      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
4971   
4972  * Used technologies are available technologies over their technical lifeTime
4973  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
4974  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
4975      $(vintage.val <= years.val
4976          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
4977                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
4978          ) = yes;
4979   
4980  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4981  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
4982  transfer_decomTech(linksModel,years,transfer_techs,vintage)
4983    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
4984                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
4985      and sum(yearsToCalc
4986        $(sameas(years, yearsToCalc)
4987          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
4988          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
4989    = yes;
4990   
4991  transfer_decomTech(linksModel,years,transfer_techs,vintage)
4992    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
4993                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
4994      and sum(yearsToCalc
4995        $(sameas(years, yearsToCalc)
4996          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
4997          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
4998    = yes;
4999   
5000  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5001  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5002    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5003      and sum(yearsToCalc
5004        $(sameas(years, yearsToCalc)
5005          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5006    = yes;
5007   
5008  * Extend the decom frame to the year after the last year of usedTech
5009  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5010    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5011      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5012    = yes;
5013   
5014   
5015  * // ## Load links from gdx file
5017   
5018   
5019  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5020  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5021   
5022  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5023  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5024      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5025      = 1;
5026   
5027  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5028      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5029      = 1;
5030   
5031  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5032      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5033      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5034   
5035  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5036      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5037      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5038   
5039  * aggregate time dimension
5040  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5041  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5042      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5043      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5044            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5045            / timeLength(timeModelToCalc));
5046  option clear = transfer_flowProfileIn;
5047   
5048  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5049      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5050        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5051      = 1;
5052   
5053  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5054      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5055        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5056      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5057   
5058  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5059      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5060        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5061      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5062   
5063  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5064  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5065      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5066          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5067   
5068  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5069  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5070      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5072   
5073  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5074  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5075      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5076          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5077   
5078  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5079  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5080      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5081   
5082  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5083  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5084      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5085          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5086          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5087      = (1 / sum(linksData
5088                  $links_aggregate(linksModelToCalc,linksData),
5089              1 / ( sum(link_types,
5090                          transfer_lengthParamIn(linksData,link_types,"length")
5091                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5092                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5093   
5094  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5095  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5096      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5097              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5098   
5099  * aggregate coefficient delays per link and reduce based on time resolution
5100  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5102  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5103    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5104      or sum(link_types,
5105          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5106    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5107            + sum(link_types,
5108                transfer_lengthParam(linksModel,link_types,"length")
5109                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5110            / 1);
5112   
5113  * ==== parameter modifications ====
5114  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5115      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5116      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5117  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5118      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5119      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5120   
5121   
5122  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5123   
5124  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5125      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5126      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5127                       and transfer_incidenceData_flip(linksData) = 1),
5128              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5129              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5130          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5131                          and transfer_incidenceData_flip(linksData) = -1),
5132              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5133              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5134      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5135              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5136   
5137  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5138      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5139      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5140                       and transfer_incidenceData_flip(linksData) = 1),
5141              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5142              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5143          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5144                          and transfer_incidenceData_flip(linksData) = -1),
5145              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5146              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5147      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5148              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5149   
5150  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5151      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5152      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5153                       and transfer_incidenceData_flip(linksData) = 1
5154                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5155              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5156          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5157                          and transfer_incidenceData_flip(linksData) = -1
5158                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5159              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5160      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5161                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5162              1);
5163   
5164  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5165      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5166      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5167                       and transfer_incidenceData_flip(linksData) = 1
5168                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5169              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5170          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5171                          and transfer_incidenceData_flip(linksData) = -1
5172                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5173              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5174      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5175                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5176              1);
5177  option clear = transfer_flowProfileIn_aggTime;
5178   
5179  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5180   
5181  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5182      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5183      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5184                       and transfer_incidenceData_flip(linksData) = 1),
5185              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5186              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5187          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5188                          and transfer_incidenceData_flip(linksData) = -1),
5189              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5190              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5191      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5192              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5193   
5194  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5195      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5196      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5197                       and transfer_incidenceData_flip(linksData) = -1),
5198              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5199              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5200          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5201                          and transfer_incidenceData_flip(linksData) = 1),
5202              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5203              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5204      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5205              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5206   
5207  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5208      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5209      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5210                       and transfer_incidenceData_flip(linksData) = 1
5211                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5212              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5213          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5214                          and transfer_incidenceData_flip(linksData) = -1
5215                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5216              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5217      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5218                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5219              1);
5220   
5221  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5222      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5223      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5224                       and transfer_incidenceData_flip(linksData) = -1
5225                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5226              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5227          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5228                          and transfer_incidenceData_flip(linksData) = 1
5229                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5230              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5231      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5232                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5233              1);
5234   
5235  * Mapping for grid segments using DC optimal power flow
5236  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5237  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5238      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5241      = yes;
5244   
5245  * Ensure each grid segment uses exactly one commodity
5246  parameter checkGridSegmentCommodities(gridSegments);
5247  checkGridSegmentCommodities(gridSegments)
5248      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5249                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5250                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5251   
5252  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5253  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5254      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5255                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5256                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5257      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5258   
5259   
5263   
5264  scalar transfer_enableMIP;
5265  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5266   
5267   
5268  * ==== definition of variables ====
5269   
5270  * Initialise variables for linksBuild
5271  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5272      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5273      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5274  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5275      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5276      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5277  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5278      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5279      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5280   
5281  * Initialise variables for linksDecom
5282  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5283      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5284        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5285      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5286                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5287                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5288                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5289          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5290   
5291  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5292    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5293    = sum(years$
5294          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5295            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5296            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5297            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5298        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5299      + sum(yearsToCalc_a$
5300          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5301            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5302            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5303            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5304        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5305   
5306  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5307      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5308          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5309      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5310   
5311   
5313   
5314   
5315  * Calculate planned transfer links expansion
5316  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5317  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5318  loop(years,
5319    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5320      =
5321      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5322          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5323      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5324          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5325      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5326          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5327  );
5328   
5329  * Set initial state for planned units
5330  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5331    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5332   
5333  * // ## Load units from gdx file
5335   
5336  * Calculate if planned links expansion is bound by upper and lower limits
5337  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5338  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5339    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5340          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5341    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5342          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5343      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5344    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5345          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5346      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5347    = yes;
5348   
5349  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5350  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5351    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5352      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5353    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5354  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5355    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5356      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5357    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5358  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5359    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5360      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5361    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5362   
5363  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5364      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5365        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5366      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5367   
5368  * Add parameter for fixing capacities during myopic runs
5369  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5370  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5371  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5372   
5373  * ==== declaration of equations ====
5374   
5375  equations
5376    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5377      ) "Ensures the links balance over the planning period."
5378    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5379      ) "Ensures the links balance over the planning period."
5380    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5381      ) "Restricts the free decommissioning of links over the planning period."
5382    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5383      ) "Upper bound for the total number of links."
5384    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5385      ) "Lower bound for the total number of links."
5386    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5387      ) "Fixes the total number of links to the corresponding integer variable."
5388   
5389    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5390      ) "Upper bound for the flow along the transfer links."
5391    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5392      ) "Upper bound for the flow against the transfer links."
5393    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5394      )
5395    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5396      )
5397    ;
5398   
5399   
5400  * ==== equation definition ====
5401  * // ## Equations
5402  * // ### Transfer Links Balance
5403  * // Ensures that the transfer between nodes is balanced.
5404  * // {Eq_transfer_linksBalance}
5405   
5406  * Equation using build only
5407  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5408      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5409            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5410          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5411          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5412      ..
5413      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5414      =e=
5415      sum ((years_a)
5416              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5417                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5418                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5419                  and years_a.val <= yearsSel.val ),
5420            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5421   
5422      + sum ((yearsToCalc)
5423              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5424                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5425                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5426                  and yearsToCalc.val <= yearsSel.val ),
5427            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5428   
5429  * Equation using build and decom
5430  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5431      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5432            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5433          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5434          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5435      ..
5436      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5437      =e=
5438      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5439        sum(years$sameas(years, yearsToCalc),
5440          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5441            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5442      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5443        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5444          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5445      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5446          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5447      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5448          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5449      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5450          ;
5451   
5452  * // ### Transfer Links Free Decommissioning
5453  * // Balances free link decommissioning.
5454  * // {Eq_transfer_linksFreeDecom}
5455  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5456      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5457          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5458          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5459      ..
5460      sum(years$
5461            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5462              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5463              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5464          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5465      + sum(yearsToCalc$
5466            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5467              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5468              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5469              and yearsToCalc.val <= yearsSel.val),
5470          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5471      =g=
5472      sum(years$
5473            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5474              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5475              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5476          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5477      + sum(yearsToCalc$
5478            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5479              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5480              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5481          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5482   
5483  * // ### Transfer Links Lower Limit
5484  * // Ensures link capacity lower limits.
5485  * // {Eq_transfer_linksLowerLimit}
5486  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5487      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5488      ..
5489      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5490          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5491      =g=
5492      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5493   
5494  * // ### Transfer Links Upper Limit
5495  * // Ensures link capacity upper limits.
5496  * // {Eq_transfer_linksUpperLimit}
5497  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5498      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5499          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5500      ..
5501      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5502          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5503      =l=
5504      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5505   
5506  * // ### Transfer Links Total MIP
5507  * // Ensures number of MIP links.
5508  * // {Eq_transfer_linksTotalMIP}
5509  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5510      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5511          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5512      ..
5513      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5514      =e=
5515      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5516   
5517  * // ### Transfer Links Flow Along Upper Limit
5518  * // Ensures links flow along upper limit.
5519  * // {Eq_transfer_flowAlongUpperLimit}
5520  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5521      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5522      ..
5523      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5524      =l=
5525      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5526      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5527      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5528      ;
5529   
5530  * // ### Transfer Links Flow Against Upper Limit
5531  * // Ensures links flow against upper limit.
5532  * // {Eq_transfer_flowAgainstUpperLimit}
5533  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5534      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5535      ..
5536      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5537      =l=
5538      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
5539      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5540      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5541      ;
5542   
5543  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
5544  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
5545      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5546          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
5547      = yes;
5548   
5549  set transfer_usedOpfLinks(linksModel,years,gridSegments);
5550  option transfer_usedOpfLinks < transfer_usedOpf;
5551   
5552  set transfer_usedOpfSegments(years,gridSegments);
5553  option transfer_usedOpfSegments < transfer_usedOpf;
5554   
5558  * // ### Transfer DC optimal flow angle flows
5559  * // Angle flows.
5560  * // {Eq_transfer_dcopf_cycleFlows}
5561  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
5562      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
5563      ..
5564      sum ((transfer_techs,vintage)
5565              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
5566          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5567              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
5568          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
5569      =e=
5570      sum ( nodesModelSel,
5571          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
5572          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
5576   
5577   
5578  * ==== model definition ====
5579   
5580  Model M_transfer
5581  /
5582    Eq_transfer_linksBalance
5583    Eq_transfer_linksBalanceFreeDecom
5584    Eq_transfer_linksFreeDecom
5585    Eq_transfer_linksLowerLimit
5586    Eq_transfer_linksUpperLimit
5587    Eq_transfer_linksTotalMIP
5588    Eq_transfer_flowAlongUpperLimit
5589    Eq_transfer_flowAgainstUpperLimit
5593    Eq_transfer_dcopf_angleFlows
5597  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
5599  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5600  * SPDX-License-Identifier: BSD-3-Clause
5601   
5602  * // # core_sourcesink
5603  * // The equations in this file describe the sources and sinks in the model.
5604   
5605  * // ## Variables
5606  * // {special_table_sourcesink_variables}
5740   
5741  * // ## Aggregation of profiles
5742  * // Profiles are rescaled based on the annual sum.
5743   
5744  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5745  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
5746      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
5747  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
5748      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
5749  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
5750      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
5751   
5752  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5753  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5754      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5755      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
5756   
5757  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5758  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5759      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5760      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
5761   
5762  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5763  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5764      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5765          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
5766          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
5767      = yes;
5768   
5769  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
5770              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
5771   
5772  * calculate scaling factor for each type
5773  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5774  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5775      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5776          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
5777      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
5778          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
5779              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
5780   
5781  * rescale profiles
5782  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5783      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5784      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5785          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5786   
5787  * // ## Aggregation of profiles
5788  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
5789   
5790  * ==== aggregation of profiles ====
5791  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5792  option sourcesink_usesProfileIn < sourcesink_profileIn
5793   
5794  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5795  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5796      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
5797          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
5798      = yes;
5799   
5800  * aagregate time dimension
5801  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
5802  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5803    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5804    = sum(timeMapping_t(timeModelToCalc,timeData),
5805            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
5806      / timeLength(timeModelToCalc);
5807  option clear = sourcesink_profileIn;
5808   
5809  * sum up absolute profiles
5810  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5811  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5812      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5813      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
5814              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
5815  option clear = sourcesink_profileIn_aggTime;
5816   
5817  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
5818  option sourcesink_enabled < sourcesink_config;
5819   
5823   
5824  * ==== declaration of variables ====
5825  * // ## Bounding of variables
5826  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
5827  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5828      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5829          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
5830          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
5831      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
5832   
5833  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5834      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5835          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
5836          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
5837      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
5838   
5839  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5840      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5841          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
5842      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
5843   
5844  option clear = sourcesink_profile;
5845   
5846   
5847  * ==== equation definition ====
5848  * // ## Equations
5849  equations
5850  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
5851      ) "Fixes the annual sum from sources / to sinks"
5852  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
5853      ) "Limits the lower sum from sources / to sinks"
5854  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
5855      ) "Limits the upper sum from sources / to sinks"
5856    ;
5857   
5858  * // ### Fixed annual sums for sources and sinks
5859  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
5860  * // {Eq_sourcesink_useFixedSum}
5861  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5862      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5863          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
5864      ..
5865      sum(timeModelSel,
5866          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5867          * timeLength(timeModelSel))
5868      =e=
5869      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
5870      * timefrac
5871      ;
5872   
5873  * // ### Lower annual sums for sources and sinks
5874  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
5875  * // {Eq_sourcesink_useLowerSum}
5876  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5877      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5878          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
5879          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
5880      ..
5881      sum(timeModelSel,
5882          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5883          * timeLength(timeModelSel))
5884      =g=
5885      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
5886      * timefrac
5887      ;
5888   
5889  * // ### Upper annual sums for sources and sinks
5890  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
5891  * // {Eq_sourcesink_useUpperSum}
5892  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5893      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5894          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
5895          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
5896      ..
5897      sum(timeModelSel,
5898          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5899          * timeLength(timeModelSel))
5900      =l=
5901      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
5902      * timefrac
5903      ;
5904   
5905   
5906  * ==== model definition ====
5907   
5908  Model M_sourcesink
5909  /
5910    Eq_sourcesink_useFixedSum
5911    Eq_sourcesink_useLowerSum
5912    Eq_sourcesink_useUpperSum
5913  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
5915  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5916  * SPDX-License-Identifier: BSD-3-Clause
5917   
5918  * // # balance
5919  * // The equations in this file describe the commodity balancing in the model.
5920   
5921  Equations
5922    Eq_balance_commodities(timeModel,nodesModel,years,commodity
5923      ) "Balance for each commodity used in each time step, region, and year";
5924   
5925   
5926  * ==== calculation of mappings ====
5927   
5928  set balance_techComm(techs,commodity);
5929  balance_techComm(converter_techs(techs),commodity)
5930      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
5931  balance_techComm(storage_techs(techs),commodity)
5932      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
5933  balance_techComm(transfer_techs(techs),commodity)
5934      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
5935  balance_techComm(sourcesink_techs(techs),commodity)
5936      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
5937   
5938  set balance_usedConverter(nodesModel,years,commodity);
5939  set balance_usedStorage(nodesModel,years,commodity);
5940  set balance_usedTransfer(nodesModel,years,commodity);
5941  set balance_usedSourceSink(nodesModel,years,commodity);
5942  set balance_usedBalance(nodesModel,years,commodity);
5943   
5944  balance_usedConverter(nodesModel,years,commodity)
5945      = sum ((converter_techs,vintage,activity)
5946              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
5947                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
5948   
5949  balance_usedStorage(nodesModel,years,commodity)
5950      = sum ((storage_techs,vintage,activity)
5951              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
5952                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
5953   
5954  balance_usedTransfer(nodesModel,years,commodity)
5955      = sum ((linksModel,transfer_techs,vintage)
5956              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
5957                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
5958   
5959  option balance_usedSourceSink < sourcesink_enabled;
5960   
5961  balance_usedBalance(nodesModel,years,commodity)
5962      $(balance_usedConverter(nodesModel,years,commodity)
5963          or balance_usedStorage(nodesModel,years,commodity)
5964          or balance_usedTransfer(nodesModel,years,commodity)
5965          or balance_usedSourceSink(nodesModel,years,commodity) )
5966      = yes;
5967   
5968   
5969  * ==== equation definition ====
5970   
5971  * // ### Balance commodities
5972  * // Balancing of commodities for all model regions, time steps, and years
5973  * // {Eq_balance_commodities}
5974  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
5975      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
5976      ..
5977  * converter
5978      sum((converter_techs,vintage,activity)
5979              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
5980                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
5981          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
5982              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
5983              * timeLength(timeModelToCalc)
5984          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
5985              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
5986              * timeLength(timeModelToCalc))
5987   
5988  * storages
5989      + sum((storage_techs,vintage)
5990              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
5991                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
5992          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5993              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5994          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5995              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5996          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5997              * storage_sizeParam(storage_techs,vintage,commodity,"size")
5998              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5999              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
6000                  and ord(timeModelToCalc)=1)
6001          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6004          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6005          * timeLength(timeModelSel)
6008          )
6009   
6010  * incoming transfer
6011      + sum((linksModel,transfer_techs,vintage)
6012              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6013                  and linksModelToCalc(linksModel)),
6014          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6015                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6016            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6017                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6018          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6019          * timeLength(timeModelToCalc))
6020   
6021  * outgoing transfer
6022      - sum((linksModel,transfer_techs,vintage)
6023              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6024                  and linksModelToCalc(linksModel)),
6025          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6026                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6027            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6028                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6029          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6030          * timeLength(timeModelSel))
6031   
6032  * transfer losses
6033      + 0.5 * sum((linksModel,transfer_techs,vintage)
6034              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6035                  AND linksModelToCalc(linksModel)),
6036          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6037                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6038            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6039                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6040          * timeLength(timeModelSel)
6041          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6042              + sum(link_types,
6043                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6044                  * transfer_lengthParam(linksModel,link_types,"length"))))
6045   
6046  * sourcesink
6047      + sum((sourcesink_techs)
6048              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6049          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6050          * timeLength(timeModelSel))
6051      =e=
6052      0;
6053   
6054   
6055  * ==== model definition ====
6056   
6057  Model M_balance
6058  /
6059    Eq_balance_commodities
6060  /;
6061   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
6063  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6064  * SPDX-License-Identifier: BSD-3-Clause
6065   
6066  * // # accounting_equations
6067   
6068  * ==== declaration of variables ====
6069   
6070  variables
6071  accounting_indicator(accNodesModel,accYears,indicator)
6072  accounting_indicator_links(linksModel,years,indicator)
6073  accounting_objective
6074  ;
6075   
6076   
6077  * ==== definition of variables ====
6078   
6079  accounting_indicator.lo(accNodesModel,accYears,indicator)
6080      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6081          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6082      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6083   
6084  accounting_indicator.up(accNodesModel,accYears,indicator)
6085      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6086          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6087      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6088   
6089  accounting_indicator.fx(accNodesModel,accYears,indicator)
6090      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
6091          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6092      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6093   
6094   
6095  * set the variable levels to be fixed for years before the optimization years
6096  accounting_indicator.l(accNodesModel,accYears,indicator)
6097      $activeIndicators(accNodesModel,accYears,indicator)
6098      = 0;
6099   
6100   
6101  * ==== declaration of equations ====
6102   
6103  equations
6104  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
6105      ) "Ensures the fixed value of an indicator per accounting region"
6106  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
6107      ) "Ensures the upper limit of an indicator per accounting region"
6108  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
6109      ) "Ensures the lower limit of an indicator per accounting region"
6110  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
6111      ) "Ensures the fixed value of an indicator per model link"
6112  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
6113      ) "Ensures the upper limit of an indicator per model link"
6114  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
6115      ) "Ensures the lower limit of an indicator per model link"
6116  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6117    ;
6118   
6119   
6120  * ==== equations definition ====
6121  * // ## Equations
6122  * // ### Accounting Indicator Calculation
6123  * // Calculates the fixed limit for accounting indicators.
6124  * // {Eq_accounting_indicatorCalc_fixed}
6125  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
6126      $(activeIndicators(accNodesModel,accYears,indicator)
6127          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6128      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6130  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6131  * SPDX-License-Identifier: BSD-3-Clause
6132   
6133  * == variable indicators ==
6134      sum((accNodesModel_a,accYears_a,indicator_a)
6135          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6136              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6137          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6138          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6139          )
6140   
6141  * == converters ==
6142      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6143              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6144                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6145          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6146          *
6147          ( sum ((converter_techs,vintage)
6148                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6149                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6150              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6151              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6152              )
6153   
6154          + sum ((years_a,converter_techs,vintage)
6155                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6156                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6157                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6158                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6159                          and years_a.val <= yearsSel.val ),
6160              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6161              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6162              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6163              )
6164   
6165          + sum ((yearsToCalc,converter_techs,vintage)
6166                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6167                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6168                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6169                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6170                          and yearsToCalc.val <= yearsSel.val ),
6171              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6172              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6173              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6174              )
6175   
6176          + sum ((converter_techs,vintage)
6177                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6178                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6179              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6180              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6181   
6182          + sum ((converter_techs,vintage)
6183                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6184              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6185              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6186   
6187          + sum ((timeModelSel,converter_techs,vintage,activity)
6188                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6189              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6190              * timeLength(timeModelSel)
6191              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6192          / timefrac
6193   
6194          + sum ((timeModelSel,converter_techs,vintage)
6195                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6196              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6197              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6198          / timefrac
6199   
6200          + sum ((timeModelSel,converter_techs,vintage)
6201                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6202              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6203              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6204                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6205   
6206              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6207              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6208                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6209          / timefrac
6210          )
6211      )
6212   
6213  * == storage ==
6214      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6215              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6216                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6217          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6218          *
6219          ( sum ((storage_techs,vintage)
6220                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6221                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6222              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6223              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6224              )
6225   
6226          + sum ((years_a,storage_techs,vintage)
6227                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6228                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6229                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6230                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6231                          and years_a.val <= yearsSel.val ),
6232              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6233              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6234              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6235              )
6236   
6237          + sum ((yearsToCalc,storage_techs,vintage)
6238                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6239                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6240                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6241                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6242                          and yearsToCalc.val <= yearsSel.val ),
6243              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6244              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6245              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6246              )
6247   
6248          + sum ((storage_techs,vintage)
6249                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6250                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6251              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6252              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6253   
6254          + sum ((storage_techs,vintage)
6255                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6256              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6257              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6258          )
6259      )
6260   
6261   
6262  * == transfer ==
6263      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6264              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6265                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6266          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6267          *
6268          ( sum ((linksModelToCalc,transfer_techs,vintage)
6269                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6270                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6271                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6272              0.5
6273              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6274              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6275   
6276          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6277                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6278                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6279                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6280                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6281                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6282                          and years_a.val <= yearsSel.val ),
6283              0.5
6284              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6285              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6286              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6287   
6288          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6289                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6290                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6291                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6292                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6293                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6294                          and yearsToCalc.val <= yearsSel.val ),
6295              0.5
6296              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6297              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6298              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6299   
6300          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6301                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6302                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6303                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6304              0.5
6305              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6306              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6307              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6308   
6309          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6310                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6311                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6312                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6313                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6314                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6315                          and years_a.val <= yearsSel.val ),
6316              0.5
6317              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6318              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6319              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6320              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6321   
6322          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6323                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6324                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6325                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6326                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6327                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6328                          and yearsToCalc.val <= yearsSel.val ),
6329              0.5
6330              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6331              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6332              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6333              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6334   
6335          + sum ((linksModelToCalc,transfer_techs,vintage)
6336                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6337                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6338                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6339              0.5
6340              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6341              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6342   
6343              + 0.5
6344              * sum (link_types,
6345                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6346                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6347                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6348              ) )
6349   
6350          + sum ((linksModelToCalc,transfer_techs,vintage)
6351                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6352                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6353              0.5
6354              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6355              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6356   
6357              + 0.5
6358              * sum (link_types,
6359                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6360                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6361                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6362   
6363              + 0.5
6364              * sum (timeModelSel,
6365                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6366                  * timeLength(timeModelSel)
6367                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6368                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6369   
6370                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6371                  * timeLength(timeModelSel)
6372                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6373                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6374                  / timefrac
6375   
6376              + 0.5
6377              * sum ((timeModelSel, link_types),
6378                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6379                  * timeLength(timeModelSel)
6380                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6381                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6382                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6383   
6384                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6385                  * timeLength(timeModelSel)
6386                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6387                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6388                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6389                  / timefrac
6390              )
6391          )
6392      )
6393   
6394   
6395  * == sources / sinks ==
6396      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6397              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6398                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6399          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6400          *
6401          sum ((timeModelSel,sourcesink_techs,commodity)
6402                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6403              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6404              * timeLength(timeModelSel)
6405              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6406          / timefrac
6407      )
6408      =e=
6409      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6410   
6411  * // ### Accounting Indicator Calculation
6412  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6413  * // {Eq_accounting_indicatorCalc_upper}
6414  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
6415      $(activeIndicators(accNodesModel,accYears,indicator)
6416          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6417          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6418      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6420  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6421  * SPDX-License-Identifier: BSD-3-Clause
6422   
6423  * == variable indicators ==
6424      sum((accNodesModel_a,accYears_a,indicator_a)
6425          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6426              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6427          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6428          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6429          )
6430   
6431  * == converters ==
6432      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6433              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6434                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6435          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6436          *
6437          ( sum ((converter_techs,vintage)
6438                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6439                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6440              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6441              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6442              )
6443   
6444          + sum ((years_a,converter_techs,vintage)
6445                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6446                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6447                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6448                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6449                          and years_a.val <= yearsSel.val ),
6450              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6451              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6452              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6453              )
6454   
6455          + sum ((yearsToCalc,converter_techs,vintage)
6456                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6457                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6458                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6459                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6460                          and yearsToCalc.val <= yearsSel.val ),
6461              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6462              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6463              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6464              )
6465   
6466          + sum ((converter_techs,vintage)
6467                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6468                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6469              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6470              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6471   
6472          + sum ((converter_techs,vintage)
6473                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6474              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6475              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6476   
6477          + sum ((timeModelSel,converter_techs,vintage,activity)
6478                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6479              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6480              * timeLength(timeModelSel)
6481              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6482          / timefrac
6483   
6484          + sum ((timeModelSel,converter_techs,vintage)
6485                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6486              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6487              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6488          / timefrac
6489   
6490          + sum ((timeModelSel,converter_techs,vintage)
6491                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6492              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6493              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6494                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6495   
6496              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6497              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6498                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6499          / timefrac
6500          )
6501      )
6502   
6503  * == storage ==
6504      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6505              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6506                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6507          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6508          *
6509          ( sum ((storage_techs,vintage)
6510                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6511                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6512              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6513              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6514              )
6515   
6516          + sum ((years_a,storage_techs,vintage)
6517                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6518                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6519                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6520                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6521                          and years_a.val <= yearsSel.val ),
6522              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6523              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6524              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6525              )
6526   
6527          + sum ((yearsToCalc,storage_techs,vintage)
6528                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6529                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6530                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6531                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6532                          and yearsToCalc.val <= yearsSel.val ),
6533              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6534              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6535              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6536              )
6537   
6538          + sum ((storage_techs,vintage)
6539                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6540                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6541              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6542              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6543   
6544          + sum ((storage_techs,vintage)
6545                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6546              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6547              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6548          )
6549      )
6550   
6551   
6552  * == transfer ==
6553      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6554              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6555                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6556          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6557          *
6558          ( sum ((linksModelToCalc,transfer_techs,vintage)
6559                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6560                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6561                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6562              0.5
6563              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6564              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6565   
6566          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6567                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6568                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6569                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6570                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6571                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6572                          and years_a.val <= yearsSel.val ),
6573              0.5
6574              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6575              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6576              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6577   
6578          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6579                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6580                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6581                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6582                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6583                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6584                          and yearsToCalc.val <= yearsSel.val ),
6585              0.5
6586              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6587              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6588              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6589   
6590          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6591                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6592                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6593                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6594              0.5
6595              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6596              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6597              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6598   
6599          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6600                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6601                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6602                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6603                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6604                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6605                          and years_a.val <= yearsSel.val ),
6606              0.5
6607              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6608              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6609              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6610              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6611   
6612          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6613                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6614                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6615                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6616                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6617                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6618                          and yearsToCalc.val <= yearsSel.val ),
6619              0.5
6620              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6621              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6622              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6623              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6624   
6625          + sum ((linksModelToCalc,transfer_techs,vintage)
6626                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6627                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6628                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6629              0.5
6630              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6631              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6632   
6633              + 0.5
6634              * sum (link_types,
6635                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6636                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6637                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6638              ) )
6639   
6640          + sum ((linksModelToCalc,transfer_techs,vintage)
6641                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6642                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6643              0.5
6644              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6645              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6646   
6647              + 0.5
6648              * sum (link_types,
6649                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6650                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6651                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6652   
6653              + 0.5
6654              * sum (timeModelSel,
6655                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6656                  * timeLength(timeModelSel)
6657                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6658                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6659   
6660                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6661                  * timeLength(timeModelSel)
6662                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6663                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6664                  / timefrac
6665   
6666              + 0.5
6667              * sum ((timeModelSel, link_types),
6668                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6669                  * timeLength(timeModelSel)
6670                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6671                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6672                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6673   
6674                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6675                  * timeLength(timeModelSel)
6676                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6677                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6678                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6679                  / timefrac
6680              )
6681          )
6682      )
6683   
6684   
6685  * == sources / sinks ==
6686      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6687              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6688                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6689          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6690          *
6691          sum ((timeModelSel,sourcesink_techs,commodity)
6692                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6693              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6694              * timeLength(timeModelSel)
6695              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6696          / timefrac
6697      )
6698      =l=
6699      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6700   
6701  * // ### Accounting Indicator Calculation
6702  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6703  * // {Eq_accounting_indicatorCalc_lower}
6704  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
6705      $(activeIndicators(accNodesModel,accYears,indicator)
6706          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6707          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6708      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6710  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6711  * SPDX-License-Identifier: BSD-3-Clause
6712   
6713  * == variable indicators ==
6714      sum((accNodesModel_a,accYears_a,indicator_a)
6715          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6716              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6717          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6718          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6719          )
6720   
6721  * == converters ==
6722      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6723              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6724                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6725          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6726          *
6727          ( sum ((converter_techs,vintage)
6728                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6729                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6730              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6731              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6732              )
6733   
6734          + sum ((years_a,converter_techs,vintage)
6735                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6736                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6737                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6738                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6739                          and years_a.val <= yearsSel.val ),
6740              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6741              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6742              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6743              )
6744   
6745          + sum ((yearsToCalc,converter_techs,vintage)
6746                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6747                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6748                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6749                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6750                          and yearsToCalc.val <= yearsSel.val ),
6751              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6752              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6753              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6754              )
6755   
6756          + sum ((converter_techs,vintage)
6757                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6758                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6759              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6760              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6761   
6762          + sum ((converter_techs,vintage)
6763                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6764              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6765              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6766   
6767          + sum ((timeModelSel,converter_techs,vintage,activity)
6768                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6769              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6770              * timeLength(timeModelSel)
6771              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6772          / timefrac
6773   
6774          + sum ((timeModelSel,converter_techs,vintage)
6775                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6776              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6777              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6778          / timefrac
6779   
6780          + sum ((timeModelSel,converter_techs,vintage)
6781                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6782              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6783              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6784                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6785   
6786              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6787              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6788                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6789          / timefrac
6790          )
6791      )
6792   
6793  * == storage ==
6794      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6795              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6796                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6797          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6798          *
6799          ( sum ((storage_techs,vintage)
6800                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6801                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6802              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6803              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6804              )
6805   
6806          + sum ((years_a,storage_techs,vintage)
6807                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6808                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6809                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6810                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6811                          and years_a.val <= yearsSel.val ),
6812              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6813              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6814              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6815              )
6816   
6817          + sum ((yearsToCalc,storage_techs,vintage)
6818                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6819                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6820                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6821                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6822                          and yearsToCalc.val <= yearsSel.val ),
6823              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6824              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6825              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6826              )
6827   
6828          + sum ((storage_techs,vintage)
6829                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6830                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6831              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6832              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6833   
6834          + sum ((storage_techs,vintage)
6835                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6836              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6837              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6838          )
6839      )
6840   
6841   
6842  * == transfer ==
6843      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6844              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6845                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6846          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6847          *
6848          ( sum ((linksModelToCalc,transfer_techs,vintage)
6849                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6850                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6851                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6852              0.5
6853              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6854              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6855   
6856          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6857                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6858                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6859                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6860                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6861                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6862                          and years_a.val <= yearsSel.val ),
6863              0.5
6864              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6865              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6866              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6867   
6868          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6869                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6870                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6871                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6872                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6873                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6874                          and yearsToCalc.val <= yearsSel.val ),
6875              0.5
6876              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6877              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6878              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6879   
6880          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6881                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6882                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6883                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6884              0.5
6885              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6886              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6887              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6888   
6889          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6890                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6891                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6892                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6893                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6894                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6895                          and years_a.val <= yearsSel.val ),
6896              0.5
6897              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6898              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6899              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6900              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6901   
6902          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6903                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6904                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6905                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6906                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6907                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6908                          and yearsToCalc.val <= yearsSel.val ),
6909              0.5
6910              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6911              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6912              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6913              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6914   
6915          + sum ((linksModelToCalc,transfer_techs,vintage)
6916                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6917                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6918                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6919              0.5
6920              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6921              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6922   
6923              + 0.5
6924              * sum (link_types,
6925                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6926                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6927                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6928              ) )
6929   
6930          + sum ((linksModelToCalc,transfer_techs,vintage)
6931                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6932                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6933              0.5
6934              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6935              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6936   
6937              + 0.5
6938              * sum (link_types,
6939                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6940                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6941                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6942   
6943              + 0.5
6944              * sum (timeModelSel,
6945                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6946                  * timeLength(timeModelSel)
6947                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6948                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6949   
6950                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6951                  * timeLength(timeModelSel)
6952                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6953                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6954                  / timefrac
6955   
6956              + 0.5
6957              * sum ((timeModelSel, link_types),
6958                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6959                  * timeLength(timeModelSel)
6960                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6961                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6962                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6963   
6964                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6965                  * timeLength(timeModelSel)
6966                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6967                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6968                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6969                  / timefrac
6970              )
6971          )
6972      )
6973   
6974   
6975  * == sources / sinks ==
6976      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6977              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6978                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6979          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6980          *
6981          sum ((timeModelSel,sourcesink_techs,commodity)
6982                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6983              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6984              * timeLength(timeModelSel)
6985              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6986          / timefrac
6987      )
6988      =g=
6989      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6990   
6991   
6992  * // ### Accounting Indicator Calculation Links
6993  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
6994  * // {Eq_accounting_indicatorCalc_links_fixed}
6995  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
6996      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
6997          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
6998      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7000  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7001  * SPDX-License-Identifier: BSD-3-Clause
7002   
7003      sum ((transfer_techs,vintage)
7004                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7005                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7006          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7007          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7008   
7009      + sum ((years_a,transfer_techs,vintage)
7010                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7011                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7012                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7013                      and years_a.val <= yearsSel.val ),
7014          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7015          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7016          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7017   
7018      + sum ((transfer_techs,vintage,link_types)
7019                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7020                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7021          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7022          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7023          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7024   
7025      + sum ((years_a,transfer_techs,vintage,link_types)
7026                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7027                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7028                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7029                      and years_a.val <= yearsSel.val ),
7030          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7031          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7032          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7033          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7034   
7035      + sum ((transfer_techs,vintage)
7036                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7037                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7038          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7039          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7040   
7041          + sum (link_types,
7042              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7043              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7044              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7045          ) )
7046   
7047      + sum ((transfer_techs,vintage)
7048                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7049          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7050          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7051   
7052          + sum (link_types,
7053              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7054              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7055              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7056   
7057          + sum (timeModelSel,
7058              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7059              * timeLength(timeModelSel)
7060              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7061                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7062   
7063              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7064              * timeLength(timeModelSel)
7065              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7066                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7067              / timefrac
7068   
7069          + sum ((timeModelSel, link_types),
7070              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7071              * timeLength(timeModelSel)
7072              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7073              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7074                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7075   
7076              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7077              * timeLength(timeModelSel)
7078              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7079              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7080                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7081              / timefrac
7082          )
7083      =e=
7084  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
7085   
7086  * // ### Accounting Indicator Calculation Links
7087  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7088  * // {Eq_accounting_indicatorCalc_links_upper}
7089  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
7090      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7091          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
7092          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7093      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7095  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7096  * SPDX-License-Identifier: BSD-3-Clause
7097   
7098      sum ((transfer_techs,vintage)
7099                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7100                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7101          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7102          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7103   
7104      + sum ((years_a,transfer_techs,vintage)
7105                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7106                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7107                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7108                      and years_a.val <= yearsSel.val ),
7109          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7110          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7111          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7112   
7113      + sum ((transfer_techs,vintage,link_types)
7114                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7115                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7116          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7117          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7118          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7119   
7120      + sum ((years_a,transfer_techs,vintage,link_types)
7121                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7122                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7123                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7124                      and years_a.val <= yearsSel.val ),
7125          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7126          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7127          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7128          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7129   
7130      + sum ((transfer_techs,vintage)
7131                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7132                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7133          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7134          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7135   
7136          + sum (link_types,
7137              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7138              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7139              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7140          ) )
7141   
7142      + sum ((transfer_techs,vintage)
7143                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7144          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7145          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7146   
7147          + sum (link_types,
7148              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7149              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7150              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7151   
7152          + sum (timeModelSel,
7153              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7154              * timeLength(timeModelSel)
7155              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7156                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7157   
7158              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7159              * timeLength(timeModelSel)
7160              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7161                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7162              / timefrac
7163   
7164          + sum ((timeModelSel, link_types),
7165              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7166              * timeLength(timeModelSel)
7167              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7168              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7169                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7170   
7171              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7172              * timeLength(timeModelSel)
7173              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7174              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7175                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7176              / timefrac
7177          )
7178      =l=
7179  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
7180   
7181  * // ### Accounting Indicator Calculation Links
7182  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7183  * // {Eq_accounting_indicatorCalc_links_lower}
7184  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
7185      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7186          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
7187          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7188      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7190  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7191  * SPDX-License-Identifier: BSD-3-Clause
7192   
7193      sum ((transfer_techs,vintage)
7194                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7195                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7196          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7197          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7198   
7199      + sum ((years_a,transfer_techs,vintage)
7200                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7201                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7202                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7203                      and years_a.val <= yearsSel.val ),
7204          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7205          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7206          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7207   
7208      + sum ((transfer_techs,vintage,link_types)
7209                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7210                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7211          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7212          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7213          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7214   
7215      + sum ((years_a,transfer_techs,vintage,link_types)
7216                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7217                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7218                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7219                      and years_a.val <= yearsSel.val ),
7220          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7221          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7222          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7223          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7224   
7225      + sum ((transfer_techs,vintage)
7226                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7227                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7228          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7229          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7230   
7231          + sum (link_types,
7232              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7233              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7234              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7235          ) )
7236   
7237      + sum ((transfer_techs,vintage)
7238                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7239          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7240          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7241   
7242          + sum (link_types,
7243              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7244              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7245              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7246   
7247          + sum (timeModelSel,
7248              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7249              * timeLength(timeModelSel)
7250              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7251                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7252   
7253              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7254              * timeLength(timeModelSel)
7255              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7256                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7257              / timefrac
7258   
7259          + sum ((timeModelSel, link_types),
7260              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7261              * timeLength(timeModelSel)
7262              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7263              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7264                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7265   
7266              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7267              * timeLength(timeModelSel)
7268              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7269              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7270                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7271              / timefrac
7272          )
7273      =g=
7274  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
7275   
7276   
7277  * // ### Accounting Objective
7278  * // Calculates the indicators for the objective.
7279  * // {Eq_accounting_objective}
7280  Eq_accounting_objective
7281      ..
7282      accounting_objective
7283      =e=
7284      sum ((accNodesModel,accYears,indicator)
7285              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7286          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
7287          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7289  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7290  * SPDX-License-Identifier: BSD-3-Clause
7291   
7292  * == variable indicators ==
7293      sum((accNodesModel_a,accYears_a,indicator_a)
7294          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7295              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7296          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7297          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7298          )
7299   
7300  * == converters ==
7301      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7302              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7303                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7304          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7305          *
7306          ( sum ((converter_techs,vintage)
7307                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7308                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7309              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7310              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7311              )
7312   
7313          + sum ((years_a,converter_techs,vintage)
7314                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7315                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7316                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7317                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7318                          and years_a.val <= yearsSel.val ),
7319              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7320              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7321              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7322              )
7323   
7324          + sum ((yearsToCalc,converter_techs,vintage)
7325                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7326                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7327                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7328                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7329                          and yearsToCalc.val <= yearsSel.val ),
7330              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7331              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7332              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7333              )
7334   
7335          + sum ((converter_techs,vintage)
7336                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7337                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7338              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7339              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7340   
7341          + sum ((converter_techs,vintage)
7342                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7343              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7344              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7345   
7346          + sum ((timeModelSel,converter_techs,vintage,activity)
7347                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7348              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7349              * timeLength(timeModelSel)
7350              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7351          / timefrac
7352   
7353          + sum ((timeModelSel,converter_techs,vintage)
7354                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7355              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7356              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7357          / timefrac
7358   
7359          + sum ((timeModelSel,converter_techs,vintage)
7360                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7361              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7362              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7363                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7364   
7365              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7366              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7367                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7368          / timefrac
7369          )
7370      )
7371   
7372  * == storage ==
7373      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7374              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7375                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7376          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7377          *
7378          ( sum ((storage_techs,vintage)
7379                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7380                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7381              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7382              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7383              )
7384   
7385          + sum ((years_a,storage_techs,vintage)
7386                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7387                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7388                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7389                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7390                          and years_a.val <= yearsSel.val ),
7391              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7392              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7393              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7394              )
7395   
7396          + sum ((yearsToCalc,storage_techs,vintage)
7397                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7398                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7399                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7400                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7401                          and yearsToCalc.val <= yearsSel.val ),
7402              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7403              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7404              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7405              )
7406   
7407          + sum ((storage_techs,vintage)
7408                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7409                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7410              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7411              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7412   
7413          + sum ((storage_techs,vintage)
7414                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7415              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7416              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7417          )
7418      )
7419   
7420   
7421  * == transfer ==
7422      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7423              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7424                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7425          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7426          *
7427          ( sum ((linksModelToCalc,transfer_techs,vintage)
7428                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7429                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7430                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7431              0.5
7432              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7433              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7434   
7435          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7436                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7437                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7438                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7439                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7440                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7441                          and years_a.val <= yearsSel.val ),
7442              0.5
7443              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7444              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7445              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7446   
7447          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7448                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7449                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7450                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7451                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7452                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7453                          and yearsToCalc.val <= yearsSel.val ),
7454              0.5
7455              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7456              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7457              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7458   
7459          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7460                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7461                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7462                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7463              0.5
7464              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7465              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7466              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7467   
7468          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7469                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7470                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7471                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7472                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7473                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7474                          and years_a.val <= yearsSel.val ),
7475              0.5
7476              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7477              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7478              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7479              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7480   
7481          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7482                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7483                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7484                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7485                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7486                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7487                          and yearsToCalc.val <= yearsSel.val ),
7488              0.5
7489              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7490              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7491              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7492              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7493   
7494          + sum ((linksModelToCalc,transfer_techs,vintage)
7495                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7496                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7497                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7498              0.5
7499              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7500              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7501   
7502              + 0.5
7503              * sum (link_types,
7504                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7505                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7506                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7507              ) )
7508   
7509          + sum ((linksModelToCalc,transfer_techs,vintage)
7510                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7511                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7512              0.5
7513              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7514              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7515   
7516              + 0.5
7517              * sum (link_types,
7518                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7519                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7520                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7521   
7522              + 0.5
7523              * sum (timeModelSel,
7524                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7525                  * timeLength(timeModelSel)
7526                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7527                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7528   
7529                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7530                  * timeLength(timeModelSel)
7531                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7532                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7533                  / timefrac
7534   
7535              + 0.5
7536              * sum ((timeModelSel, link_types),
7537                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7538                  * timeLength(timeModelSel)
7539                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7540                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7541                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7542   
7543                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7544                  * timeLength(timeModelSel)
7545                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7546                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7547                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7548                  / timefrac
7549              )
7550          )
7551      )
7552   
7553   
7554  * == sources / sinks ==
7555      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7556              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7557                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7558          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7559          *
7560          sum ((timeModelSel,sourcesink_techs,commodity)
7561                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7562              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7563              * timeLength(timeModelSel)
7564              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7565          / timefrac
7566      )
7567      )
7568   
7569   
7570  * ==== model definition ====
7571   
7572  Model M_accounting
7573  /
7574  Eq_accounting_indicatorCalc_fixed
7575  Eq_accounting_indicatorCalc_upper
7576  Eq_accounting_indicatorCalc_lower
7577  Eq_accounting_indicatorCalc_links_fixed
7578  Eq_accounting_indicatorCalc_links_upper
7579  Eq_accounting_indicatorCalc_links_lower
7580  Eq_accounting_objective
7581  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
7583  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7584  * SPDX-License-Identifier: BSD-3-Clause
7585   
7586  * ==== optimization frames ====
7588   
7589  * mapping from optimization frame to years
7591  set optiframe / of1 * of1 /;
7592  set optiframeToCalc(optiframe);
7593   
7595  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7597   
7599   
7600  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
7602  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7603  * SPDX-License-Identifier: BSD-3-Clause
7604   
7605  * ==== Overview of model dimensions ====
7606  parameters  acts(converter_techs) "active technologies"
7607              asts(storage_techs) "active storage technologies"
7608              atts(transfer_techs) "active transfer technologies"
7609   
7610  scalars nd "number of dispatch time steps per year"
7611          nn "number of network nodes"
7612          nl "number of network links"
7613          nt "number of converter, storage and transfer technologies"
7614          nc "number of commodities"
7615          ny "number of years of the capacity planning horizon";
7616   
7617  option acts < converter_availTech;
7618  option asts < storage_availTech;
7619  option atts < transfer_availTech;
7620   
7621  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
7622  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
7623  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
7624  nt = sum (storage_techs $asts(storage_techs), 1)
7625      + sum (converter_techs $acts(converter_techs), 1)
7626      + sum (transfer_techs $atts(transfer_techs), 1);
7627  nc = card(commodity);
7628  ny = sum (years $yearsToCalc(years), 1);
7629   
7630  file props / '' /;
7631  put props;
7632  put "### Model properties  ###" /;
7633  put "Number of active dispatch time steps per year: " nd:0:0  /;
7634  put "Number of active network nodes: " nn:0:0  /;
7635  put "Number of active network links: " nl:0:0  /;
7636  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
7637  put "Number of commodities: " nc:0:0  /;
7638  put "Number of years considered for capacity expansion: " ny:0:0  /;
7639  putclose;
7640   
7641  Model remix /
7642    M_converter
7643    M_storage
7644    M_transfer
7645    M_sourcesink
7646    M_balance
7647    M_accounting
7648  /;
7649   
7653   
7654  * ==== include methods  ====
7657   
7658  * check if the method is valid
7663   
7664   
7665  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
7667  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7668  * SPDX-License-Identifier: BSD-3-Clause
7669   
7672   
7675   
7676  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
7678  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7679  * SPDX-License-Identifier: BSD-3-Clause
7680   
7684   
7685  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
7687  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7688  * SPDX-License-Identifier: BSD-3-Clause
7689   
7693   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
7695  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7696  * SPDX-License-Identifier: BSD-3-Clause
7697   
7699   
7701   
7702  * ==== GAMS solver options ====
7708   
7709  * ==== REMix debug options ====
7713   
7714  * ==== REMix solver defaults ====
7722   
7730   
7740   
7748   
7757   
7758   
7759  * ==== setup optimization ====
7760  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7761     option limRow=0, limCol=0, solPrint=off;
7762  else
7763     option limRow=100000, limCol=100000, solPrint=on;
7764  );
7765   
7766   
7767  * ==== Solver specific default values ====
7768   
7788   
7789   
7791   
7792   
7794   
7795  option mip = cplex;
7796  option reslim = 1209600;
7797  option optcr = 1e-3;
7798  remix.threads = 8;
7799  remix.optFile = 1;
7800  remix.solveLink = 0;
7801  remix.holdFixed = 1;
7802   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
7805  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7806  * SPDX-License-Identifier: BSD-3-Clause
7807   
7809   
7811  file opt / "cplex.opt" /;
7812  put opt;
7813  put "names no" /;
7814  put "rerun no" /;
7815   
7816  put "lpmethod 4" /;
7817  put "threads 8" /;
7818  put "barorder 3" /;
7819   
7821  put "scaind 0" /;
7822  put "predual -1" /;
7823   
7826  put "barepcomp 1e-6" /;
7828  put "solutiontype 2" /;
7829  put "epgap 1e-3" /;
7830   
7832  put "iis 0" /;
7833  put "quality 1" /;
7834   
7837  putclose;
7839   
7840   
7842   
7843   
7845   
7846   
7848   
7849   
7851   
7852   
7854   
7855   
7857   
7858   
7860   
7862   
7863   
7864  * ==== solve the problem ====
7865   
7866  loop ( optiframeToCalc,
7867      yearsSel(years) = no;
7868      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7869      yearsToFix(years) = no;
7870      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7871      accYearsSel(accYears) = no;
7872      accYearsSel("horizon") = yes;
7873      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7874      accYearsToFix(accYears) = no;
7875      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7876      timeModelSel(timeModel) = no;
7877      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7878      nodesModelSel(nodesModel) = no;
7879      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7880   
7881  * Fix decision for years previously optimized in case of myopic or foresight
7882      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
7883          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7884          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7885              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7886      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
7887          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7888   
7889      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
7890          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7891          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
7892              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
7893      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
7894          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7895   
7896      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
7897          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
7898              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7899                  sum(years$sameas(years, yearsToCalc),
7900                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
7901                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
7902              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7903                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
7904                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
7905      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
7906          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
7907   
7908      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7909          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7910          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7911              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
7912   
7913      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7914          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7915          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7916              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
7917   
7918      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7919          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7920      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7921          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7922      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7923          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7924      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7925          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7926      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7927          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7928   
7929   
7930      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
7931          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7932          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7933              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7934      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
7935          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7936   
7937      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
7938          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7939          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
7940              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
7941      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
7942          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7943   
7944      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
7945          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
7946              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7947                  sum(years$sameas(years, yearsToCalc),
7948                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
7949                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
7950              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7951                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
7952                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
7953      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
7954          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
7955   
7956      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7957          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7958          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7959              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
7960   
7961      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7962          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7963          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7964              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
7965   
7966      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7967          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7968      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7969          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7970      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7971          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7972      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7973          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7974      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7975          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7976   
7977   
7978      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
7979          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7980          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
7981              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
7982      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
7983          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7984   
7985      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
7986          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7987          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
7988              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
7989      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
7990          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7991   
7992      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7993          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
7994              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7995                  sum(years$sameas(years, yearsToCalc),
7996                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
7997                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7998              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7999                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
8000                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
8001      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8002          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
8003   
8004      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8005          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8006          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8007              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8008   
8009      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8010          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8011          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8012              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8013   
8014      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8015          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8016      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8017          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8018      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8019          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8020      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8021          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8022      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8023          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8024   
8025      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8026          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8027   
8028  * Optimize and log values
8029      solve remix minimizing accounting_objective using mip;
8030      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8031      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8032   
8033  );
8034   
8038   
8039  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
8041  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8042  * SPDX-License-Identifier: BSD-3-Clause
8043   
8047   
8048  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
8050  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8051  * SPDX-License-Identifier: BSD-3-Clause
8052   
8056   
8057  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
8059  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8060  * SPDX-License-Identifier: BSD-3-Clause
8061   
8065   
8066  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
8068  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8069  * SPDX-License-Identifier: BSD-3-Clause
8070   
8073   
8074  * ==== indicator accounting ====
8075   
8076  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8077      =
8078  * == converters ==
8079      sum ((converter_techs(techs),vintage)
8080                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8081                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
8082          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8083          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
8084   
8085      + sum ((years_a,converter_techs(techs),vintage)
8086                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8087                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
8088                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
8089                      and years_a.val <= yearsToCalc.val ),
8090          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8091          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
8092          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
8093   
8094      + sum ((converter_techs(techs),vintage)
8095                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8096                      and converter_techParam(converter_techs,vintage,"freeDecom")),
8097          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8098          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
8099   
8100      + sum ((converter_techs(techs),vintage)
8101                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8102          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8103          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
8104   
8105      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8106                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8107          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8108          * timeLength(timeModelToCalc)
8109          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
8110          / timefrac
8111   
8112      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8113                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8114          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8115          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
8116          / timefrac
8117   
8118      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8119                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8120          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8121          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8122              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
8123   
8124          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8125          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8126              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
8127          / timefrac
8128   
8129  * == storage ==
8130      + sum ((storage_techs(techs),vintage)
8131                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8132                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
8133          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8134          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
8135   
8136      + sum ((years_a,storage_techs(techs),vintage)
8137                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8138                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
8139                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
8140                      and years_a.val <= yearsToCalc.val ),
8141          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8142          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
8143          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
8144   
8145      + sum ((storage_techs(techs),vintage)
8146                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8147                      and storage_techParam(storage_techs,vintage,"freeDecom")),
8148          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8149          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
8150   
8151      + sum ((storage_techs(techs),vintage)
8152                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8153          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8154          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
8155   
8156  * == transfer ==
8157      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8158                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8159                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8160                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8161          0.5
8162          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8163          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8164   
8165      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
8166                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8167                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8168                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
8169                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8170                      and years_a.val <= yearsToCalc.val ),
8171          0.5
8172          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8173          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
8174          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
8175   
8176      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
8177                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8178                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8179                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8180          0.5
8181          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8182          * transfer_lengthParam(linksModel,link_types,"length")
8183          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8184   
8185      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
8186                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8187                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8188                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8189                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8190                      and years_a.val <= yearsToCalc.val ),
8191          0.5
8192          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8193          * transfer_lengthParam(linksModel,link_types,"length")
8194          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8195          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
8196   
8197      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8198                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
8199                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8200                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8201          0.5
8202          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8203          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8204   
8205          + 0.5
8206          * sum (link_types,
8207              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8208              * transfer_lengthParam(linksModel,link_types,"length")
8209              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8210          ) )
8211   
8212   
8213      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8214                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8215                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8216          + 0.5
8217          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8218          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8219   
8220          + 0.5
8221          * sum (link_types,
8222              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8223              * transfer_lengthParam(linksModel,link_types,"length")
8224              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8225   
8226          + 0.5
8227          * sum (timeModelToCalc,
8228              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8229              * timeLength(timeModelToCalc)
8230              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8231                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8232   
8233              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8234              * timeLength(timeModelToCalc)
8235              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8236                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8237              / timefrac
8238   
8239          + 0.5
8240          * sum ((timeModelToCalc, link_types),
8241              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8242              * timeLength(timeModelToCalc)
8243              * transfer_lengthParam(linksModel,link_types,"length")
8244              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8245                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8246   
8247              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8248              * timeLength(timeModelToCalc)
8249              * transfer_lengthParam(linksModel,link_types,"length")
8250              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8251                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8252              / timefrac
8253          )
8254   
8255   
8256  * == sources / sinks ==
8257      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8258              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8259          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8260          * timeLength(timeModelToCalc)
8261          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8262      / timefrac
8263      ;
8264   
8265   
8266  * ==== full set of main indicators ====
8267   
8268  indicator_accounting(accNodesModel,accYears,indicator)
8269      $sum((accNodesModel_a,accYears_a,indicator_a)
8270              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8271      =
8272      + sum((accNodesModel_a,accYears_a,indicator_a)
8273              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8274                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8275          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8276          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8277   
8278      + sum((accNodesModel_a,accYears_a,indicator_a)
8279              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8280          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8281          * (sum((nodesModelToCalc,yearsToCalc,techs)
8282                  $(sameas(accNodesModel_a, nodesModelToCalc)
8283                      and sameas(accYears_a, yearsToCalc)),
8284                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8285      ;
8286   
8287  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8288      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8289      =
8290          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8291          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8292              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8293   
8294          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8295          * (sum((nodesModelToCalc,yearsToCalc,techs)
8296                  $(sameas(accNodesModel_a, nodesModelToCalc)
8297                      and sameas(accYears_a, yearsToCalc)),
8298                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8299      ;
8300   
8301  indicator_accounting_var(accNodesModel,accYears,indicator)
8302      $accounting_indicator.l(accNodesModel,accYears,indicator)
8303      = accounting_indicator.l(accNodesModel,accYears,indicator);
8304   
8305  indicator_accounting_ref(accNodesModel,accYears,indicator)
8306      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8309  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8310  * SPDX-License-Identifier: BSD-3-Clause
8311   
8312  * == variable indicators ==
8313      sum((accNodesModel_a,accYears_a,indicator_a)
8314          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8315              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8316          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8317          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8318          )
8319   
8320  * == converters ==
8321      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8322              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8323                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8324          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8325          *
8326          ( sum ((converter_techs,vintage)
8327                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8328                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8329              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8330              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8331              )
8332   
8333          + sum ((years_a,converter_techs,vintage)
8334                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8335                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8336                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8337                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8338                          and years_a.val <= yearsSel.val ),
8339              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8340              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8341              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8342              )
8343   
8344          + sum ((yearsToCalc,converter_techs,vintage)
8345                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8346                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8347                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8348                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8349                          and yearsToCalc.val <= yearsSel.val ),
8350              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8351              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8352              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8353              )
8354   
8355          + sum ((converter_techs,vintage)
8356                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8357                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8358              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8359              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8360   
8361          + sum ((converter_techs,vintage)
8362                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8363              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8364              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8365   
8366          + sum ((timeModelSel,converter_techs,vintage,activity)
8367                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8368              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8369              * timeLength(timeModelSel)
8370              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8371          / timefrac
8372   
8373          + sum ((timeModelSel,converter_techs,vintage)
8374                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8375              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8376              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8377          / timefrac
8378   
8379          + sum ((timeModelSel,converter_techs,vintage)
8380                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8381              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8382              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8383                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8384   
8385              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8386              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8387                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8388          / timefrac
8389          )
8390      )
8391   
8392  * == storage ==
8393      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8394              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8395                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8396          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8397          *
8398          ( sum ((storage_techs,vintage)
8399                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8400                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8401              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8402              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8403              )
8404   
8405          + sum ((years_a,storage_techs,vintage)
8406                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8407                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8408                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8409                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8410                          and years_a.val <= yearsSel.val ),
8411              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8412              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8413              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8414              )
8415   
8416          + sum ((yearsToCalc,storage_techs,vintage)
8417                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8418                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8419                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8420                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8421                          and yearsToCalc.val <= yearsSel.val ),
8422              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8423              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8424              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8425              )
8426   
8427          + sum ((storage_techs,vintage)
8428                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8429                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8430              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8431              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8432   
8433          + sum ((storage_techs,vintage)
8434                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8435              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8436              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8437          )
8438      )
8439   
8440   
8441  * == transfer ==
8442      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8443              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8444                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8445          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8446          *
8447          ( sum ((linksModelToCalc,transfer_techs,vintage)
8448                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8449                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8450                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8451              0.5
8452              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8453              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8454   
8455          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8456                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8457                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8458                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8459                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8460                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8461                          and years_a.val <= yearsSel.val ),
8462              0.5
8463              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8464              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8465              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8466   
8467          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8468                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8469                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8470                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8471                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8472                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8473                          and yearsToCalc.val <= yearsSel.val ),
8474              0.5
8475              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8476              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8477              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8478   
8479          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8480                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8481                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8482                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8483              0.5
8484              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8485              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8486              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8487   
8488          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8489                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8490                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8491                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8492                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8493                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8494                          and years_a.val <= yearsSel.val ),
8495              0.5
8496              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8497              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8498              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8499              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8500   
8501          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8502                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8503                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8504                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8505                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8506                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8507                          and yearsToCalc.val <= yearsSel.val ),
8508              0.5
8509              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8510              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8511              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8512              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8513   
8514          + sum ((linksModelToCalc,transfer_techs,vintage)
8515                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8516                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8517                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8518              0.5
8519              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8520              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8521   
8522              + 0.5
8523              * sum (link_types,
8524                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8525                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8526                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8527              ) )
8528   
8529          + sum ((linksModelToCalc,transfer_techs,vintage)
8530                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8531                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8532              0.5
8533              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8534              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8535   
8536              + 0.5
8537              * sum (link_types,
8538                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8539                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8540                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8541   
8542              + 0.5
8543              * sum (timeModelSel,
8544                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8545                  * timeLength(timeModelSel)
8546                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8547                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8548   
8549                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8550                  * timeLength(timeModelSel)
8551                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8552                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8553                  / timefrac
8554   
8555              + 0.5
8556              * sum ((timeModelSel, link_types),
8557                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8558                  * timeLength(timeModelSel)
8559                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8560                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8561                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8562   
8563                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8564                  * timeLength(timeModelSel)
8565                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8566                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8567                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8568                  / timefrac
8569              )
8570          )
8571      )
8572   
8573   
8574  * == sources / sinks ==
8575      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8576              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8577                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8578          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8579          *
8580          sum ((timeModelSel,sourcesink_techs,commodity)
8581                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8582              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8583              * timeLength(timeModelSel)
8584              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8585          / timefrac
8586      )
8588  ;
8589   
8590   
8591  * ==== link-specific indicator accounting ====
8592   
8593  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8594      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8595          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8596      =
8597      sum ((transfer_techs(techs),vintage)
8598                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8599                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8600          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8601          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8602   
8603      + sum ((years_a,transfer_techs(techs),vintage)
8604                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8605                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8606                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8607                      and years_a.val <= yearsToCalc.val ),
8608          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8609          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8610          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8611   
8612      + sum ((transfer_techs(techs),vintage,link_types)
8613                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8614                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8615          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8616          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8617          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8618   
8619      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8620                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8621                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8622                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8623                      and years_a.val <= yearsToCalc.val ),
8624          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8625          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8626          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8627          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8628   
8629      + sum ((transfer_techs(techs),vintage)
8630                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8631          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8632          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8633   
8634          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8635          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8636   
8637          + sum (link_types,
8638              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8639              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8640              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8641   
8642              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8643              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8644              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8645   
8646          + sum (timeModelToCalc,
8647              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8648              * timeLength(timeModelToCalc)
8649              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8650                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8651   
8652              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8653              * timeLength(timeModelToCalc)
8654              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8655                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8656              / timefrac
8657   
8658          + sum ((timeModelToCalc, link_types),
8659              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8660              * timeLength(timeModelToCalc)
8661              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8662              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8663                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8664   
8665              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8666              * timeLength(timeModelToCalc)
8667              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8668              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8669                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8670              / timefrac
8671      );
8672   
8673   
8674  * == converter capacities ==
8675   
8676  converter_ratedInput(converter_techs,vintage,commodity)
8677      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8678      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8679              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8680  converter_ratedInput(converter_techs,vintage,commodity)
8681      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8682      = 0;
8683   
8684  converter_ratedOutput(converter_techs,vintage,commodity)
8685      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8686      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8687              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8688  converter_ratedOutput(converter_techs,vintage,commodity)
8689      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8690      = 0;
8691   
8692  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8693      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8694          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8695      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8696              and converter_ratedOutput(converter_techs,vintage,commodity)),
8697          converter_ratedOutput(converter_techs,vintage,commodity));
8698   
8699  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8700      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8701          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8702      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8703              and converter_ratedOutput(converter_techs,vintage,commodity)),
8704          converter_ratedOutput(converter_techs,vintage,commodity));
8705   
8706  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8707      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8708   
8709  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8710      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8711   
8712  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
8713  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8714      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
8715       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
8716      = sum(years_a$
8717            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8718             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8719             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8720        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
8721   
8722  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8723      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8724   
8725  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8726      $(converter_ratedOutput(converter_techs,vintage,commodity))
8727      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8728          * converter_ratedOutput(converter_techs,vintage,commodity);
8729   
8730  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
8731      = sum(vintage,
8732          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8733  option clear = converter_caps_ext;
8734   
8735  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
8736      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
8737          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8738          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8739      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8740          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8741   
8742  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
8743      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
8744          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8745          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8746      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8747          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8748   
8749  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8750      = sum((nodesModelToCalc,years)
8751              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8752                  and map_accYearsPostCalc(accYears,years)),
8753          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
8754  option clear = converter_caps_novintage_ext;
8755   
8756  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8757      = sum((nodesModelToCalc,years)
8758              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8759                  and map_accYearsPostCalc(accYears,years)),
8760          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
8761  option clear = converter_units_ext;
8762   
8763  * ==== transfer capacities ====
8764   
8765  max_transfer_coefficient(transfer_techs(techs),commodity)
8766          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8767          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8768   
8769  min_transfer_coefficient(transfer_techs(techs),commodity)
8770          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8771          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8772   
8773  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8774      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8775          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8776          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
8777      = yes;
8778   
8779  transfer_links(linksModel,years,transfer_techs,vintage,"build")
8780      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
8781   
8782  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8783      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
8784   
8785  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
8786  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8787      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
8788       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
8789      = sum(years_a$
8790            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8791             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
8792             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
8793        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
8794   
8795  transfer_links(linksModel,years,transfer_techs,vintage,"total")
8796      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
8797   
8798  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
8799      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8800          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8801                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8802      = sum(vintage,
8803          transfer_links(linksModel,years,transfer_techs,vintage,capType)
8804          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8805   
8806  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8807      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8808          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8809          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8810                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8811      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8812          * min_transfer_coefficient(transfer_techs,commodity);
8813   
8814  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8815      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8816          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8817          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8818                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8819      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8820          * max_transfer_coefficient(transfer_techs,commodity);
8821   
8822   
8823  * ==== transfer flows ====
8824   
8825  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8826      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8827      = sum(vintage,
8828          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8829              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8830          * timeLength(timeModelToCalc)
8831          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8832   
8833  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
8834      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8835      = sum(timeModelToCalc,
8836          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8837   
8838  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8839      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8840      = sum(timeModelToCalc
8841              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8842          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8843   
8844  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8845      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8846      = sum(timeModelToCalc
8847              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8848          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8849   
8850  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
8851      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8852      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8853          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8854   
8855  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8856      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8857          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
8858          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8859      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
8860          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8861   
8862  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8863      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8864          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
8865              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
8866      = -1 * abs(sum(vintage,
8867          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8868              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8869          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8870              + sum(link_types,
8871                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8872                  * transfer_lengthParam(linksModel,link_types,"length")))))
8873          * timeLength(timeModelToCalc);
8874   
8875  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
8876      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8877          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
8878              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
8879      = sum(timeModelToCalc,
8880          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8881   
8882   
8883  * ==== storage capacities ====
8884   
8885  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8886      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8887              and storage_usedCom(storage_techs,vintage,commodity)
8888              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8889      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8890              and storage_usedCom(storage_techs,vintage,commodity)
8891              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8892          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8893   
8894  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8895      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8896              and storage_usedCom(storage_techs,vintage,commodity)
8897              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8898      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8899              and storage_usedCom(storage_techs,vintage,commodity)
8900              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8901          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8902   
8903  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8904      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8905      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8906   
8907  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8908      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8909      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8910   
8911  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
8912  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8913      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
8914       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
8915      = sum(years_a$
8916            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8917             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
8918             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
8919        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
8920   
8921  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8922      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8923   
8924  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8925      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8926      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8927          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8928   
8929  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
8930      = sum(vintage,
8931          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8932   
8933  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8934      $(storage_usedCom(storage_techs,vintage,commodity)
8935          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8936               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8937      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8938                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8939                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8940                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8941  option clear = storage_caps_ext;
8942   
8943  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
8944      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8945          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8946      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8947          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8948   
8949  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
8950      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8951          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8952      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8953          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8954   
8955  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8956      = sum((nodesModelToCalc,years)
8957              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8958                  and map_accYearsPostCalc(accYears,years)),
8959          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
8960  option clear = storage_caps_novintage_ext;
8961   
8962  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8963      = sum((nodesModelToCalc,years)
8964              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8965                  and map_accYearsPostCalc(accYears,years)),
8966          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8967  option clear = storage_units_ext;
8968   
8969   
8970  * ==== storage levels and flows ====
8971   
8972  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8973      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8974      =
8975      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8976      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8977          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
8978      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8979          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
8980      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
8981          * storage_sizeParam(storage_techs,vintage,commodity,"size")
8982          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
8983          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
8984              and ord(timeModelToCalc)=1)
8986      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8987          * timeLength(timeModelToCalc)
8989      ;
8990   
8991  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8992      = sum((nodesModelToCalc,yearsToCalc,vintage)
8993              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8994          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8995  option clear = storage_flows_ext;
8996   
8997  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8998      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8999      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9000   
9001  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9002      = sum((nodesModelToCalc,yearsToCalc,vintage)
9003              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9004          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9005  option clear = storage_level_out_ext;
9006   
9007  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9008      = sum(timeModelToCalc,
9009          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9010   
9011  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9012      = sum(timeModelToCalc
9013              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9014          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9015   
9016  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9017      = sum(timeModelToCalc
9018              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9019          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9020   
9021  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
9022      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9023          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9024   
9025  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9026      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
9027          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9028      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
9029          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9030   
9031  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9032      = sum((nodesModelToCalc,yearsToCalc,vintage)
9033              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9034                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9035                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9036          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9037          * timeLength(timeModelToCalc));
9038   
9039  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9040      = sum(timeModelToCalc,
9041          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9042   
9043   
9044  * == commodity balance ==
9045   
9046  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9047      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9048          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9049      = sum((activity)
9050              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9051          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9052              * timeLength(timeModelToCalc)
9053              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9054          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9055              * timeLength(timeModelToCalc)
9056              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9057   
9058  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9059      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9060          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9061      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9062          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9063              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9064          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9065              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9066          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9067              * storage_sizeParam(storage_techs,vintage,commodity,"size")
9068              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9069              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9070                  and ord(timeModelToCalc)=1)
9071          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9072      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9073      * timeLength(timeModelToCalc);
9074   
9075  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9076      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9077          and sameas(yearsToCalc,vintage))
9078      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9079      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9080      * timeLength(timeModelToCalc);
9081   
9082  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9083      $sum((linksModel)
9084          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9085                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9086                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9087      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9088      + sum((linksModel)
9089              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9090                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9091                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9092   
9093  * incoming transfer flows
9094              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9095                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9096                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9097                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9098              * timeLength(timeModelToCalc)
9099              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9100   
9101  * outgoing transfer flows
9102              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9103                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9104                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9105                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9106              * timeLength(timeModelToCalc)
9107              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9108   
9109              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9110                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9111                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9112                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9113                      * timeLength(timeModelToCalc)
9114                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9115                          + sum(link_types,
9116                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9117                              * transfer_lengthParam(linksModel,link_types,"length")))))
9118      ;
9119   
9120  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9121      = sum((nodesModelToCalc,yearsToCalc,vintage)
9122              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9123                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9124                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9125          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9126  option clear = commodity_balance_ext;
9127   
9128   
9129  * ==== annual commodity sums ====
9130   
9131  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
9132      = sum(timeModelToCalc,
9133          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9134   
9135  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9136      = sum(timeModelToCalc
9137              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9138          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9139   
9140  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9141      = sum(timeModelToCalc
9142              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9143          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9144   
9145  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9146      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9147          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9148   
9149  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9150      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
9151          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9152      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9153          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9154   
9155   
9156  * ==== marginal information ====
9157   
9158  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9159    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9160    =
9161    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9162   
9163  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9164      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9165      =
9166      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9167   
9168  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9169      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9170          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9171          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9172      =
9173      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9174      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9175      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9176   
9177  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
9178  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9179      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
9180      =
9181      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9182          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
9183  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9184      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
9185      =
9186      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9187          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
9188  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9189      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
9190      =
9191      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9192          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
9195   
9196  * ==== R2A postcalc information ====
9197   
9199   
9200   
9201  * ==== round profiles to reduce size of gdx ====
9202   
9204  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9205      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9206      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9207   
9208  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9209      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9210      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9211   
9212  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9213      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9214      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9215   
9216  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9217      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9218      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9219   
9220  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9221      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9222      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9223   
9224  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9225      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9226      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9227   
9228  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9229      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9230      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9232   
9233  * ==== Dump diagnostics ====
9234   
9235  diagnostics("variables") = remix.numVar;
9236  diagnostics("equations") = remix.numEqu;
9237  diagnostics("iterations") = remix.iterUsd;
9238   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
9242  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9243  * SPDX-License-Identifier: BSD-3-Clause
9244   
9247   
9248  execute_unload "./results\Tonga_trial_2.gdx"
9250      metadata
9252      timeModel
9253      timeModelToCalc
9254      nodesModel
9255      linksModel
9256      indicator
9257      commodity
9258      techs
9259      accNodesModel
9260      accYears
9261   
9262      map_nodesModel
9263      map_linksModel
9264      map_nodesAccounting
9265   
9266      indicator_accounting
9267      indicator_accounting_var
9268      indicator_accounting_ref
9269      indicator_accounting_comp
9270      indicator_accounting_detailed
9271      indicator_accounting_links
9272   
9273      converter_caps
9274      converter_units
9276   
9277      transfer_caps
9278      transfer_links
9279      transfer_flows
9280      transfer_flows_annual
9281      transfer_losses
9282      transfer_losses_annual
9283   
9284      storage_caps
9285      storage_units
9286      storage_flows
9287      storage_level_out
9288      storage_flows_annual
9289      storage_losses_out
9290      storage_losses_annual
9292   
9293      commodity_balance
9294      commodity_balance_annual
9295   
9296      marginals_balance
9297      marginals_sourcesink_profile
9298      marginals_sourcesink_sum
9299      marginals_indicator_bounds
9300   
9302      diagnostics
9303      ;
9306   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/11/25 13:30:30 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-pic\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/11/25 13:30:30\"\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-pic\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-pic\Process\225a\metadata
    26       89 CALL           3      67  .cat C:\Local\remix-pic\REMix-pic\Process\225a\\metadata | grep -v "^$"
    27       95 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      139 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      164 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      188 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-pic\Process\225a\map_aggregatetimemodel.csv
    31      253 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesmodel.csv
    32      253 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesmodel.csv
    33      259 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesmodel.csv
    34      266 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesdata.csv
    35      266 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesdata.csv
    36      272 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesdata.csv
    37      278 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesmodelsel.csv
    38      280 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesmodelsel.csv
    39      282 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_nodesmodelsel.csv
    40      295 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-pic\Process\225a\map_aggregatenodesmodel.csv
    41      295 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-pic\Process\225a\map_aggregatenodesmodel.csv
    42      301 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-pic\Process\225a\map_aggregatenodesmodel.csv
    43      304 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-pic\Process\225a\map_aggregatenodesmodel.csv
    44      333 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_years.csv
    45      333 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_years.csv
    46      336 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_years.csv
    47      345 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_years.csv
    48      345 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_years.csv
    49      348 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_years.csv
    50      354 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_yearssel.csv
    51      354 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_yearssel.csv
    52      357 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_yearssel.csv
    53      375 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_activities.csv
    54      375 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_activities.csv
    55      380 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_activities.csv
    56      388 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_gridsegments.csv
    57      390 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_gridsegments.csv
    58      398 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_linksdata.csv
    59      400 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_linksdata.csv
    60      418 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_link_types.csv
    61      420 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_link_types.csv
    62      429 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_commodities.csv
    63      429 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_commodities.csv
    64      435 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_commodities.csv
    65      444 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_indicators.csv
    66      444 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_indicators.csv
    67      450 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_indicators.csv
    68      459 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_converter_techs.csv
    69      459 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_converter_techs.csv
    70      470 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_storage_techs.csv
    71      470 INCLUDE       29     303  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_storage_techs.csv
    72      474 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_transfer_techs.csv
    73      477 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_sourcesink_techs.csv
    74      477 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_sourcesink_techs.csv
    75      485 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_converter_techs.csv
    76      485 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_converter_techs.csv
    77      494 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_converter_techs.csv
    78      498 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_storage_techs.csv
    79      498 INCLUDE       29     319  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_storage_techs.csv
    80      500 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_storage_techs.csv
    81      505 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_transfer_techs.csv
    82      506 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_transfer_techs.csv
    83      510 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_sourcesink_techs.csv
    84      510 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-pic\Process\225a\set_sourcesink_techs.csv
    85      514 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_sourcesink_techs.csv
    86      524 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_degradation_states.csv
    87      526 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_degradation_states.csv
    88      535 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_soc.csv
    89      537 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_soc.csv
    90      553 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_linkstartend.csv
    91      555 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_linkstartend.csv
    92      569 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    93      680 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_accnodes.csv
    94      682 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-pic\Process\225a\set_accnodes.csv
    95      747 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-pic\Process\225a\map_accnodes.csv
    96      749 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-pic\Process\225a\map_accnodes.csv
    97      802 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    98      834 IF EXIST      97      32  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converterunits.csv
    99      834 INCLUDE       97      32  ...C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converterunits.csv
   100      853 IF EXIST      97      34  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converterunits.csv
   101      867 IF EXIST      97      48  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converteractivity.csv
   102      869 IF EXIST      97      50  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converteractivity.csv
   103      886 IF EXIST      97      67  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converterstartup.csv
   104      888 IF EXIST      97      69  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_converterstartup.csv
   105      907 IF EXIST      97      88  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_storageunits.csv
   106      907 INCLUDE       97      88  ...C:\Local\remix-pic\REMix-pic\Process\225a\accounting_storageunits.csv
   107      912 IF EXIST      97      90  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_storageunits.csv
   108      934 IF EXIST      97     112  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_transferlinks.csv
   109      936 IF EXIST      97     114  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_transferlinks.csv
   110      958 IF EXIST      97     136  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_transferperlength.csv
   111      960 IF EXIST      97     138  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_transferperlength.csv
   112      975 IF EXIST      97     153  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_sourcesinkflow.csv
   113      975 INCLUDE       97     153  ...C:\Local\remix-pic\REMix-pic\Process\225a\accounting_sourcesinkflow.csv
   114      982 IF EXIST      97     155  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_sourcesinkflow.csv
   115      996 IF EXIST      97     169  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_perindicator.csv
   116      996 INCLUDE       97     169  ...C:\Local\remix-pic\REMix-pic\Process\225a\accounting_perindicator.csv
   117     1002 IF EXIST      97     171  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_perindicator.csv
   118     1028 IF EXIST      97     197  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_indicatorbounds.csv
   119     1028 INCLUDE       97     197  ...C:\Local\remix-pic\REMix-pic\Process\225a\accounting_indicatorbounds.csv
   120     1032 IF EXIST      97     199  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_indicatorbounds.csv
   121     1051 IF EXIST      97     218  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_indicatorbounds_links.csv
   122     1053 IF EXIST      97     220  ..C:\Local\remix-pic\REMix-pic\Process\225a\accounting_indicatorbounds_links.csv
   123     1059 BATINCLUDE    97     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1127 BATINCLUDE    97     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1179 BATINCLUDE    97     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1231 BATINCLUDE    97     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1299 BATINCLUDE    97     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   128     1367 BATINCLUDE    97     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   129     1435 BATINCLUDE    97     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   130     1895 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   131     1970 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   132     1977 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   133     1984 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   134     2001 IF DEXIST    133      17  ..C:\Local\remix-pic\REMix-pic\Process\results\
   135     2219 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   136     2232 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   137     2335 IF EXIST     136     103  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_capacityparam.csv
   138     2335 INCLUDE      136     103  ...C:\Local\remix-pic\REMix-pic\Process\225a\converter_capacityparam.csv
   139     2369 IF EXIST     136     105  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_capacityparam.csv
   140     2377 BATINCLUDE   136     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   141     2388 BATINCLUDE   136     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   142     2421 IF EXIST     136     137  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_techparam.csv
   143     2421 INCLUDE      136     137  ...C:\Local\remix-pic\REMix-pic\Process\225a\converter_techparam.csv
   144     2432 IF EXIST     136     139  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_techparam.csv
   145     2454 IF EXIST     136     161  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_activityprofile.csv
   146     2454 INCLUDE      136     161  ...C:\Local\remix-pic\REMix-pic\Process\225a\converter_activityprofile.csv
   147     2480 IF EXIST     136     162  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_activityprofile.csv
   148     2482 IF EXIST     136     164  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_activityprofile.csv
   149     2503 IF EXIST     136     185  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficient.csv
   150     2503 INCLUDE      136     185  ...C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficient.csv
   151     2518 IF EXIST     136     186  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficient.csv
   152     2519 IF EXIST     136     187  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficient.csv
   153     2521 IF EXIST     136     189  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficient.csv
   154     2534 IF EXIST     136     202  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficientprofile.csv
   155     2535 IF EXIST     136     203  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficientprofile.csv
   156     2537 IF EXIST     136     205  ..C:\Local\remix-pic\REMix-pic\Process\225a\converter_coefficientprofile.csv
   157     3538 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   158     3631 IF EXIST     157      93  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_reservoirparam.csv
   159     3631 INCLUDE      157      93  ...C:\Local\remix-pic\REMix-pic\Process\225a\storage_reservoirparam.csv
   160     3638 IF EXIST     157      95  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_reservoirparam.csv
   161     3642 BATINCLUDE   157      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   162     3653 BATINCLUDE   157     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   163     3664 BATINCLUDE   157     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   164     3700 IF EXIST     157     127  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_techparam.csv
   165     3700 INCLUDE      157     127  ...C:\Local\remix-pic\REMix-pic\Process\225a\storage_techparam.csv
   166     3704 IF EXIST     157     129  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_techparam.csv
   167     3725 IF EXIST     157     150  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_sizeparam.csv
   168     3725 INCLUDE      157     150  ...C:\Local\remix-pic\REMix-pic\Process\225a\storage_sizeparam.csv
   169     3729 IF EXIST     157     152  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_sizeparam.csv
   170     3746 IF EXIST     157     169  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_socparam.csv
   171     3748 IF EXIST     157     171  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_socparam.csv
   172     3767 IF EXIST     157     190  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_degradationparam.csv
   173     3769 IF EXIST     157     192  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_degradationparam.csv
   174     3798 IF EXIST     157     221  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_levelprofile.csv
   175     3799 IF EXIST     157     222  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_levelprofile.csv
   176     3801 IF EXIST     157     224  ..C:\Local\remix-pic\REMix-pic\Process\225a\storage_levelprofile.csv
   177     4738 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   178     4803 IF EXIST     177      71  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_linksparam.csv
   179     4805 IF EXIST     177      73  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_linksparam.csv
   180     4821 IF EXIST     177      89  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_flowprofile.csv
   181     4823 IF EXIST     177      91  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_flowprofile.csv
   182     4843 IF EXIST     177     111  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_techparam.csv
   183     4845 IF EXIST     177     113  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_techparam.csv
   184     4860 IF EXIST     177     128  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_coefficient.csv
   185     4862 IF EXIST     177     130  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_coefficient.csv
   186     4876 IF EXIST     177     144  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_coefperflow.csv
   187     4878 IF EXIST     177     146  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_coefperflow.csv
   188     4893 IF EXIST     177     161  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_coefperlength.csv
   189     4895 IF EXIST     177     163  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_coefperlength.csv
   190     4909 IF EXIST     177     177  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_reactperlength.csv
   191     4911 IF EXIST     177     179  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_reactperlength.csv
   192     4925 IF EXIST     177     193  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_lengthparam.csv
   193     4927 IF EXIST     177     195  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_lengthparam.csv
   194     4941 IF EXIST     177     209  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_gridsegments.csv
   195     4943 IF EXIST     177     211  ..C:\Local\remix-pic\REMix-pic\Process\225a\transfer_gridsegments.csv
   196     5598 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   197     5636 IF EXIST     196      38  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_config.csv
   198     5636 INCLUDE      196      38  ...C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_config.csv
   199     5651 IF EXIST     196      40  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_config.csv
   200     5655 BATINCLUDE   196      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   201     5683 IF EXIST     196      62  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_profile.csv
   202     5683 INCLUDE      196      62  ...C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_profile.csv
   203     5689 IF EXIST     196      63  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_profile.csv
   204     5690 IF EXIST     196      64  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_profile.csv
   205     5692 IF EXIST     196      66  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_profile.csv
   206     5712 IF EXIST     196      86  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_annualsum.csv
   207     5712 INCLUDE      196      86  ...C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_annualsum.csv
   208     5723 IF EXIST     196      88  ..C:\Local\remix-pic\REMix-pic\Process\225a\sourcesink_annualsum.csv
   209     5726 BATINCLUDE   196      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   210     5914 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   211     6062 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   212     6129 INCLUDE      211      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     6419 INCLUDE      211      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   214     6709 INCLUDE      211      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   215     6999 INCLUDE      211     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   216     7094 INCLUDE      211     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   217     7189 INCLUDE      211     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   218     7288 INCLUDE      211     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   219     7582 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   220     7601 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   221     7666 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   222     7677 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   223     7686 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   224     7694 INCLUDE      223       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   225     7804 INCLUDE      223       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   226     8040 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   227     8049 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   228     8058 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   229     8067 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   230     8308 INCLUDE      229     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   231     9241 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        3.312 SECONDS     14 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/11/25 13:30:30 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8029


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.500E-03, 1.000E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 6.510E-04, 2.370E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/11/25 13:30:30 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8029


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS      708,955
BLOCKS OF VARIABLES          37     SINGLE VARIABLES      673,903
NON ZERO ELEMENTS     1,785,144


GENERATION TIME      =        2.969 SECONDS    426 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =        4.282 SECONDS    426 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/11/25 13:30:30 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8029


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8029

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE               21.9799

 RESOURCE USAGE, LIMIT          5.766   1209600.000
 ITERATION COUNT, LIMIT        46    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-pic\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-pic\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 240.12 Mb (peak 245.26 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 20.97 Mb (peak 54.52 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 5.42sec (det. 7578.11 ticks)


Optimal solution found
Objective:           21.979924

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        3.010e-09   3.873e-07   3.010e-09   3.873e-07
dual infeasibility          9.668e-10   2.652e-05   9.668e-10   2.652e-05
primal residual             1.522e-13   5.421e-13   1.522e-13   5.421e-13
dual residual               2.586e-12   1.017e-11   2.586e-12   1.017e-11
primal solution vector      7.011e+01   3.999e+03   7.011e+01   3.999e+03
dual solution vector        2.370e+02   2.589e+04   2.370e+02   2.589e+04
slacks                      9.345e+02   6.668e+03   9.345e+02   6.668e+03
reduced costs               8.358e+00   7.336e+03   8.358e+00   7.336e+03
comp. slackness viol.       2.187e-09   7.357e-06




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/11/25 13:30:30 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-pic\Process\cplex.opt


EXECUTION TIME       =        5.000 SECONDS    380 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-pic\Process\run_remix.lst
