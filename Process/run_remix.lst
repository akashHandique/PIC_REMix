GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/27/25 14:32:30 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/27/25 14:32:30"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "7b0100091cd01e67cbddf7d5ce74ebb9148a9789"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 831   
 832  map_accNodes(accNodesModel,accNodesModel_aggregation)
 833      $sum((nodesData, nodesModelToCalc)
 834              $( sameas(nodesModelToCalc,accNodesModel)
 835                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 836                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 837   
 838  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 839  map_accNodes(accNodesModel,accNodesModel) = yes;
 840  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 841  map_accLinks(accLinksModel,accLinksModel) = yes;
 842  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 843  map_accYears(accYears,accYears) = yes;
 844   
 845  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 846      $sum((nodesData)
 847              $( map_accNodesLoad(nodesData,accNodesModel)
 848                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 849   
 850  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 851  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 852  map_accLinksToCalc("global",linksModelToCalc) = yes;
 853  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 854  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 855  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 856   
 857  * Duplicate sets for postcalc reporting without horizon and accYears
 858  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 859  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 860  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 861  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 862   
 863  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 864  option map_nodesAccounting < map_accNodes;
 865   
 866  * ==== Generic sets  ====
 867  * These set names are repeated across different profile parameters.
 868  * they are not strictly related to each other and are not input data but
 869  * are needed for validation.
 870  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 871   
 872  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 873  * "Scenario indexes help to differentiate scenarios." /
 874   
 875  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 876  * "Capacity types differentiate investment decisions." /
 877   
 878  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 879  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 881  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 882  * SPDX-License-Identifier: BSD-3-Clause
 883   
 884  * // # accounting_input
 885  * // The parameters in this file describe the accounting of indicators in the model.
 886   
 887  * // ## Variables
 888  * // {special_table_input_variables}
1243   
1244  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1246  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1247  * SPDX-License-Identifier: BSD-3-Clause
1248   
1250   
1252   
1253  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1254  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1255      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1256      = yes;
1257   
1259  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1260  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1261      $sum((nodesData,accnodesData)
1262              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1263                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1264      = smax((nodesData,accnodesData)
1265              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1266                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1267          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1268      - smin((nodesData,accnodesData)
1269              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1270                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1271          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1272   
1273  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1275   
1276  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1277  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1278      $sum((nodesData,accnodesData)
1279              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1280                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1281      = sum((nodesData,accnodesData)
1282              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1283                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1284          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1285      / sum((nodesData,accnodesData)
1286              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1287                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1288          1);
1289   
1290  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1291  loop(accnodes,
1292  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1293      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1294                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1295      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1296              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1297  );
1298   
1299  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1300      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1301      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1302   
1303  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1304  loop(accYears,
1305  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1306      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1307              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1308      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1309              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1310  );
1311   
1312  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1314  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1315  * SPDX-License-Identifier: BSD-3-Clause
1316   
1318   
1320   
1321  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1322  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1323      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1324      = yes;
1325   
1327   
1328  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1329  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1330      $sum((nodesData,accnodesData)
1331              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1332                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1333      = sum((nodesData,accnodesData)
1334              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1335                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1336          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1337      / sum((nodesData,accnodesData)
1338              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1339                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1340          1);
1341   
1342  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1343  loop(accnodes,
1344  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1345      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1346                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1347      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1348              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1349  );
1350   
1351  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1352      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1353      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1354   
1355  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1356  loop(accYears,
1357  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1358      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1359              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1360      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1361              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1362  );
1363   
1364  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1366  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1367  * SPDX-License-Identifier: BSD-3-Clause
1368   
1370   
1372   
1373  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1374  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1375      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1376      = yes;
1377   
1379   
1380  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1381  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1382      $sum((nodesData,accnodesData)
1383              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1384                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1385      = sum((nodesData,accnodesData)
1386              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1387                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1388          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1389      / sum((nodesData,accnodesData)
1390              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1391                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1392          1);
1393   
1394  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1395  loop(accnodes,
1396  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1397      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1398                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1399      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1400              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1401  );
1402   
1403  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1404      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1405      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1406   
1407  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1408  loop(accYears,
1409  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1410      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1411              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1412      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1413              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1414  );
1415   
1416  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1418  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1419  * SPDX-License-Identifier: BSD-3-Clause
1420   
1422   
1424   
1425  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1426  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1427      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1428      = yes;
1429   
1431  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1432  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1433      $sum((nodesData,accnodesData)
1434              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1435                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1436      = smax((nodesData,accnodesData)
1437              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1438                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1439          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1440      - smin((nodesData,accnodesData)
1441              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1442                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1443          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1444   
1445  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1447   
1448  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1449  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1450      $sum((nodesData,accnodesData)
1451              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1452                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1453      = sum((nodesData,accnodesData)
1454              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1455                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1456          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1457      / sum((nodesData,accnodesData)
1458              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1459                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1460          1);
1461   
1462  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1463  loop(accnodes,
1464  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1465      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1466                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1467      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1468              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1469  );
1470   
1471  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1472      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1473      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1474   
1475  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1476  loop(accYears,
1477  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1478      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1479              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1480      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1481              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1482  );
1483   
1484  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1486  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1487  * SPDX-License-Identifier: BSD-3-Clause
1488   
1490   
1492   
1493  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1494  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1495      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1496      = yes;
1497   
1499  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1500  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1501      $sum((linksData,acclinksData)
1502              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1503                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1504      = smax((linksData,acclinksData)
1505              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1506                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1507          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1508      - smin((linksData,acclinksData)
1509              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1510                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1511          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1512   
1513  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1515   
1516  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1517  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1518      $sum((linksData,acclinksData)
1519              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1520                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1521      = sum((linksData,acclinksData)
1522              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1523                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1524          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1525      / sum((linksData,acclinksData)
1526              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1527                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1528          1);
1529   
1530  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1531  loop(acclinks,
1532  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1533      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1534                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1535      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1536              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1537  );
1538   
1539  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1540      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1541      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1542   
1543  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1544  loop(accYears,
1545  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1546      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1547              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1548      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1549              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1550  );
1551   
1552  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1554  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1555  * SPDX-License-Identifier: BSD-3-Clause
1556   
1558   
1560   
1561  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1562  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1563      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1564      = yes;
1565   
1567  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1568  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1569      $sum((linksData,acclinksData)
1570              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1571                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1572      = smax((linksData,acclinksData)
1573              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1574                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1575          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1576      - smin((linksData,acclinksData)
1577              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1578                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1579          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1580   
1581  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1583   
1584  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1585  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1586      $sum((linksData,acclinksData)
1587              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1588                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1589      = sum((linksData,acclinksData)
1590              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1591                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1592          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1593      / sum((linksData,acclinksData)
1594              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1595                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1596          1);
1597   
1598  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1599  loop(acclinks,
1600  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1601      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1602                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1603      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1604              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1605  );
1606   
1607  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1608      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1609      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1610   
1611  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1612  loop(accYears,
1613  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1614      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1615              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1616      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1617              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1618  );
1619   
1620  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1622  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1623  * SPDX-License-Identifier: BSD-3-Clause
1624   
1626   
1628   
1629  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1630  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1631      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1632      = yes;
1633   
1635   
1636  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1637  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1638      $sum((nodesData,accnodesData)
1639              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1640                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1641      = sum((nodesData,accnodesData)
1642              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1643                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1644          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1645      / sum((nodesData,accnodesData)
1646              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1647                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1648          1);
1649   
1650  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1651  loop(accnodes,
1652  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1653      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1654                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1655      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1656              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1657  );
1658   
1659  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1660      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1661      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1662   
1663  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1664  loop(accYears,
1665  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1666      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1667              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1668      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1669              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1670  );
1671   
1672  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1673   
1674  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1675  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1676      = sum((linksData)$sameas(linksModelToCalc,linksData),
1677              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1678   
1679  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1680      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1681              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1682   
1683  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1684  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1685      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1686          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1687   
1688  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1689      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1690      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1691              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1692          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1693   
1694  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1695  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1696      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1697      = yes;
1698   
1699  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1700  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1701      $sum((nodesDataToCalc,accnodesData)
1702              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1703                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1704      = sum((nodesDataToCalc,accnodesData)
1705              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1706                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1707          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1708      / sum((nodesDataToCalc,accnodesData)
1709              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1710                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1711          1);
1712   
1713  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1714   
1715  loop(accNodes,
1716  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1717      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1718              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1719          and map_accNodes(accNodesModel,accNodes)
1720              )
1721      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1722              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1723   
1724  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1725      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1726              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1727          and map_accNodes(accNodesModel,accNodes)
1728          and not sameas(accYears, "horizon"))
1729      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1730              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1731  );
1732   
1733  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1734      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1735          and sameas(accNodesModel,nodesModelToCalc)), 1)
1736      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1737          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1738   
1739  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1740      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1741          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1742      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1743          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1744   
1745   
1746  * Make sure all required indicators end up in the model
1747  set variableIndicators(accNodesModel,accYears,indicator);
1748  variableIndicators(accNodesModel,accYears,indicator)
1749     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1750        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1751     = yes;
1752   
1753  set activeIndicators(accNodesModel,accYears,indicator);
1754  activeIndicators(accNodesModel,accYears,indicator)
1755     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1760        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1761        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1762        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1763          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1764     = yes;
1765   
1766  set activeIndicators_links(linksModel,years,indicator);
1767  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1768     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1769        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1770        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1771     = yes;
1772   
1773  * Clear other dependencies and only add self mapping for variable and qp indicators
1774  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1775      $(variableIndicators(accNodesModel,accYears,indicator))
1776      = 0;
1777  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1778      $(variableIndicators(accNodesModel,accYears,indicator))
1779      = 1;
1780   
1781  * Calculate length of years and discount rates per indicator
1782  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1783  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1784      $(map_accYears(accYears_a,accYears)
1785          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1786      = 1;
1787   
1788  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1789      $(map_accYears(accYears_a,accYears)
1790          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1791          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1792      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1793   
1794  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1795      $(map_accYears(accYears_a,accYears)
1796          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1797          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1798          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1799          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1800      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1801   
1802  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1803      $(map_accYears(accYears_a,accYears)
1804          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1805          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1806          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1807      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1808          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1809                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1810   
1811  * Add self mapping for variable and qp indicators
1812  yearFactor(accNodesModel,accYears,indicator,accYears)
1813      $(variableIndicators(accNodesModel,accYears,indicator))
1814      = 1;
1815   
1816   
1817  * ==== calculate compound indicators for the optimization ====
1818  scalar compIndicators_pre;
1819  scalar compIndicators_post;
1820   
1821  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1822  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1823      $(activeIndicators(accNodesModel,accYears,indicator))
1824      = 1;
1825   
1826  set compoundIndicators_act(accNodesModel,accYears,indicator);
1827  option compoundIndicators_act < compoundIndicators;
1828   
1829  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1830  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1831  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1832      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1833   
1834  compIndicators_pre = 0;
1835  compIndicators_post = 1;
1836   
1837  option sparseval = 1;
1838  while(compIndicators_pre < compIndicators_post,
1839      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1840          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1841   
1842      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1843          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1844              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1845              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1846              and map_accYears(accYears_aa,accYears_a))
1847          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1848              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1849   
1850      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1851   
1852      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1853          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1854              and sum((accNodesModel_a,accYears_a,indicator_a)
1855                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1856          = sum((accNodesModel_a,accYears_a,indicator_a)
1857                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1858              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1859   
1860      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1861          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1862              and sum((accNodesModel_a,accYears_a,indicator_a)
1863                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1864          = sum((accNodesModel_a,accYears_a,indicator_a)
1865                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1866                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1867              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1868          / sum((accNodesModel_a,accYears_a,indicator_a)
1869                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1870                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1871   
1872      option compoundIndicators_act < compoundIndicators;
1873      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1874          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1875  );
1876  option sparseval = 0;
1877   
1878  * map to sub-years and sub-nodes
1879  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1880      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1881          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1882          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1883          and map_accYears(accYears_aa,accYears_a)
1884          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1885      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1886          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1887   
1888  * Remove all accounting regions and accounting years
1889  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1890      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1891          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1892          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1893              or sameas("horizon",accYears_aa)))
1894      = 0;
1895   
1896  * Remove all slack indicators except the ones declared in indicatorBounds
1897  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1898      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1899          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1900                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1901          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1902      = 0;
1903   
1904   
1905  * Map from extended parameter to final parameter
1906  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1907  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1908      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1909          and sum((accNodesModel_a,accYears_a,indicator_a)
1910                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1911      = sum((accNodesModel_a,accYears_a,indicator_a)
1912              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1913          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1914   
1915  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1916      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1917          and sum((accNodesModel_a,accYears_a,indicator_a)
1918                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1919      = sum((accNodesModel_a,accYears_a,indicator_a)
1920              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1921                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1922          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1923      / sum((accNodesModel_a,accYears_a,indicator_a)
1924              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1925                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1926   
1927  * Remove all accounting regions and accounting years
1928  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1929      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1930          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1931          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1932              or sameas("horizon",accYears_aa)))
1933      = 0;
1934   
1935  * Remove all slack indicators except the ones declared in indicatorBounds
1936  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1937      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1938          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1939          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1940      = 0;
1941   
1942   
1943  * ==== compound indicators for the post calculation ====
1944  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1945  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1946      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1947          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1948   
1949  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1950      $(activeIndicators(accNodesModel,accYears,indicator)
1951          or variableIndicators(accNodesModel,accYears,indicator))
1952      = 1;
1953   
1954  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1955  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1956   
1957  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1958  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1959  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1960   
1961  compIndicators_pre = 0;
1962  compIndicators_post = 1;
1963   
1964  option sparseval = 1;
1965  while(compIndicators_pre < compIndicators_post,
1966      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1967          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1968   
1969      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1970          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1971              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1972              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1973              and map_accYears(accYears_aa,accYears_a))
1974          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1975              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1976   
1977      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1978   
1979      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1980          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1981              and sum((accNodesModel_a,accYears_a,indicator_a)
1982                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1983          = sum((accNodesModel_a,accYears_a,indicator_a)
1984                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1985              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1986   
1987      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1988          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1989              and sum((accNodesModel_a,accYears_a,indicator_a)
1990                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1991          = sum((accNodesModel_a,accYears_a,indicator_a)
1992                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1993                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1994              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1995          / sum((accNodesModel_a,accYears_a,indicator_a)
1996                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1997                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1998   
1999      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2000      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2001          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2002  );
2003  option sparseval = 0;
2004   
2005  * map to sub-years and sub-nodes
2006  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2007      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2008          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2009          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
2010          and map_accYears(accYears_aa,accYears_a)
2011          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2012      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2013          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2014   
2015  * Remove all accounting regions and accounting years
2016  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2017      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2018          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2019          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2020              or sameas("horizon",accYears_aa)))
2021      = 0;
2022   
2023  * Remove all slack indicators except the ones declared in indicatorBounds
2024  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2025      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2026          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
2027                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
2028          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2029      = 0;
2030   
2031   
2032  * Map from extended parameter to final parameter
2033  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2034  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2035      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2036          and sum((accNodesModel_a,accYears_a,indicator_a)
2037                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2038      = sum((accNodesModel_a,accYears_a,indicator_a)
2039              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2040          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2041   
2042  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2043      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2044          and sum((accNodesModel_a,accYears_a,indicator_a)
2045                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2046      = sum((accNodesModel_a,accYears_a,indicator_a)
2047              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2048                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2049          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2050      / sum((accNodesModel_a,accYears_a,indicator_a)
2051              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2052                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2053   
2054  * Remove all accounting regions and accounting years
2055  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2056      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2057          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2058   
2059          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2060              or sameas("horizon",accYears_aa)))
2061      = 0;
2062   
2063  * Remove all slack indicators except the ones declared in indicatorBounds
2064  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2065      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2066          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
2067          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2068      = 0;
2069   
2070   
2071  * Check if the objective value and optimization sense is set correctly
2072  scalar opti_values, opti_sense;
2073  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2074  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2075  abort$(opti_values < 1)
2076      "Accounting: No indicator specified as objective value"
2077  abort$(opti_values > 1)
2078      "Accounting: Too many indicators specified as objective value"
2079  abort$(opti_sense <> -1 and opti_sense <> 1)
2080      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
2082  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2083  * SPDX-License-Identifier: BSD-3-Clause
2084   
2085  * Calculation of annuities
2086  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2087          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
2088          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2089      "Accounting: Some converter technologies use annuities but have no amortization time"
2090   
2091  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
2092  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2093      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
2094      =
2095      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
2096          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2097          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
2098      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2099          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
2100   
2101   
2102  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2103          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
2104          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2105      "Accounting: Some storage technologies use annuities but have no amortization time"
2106   
2107  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
2108  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2109      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
2110      =
2111      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
2112          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2113          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
2114      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2115          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
2116   
2117   
2118  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2119          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
2120          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2121      "Accounting: Some transfer technologies use annuities but have no amortization time"
2122   
2123  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
2124  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2125      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
2126      =
2127      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
2128          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2129          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
2130      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2131          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
2132   
2133   
2134   
2135  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2136          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2137          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2138      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2139   
2140  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2141  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2142   
2143  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2144      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2145      =
2146      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2147          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2148          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2149      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2150          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2151   
2155   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2157  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2158  * SPDX-License-Identifier: BSD-3-Clause
2159   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2164  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2165  * SPDX-License-Identifier: BSD-3-Clause
2166   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2171  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2172  * SPDX-License-Identifier: BSD-3-Clause
2173  * // # Output data
2174  * // This is the reference data model of the REMix output.
2175  * //
2176  * // ## Standard output
2179   
2186   
2188   
2189  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2190  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2191  set profileType / "upper", "fixed", "lower" /;
2192  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2193   
2194  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2195  * // ### indicator_accounting
2196  * // Title: Accounting indicators Post-calculation
2197  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2198  * //
2199  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2200  * // ### indicator_accounting_ref
2201  * // Title: Accounting indicators reference
2202  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2203  * //
2204  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2205  * // ### indicator_accounting_var
2206  * // Title: Accounting indicators variable states
2207  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2208  * //
2209  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2210  * // ### indicator_accounting_comp
2211  * // Title: Accounting indicators composition
2212  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2213  * //
2214  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2215  * // ### indicator_accounting_detailed
2216  * // Title: Accounting indicators detail
2217  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2218  * //
2219  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2220  * // ### indicator_accounting_links
2221  * // Title: Accounting indicators per transfer link
2222  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2223  * //
2224  parameter converter_ratedInput(techs,vintage,commodity);
2225  parameter converter_ratedOutput(techs,vintage,commodity);
2226  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2227  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2228   
2229  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2230  * // ### converter_caps
2231  * // Title: Coverter capacities post-calculation
2232  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2233  * //
2234  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2235  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2236   
2237  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2238  * // ### converter_units
2239  * // Title: Coverter units post-calculation
2240  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2241  * //
2242  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2243   
2244  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2245  parameter max_transfer_coefficient(techs,commodity);
2246  parameter min_transfer_coefficient(techs,commodity);
2247  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2248  * // ### transfer_links
2249  * // Title: Transfer post-calculation
2250  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2251  * //
2252  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2253  * // ### transfer_caps
2254  * // Title: Transfer capacities post-calculation
2255  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2256  * //
2257  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2258  * // ### transfer_flows
2259  * // Title: Transfer hourly flows
2260  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2261  * //
2262  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2263  * // ### transfer_flows_annual
2264  * // Title: Transfer annual flows
2265  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2266  * //
2267  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2268  * // ### transfer_losses
2269  * // Title: Transfer hourly losses
2270  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2271  * //
2272  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2273  * // ### transfer_losses_annual
2274  * // Title: Transfer annual losses
2275  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2276  * //
2277  parameter storage_size_max(nodesModel,years,techs,commodity);
2278  parameter storage_size_min(nodesModel,years,techs,commodity);
2279  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2280  * // ### storage_units
2281  * // Title: Storage units post-calculation
2282  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2283  * //
2284  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2285  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2286  * // ### storage_caps
2287  * // Title: Storage capacities post-calculation
2288  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2289  * //
2290  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2291  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2292  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2293  * // ### storage_level_out
2294  * // Title: Storage level
2295  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2296  * //
2297  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2298  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2299  * // ### storage_flows
2300  * // Title: Storage hourly flows
2301  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2302  * //
2303  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2304  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2305  * // ### storage_flows_annual
2306  * // Title: Storage annual flows
2307  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2308  * //
2309  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2310  * // ### storage_losses_out
2311  * // Title: Storage hourly losses
2312  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2313  * //
2314  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2315  * // ### storage_losses_annual
2316  * // Title: Storage annual losses
2317  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2318  * //
2319  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2320  * // ### commodity_balance
2321  * // Title: Hourly commodity balance
2322  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2323  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2324  * //
2325  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2326  * // ### commodity_balance_annual
2327  * // Title: Annual commodity balance
2328  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2329  * //
2330  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2331  * // ### marginals_sourcesink_profile
2332  * // Title: Source-sink marginals
2333  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2334  * //
2335  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2336  * // ### marginals_balance
2337  * // Title: Nodel balance marginals
2338  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2339  * //
2340  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2341  * // ### marginals_sourcesink_sum
2342  * // Title: Source-sink annual marginals
2343  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2344  * //
2345  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2346  * // ### marginals_indicator_bounds
2347  * // Title: Indicator bounds marginals
2348  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2349  * //
2350  * // ## REMix-AMIRIS interface output
2351  * //
2352  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2353  * // ### r2a_annuity_cost_converter
2354  * // Title: Converter annuity cost
2355  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2356  * //
2357  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2358  * // ### r2a_spec_cost_converter
2359  * // Title: Converter specific cost
2360  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2361  * //
2362  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2363  * // ### r2a_spec_cost_fuel
2364  * // Title: Commodity specific cost
2365  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2366  * //
2367  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2368  * // ### r2a_spec_cost_indicator
2369  * // Title: Indicator specific cost
2370  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2371  * //
2372  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2373  * // ### r2a_converter_efficiencies
2374  * // Title: Indicator specific cost
2375  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2376  * //
2377  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2378  * // ### r2a_converter_avail_factor
2379  * // Title: Converter availability factor
2380  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2381  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2382  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2383  * //
2384  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2385  * // ### r2a_storage_e2p
2386  * // Title: E2P Storage
2387  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2388  * //
2389  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2390  * // ### r2a_storage_selfdischarge
2391  * // Title: Storage self discharge rates
2392  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2393   
2394  set attribute(*)
2395       /
2396      "variables"
2397      "equations"
2398      "iterations"
2399      /;
2400   
2401  parameter diagnostics(attribute);
2402   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2406  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2407  * SPDX-License-Identifier: BSD-3-Clause
2408   
2409  * ==== global settings ====
2411   
2413   
2415   
2417   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2419  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2420  * SPDX-License-Identifier: BSD-3-Clause
2421   
2422  * // # core_converter
2423  * // The equations in this file describe the converters in the model.
2424   
2425  * // ## Advanced features
2426  * //
2427  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2428  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2429  * //
2430  * // In the following table you can see which modifications you have to make to your data to use the different features.
2431  * //
2432  * // | Feature | Modification |
2433  * // | ------ | ------ |
2434  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2435  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2436  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2437  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2438  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2439  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2440   
2441  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2442  * //
2443  * // ### set_converter_techs.dat
2444  * // In this file all converter technologies are listed that can be used within your model.
2445  * //
2446  * // ### set_activities.dat
2447  * // All modes with which the converter technologies can be operated need to be added here.
2448  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2449  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2450  * //
2451  * // ### set_commodities.dat
2452  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2453  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2454   
2455  * // ## Variables
2456  * // {special_table_converter_variables}
3123   
3124  * // ## Load units from gdx file
3126   
3127   
3128  * ==== calculation of mappings ====
3129   
3130  * Technologies with a lifeTime > 0 are available
3131  set converter_availTech(nodesModel,years,converter_techs,vintage);
3132  converter_availTech(nodesModel,years,converter_techs,vintage)
3133      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3134          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3135   
3136  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3137  converter_availTech(nodesModel,years,converter_techs,vintage)
3138      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3139   
3140  * Technologies already built become unavailable if they have an unitsBuild of 0
3141  converter_availTech(nodesModel,years,converter_techs,vintage)
3142      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3143   
3144  * Used technologies are available technologies over their technical lifeTime
3145  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3146  converter_usedTech(nodesModel,years,converter_techs,vintage)
3147      $(vintage.val <= years.val
3148          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3149                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3150          ) = yes;
3151   
3152  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
3153  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3154  converter_decomTech(nodesModel,years,converter_techs,vintage)
3155    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3156                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3157      and sum(yearsToCalc
3158        $(sameas(years, yearsToCalc)
3159          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3160          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3161    = yes;
3162   
3163  converter_decomTech(nodesModel,years,converter_techs,vintage)
3164    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3165                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3166      and sum(yearsToCalc
3167        $(sameas(years, yearsToCalc)
3168          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3169          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3170    = yes;
3171   
3172  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
3173  converter_decomTech(nodesModel,years,converter_techs,vintage)
3174    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
3175      and sum(yearsToCalc
3176        $(sameas(years, yearsToCalc)
3177          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
3178    = yes;
3179   
3180  * Extend the decom frame to the model year after the last model year of usedTech
3181  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3182    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3183      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3184    = yes;
3185   
3186  * Mapping for used activities and commodities
3187  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3188  option converter_usedActCom < converter_coefficient;
3189   
3190  set converter_usedAct(converter_techs,vintage,activity);
3191  option converter_usedAct < converter_usedActCom;
3192   
3193  set converter_usedCom(converter_techs,vintage,commodity);
3194  option converter_usedCom < converter_usedActCom;
3195   
3196  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3197  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3198      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3199          and converter_usedAct(converter_techs,vintage,activity))
3200      = yes;
3201   
3202  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3203  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3204    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3205      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
3206    = 1;
3207   
3208  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3209  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3210    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3211      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
3212    = 1;
3213   
3214   
3215  * ==== aggregation of profiles ====
3216   
3217  * derive upper and lower profiles then aggregate
3218  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3219  option converter_activity_hasProfileIn < converter_activityProfileIn;
3220   
3221  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3222  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3223      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3224              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
3225   
3226  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3227  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3228   
3229  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3230  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3231      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3232              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
3233   
3234  * aagregate time dimension
3235  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3236  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3237    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3238    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
3239            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3240            / timeLength(timeModelToCalc));
3241  option clear = converter_activityProfileIn;
3242   
3243  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3244  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3245  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3246      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3247  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3248      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3249   
3250   
3251  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3252  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3253      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3254          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3255   
3256  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3257  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3258      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3259   
3260  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3261      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3262          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3263      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3264                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3265                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3266                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
3267      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3268              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3269   
3270  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3271      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3272          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3273      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3274                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3275                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
3276      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3277                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3278              1);
3279  option clear = converter_activityProfileIn_aggTime;
3280   
3281  * for fixed profiles overwrite upper and lower profile
3282  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3283      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3284      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3285   
3286  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3287      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3288      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3289   
3293   
3294  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3295  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3296  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3297      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3298   
3299  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3300      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3301          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3302      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3303            sum(timeData$timeMapping(timeData,timeModelToCalc),
3304                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3305                / timeLength(timeModelToCalc)
3306              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
3307      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3308              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3309   
3310  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3311      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3312          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3313      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3314                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3315            sum(timeData$timeMapping(timeData,timeModelToCalc),
3316                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3317                / timeLength(timeModelToCalc))
3318      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3319                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3320   
3323   
3324  * reduce coefficient delay based on time resolution
3325  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
3326    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
3327    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
3329   
3330  * ==== prepare partial load behavior parameters ====
3331   
3332  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3333  alias(commodity, com);
3334  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3335      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3336        and converter_usedAct(converter_techs,vintage,activity))
3337      = 1;
3338   
3339  * indicate that at least one activity of a technology makes use of partial load behavior
3340  set converter_hasMaxLoad(converter_techs,vintage);
3341  converter_hasMaxLoad(converter_techs,vintage)
3342    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3343              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3344   
3345  set converter_hasMinLoad(converter_techs,vintage);
3346  converter_hasMinLoad(converter_techs,vintage)
3347    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3348              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3349   
3350  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3351  converter_hasConstantFluxInActivity(converter_techs,vintage)
3352    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3353                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3354   
3355  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3356  set pc_converter_activityRequirements
3357      /
3358      minLoad             "Lower profile for converter activity"
3359      maxLoad             "Upper profile for converter activity"
3360      /;
3361  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3362  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3363    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3364  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3365    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3366   
3367  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3368   
3369  set converter_hasMinUptime(converter_techs,vintage);
3370  converter_hasMinUptime(converter_techs,vintage)
3371    $(converter_techParam(converter_techs,vintage,"minUptime")
3372      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3373    = yes;
3374   
3375  set converter_hasMinDowntime(converter_techs,vintage);
3376  converter_hasMinDowntime(converter_techs,vintage)
3377    $(converter_techParam(converter_techs,vintage,"minDowntime")
3378      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3379    = yes;
3380   
3381  * require integer unit counts if online state is to be tracked
3382  converter_techParam(converter_techs,vintage,"mipUnits")
3383      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3384        or converter_hasMinLoad(converter_techs, vintage)
3385        or converter_hasMaxLoad(converter_techs, vintage)
3386        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3387      = 1;
3388   
3389  * ==== floor mip converter units to integer values ====
3390  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3391      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3392      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3393  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3394      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3395      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3396   
3397  * ==== scalars and sets for minUptime and minDowntime ====
3398   
3399  scalar converter_maxUptimeReq;
3400  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3401  set uptimeSearchRange(timeModelToCalc);
3402  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3403   
3404  scalar converter_maxDowntimeReq;
3405  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3406  set downtimeSearchRange(timeModelToCalc);
3407  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3408   
3409  * ==== definition of variables ====
3410   
3411  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3412      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3413        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3414      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3415  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3416      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3417        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3418      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3419  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3420      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3421        and (converter_hasMinLoad(converter_techs, vintage)
3422              or converter_hasMaxLoad(converter_techs, vintage)))
3423      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3424   
3425   
3426  * Initialise variables for unitsBuild
3427  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3428      $converter_availTech(nodesModel,years,converter_techs,vintage)
3429      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3430  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3431      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3432      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3433  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3434      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3435      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3436   
3437  * Initialise variables for unitsDecom
3438  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3439    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3440      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3441    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3442                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3443                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3444                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3445          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3446   
3447  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3448    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3449    = sum(years$
3450          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3451            and converter_availTech(nodesModel,years,converter_techs,vintage)
3452            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3453            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3454        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3455      + sum(yearsToCalc_a$
3456          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3457            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3458            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3459            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3460        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3461        ;
3462   
3463  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3464      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3465          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3466      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3467   
3468   
3470   
3471   
3472  * Calculate planned unit expansion
3473  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3474  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3475  loop(years,
3476    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3477      =
3478      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3479          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3480      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3481          $converter_availTech(nodesModel,years,converter_techs,vintage)
3482      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3483          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3484  );
3485   
3486  * Set initial state for planned units
3487  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3488    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3489   
3490   
3491  * // ## Load units from gdx file
3493   
3494  * Calculate if planned unit expansion is bounded by upper and lower limits
3495  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3496  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3497    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3498          converter_techParam(converter_techs,vintage,"freeDecom"))
3499    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3500          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3501      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3502    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3503          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3504      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3505    = yes;
3506   
3507  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3508  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3509    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3510      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3511    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3512  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3513    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3514      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3515    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3516  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3517    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3518      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3519    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3520   
3521   
3522  * Add parameter for fixing capacities during myopic runs
3523  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3524  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3525  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3526   
3527  * Fix activities of upper limit if upper limit is zero
3528  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3529    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3530      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3531      = 0;
3532   
3533   
3534  * ==== declaration of equations ====
3535   
3536  equations
3537    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3538      ) "Ensures the units balance over the planning period."
3539    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3540      ) "Ensures the units balance over the planning period."
3541    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3542      ) "Restricts the free decommissioning of units over the planning period."
3543    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3544      ) "Upper bound for the total number of units."
3545    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3546      ) "Lower bound for the total number of units."
3547    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3548      ) "Fixed bound for the total number of units."
3549    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3550      ) "Fixes the total number of units to the corresponding integer variable."
3551    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3552      ) "Fixes the number of online units to the corresponding integer variable."
3553   
3554    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3555      ) "Lower limit on the activity."
3556    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3557      ) "Upper limit on the activity."
3558   
3559    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3560      ) "Fixed limit on the activity."
3561    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3562      ) "Positive ramping of unit activity."
3563    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3564      ) "Negative ramping of unit activity."
3565    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3566      ) "Restrict ramping up of unit activity."
3567   
3568    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3569      ) "Set online units to total number of operational units."
3570    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3571      ) "Allow shutting down units."
3572    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3573      ) "Variable counting the number of unit startups."
3574    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3575      ) "Variable tracking the number of unit shutdowns."
3576    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3577      ) "Limit the number of startup cycles a unit can perform."
3578    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3579      ) "Require recently started units to remain online for their respective minimum uptime."
3580    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3581      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3582    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3583      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3584    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3585      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3586    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3587      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3588    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3589      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3590    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3591      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3592    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3593      ) "Limit usage of an activity to corresponding units."
3594    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3595      ) "Limit usage of an activity to corresponding units."
3596    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3597      ) "Limit the number of units in one particular mode to the number of operational units."
3598    ;
3599   
3600  * ==== equation definition ====
3601  * // ## Equations
3602  * // ### Converter Units Balance
3603  * // Ensures that the total units are consistent with the built and decommissioned units.
3604  * // {Eq_converter_unitsBalance}
3605   
3606  * Equation using build only
3607  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3608      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3609            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3610          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3611          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3612      ..
3613      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3614      =e=
3615      sum ((years_a)
3616              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3617                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3618                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3619                  and years_a.val <= yearsSel.val ),
3620            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3621   
3622      + sum ((yearsToCalc)
3623              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3624                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3625                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3626                  and yearsToCalc.val <= yearsSel.val ),
3627            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3628   
3629  * Equation using build and decom
3630  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3631      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3632            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3633          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3634          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3635      ..
3636      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3637      =e=
3638      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3639        sum(years$sameas(years, yearsToCalc),
3640          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3641            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3642      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3643        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3644          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3645      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3646          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3647      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3648          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3649      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3650          ;
3651   
3652  * // ### Converter Units Free Decommission
3653  * // Restricts the free decommissioning of units over the planning period.
3654  * // {Eq_converter_unitsFreeDecom}
3655  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3656      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3657          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3658      ..
3659      sum(years$
3660            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3661              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3662          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3663      + sum(yearsToCalc$
3664            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3665              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3666              and yearsToCalc.val <= yearsSel.val),
3667          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3668      =g=
3669      sum(years$
3670            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3671              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3672              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3673          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3674      + sum(yearsToCalc$
3675            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3676              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3677              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3678          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3679   
3680  * // ### Converter Units Upper Limit
3681  * // Upper bound for the total number of units.
3682  * // {Eq_converter_unitsUpperLimit}
3683  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3684      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3685          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3686          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3687              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3688      ..
3689      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3690          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3691      =l=
3692      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3693   
3694  * // ### Converter Units Lower Limit
3695  * // Lower bound for the total number of units.
3696  * // {Eq_converter_unitsLowerLimit}
3697  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3698      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3699          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3700              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3701      ..
3702      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3703          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3704      =g=
3705      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3706   
3707  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3708      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3709          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3710      ..
3711      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3712          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3713      =e=
3714      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3715   
3716  * // ### Converter Units Total MIP
3717  * // Fixes the total number of units to the corresponding integer variable.
3718  * // {Eq_converter_unitsTotalMIP}
3719  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3720      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3721          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3722      ..
3723      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3724      =e=
3725      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3726   
3727  * // ### Converter Units Online MIP
3728  * // Fixes the number of online units to the corresponding integer variable.
3729  * // {Eq_converter_unitsOnlineMIP}
3730  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3731      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3732          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3733      ..
3734      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3735      =e=
3736      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3737   
3738  * // ### Converter Activity Lower Limit
3739  * // Lower limit on the activity.
3740  * // {Eq_converter_activityLowerLimit}
3741  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3742      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3743          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3744          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3745              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3746          and not converter_hasMinLoad(converter_techs, vintage))
3747      ..
3748      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3749          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3750      )
3751      =g=
3752      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3755      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3758   
3759  * // ### Converter Activity Upper Limit
3760  * // Upper limit on the activity.
3761  * // {Eq_converter_activityUpperLimit}
3762  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3763      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3764          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3765          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3766               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3767      ..
3768      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3769          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3770      )
3771      =l=
3772      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3775      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3778   
3779  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3780      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3781          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3782               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3783      ..
3784      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3785          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3786      )
3787      =e=
3788      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3791      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3794   
3795  * // ### Converter Positive Ramping
3796  * // Positive ramping of unit activity.
3797  * // {Eq_converter_rampPos}
3798  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3799    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3800        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3801      ..
3802      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3803      =g=
3804      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3805              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3806              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3807   
3808  * // ### Converter Negative Ramping
3809  * // Negative ramping of unit activity.
3810  * // {Eq_converter_rampNeg}
3811  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3812    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3813        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3814      ..
3815      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3816      =g=
3817      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3818              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3819              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3820   
3821  * // ### Converter Ramping Limit
3822  * // Restrict ramping up of unit activity.
3823  * // {Eq_converter_rampLimit}
3824  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3825    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3826          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3827      ..
3828      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3829              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3830              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3831    =l=
3832    converter_techParam(converter_techs,vintage,"activityRampLimit")
3835      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3838   
3841   
3842  * // ### Converter Units Online
3843  * // Set converter units online to total converter units for non-MIP case.
3844  * // {Eq_converter_unitsOnline}
3845  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3846      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3847          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3848    ..
3849    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3850    =e=
3851    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3852      ;
3853   
3854  * // ### Converter MIP Units Shutting Down
3855  * // Allow shutting down units.
3856  * // {Eq_converter_unitsOnlineUC}
3857  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3858      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3859          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3860    ..
3861    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3862    =l=
3863    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3864      ;
3867   
3868  * // ### Converter Activity Startups
3869  * // Variable counting the number of unit startups.
3870  * // {Eq_converter_activityStartups}
3871  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3872    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3873          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3874      ..
3875      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3876      =g=
3877          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3878      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3879   
3880  * // ### Converter Activity Shutdowns
3881  * // Variable tracking the number of unit shutdowns.
3882  * // {Eq_converter_activityShutdowns}
3883  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3884    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3885          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3886          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3887      ..
3888      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3889      =g=
3890          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3891      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3892   
3893  * // ### Converter Activity Startup Limit
3894  * // Limit the number of startup cycles a unit can perform.
3895  * // {Eq_converter_limitStartups}
3896  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3897    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3898          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3899      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3900      ..
3901      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3902    =l=
3903    converter_techParam(converter_techs,vintage,"startupLimit")
3904    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3905   
3906  alias(timeModelToCalc,ttc);
3907   
3908  * // ### Converter Units Minimum Uptime
3909  * // Require recently started units to remain online for their respective minimum uptime.
3910  * // {Eq_converter_minUptime}
3911  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3912    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3913          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3914      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3915      ..
3916      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3917          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3918              nodesModelSel,yearsSel,converter_techs,vintage))
3919          =l=
3920          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3921   
3922  * // ### Converter Units Minimum Downtime
3923  * // Require recently shut down units to remain offline for their respective minimum downtime.
3924  * // {Eq_converter_minDowntime}
3925  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3926    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3927          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3928      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3929      ..
3930      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3931          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3932              nodesModelSel,yearsSel,converter_techs,vintage))
3933          =l=
3934          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3935      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3936   
3937  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3938  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3939  alias(activity, act);
3940   
3941  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3942  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3943  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3944  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3945    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3946          and converter_hasMinLoad(converter_techs, vintage)
3947          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3948      ..
3949      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3950                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3951               and converter_usedAct(converter_techs,vintage,act)),
3952      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3953    =l=
3954    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3955      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3956                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3957                 and converter_usedAct(converter_techs,vintage,act)),
3958      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3959   
3960  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3961  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3962  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3963  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3964    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3965          and converter_hasMaxLoad(converter_techs,vintage)
3966          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3967      ..
3968      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3969                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3970               and converter_usedAct(converter_techs,vintage,act)),
3971      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3972    =l=
3973      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3974                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3975               and converter_usedAct(converter_techs,vintage,act)),
3976      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3977            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3978            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3979   
3980  * This equation is meant to enforce the lower limit requirements of activities in use.
3981  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3982  * because these activities can only run on units in the respectively strict activation state.
3983   
3984  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3985  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3986  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3987  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3988    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3989          and converter_hasMinLoad(converter_techs, vintage)
3990          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3991      ..
3992      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3993                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3994               and converter_usedAct(converter_techs,vintage,act)),
3995      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3996    =g=
3997      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3998                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3999               and converter_usedAct(converter_techs,vintage,act)),
4000      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
4001            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4002            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
4003   
4004   
4005  * Simple one-activity-per-unit partial load equations
4006  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
4007  * // Enforce MIP units partial load upper limit.
4008  * // {Eq_converter_activityUpperLimitPartLoad}
4009  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4010    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4011          and (converter_hasMinLoad(converter_techs, vintage)
4012                or converter_hasMaxLoad(converter_techs, vintage)
4013                or converter_hasConstantFluxInActivity(converter_techs, vintage))
4014          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4015      ..
4016      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4017    =l=
4018    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
4019          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
4020          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4021   
4022  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
4023  * // Enforce MIP units partial load lower limit.
4024  * // {Eq_converter_activityLowerLimitPartLoad}
4025  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4026    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4027          and (converter_hasMinLoad(converter_techs, vintage)
4028                or converter_hasMaxLoad(converter_techs, vintage))
4029          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4030      ..
4031      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4032    =g=
4033    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
4034          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
4035          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4036   
4037  * // ### Converter MIP Units Idle Online Units
4038  * // Counts idle online units at every time step
4039  * // {Eq_converter_noOnlineIdle}
4040  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4041    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4042          and (converter_hasMinLoad(converter_techs, vintage)
4043              or converter_hasMaxLoad(converter_techs, vintage)
4044              or converter_hasConstantFluxInActivity(converter_techs,vintage))
4045          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4046      ..
4047      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4048      =e=
4049      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4050            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4051   
4052  * // ### Converter MIP Units Idle Online Units Partial load
4053  * // Counts idle online units at every time step
4054  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
4055  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4056    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
4057          and (converter_hasMinLoad(converter_techs, vintage)
4058                  or converter_hasMaxLoad(converter_techs, vintage))
4059          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4060      ..
4061      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4062      =l=
4063      sum(activity$converter_usedAct(converter_techs,vintage,activity),
4064            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
4065   
4066  * // ### Converter MIP activity model limit
4067  * // Converter activity model limit
4068  * // {Eq_converter_activityModeLimit}
4069  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
4070    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
4071          and (converter_hasMinLoad(converter_techs, vintage)
4072                or converter_hasMaxLoad(converter_techs, vintage))
4073          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
4074      ..
4075      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
4076      =g=
4077      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
4078   
4079  * ==== model definition ====
4080   
4081  Model M_converter
4082  /
4083    Eq_converter_unitsBalance
4084    Eq_converter_unitsBalanceFreeDecom
4085    Eq_converter_unitsFreeDecom
4086    Eq_converter_unitsUpperLimit
4087    Eq_converter_unitsLowerLimit
4088    Eq_converter_unitsFixedLimit
4089    Eq_converter_unitsTotalMIP
4090    Eq_converter_unitsOnlineMIP
4091    Eq_converter_activityUpperLimit
4092    Eq_converter_activityLowerLimit
4093    Eq_converter_activityFixedLimit
4094    Eq_converter_rampPos
4095    Eq_converter_rampNeg
4096    Eq_converter_rampLimit
4099    Eq_converter_unitsOnline
4100    Eq_converter_unitsOnlineUC
4103    Eq_converter_activityStartups
4104    Eq_converter_activityShutdowns
4105    Eq_converter_limitStartups
4106    Eq_converter_minUptime
4107    Eq_converter_minDowntime
4108    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4109    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4110    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4111    Eq_converter_activityUpperLimitPartLoad
4112    Eq_converter_activityLowerLimitPartLoad
4113    Eq_converter_noOnlineIdle
4114    Eq_converter_noOnlineIdleDetailedPartLoad
4115    Eq_converter_activityModeLimit
4116  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
4118  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4119  * SPDX-License-Identifier: BSD-3-Clause
4120   
4121  * // # core_storage
4122  * // The equations in this file describe the storages in the model.
4123   
4124  * // ## Variables
4125  * // {special_table_storage_variables}
4398   
4399   
4400  * === SoC mappings ===
4401  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4402  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4403      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4404        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4405      = yes;
4406   
4407  set storage_validSoCRange(storage_techs,vintage);
4408  storage_validSoCRange(storage_techs,vintage)
4409      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4410        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4411   
4412  * === Translate SoC parameters to ordered SoC-set ===
4413  * set ordered_socs / soc1*soc20 /;
4414  * alias(soc_states, soc_states_c);
4415  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4416  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4417  *     $storage_validSoCRange(storage_techs,vintage)
4418  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4419  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4420  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4421  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4422  *
4423  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4424  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4425  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4426  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4427  *     = yes;
4428   
4429  parameter storage_bigM(storage_techs,vintage);
4430  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4431  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4432  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4433   
4434  * === calculate the number of years represented by single year to calc ===
4435  alias(yearsToCalc, yearsToCalc_a)
4436  parameter representedYears(years);
4437  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4438                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4439   
4440  * ==== calculation of mappings ====
4441   
4442  * Technologies with a lifeTime > 0 are available
4443  set storage_availTech(nodesModel,years,storage_techs,vintage);
4444  storage_availTech(nodesModel,years,storage_techs,vintage)
4445      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4446          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4447   
4448  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4449  storage_availTech(nodesModel,years,storage_techs,vintage)
4450      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4451   
4452  * Technologies already built become unavailable if they have an unitsBuild of 0
4453  storage_availTech(nodesModel,years,storage_techs,vintage)
4454      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4455   
4456  * Used technologies are available technologies over their technical lifeTime
4457  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4458  storage_usedTech(nodesModel,years,storage_techs,vintage)
4459      $(vintage.val <= years.val
4460          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4461                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4462          ) = yes;
4463   
4464  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4465  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4466  storage_decomTech(nodesModel,years,storage_techs,vintage)
4467    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4468                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4469      and sum(yearsToCalc
4470        $(sameas(years, yearsToCalc)
4471          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4472          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4473    = yes;
4474   
4475  storage_decomTech(nodesModel,years,storage_techs,vintage)
4476    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4477                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4478      and sum(yearsToCalc
4479        $(sameas(years, yearsToCalc)
4480          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4481          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4482    = yes;
4483   
4484  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4485  storage_decomTech(nodesModel,years,storage_techs,vintage)
4486    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4487      and sum(yearsToCalc
4488        $(sameas(years, yearsToCalc)
4489          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4490    = yes;
4491   
4492  * Extend the decom frame to the year after the last year of usedTech
4493  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4494    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4495      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4496    = yes;
4497   
4498  * Mapping for used commodities
4499  set storage_usedCom(storage_techs,vintage,commodity);
4500  option storage_usedCom < storage_sizeParam;
4501   
4502  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4503  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4504      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4505          and storage_usedCom(storage_techs,vintage,commodity))
4506      = yes;
4507   
4508   
4509  * // ## Load units from gdx file
4511   
4512   
4513  * ==== aggregation of profiles ====
4514  * derive upper and lower profiles then aggregate
4515  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4516  option storage_level_hasProfileIn < storage_levelProfileIn;
4517   
4518  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4519  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4520      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4521              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4522   
4523  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4524  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4525  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4526      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4527  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4528      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4529   
4530  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4531  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4532                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4533   
4534  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4535      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4536          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4537      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4538              sum(timeData$timeMapping(timeData,timeModelToCalc),
4539                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4540                / timeLength(timeModelToCalc)
4541              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4542      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4543              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4544   
4545  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4546      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4547          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4548                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4549      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4550                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4551              sum(timeData$timeMapping(timeData,timeModelToCalc),
4552                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4553                / timeLength(timeModelToCalc))
4554      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4555                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4556   
4557  * for fixed profiles overwrite upper and lower profile
4558  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4559      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4560      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4561   
4562  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4563      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4564      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4565   
4566  * storage initial level
4567   
4568  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4569      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4570          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4571      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4572            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4573              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4574      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4575              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4576   
4577  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4578      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4579          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4580                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4581      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4582                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4583            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4584      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4585                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4586   
4587  * ==== parameter modifications ====
4588  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4589          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4590      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4591  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4592          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4593      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4594   
4595   
4596  * ==== definition of variables ====
4597   
4598  * Initialise variables for unitsBuild
4599  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4600      $storage_availTech(nodesModel,years,storage_techs,vintage)
4601      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4602  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4603      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4604      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4605  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4606      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4607      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4608   
4609  * Initialise variables for unitsDecom
4610  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4611      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4612        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4613      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4614                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4615                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4616                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4617          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4618   
4619  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4620    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4621    = sum(years$
4622          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4623            and storage_availTech(nodesModel,years,storage_techs,vintage)
4624            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4625            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4626        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4627      + sum(yearsToCalc_a$
4628          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4629            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4630            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4631            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4632        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4633        ;
4634   
4635  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4636      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4637        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4638      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4639   
4640   
4642   
4643   
4644  * Calculate planned unit expansion
4645  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4646  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4647  loop(years,
4648    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4649      =
4650      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4651          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4652      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4653          $storage_availTech(nodesModel,years,storage_techs,vintage)
4654      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4655          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4656  );
4657   
4658  * Set initial state for planned units
4659  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4660    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4661   
4662  * // ## Load units from gdx file
4664   
4665  * Calculate if planned unit expansion is bounded by upper and lower limits
4666  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4667  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4668    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4669          storage_techParam(storage_techs,vintage,"freeDecom"))
4670    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4671          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4672      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4673    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4674          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4675      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4676    = yes;
4677   
4678  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4679  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4680    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4681      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4682    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4683  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4684    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4685      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4686    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4687  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4688    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4689      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4690    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4691   
4692  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4693      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4694        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4695      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4696   
4697  * Add parameter for fixing capacities during myopic runs
4698  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4699  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4700  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4701   
4702  * ==== declaration of equations ====
4703   
4704  equations
4705    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4706      ) "Ensures the units balance over the planning period."
4707    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4708      ) "Ensures the units balance over the planning period."
4709    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4710      ) "Restricts the free decommissioning of units over the planning period."
4711    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4712      ) "Upper bound for the total number of units."
4713    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4714      ) "Lower bound for the total number of units."
4715    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4716      ) "Fixes the total number of units to the corresponding integer variable."
4717   
4718    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4719      ) "Upper bound for the total number of units."
4720    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4721      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4722    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4723      ) "Lower bound for the total number of units."
4724    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4725      ) "Stored commodities lost due to self discharge."
4726    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4727      ) "Currently available units must have been built at some point in time and have some state of degradation."
4728    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4729      ) "There cannot be more units from a certain year than the amount built in that year."
4730    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4731      ) "There is no recovery."
4732    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4733      ) "Limit charging rate based on unit capacity."
4734    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4735      ) "Limit discharging rate based on unit capacity."
4736    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4737      ) "Positive change in state of charge is influx."
4738    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4739      ) "Negative change in state of charge is outflux."
4740   
4741    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4742      ) "Sum of degradation class storage levels is the global level."
4743    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4744      ) "Upper bound for units of a certain state."
4745    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4746      ) "Positive change in state of charge is influx for each degradation class."
4747    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4748      ) "Determine degradation states of storage units."
4749    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4750      ) "All decomminsioned units must have a degradation state."
4751    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4752      ) "Only allow one range of degradation states per year and age group."
4753    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4754      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4755   
4756    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4757      ) "Every unit has a state of charge."
4758    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4759      ) "Every unit has a state of charge."
4760    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4761      ) "Number of units in particular SoC."
4762    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4763      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4764   
4765    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4766      ) "Limit charging rate based on unit capacity."
4767    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4768      ) "Limit discharging rate based on unit capacity."
4769    ;
4770   
4771  * ==== equation definition ====
4772  * // ## Equations
4773  * // ### Storage Units Balance
4774  * // Ensures that the total units are consistent with the built and decommissioned units.
4775  * // {Eq_storage_unitsBalance}
4776   
4777  * Equation using build only
4778  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4779      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4780            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4781          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4782          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4783      ..
4784      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4785      =e=
4786      sum ((years_a)
4787                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4788                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4789                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4790                          and years_a.val <= yearsSel.val ),
4791              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4792   
4793      + sum ((yearsToCalc)
4794                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4795                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4796                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4797                          and yearsToCalc.val <= yearsSel.val ),
4798              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4799   
4800  * Equation using build and decom
4801  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4802      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4803            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4804          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4805          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4806      ..
4807      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4808      =e=
4809          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4810        sum(years$sameas(years, yearsToCalc),
4811          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4812            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4813      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4814        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4815          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4816      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4817          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4818      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4819          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4820      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4821          ;
4822   
4823  * // ### Storage Units Free Decommission
4824  * // Restricts the free decommissioning of storage units over the planning period.
4825  * // {Eq_storage_unitsFreeDecom}
4826  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4827      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4828          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4829      ..
4830      sum(years$
4831            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4832              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4833          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4834      + sum(yearsToCalc$
4835            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4836              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4837              and yearsToCalc.val <= yearsSel.val),
4838          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4839      =g=
4840      sum(years$
4841            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4842              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4843              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4844          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4845      + sum(yearsToCalc$
4846            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4847              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4848              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4849          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4850   
4851  * // ### Storage Units Lower Limit
4852  * // Lower bound for the total number of storage units.
4853  * // {Eq_storage_unitsLowerLimit}
4854  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4855      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4856      ..
4857      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4858          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4859      =g=
4860      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4861   
4862  * // ### Storage Units Upper Limit
4863  * // Upper bound for the total number of storage units.
4864  * // {Eq_storage_unitsUpperLimit}
4865  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4866      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4867          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4868      ..
4869      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4870          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4871      =l=
4872      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4873   
4874  * // ### Storage Units Total MIP
4875  * // Fixes the total number of storage units to the corresponding integer variable.
4876  * // {Eq_storage_unitsTotalMIP}
4877  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4878      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4879          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4880      ..
4881      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4882      =e=
4883      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4884   
4885  * // ### Storage Level Lower Limit
4886  * // Lower limit on the storage level.
4887  * // {Eq_storage_levelLowerLimit}
4888  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4889      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4890          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4891      ..
4892      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4893      =g=
4894      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4895      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4896      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4897   
4898  * // ### Storage Level Upper Limit
4899  * // Upper limit on the storage level.
4900  * // {Eq_storage_levelUpperLimit}
4901  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4902      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4903          and not storage_hasDegradation(storage_techs,vintage)
4904          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4905      ..
4906      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4907      =l=
4908      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4909      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4910      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4911   
4912  * // ### Storage Level Upper Limit (degradation)
4913  * // Upper limit on the storage level if the storage technology accounts for degradation.
4914  * // {Eq_storage_levelUpperLimit_degradation}
4915  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4916      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4917          and storage_hasDegradation(storage_techs,vintage)
4918          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4919      ..
4920      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4921      =l=
4922      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4923      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4924      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4925              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4926                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4927                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4928   
4929  * // ### Storage Unit States Sum (degradation)
4930  * // The number of units in all degradation state must match the total unit number.
4931  * // {Eq_storage_unitsBalanceStates}
4932  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4933      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4934        and storage_hasDegradation(storage_techs,vintage))
4935      ..
4936      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4937      =e=
4938      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4939            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4940   
4941  * // ### Storage Unit States Upper Limit(degradation)
4942  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4943  * // {Eq_storage_unitsUpperLimitPerState}
4944  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4945      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4946          and storage_hasDegradation(storage_techs,vintage))
4947      ..
4948      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4949            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4950            + sum(years$(years.val <= yearsSel.val),
4951                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4952      =e=
4953      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4954   
4955  * // ### Storage Unit States Progression (degradation)
4956  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4957  * // {Eq_storage_unitsStatesNoRecovery}
4958  alias(degradation_states, dc_states);
4959  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4960      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4961        and yearsToCalc.val > yearsCom.val
4962        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4963      ..
4964      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4965                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4966              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4967              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4968      =l=
4969      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4970                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4971              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4972              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4973   
4974  * // ### Storage Losses
4975  * // Accumulation of storage losses.
4976  * // {Eq_storage_losses}
4977  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4978      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4979      ..
4980      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4981      =e=
4982      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4983          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4984        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4985            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4986        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4987            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4988            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4989            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4990                and ord(timeModelToCalc)=1))
4991      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4992      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4993      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4994          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4995        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4996          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4997      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4998        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4999          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5000      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5001        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
5002                          and storage_validSoCRange(storage_techs,vintage)),
5003              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5004              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5005              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
5006   
5007  * // ### C-Rate Limit
5008  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
5009  * // {Eq_storage_cRateLimit}
5010  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5011      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5012        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
5013      ..
5014      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5015      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5016          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5017      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5018          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5019      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5020          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5021          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5022          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5023              and ord(timeModelToCalc)=1)
5024      =l=
5025      storage_techParam(storage_techs,vintage,"maxCRate")
5026      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5027      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5028   
5029  * // ### E-Rate Limit
5030  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
5031  * // {Eq_storage_eRateLimit}
5032  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5033      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5034        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
5035      ..
5036      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5037      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5038          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5039      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5040          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5041      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5042          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5043          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5044          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5045              and ord(timeModelToCalc)=1)
5046      =g=
5047      - storage_techParam(storage_techs,vintage,"maxERate")
5048      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5049      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
5050   
5051  * // ### Storage Charging
5052  * // Increases in storage levels are accounted as charging amounts.
5053  * // {Eq_storage_charge}
5054  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5055      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5056        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
5057      ..
5058      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5059      =g=
5060      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5061      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5062          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5063      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5064          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5065      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5066          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5067          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5068          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5069              and ord(timeModelToCalc)=1);
5070   
5071  * // ### Storage Discharging
5072  * // Decreases in storage levels are accounted as discharging amounts.
5073  * // {Eq_storage_discharge}
5074  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5075      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5076        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
5077      ..
5078      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5079      =g=
5080      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5081          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5082      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5083          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5084      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5085          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5086          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5087          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5088              and ord(timeModelToCalc)=1)
5089      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
5090   
5091  * // ### Storage Level Sum (degradation)
5092  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
5093  * // {Eq_storage_levelStateSum}
5094  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5095      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5096        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5097      ..
5098      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5099      =e=
5100      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
5101   
5102  * // ### Storage Level Upper Limit per Age Group (degradation)
5103  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
5104  * // {Eq_storage_levelUpperLimitPerAge}
5105  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5106      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5107        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5108      ..
5109      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5110      =l=
5111      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5112      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5113      * sum(degradation_states,
5114              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5115                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5116                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5117   
5118  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5119  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5120  * // {Eq_storage_chargeBasedDegradationDistribution}
5121  alias(years, prev_years);
5122  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5123      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5124        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5125      ..
5126      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5127          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5128      =l=
5129      storage_sizeParam(storage_techs,vintage,commodity,"size")
5130      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5131          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5132          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5133             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5134   
5135  * // ### Storage Charging per Commissioning Year (degradation)
5136  * // Increases in storage levels are accounted as charging amounts.
5137  * // {Eq_storage_chargingPerAge}
5138  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5139      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5140        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5141      ..
5142      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5143      =g=
5144      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5145      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5146   
5147  * // ### Storage Unit Decommissioning States Sum (degradation)
5148  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5149  * // {Eq_storage_unitsDecomStateSum}
5150  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5151      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5152      ..
5153      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5154      =e=
5155      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5156          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5157   
5158  * // ### Storage Unit Sequential Degradation (degradation)
5159  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5160  * // {Eq_storage_unitsDegradation}
5161  alias(degradation_states, degradation_states_a, degradation_states_b);
5162  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5163      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5164        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5165      ..
5166      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5167                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5168                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5169                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5170                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5171                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5172          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5173      * storage_bigM(storage_techs,vintage)
5174      =g=
5175      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5176   
5177  * // ### Storage Unit Sequential Degradation Range (degradation)
5178  * // Only one degradation range can be active.
5179  * // {Eq_storage_unitsDegradation_onlyOneRange}
5180  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5181      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5182      ..
5183      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5184            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5185      =e= 1;
5186   
5187  * // ### Storage Unit Sequential State of Charge (SoC)
5188  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5189  * // {Eq_storage_unitsSoC}
5190  alias(soc_states, soc_states_a, soc_states_b);
5191  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5192      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5193      ..
5194      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5195                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5196                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5197                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5198                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5199                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5200          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5201      * storage_bigM(storage_techs,vintage)
5202      =g=
5203      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5204   
5205  * // ### Storage Unit Sequential State of Charge Range (SoC)
5206  * // Only one state of charge range can be active.
5207  * // {Eq_storage_unitsSoC_onlyOneRange}
5208  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5209      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5210      ..
5211      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5212            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5213   
5214  * // ### Storage Unit State of Charge Sum (SoC)
5215  * // Each storage unit must have one state of charge.
5216  * // {Eq_storage_unitsSoC_sum}
5217  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5218      $storage_validSoCRange(storage_techs,vintage)
5219      ..
5220      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5221      =e=
5222      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5223            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5224   
5225  * // ### Storage Level State of Charge Sum (SoC)
5226  * // The total storage level must be represented by units in their specific states of charge.
5227  * // {Eq_storage_levelSoC}
5228  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5229      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5230      ..
5231      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5232      =e=
5233      storage_sizeParam(storage_techs,vintage,commodity,"size")
5234      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5235              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5236              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5237   
5238  * // ### C-Rate Limit (SoC)
5239  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5240  * // {Eq_storage_cRateLimit_SoC}
5241  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5242      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5243        and storage_validSoCRange(storage_techs,vintage)
5244        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5245      ..
5246      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5247      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5248          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5249      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5250          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5251      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5252          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5253          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5254          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5255              and ord(timeModelToCalc)=1)
5256      =l=
5257      storage_sizeParam(storage_techs,vintage,commodity,"size")
5258      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5259                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5260                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5261   
5262  * // ### E-Rate Limit (SoC)
5263  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5264  * // {Eq_storage_cRateLimit_SoC}
5265  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5266      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5267        and storage_validSoCRange(storage_techs,vintage)
5268        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5269      ..
5270      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5271      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5272          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5273      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5274          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5275      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5276          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5277          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5278          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5279              and ord(timeModelToCalc)=1)
5280      =g=
5281      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5282      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5283                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5284                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5285   
5286   
5287  * ==== model definition ====
5288   
5289  Model M_storage
5290  /
5291    Eq_storage_unitsBalance
5292    Eq_storage_unitsBalanceFreeDecom
5293    Eq_storage_unitsFreeDecom
5294    Eq_storage_unitsLowerLimit
5295    Eq_storage_unitsUpperLimit
5296    Eq_storage_levelUpperLimit_degradation
5297    Eq_storage_unitsTotalMIP
5298    Eq_storage_levelLowerLimit
5299    Eq_storage_levelUpperLimit
5302    Eq_storage_losses
5305    Eq_storage_unitsBalanceStates
5306    Eq_storage_unitsUpperLimitPerState
5307    Eq_storage_unitsStatesNoRecovery
5308    Eq_storage_cRateLimit
5309    Eq_storage_eRateLimit
5310    Eq_storage_charge
5311    Eq_storage_discharge
5312    Eq_storage_levelStateSum
5313    Eq_storage_levelUpperLimitPerAge
5314    Eq_storage_chargeBasedDegradationDistribution
5315    Eq_storage_chargingPerAge
5316    Eq_storage_unitsDecomStateSum
5317    Eq_storage_unitsDegradation
5318    Eq_storage_unitsDegradation_onlyOneRange
5319   
5320    Eq_storage_unitsSoC
5321    Eq_storage_unitsSoC_sum
5322    Eq_storage_unitsSoC_onlyOneRange
5323    Eq_storage_levelSoC
5324    Eq_storage_cRateLimit_SoC
5325    Eq_storage_eRateLimit_SoC
5326  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
5328  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5329  * SPDX-License-Identifier: BSD-3-Clause
5330   
5331  * // # core_transfer
5332  * // The equations in this file describe the commodity transfer in the model.
5333   
5334  * // ## Variables
5335  * // {special_table_transfer_variables}
5338   
5343   
5539   
5540  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5541  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5542      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5543   
5544   
5545  * ==== calculation of mappings ====
5546   
5547  * Technologies with a lifeTime > 0 are available
5548  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5549  transfer_availTech(linksModel,years,transfer_techs,vintage)
5550      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5551          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5552   
5553  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5554  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5555      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5556   
5557  * Technologies already built become unavailable if they have a linksBuild of 0
5558  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5559      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5560   
5561  * Used technologies are available technologies over their technical lifeTime
5562  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5563  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5564      $(vintage.val <= years.val
5565          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5566                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5567          ) = yes;
5568   
5569  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5570  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5571  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5572    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5573                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5574      and sum(yearsToCalc
5575        $(sameas(years, yearsToCalc)
5576          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5577          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5578    = yes;
5579   
5580  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5581    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5582                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5583      and sum(yearsToCalc
5584        $(sameas(years, yearsToCalc)
5585          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5586          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5587    = yes;
5588   
5589  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5590  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5591    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5592      and sum(yearsToCalc
5593        $(sameas(years, yearsToCalc)
5594          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5595    = yes;
5596   
5597  * Extend the decom frame to the year after the last year of usedTech
5598  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5599    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5600      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5601    = yes;
5602   
5603   
5604  * // ## Load links from gdx file
5606   
5607   
5608  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5609  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5610   
5611  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5612  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5613      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5614      = 1;
5615   
5616  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5617      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5618      = 1;
5619   
5620  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5621      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5622      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5623   
5624  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5625      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5626      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5627   
5628  * aggregate time dimension
5629  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5630  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5631      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5632      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5633            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5634            / timeLength(timeModelToCalc));
5635  option clear = transfer_flowProfileIn;
5636   
5637  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5638      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5639        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5640      = 1;
5641   
5642  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5643      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5644        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5645      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5646   
5647  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5648      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5649        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5650      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5651   
5652  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5653  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5654      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5655          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5656   
5657  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5658  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5659      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5661   
5662  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5663  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5664      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5665          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5666   
5667  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5668  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5669      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5670   
5671  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5672  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5673      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5674          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5675          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5676      = (1 / sum(linksData
5677                  $links_aggregate(linksModelToCalc,linksData),
5678              1 / ( sum(link_types,
5679                          transfer_lengthParamIn(linksData,link_types,"length")
5680                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5681                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5682   
5683  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5684  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5685      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5686              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5687   
5688  * aggregate coefficient delays per link and reduce based on time resolution
5689  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5691  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5692    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5693      or sum(link_types,
5694          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5695    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5696            + sum(link_types,
5697                transfer_lengthParam(linksModel,link_types,"length")
5698                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5699            / 1);
5701   
5702  * ==== parameter modifications ====
5703  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5704      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5705      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5706  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5707      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5708      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5709   
5710   
5711  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5712   
5713  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5714      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5715      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5716                       and transfer_incidenceData_flip(linksData) = 1),
5717              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5718              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5719          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5720                          and transfer_incidenceData_flip(linksData) = -1),
5721              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5722              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5723      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5724              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5725   
5726  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5727      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5728      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5729                       and transfer_incidenceData_flip(linksData) = 1),
5730              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5731              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5732          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5733                          and transfer_incidenceData_flip(linksData) = -1),
5734              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5735              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5736      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5737              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5738   
5739  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5740      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5741      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5742                       and transfer_incidenceData_flip(linksData) = 1
5743                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5744              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5745          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5746                          and transfer_incidenceData_flip(linksData) = -1
5747                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5748              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5749      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5750                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5751              1);
5752   
5753  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5754      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5755      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5756                       and transfer_incidenceData_flip(linksData) = 1
5757                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5758              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5759          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5760                          and transfer_incidenceData_flip(linksData) = -1
5761                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5762              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5763      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5764                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5765              1);
5766  option clear = transfer_flowProfileIn_aggTime;
5767   
5768  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5769   
5770  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5771      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5772      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5773                       and transfer_incidenceData_flip(linksData) = 1),
5774              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5775              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5776          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5777                          and transfer_incidenceData_flip(linksData) = -1),
5778              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5779              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5780      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5781              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5782   
5783  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5784      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5785      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5786                       and transfer_incidenceData_flip(linksData) = -1),
5787              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5788              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5789          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5790                          and transfer_incidenceData_flip(linksData) = 1),
5791              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5792              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5793      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5794              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5795   
5796  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5797      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5798      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5799                       and transfer_incidenceData_flip(linksData) = 1
5800                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5801              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5802          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5803                          and transfer_incidenceData_flip(linksData) = -1
5804                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5805              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5806      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5807                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5808              1);
5809   
5810  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5811      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5812      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5813                       and transfer_incidenceData_flip(linksData) = -1
5814                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5815              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5816          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5817                          and transfer_incidenceData_flip(linksData) = 1
5818                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5819              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5820      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5821                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5822              1);
5823   
5824  * Mapping for grid segments using DC optimal power flow
5825  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5826  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5827      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5830      = yes;
5833   
5834  * Ensure each grid segment uses exactly one commodity
5835  parameter checkGridSegmentCommodities(gridSegments);
5836  checkGridSegmentCommodities(gridSegments)
5837      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5838                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5839                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5840   
5841  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5842  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5843      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5844                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5845                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5846      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5847   
5848   
5852   
5853  scalar transfer_enableMIP;
5854  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5855   
5856   
5857  * ==== definition of variables ====
5858   
5859  * Initialise variables for linksBuild
5860  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5861      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5862      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5863  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5864      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5865      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5866  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5867      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5868      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5869   
5870  * Initialise variables for linksDecom
5871  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5872      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5873        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5874      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5875                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5876                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5877                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5878          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5879   
5880  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5881    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5882    = sum(years$
5883          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5884            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5885            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5886            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5887        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5888      + sum(yearsToCalc_a$
5889          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5890            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5891            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5892            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5893        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5894   
5895  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5896      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5897          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5898      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5899   
5900   
5902   
5903   
5904  * Calculate planned transfer links expansion
5905  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5906  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5907  loop(years,
5908    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5909      =
5910      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5911          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5912      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5913          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5914      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5915          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5916  );
5917   
5918  * Set initial state for planned units
5919  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5920    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5921   
5922  * // ## Load units from gdx file
5924   
5925  * Calculate if planned links expansion is bound by upper and lower limits
5926  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5927  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5928    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5929          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5930    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5931          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5932      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5933    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5934          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5935      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5936    = yes;
5937   
5938  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5939  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5940    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5941      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5942    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5943  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5944    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5945      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5946    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5947  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5948    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5949      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5950    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5951   
5952  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5953      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5954        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5955      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5956   
5957  * Add parameter for fixing capacities during myopic runs
5958  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5959  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5960  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5961   
5962  * ==== declaration of equations ====
5963   
5964  equations
5965    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5966      ) "Ensures the links balance over the planning period."
5967    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5968      ) "Ensures the links balance over the planning period."
5969    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5970      ) "Restricts the free decommissioning of links over the planning period."
5971    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5972      ) "Upper bound for the total number of links."
5973    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5974      ) "Lower bound for the total number of links."
5975    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5976      ) "Fixes the total number of links to the corresponding integer variable."
5977   
5978    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5979      ) "Upper bound for the flow along the transfer links."
5980    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5981      ) "Upper bound for the flow against the transfer links."
5982    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5983      )
5984    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5985      )
5986    ;
5987   
5988   
5989  * ==== equation definition ====
5990  * // ## Equations
5991  * // ### Transfer Links Balance
5992  * // Ensures that the transfer between nodes is balanced.
5993  * // {Eq_transfer_linksBalance}
5994   
5995  * Equation using build only
5996  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5997      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5998            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5999          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
6000          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6001      ..
6002      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6003      =e=
6004      sum ((years_a)
6005              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6006                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6007                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
6008                  and years_a.val <= yearsSel.val ),
6009            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
6010   
6011      + sum ((yearsToCalc)
6012              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6013                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6014                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
6015                  and yearsToCalc.val <= yearsSel.val ),
6016            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6017   
6018  * Equation using build and decom
6019  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6020      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6021            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6022          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
6023          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6024      ..
6025      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6026      =e=
6027      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
6028        sum(years$sameas(years, yearsToCalc),
6029          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
6030            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
6031      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
6032        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
6033          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
6034      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6035          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6036      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6037          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6038      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6039          ;
6040   
6041  * // ### Transfer Links Free Decommissioning
6042  * // Balances free link decommissioning.
6043  * // {Eq_transfer_linksFreeDecom}
6044  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6045      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6046          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
6047          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
6048      ..
6049      sum(years$
6050            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
6051              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
6052              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
6053          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
6054      + sum(yearsToCalc$
6055            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6056              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6057              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6058              and yearsToCalc.val <= yearsSel.val),
6059          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
6060      =g=
6061      sum(years$
6062            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
6063              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
6064              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6065          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
6066      + sum(yearsToCalc$
6067            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6068              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6069              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
6070          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
6071   
6072  * // ### Transfer Links Lower Limit
6073  * // Ensures link capacity lower limits.
6074  * // {Eq_transfer_linksLowerLimit}
6075  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
6076      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
6077      ..
6078      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6079          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6080      =g=
6081      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
6082   
6083  * // ### Transfer Links Upper Limit
6084  * // Ensures link capacity upper limits.
6085  * // {Eq_transfer_linksUpperLimit}
6086  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
6087      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
6088          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
6089      ..
6090      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
6091          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
6092      =l=
6093      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
6094   
6095  * // ### Transfer Links Total MIP
6096  * // Ensures number of MIP links.
6097  * // {Eq_transfer_linksTotalMIP}
6098  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
6099      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6100          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
6101      ..
6102      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6103      =e=
6104      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
6105   
6106  * // ### Transfer Links Flow Along Upper Limit
6107  * // Ensures links flow along upper limit.
6108  * // {Eq_transfer_flowAlongUpperLimit}
6109  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6110      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6111      ..
6112      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6113      =l=
6114      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6115      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6116      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6117      ;
6118   
6119  * // ### Transfer Links Flow Against Upper Limit
6120  * // Ensures links flow against upper limit.
6121  * // {Eq_transfer_flowAgainstUpperLimit}
6122  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6123      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6124      ..
6125      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6126      =l=
6127      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6128      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6129      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6130      ;
6131   
6132  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6133  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6134      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6135          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6136      = yes;
6137   
6138  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6139  option transfer_usedOpfLinks < transfer_usedOpf;
6140   
6141  set transfer_usedOpfSegments(years,gridSegments);
6142  option transfer_usedOpfSegments < transfer_usedOpf;
6143   
6147  * // ### Transfer DC optimal flow angle flows
6148  * // Angle flows.
6149  * // {Eq_transfer_dcopf_cycleFlows}
6150  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6151      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6152      ..
6153      sum ((transfer_techs,vintage)
6154              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6155          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6156              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6157          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6158      =e=
6159      sum ( nodesModelSel,
6160          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6161          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6165   
6166   
6167  * ==== model definition ====
6168   
6169  Model M_transfer
6170  /
6171    Eq_transfer_linksBalance
6172    Eq_transfer_linksBalanceFreeDecom
6173    Eq_transfer_linksFreeDecom
6174    Eq_transfer_linksLowerLimit
6175    Eq_transfer_linksUpperLimit
6176    Eq_transfer_linksTotalMIP
6177    Eq_transfer_flowAlongUpperLimit
6178    Eq_transfer_flowAgainstUpperLimit
6182    Eq_transfer_dcopf_angleFlows
6186  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
6188  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6189  * SPDX-License-Identifier: BSD-3-Clause
6190   
6191  * // # core_sourcesink
6192  * // The equations in this file describe the sources and sinks in the model.
6193   
6194  * // ## Variables
6195  * // {special_table_sourcesink_variables}
6837   
6838  * // ## Aggregation of profiles
6839  * // Profiles are rescaled based on the annual sum.
6840   
6841  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6842  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6843      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6844  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6845      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6846  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6847      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6848   
6849  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6850  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6851      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6852      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6853   
6854  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6855  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6856      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6857      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6858   
6859  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6860  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6861      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6862          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6863          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6864      = yes;
6865   
6866  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6867              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6868   
6869  * calculate scaling factor for each type
6870  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6871  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6872      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6873          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6874      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6875          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6876              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6877   
6878  * rescale profiles
6879  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6880      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6881      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6882          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6883   
6884  * // ## Aggregation of profiles
6885  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6886   
6887  * ==== aggregation of profiles ====
6888  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6889  option sourcesink_usesProfileIn < sourcesink_profileIn
6890   
6891  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6892  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6893      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6894          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6895      = yes;
6896   
6897  * aagregate time dimension
6898  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6899  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6900    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6901    = sum(timeMapping_t(timeModelToCalc,timeData),
6902            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6903      / timeLength(timeModelToCalc);
6904  option clear = sourcesink_profileIn;
6905   
6906  * sum up absolute profiles
6907  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6908  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6909      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6910      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6911              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6912  option clear = sourcesink_profileIn_aggTime;
6913   
6914  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6915  option sourcesink_enabled < sourcesink_config;
6916   
6920   
6921  * ==== declaration of variables ====
6922  * // ## Bounding of variables
6923  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6924  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6925      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6926          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6927          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6928      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6929   
6930  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6931      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6932          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6933          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6934      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6935   
6936  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6937      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6938          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6939      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6940   
6941  option clear = sourcesink_profile;
6942   
6943   
6944  * ==== equation definition ====
6945  * // ## Equations
6946  equations
6947  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6948      ) "Fixes the annual sum from sources / to sinks"
6949  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6950      ) "Limits the lower sum from sources / to sinks"
6951  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6952      ) "Limits the upper sum from sources / to sinks"
6953    ;
6954   
6955  * // ### Fixed annual sums for sources and sinks
6956  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6957  * // {Eq_sourcesink_useFixedSum}
6958  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6959      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6960          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6961      ..
6962      sum(timeModelSel,
6963          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6964          * timeLength(timeModelSel))
6965      =e=
6966      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6967      * timefrac
6968      ;
6969   
6970  * // ### Lower annual sums for sources and sinks
6971  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6972  * // {Eq_sourcesink_useLowerSum}
6973  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6974      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6975          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6976          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6977      ..
6978      sum(timeModelSel,
6979          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6980          * timeLength(timeModelSel))
6981      =g=
6982      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6983      * timefrac
6984      ;
6985   
6986  * // ### Upper annual sums for sources and sinks
6987  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6988  * // {Eq_sourcesink_useUpperSum}
6989  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6990      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6991          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6992          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6993      ..
6994      sum(timeModelSel,
6995          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6996          * timeLength(timeModelSel))
6997      =l=
6998      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6999      * timefrac
7000      ;
7001   
7002   
7003  * ==== model definition ====
7004   
7005  Model M_sourcesink
7006  /
7007    Eq_sourcesink_useFixedSum
7008    Eq_sourcesink_useLowerSum
7009    Eq_sourcesink_useUpperSum
7010  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
7012  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7013  * SPDX-License-Identifier: BSD-3-Clause
7014   
7015  * // # balance
7016  * // The equations in this file describe the commodity balancing in the model.
7017   
7018  Equations
7019    Eq_balance_commodities(timeModel,nodesModel,years,commodity
7020      ) "Balance for each commodity used in each time step, region, and year";
7021   
7022   
7023  * ==== calculation of mappings ====
7024   
7025  set balance_techComm(techs,commodity);
7026  balance_techComm(converter_techs(techs),commodity)
7027      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
7028  balance_techComm(storage_techs(techs),commodity)
7029      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
7030  balance_techComm(transfer_techs(techs),commodity)
7031      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
7032  balance_techComm(sourcesink_techs(techs),commodity)
7033      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
7034   
7035  set balance_usedConverter(nodesModel,years,commodity);
7036  set balance_usedStorage(nodesModel,years,commodity);
7037  set balance_usedTransfer(nodesModel,years,commodity);
7038  set balance_usedSourceSink(nodesModel,years,commodity);
7039  set balance_usedBalance(nodesModel,years,commodity);
7040   
7041  balance_usedConverter(nodesModel,years,commodity)
7042      = sum ((converter_techs,vintage,activity)
7043              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7044                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7045   
7046  balance_usedStorage(nodesModel,years,commodity)
7047      = sum ((storage_techs,vintage,activity)
7048              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7049                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7050   
7051  balance_usedTransfer(nodesModel,years,commodity)
7052      = sum ((linksModel,transfer_techs,vintage)
7053              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7054                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7055   
7056  option balance_usedSourceSink < sourcesink_enabled;
7057   
7058  balance_usedBalance(nodesModel,years,commodity)
7059      $(balance_usedConverter(nodesModel,years,commodity)
7060          or balance_usedStorage(nodesModel,years,commodity)
7061          or balance_usedTransfer(nodesModel,years,commodity)
7062          or balance_usedSourceSink(nodesModel,years,commodity) )
7063      = yes;
7064   
7065   
7066  * ==== equation definition ====
7067   
7068  * // ### Balance commodities
7069  * // Balancing of commodities for all model regions, time steps, and years
7070  * // {Eq_balance_commodities}
7071  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7072      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7073      ..
7074  * converter
7075      sum((converter_techs,vintage,activity)
7076              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7077                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7078          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
7079              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7080              * timeLength(timeModelToCalc)
7081          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
7082              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7083              * timeLength(timeModelToCalc))
7084   
7085  * storages
7086      + sum((storage_techs,vintage)
7087              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7088                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7089          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7090              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
7091          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7092              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
7093          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
7094              * storage_sizeParam(storage_techs,vintage,commodity,"size")
7095              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
7096              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
7097                  and ord(timeModelToCalc)=1)
7098          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7101          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7102          * timeLength(timeModelSel)
7105          )
7106   
7107  * incoming transfer
7108      + sum((linksModel,transfer_techs,vintage)
7109              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7110                  and linksModelToCalc(linksModel)),
7111          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
7112                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7113            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
7114                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7115          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7116          * timeLength(timeModelToCalc))
7117   
7118  * outgoing transfer
7119      - sum((linksModel,transfer_techs,vintage)
7120              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7121                  and linksModelToCalc(linksModel)),
7122          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7123                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7124            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7125                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7126          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7127          * timeLength(timeModelSel))
7128   
7129  * transfer losses
7130      + 0.5 * sum((linksModel,transfer_techs,vintage)
7131              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7132                  AND linksModelToCalc(linksModel)),
7133          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7134                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7135            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7136                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7137          * timeLength(timeModelSel)
7138          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7139              + sum(link_types,
7140                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7141                  * transfer_lengthParam(linksModel,link_types,"length"))))
7142   
7143  * sourcesink
7144      + sum((sourcesink_techs)
7145              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7146          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7147          * timeLength(timeModelSel))
7148      =e=
7149      0;
7150   
7151   
7152  * ==== model definition ====
7153   
7154  Model M_balance
7155  /
7156    Eq_balance_commodities
7157  /;
7158   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
7160  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7161  * SPDX-License-Identifier: BSD-3-Clause
7162   
7163  * // # accounting_equations
7164   
7165  * ==== declaration of variables ====
7166   
7167  variables
7168  accounting_indicator(accNodesModel,accYears,indicator)
7169  accounting_indicator_links(linksModel,years,indicator)
7170  accounting_objective
7171  ;
7172   
7173   
7174  * ==== definition of variables ====
7175   
7176  accounting_indicator.lo(accNodesModel,accYears,indicator)
7177      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7178          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7179      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7180   
7181  accounting_indicator.up(accNodesModel,accYears,indicator)
7182      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7183          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7184      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7185   
7186  accounting_indicator.fx(accNodesModel,accYears,indicator)
7187      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
7188          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7189      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7190   
7191   
7192  * set the variable levels to be fixed for years before the optimization years
7193  accounting_indicator.l(accNodesModel,accYears,indicator)
7194      $activeIndicators(accNodesModel,accYears,indicator)
7195      = 0;
7196   
7197   
7198  * ==== declaration of equations ====
7199   
7200  equations
7201  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
7202      ) "Ensures the fixed value of an indicator per accounting region"
7203  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
7204      ) "Ensures the upper limit of an indicator per accounting region"
7205  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
7206      ) "Ensures the lower limit of an indicator per accounting region"
7207  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
7208      ) "Ensures the fixed value of an indicator per model link"
7209  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
7210      ) "Ensures the upper limit of an indicator per model link"
7211  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
7212      ) "Ensures the lower limit of an indicator per model link"
7213  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7214    ;
7215   
7216   
7217  * ==== equations definition ====
7218  * // ## Equations
7219  * // ### Accounting Indicator Calculation
7220  * // Calculates the fixed limit for accounting indicators.
7221  * // {Eq_accounting_indicatorCalc_fixed}
7222  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
7223      $(activeIndicators(accNodesModel,accYears,indicator)
7224          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7225      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7227  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7228  * SPDX-License-Identifier: BSD-3-Clause
7229   
7230  * == variable indicators ==
7231      sum((accNodesModel_a,accYears_a,indicator_a)
7232          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7233              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7234          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7235          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7236          )
7237   
7238  * == converters ==
7239      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7240              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7241                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7242          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7243          *
7244          ( sum ((converter_techs,vintage)
7245                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7246                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7247              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7248              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7249              )
7250   
7251          + sum ((years_a,converter_techs,vintage)
7252                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7253                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7254                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7255                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7256                          and years_a.val <= yearsSel.val ),
7257              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7258              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7259              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7260              )
7261   
7262          + sum ((yearsToCalc,converter_techs,vintage)
7263                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7264                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7265                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7266                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7267                          and yearsToCalc.val <= yearsSel.val ),
7268              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7269              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7270              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7271              )
7272   
7273          + sum ((converter_techs,vintage)
7274                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7275                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7276              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7277              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7278   
7279          + sum ((converter_techs,vintage)
7280                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7281              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7282              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7283   
7284          + sum ((timeModelSel,converter_techs,vintage,activity)
7285                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7286              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7287              * timeLength(timeModelSel)
7288              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7289          / timefrac
7290   
7291          + sum ((timeModelSel,converter_techs,vintage)
7292                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7293              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7294              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7295          / timefrac
7296   
7297          + sum ((timeModelSel,converter_techs,vintage)
7298                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7299              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7300              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7301                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7302   
7303              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7304              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7305                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7306          / timefrac
7307          )
7308      )
7309   
7310  * == storage ==
7311      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7312              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7313                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7314          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7315          *
7316          ( sum ((storage_techs,vintage)
7317                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7318                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7319              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7320              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7321              )
7322   
7323          + sum ((years_a,storage_techs,vintage)
7324                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7325                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7326                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7327                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7328                          and years_a.val <= yearsSel.val ),
7329              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7330              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7331              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7332              )
7333   
7334          + sum ((yearsToCalc,storage_techs,vintage)
7335                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7336                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7337                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7338                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7339                          and yearsToCalc.val <= yearsSel.val ),
7340              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7341              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7342              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7343              )
7344   
7345          + sum ((storage_techs,vintage)
7346                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7347                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7348              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7349              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7350   
7351          + sum ((storage_techs,vintage)
7352                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7353              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7354              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7355          )
7356      )
7357   
7358   
7359  * == transfer ==
7360      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7361              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7362                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7363          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7364          *
7365          ( sum ((linksModelToCalc,transfer_techs,vintage)
7366                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7367                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7368                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7369              0.5
7370              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7371              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7372   
7373          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7374                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7375                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7376                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7377                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7378                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7379                          and years_a.val <= yearsSel.val ),
7380              0.5
7381              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7382              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7383              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7384   
7385          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7386                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7387                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7388                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7389                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7390                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7391                          and yearsToCalc.val <= yearsSel.val ),
7392              0.5
7393              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7394              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7395              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7396   
7397          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7398                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7399                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7400                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7401              0.5
7402              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7403              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7404              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7405   
7406          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7407                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7408                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7409                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7410                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7411                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7412                          and years_a.val <= yearsSel.val ),
7413              0.5
7414              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7415              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7416              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7417              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7418   
7419          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7420                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7421                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7422                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7423                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7424                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7425                          and yearsToCalc.val <= yearsSel.val ),
7426              0.5
7427              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7428              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7429              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7430              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7431   
7432          + sum ((linksModelToCalc,transfer_techs,vintage)
7433                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7434                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7435                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7436              0.5
7437              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7438              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7439   
7440              + 0.5
7441              * sum (link_types,
7442                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7443                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7444                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7445              ) )
7446   
7447          + sum ((linksModelToCalc,transfer_techs,vintage)
7448                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7449                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7450              0.5
7451              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7452              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7453   
7454              + 0.5
7455              * sum (link_types,
7456                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7457                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7458                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7459   
7460              + 0.5
7461              * sum (timeModelSel,
7462                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7463                  * timeLength(timeModelSel)
7464                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7465                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7466   
7467                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7468                  * timeLength(timeModelSel)
7469                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7470                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7471                  / timefrac
7472   
7473              + 0.5
7474              * sum ((timeModelSel, link_types),
7475                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7476                  * timeLength(timeModelSel)
7477                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7478                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7479                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7480   
7481                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7482                  * timeLength(timeModelSel)
7483                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7484                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7485                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7486                  / timefrac
7487              )
7488          )
7489      )
7490   
7491   
7492  * == sources / sinks ==
7493      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7494              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7495                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7496          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7497          *
7498          sum ((timeModelSel,sourcesink_techs,commodity)
7499                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7500              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7501              * timeLength(timeModelSel)
7502              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7503          / timefrac
7504      )
7505      =e=
7506      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7507   
7508  * // ### Accounting Indicator Calculation
7509  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7510  * // {Eq_accounting_indicatorCalc_upper}
7511  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
7512      $(activeIndicators(accNodesModel,accYears,indicator)
7513          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7514          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7515      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7517  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7518  * SPDX-License-Identifier: BSD-3-Clause
7519   
7520  * == variable indicators ==
7521      sum((accNodesModel_a,accYears_a,indicator_a)
7522          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7523              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7524          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7525          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7526          )
7527   
7528  * == converters ==
7529      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7530              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7531                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7532          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7533          *
7534          ( sum ((converter_techs,vintage)
7535                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7536                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7537              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7538              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7539              )
7540   
7541          + sum ((years_a,converter_techs,vintage)
7542                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7543                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7544                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7545                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7546                          and years_a.val <= yearsSel.val ),
7547              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7548              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7549              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7550              )
7551   
7552          + sum ((yearsToCalc,converter_techs,vintage)
7553                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7554                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7555                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7556                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7557                          and yearsToCalc.val <= yearsSel.val ),
7558              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7559              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7560              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7561              )
7562   
7563          + sum ((converter_techs,vintage)
7564                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7565                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7566              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7567              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7568   
7569          + sum ((converter_techs,vintage)
7570                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7571              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7572              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7573   
7574          + sum ((timeModelSel,converter_techs,vintage,activity)
7575                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7576              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7577              * timeLength(timeModelSel)
7578              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7579          / timefrac
7580   
7581          + sum ((timeModelSel,converter_techs,vintage)
7582                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7583              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7584              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7585          / timefrac
7586   
7587          + sum ((timeModelSel,converter_techs,vintage)
7588                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7589              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7590              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7591                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7592   
7593              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7594              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7595                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7596          / timefrac
7597          )
7598      )
7599   
7600  * == storage ==
7601      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7602              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7603                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7604          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7605          *
7606          ( sum ((storage_techs,vintage)
7607                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7608                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7609              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7610              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7611              )
7612   
7613          + sum ((years_a,storage_techs,vintage)
7614                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7615                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7616                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7617                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7618                          and years_a.val <= yearsSel.val ),
7619              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7620              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7621              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7622              )
7623   
7624          + sum ((yearsToCalc,storage_techs,vintage)
7625                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7626                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7627                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7628                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7629                          and yearsToCalc.val <= yearsSel.val ),
7630              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7631              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7632              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7633              )
7634   
7635          + sum ((storage_techs,vintage)
7636                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7637                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7638              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7639              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7640   
7641          + sum ((storage_techs,vintage)
7642                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7643              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7644              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7645          )
7646      )
7647   
7648   
7649  * == transfer ==
7650      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7651              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7652                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7653          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7654          *
7655          ( sum ((linksModelToCalc,transfer_techs,vintage)
7656                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7657                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7658                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7659              0.5
7660              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7661              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7662   
7663          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7664                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7665                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7666                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7667                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7668                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7669                          and years_a.val <= yearsSel.val ),
7670              0.5
7671              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7672              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7673              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7674   
7675          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7676                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7677                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7678                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7679                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7680                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7681                          and yearsToCalc.val <= yearsSel.val ),
7682              0.5
7683              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7684              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7685              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7686   
7687          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7688                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7689                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7690                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7691              0.5
7692              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7693              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7694              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7695   
7696          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7697                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7698                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7699                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7700                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7701                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7702                          and years_a.val <= yearsSel.val ),
7703              0.5
7704              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7705              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7706              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7707              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7708   
7709          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7710                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7711                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7712                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7713                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7714                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7715                          and yearsToCalc.val <= yearsSel.val ),
7716              0.5
7717              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7718              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7719              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7720              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7721   
7722          + sum ((linksModelToCalc,transfer_techs,vintage)
7723                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7724                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7725                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7726              0.5
7727              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7728              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7729   
7730              + 0.5
7731              * sum (link_types,
7732                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7733                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7734                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7735              ) )
7736   
7737          + sum ((linksModelToCalc,transfer_techs,vintage)
7738                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7739                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7740              0.5
7741              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7742              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7743   
7744              + 0.5
7745              * sum (link_types,
7746                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7747                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7748                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7749   
7750              + 0.5
7751              * sum (timeModelSel,
7752                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7753                  * timeLength(timeModelSel)
7754                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7755                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7756   
7757                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7758                  * timeLength(timeModelSel)
7759                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7760                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7761                  / timefrac
7762   
7763              + 0.5
7764              * sum ((timeModelSel, link_types),
7765                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7766                  * timeLength(timeModelSel)
7767                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7768                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7769                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7770   
7771                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7772                  * timeLength(timeModelSel)
7773                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7774                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7775                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7776                  / timefrac
7777              )
7778          )
7779      )
7780   
7781   
7782  * == sources / sinks ==
7783      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7784              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7785                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7786          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7787          *
7788          sum ((timeModelSel,sourcesink_techs,commodity)
7789                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7790              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7791              * timeLength(timeModelSel)
7792              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7793          / timefrac
7794      )
7795      =l=
7796      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7797   
7798  * // ### Accounting Indicator Calculation
7799  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7800  * // {Eq_accounting_indicatorCalc_lower}
7801  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
7802      $(activeIndicators(accNodesModel,accYears,indicator)
7803          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7804          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7805      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7807  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7808  * SPDX-License-Identifier: BSD-3-Clause
7809   
7810  * == variable indicators ==
7811      sum((accNodesModel_a,accYears_a,indicator_a)
7812          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7813              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7814          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7815          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7816          )
7817   
7818  * == converters ==
7819      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7820              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7821                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7822          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7823          *
7824          ( sum ((converter_techs,vintage)
7825                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7826                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7827              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7828              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7829              )
7830   
7831          + sum ((years_a,converter_techs,vintage)
7832                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7833                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7834                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7835                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7836                          and years_a.val <= yearsSel.val ),
7837              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7838              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7839              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7840              )
7841   
7842          + sum ((yearsToCalc,converter_techs,vintage)
7843                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7844                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7845                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7846                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7847                          and yearsToCalc.val <= yearsSel.val ),
7848              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7849              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7850              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7851              )
7852   
7853          + sum ((converter_techs,vintage)
7854                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7855                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7856              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7857              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7858   
7859          + sum ((converter_techs,vintage)
7860                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7861              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7862              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7863   
7864          + sum ((timeModelSel,converter_techs,vintage,activity)
7865                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7866              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7867              * timeLength(timeModelSel)
7868              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7869          / timefrac
7870   
7871          + sum ((timeModelSel,converter_techs,vintage)
7872                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7873              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7874              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7875          / timefrac
7876   
7877          + sum ((timeModelSel,converter_techs,vintage)
7878                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7879              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7880              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7881                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7882   
7883              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7884              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7885                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7886          / timefrac
7887          )
7888      )
7889   
7890  * == storage ==
7891      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7892              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7893                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7894          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7895          *
7896          ( sum ((storage_techs,vintage)
7897                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7898                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7899              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7900              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7901              )
7902   
7903          + sum ((years_a,storage_techs,vintage)
7904                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7905                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7906                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7907                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7908                          and years_a.val <= yearsSel.val ),
7909              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7910              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7911              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7912              )
7913   
7914          + sum ((yearsToCalc,storage_techs,vintage)
7915                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7916                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7917                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7918                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7919                          and yearsToCalc.val <= yearsSel.val ),
7920              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7921              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7922              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7923              )
7924   
7925          + sum ((storage_techs,vintage)
7926                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7927                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7928              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7929              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7930   
7931          + sum ((storage_techs,vintage)
7932                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7933              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7934              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7935          )
7936      )
7937   
7938   
7939  * == transfer ==
7940      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7941              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7942                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7943          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7944          *
7945          ( sum ((linksModelToCalc,transfer_techs,vintage)
7946                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7947                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7948                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7949              0.5
7950              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7951              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7952   
7953          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7954                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7955                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7956                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7957                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7958                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7959                          and years_a.val <= yearsSel.val ),
7960              0.5
7961              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7962              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7963              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7964   
7965          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7966                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7967                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7968                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7969                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7970                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7971                          and yearsToCalc.val <= yearsSel.val ),
7972              0.5
7973              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7974              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7975              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7976   
7977          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7978                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7979                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7980                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7981              0.5
7982              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7983              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7984              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7985   
7986          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7987                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7988                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7989                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7990                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7991                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7992                          and years_a.val <= yearsSel.val ),
7993              0.5
7994              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7995              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7996              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7997              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7998   
7999          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8000                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8001                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8002                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8003                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8004                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8005                          and yearsToCalc.val <= yearsSel.val ),
8006              0.5
8007              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8008              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8009              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8010              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8011   
8012          + sum ((linksModelToCalc,transfer_techs,vintage)
8013                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8014                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8015                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8016              0.5
8017              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8018              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8019   
8020              + 0.5
8021              * sum (link_types,
8022                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8023                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8024                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8025              ) )
8026   
8027          + sum ((linksModelToCalc,transfer_techs,vintage)
8028                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8029                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8030              0.5
8031              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8032              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8033   
8034              + 0.5
8035              * sum (link_types,
8036                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8037                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8038                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8039   
8040              + 0.5
8041              * sum (timeModelSel,
8042                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8043                  * timeLength(timeModelSel)
8044                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8045                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8046   
8047                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8048                  * timeLength(timeModelSel)
8049                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8050                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8051                  / timefrac
8052   
8053              + 0.5
8054              * sum ((timeModelSel, link_types),
8055                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8056                  * timeLength(timeModelSel)
8057                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8058                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8059                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8060   
8061                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8062                  * timeLength(timeModelSel)
8063                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8064                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8065                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8066                  / timefrac
8067              )
8068          )
8069      )
8070   
8071   
8072  * == sources / sinks ==
8073      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8074              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8075                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8076          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8077          *
8078          sum ((timeModelSel,sourcesink_techs,commodity)
8079                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8080              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8081              * timeLength(timeModelSel)
8082              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8083          / timefrac
8084      )
8085      =g=
8086      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
8087   
8088   
8089  * // ### Accounting Indicator Calculation Links
8090  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8091  * // {Eq_accounting_indicatorCalc_links_fixed}
8092  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
8093      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8094          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8095      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8097  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8098  * SPDX-License-Identifier: BSD-3-Clause
8099   
8100      sum ((transfer_techs,vintage)
8101                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8102                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8103          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8104          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8105   
8106      + sum ((years_a,transfer_techs,vintage)
8107                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8108                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8109                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8110                      and years_a.val <= yearsSel.val ),
8111          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8112          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8113          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8114   
8115      + sum ((transfer_techs,vintage,link_types)
8116                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8117                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8118          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8119          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8120          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8121   
8122      + sum ((years_a,transfer_techs,vintage,link_types)
8123                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8124                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8125                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8126                      and years_a.val <= yearsSel.val ),
8127          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8128          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8129          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8130          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8131   
8132      + sum ((transfer_techs,vintage)
8133                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8134                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8135          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8136          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8137   
8138          + sum (link_types,
8139              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8140              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8141              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8142          ) )
8143   
8144      + sum ((transfer_techs,vintage)
8145                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8146          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8147          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8148   
8149          + sum (link_types,
8150              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8151              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8152              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8153   
8154          + sum (timeModelSel,
8155              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8156              * timeLength(timeModelSel)
8157              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8158                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8159   
8160              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8161              * timeLength(timeModelSel)
8162              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8163                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8164              / timefrac
8165   
8166          + sum ((timeModelSel, link_types),
8167              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8168              * timeLength(timeModelSel)
8169              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8170              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8171                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8172   
8173              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8174              * timeLength(timeModelSel)
8175              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8176              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8177                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8178              / timefrac
8179          )
8180      =e=
8181  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
8182   
8183  * // ### Accounting Indicator Calculation Links
8184  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8185  * // {Eq_accounting_indicatorCalc_links_upper}
8186  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
8187      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8188          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
8189          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8190      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8192  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8193  * SPDX-License-Identifier: BSD-3-Clause
8194   
8195      sum ((transfer_techs,vintage)
8196                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8197                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8198          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8199          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8200   
8201      + sum ((years_a,transfer_techs,vintage)
8202                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8203                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8204                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8205                      and years_a.val <= yearsSel.val ),
8206          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8207          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8208          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8209   
8210      + sum ((transfer_techs,vintage,link_types)
8211                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8212                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8213          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8214          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8215          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8216   
8217      + sum ((years_a,transfer_techs,vintage,link_types)
8218                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8219                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8220                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8221                      and years_a.val <= yearsSel.val ),
8222          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8223          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8224          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8225          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8226   
8227      + sum ((transfer_techs,vintage)
8228                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8229                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8230          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8231          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8232   
8233          + sum (link_types,
8234              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8235              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8236              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8237          ) )
8238   
8239      + sum ((transfer_techs,vintage)
8240                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8241          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8242          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8243   
8244          + sum (link_types,
8245              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8246              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8247              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8248   
8249          + sum (timeModelSel,
8250              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8251              * timeLength(timeModelSel)
8252              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8253                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8254   
8255              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8256              * timeLength(timeModelSel)
8257              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8258                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8259              / timefrac
8260   
8261          + sum ((timeModelSel, link_types),
8262              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8263              * timeLength(timeModelSel)
8264              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8265              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8266                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8267   
8268              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8269              * timeLength(timeModelSel)
8270              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8271              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8272                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8273              / timefrac
8274          )
8275      =l=
8276  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
8277   
8278  * // ### Accounting Indicator Calculation Links
8279  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8280  * // {Eq_accounting_indicatorCalc_links_lower}
8281  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
8282      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8283          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
8284          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8285      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8287  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8288  * SPDX-License-Identifier: BSD-3-Clause
8289   
8290      sum ((transfer_techs,vintage)
8291                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8292                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8293          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8294          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8295   
8296      + sum ((years_a,transfer_techs,vintage)
8297                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8298                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8299                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8300                      and years_a.val <= yearsSel.val ),
8301          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8302          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8303          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8304   
8305      + sum ((transfer_techs,vintage,link_types)
8306                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8307                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8308          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8309          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8310          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8311   
8312      + sum ((years_a,transfer_techs,vintage,link_types)
8313                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8314                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8315                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8316                      and years_a.val <= yearsSel.val ),
8317          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8318          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8319          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8320          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8321   
8322      + sum ((transfer_techs,vintage)
8323                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8324                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8325          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8326          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8327   
8328          + sum (link_types,
8329              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8330              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8331              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8332          ) )
8333   
8334      + sum ((transfer_techs,vintage)
8335                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8336          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8337          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8338   
8339          + sum (link_types,
8340              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8341              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8342              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8343   
8344          + sum (timeModelSel,
8345              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8346              * timeLength(timeModelSel)
8347              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8348                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8349   
8350              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8351              * timeLength(timeModelSel)
8352              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8353                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8354              / timefrac
8355   
8356          + sum ((timeModelSel, link_types),
8357              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8358              * timeLength(timeModelSel)
8359              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8360              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8361                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8362   
8363              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8364              * timeLength(timeModelSel)
8365              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8366              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8367                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8368              / timefrac
8369          )
8370      =g=
8371  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
8372   
8373   
8374  * // ### Accounting Objective
8375  * // Calculates the indicators for the objective.
8376  * // {Eq_accounting_objective}
8377  Eq_accounting_objective
8378      ..
8379      accounting_objective
8380      =e=
8381      sum ((accNodesModel,accYears,indicator)
8382              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8383          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
8384          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8386  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8387  * SPDX-License-Identifier: BSD-3-Clause
8388   
8389  * == variable indicators ==
8390      sum((accNodesModel_a,accYears_a,indicator_a)
8391          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8392              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8393          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8394          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8395          )
8396   
8397  * == converters ==
8398      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8399              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8400                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8401          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8402          *
8403          ( sum ((converter_techs,vintage)
8404                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8405                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8406              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8407              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8408              )
8409   
8410          + sum ((years_a,converter_techs,vintage)
8411                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8412                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8413                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8414                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8415                          and years_a.val <= yearsSel.val ),
8416              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8417              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8418              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8419              )
8420   
8421          + sum ((yearsToCalc,converter_techs,vintage)
8422                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8423                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8424                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8425                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8426                          and yearsToCalc.val <= yearsSel.val ),
8427              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8428              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8429              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8430              )
8431   
8432          + sum ((converter_techs,vintage)
8433                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8434                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8435              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8436              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8437   
8438          + sum ((converter_techs,vintage)
8439                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8440              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8441              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8442   
8443          + sum ((timeModelSel,converter_techs,vintage,activity)
8444                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8445              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8446              * timeLength(timeModelSel)
8447              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8448          / timefrac
8449   
8450          + sum ((timeModelSel,converter_techs,vintage)
8451                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8452              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8453              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8454          / timefrac
8455   
8456          + sum ((timeModelSel,converter_techs,vintage)
8457                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8458              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8459              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8460                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8461   
8462              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8463              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8464                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8465          / timefrac
8466          )
8467      )
8468   
8469  * == storage ==
8470      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8471              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8472                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8473          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8474          *
8475          ( sum ((storage_techs,vintage)
8476                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8477                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8478              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8479              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8480              )
8481   
8482          + sum ((years_a,storage_techs,vintage)
8483                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8484                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8485                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8486                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8487                          and years_a.val <= yearsSel.val ),
8488              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8489              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8490              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8491              )
8492   
8493          + sum ((yearsToCalc,storage_techs,vintage)
8494                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8495                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8496                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8497                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8498                          and yearsToCalc.val <= yearsSel.val ),
8499              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8500              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8501              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8502              )
8503   
8504          + sum ((storage_techs,vintage)
8505                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8506                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8507              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8508              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8509   
8510          + sum ((storage_techs,vintage)
8511                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8512              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8513              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8514          )
8515      )
8516   
8517   
8518  * == transfer ==
8519      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8520              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8521                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8522          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8523          *
8524          ( sum ((linksModelToCalc,transfer_techs,vintage)
8525                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8526                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8527                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8528              0.5
8529              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8530              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8531   
8532          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8533                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8534                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8535                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8536                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8537                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8538                          and years_a.val <= yearsSel.val ),
8539              0.5
8540              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8541              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8542              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8543   
8544          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8545                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8546                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8547                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8548                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8549                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8550                          and yearsToCalc.val <= yearsSel.val ),
8551              0.5
8552              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8553              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8554              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8555   
8556          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8557                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8558                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8559                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8560              0.5
8561              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8562              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8563              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8564   
8565          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8566                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8567                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8568                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8569                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8570                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8571                          and years_a.val <= yearsSel.val ),
8572              0.5
8573              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8574              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8575              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8576              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8577   
8578          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8579                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8580                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8581                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8582                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8583                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8584                          and yearsToCalc.val <= yearsSel.val ),
8585              0.5
8586              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8587              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8588              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8589              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8590   
8591          + sum ((linksModelToCalc,transfer_techs,vintage)
8592                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8593                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8594                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8595              0.5
8596              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8597              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8598   
8599              + 0.5
8600              * sum (link_types,
8601                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8602                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8603                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8604              ) )
8605   
8606          + sum ((linksModelToCalc,transfer_techs,vintage)
8607                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8608                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8609              0.5
8610              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8611              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8612   
8613              + 0.5
8614              * sum (link_types,
8615                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8616                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8617                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8618   
8619              + 0.5
8620              * sum (timeModelSel,
8621                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8622                  * timeLength(timeModelSel)
8623                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8624                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8625   
8626                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8627                  * timeLength(timeModelSel)
8628                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8629                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8630                  / timefrac
8631   
8632              + 0.5
8633              * sum ((timeModelSel, link_types),
8634                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8635                  * timeLength(timeModelSel)
8636                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8637                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8638                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8639   
8640                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8641                  * timeLength(timeModelSel)
8642                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8643                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8644                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8645                  / timefrac
8646              )
8647          )
8648      )
8649   
8650   
8651  * == sources / sinks ==
8652      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8653              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8654                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8655          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8656          *
8657          sum ((timeModelSel,sourcesink_techs,commodity)
8658                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8659              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8660              * timeLength(timeModelSel)
8661              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8662          / timefrac
8663      )
8664      )
8665   
8666   
8667  * ==== model definition ====
8668   
8669  Model M_accounting
8670  /
8671  Eq_accounting_indicatorCalc_fixed
8672  Eq_accounting_indicatorCalc_upper
8673  Eq_accounting_indicatorCalc_lower
8674  Eq_accounting_indicatorCalc_links_fixed
8675  Eq_accounting_indicatorCalc_links_upper
8676  Eq_accounting_indicatorCalc_links_lower
8677  Eq_accounting_objective
8678  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
8680  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8681  * SPDX-License-Identifier: BSD-3-Clause
8682   
8683  * ==== optimization frames ====
8685   
8686  * mapping from optimization frame to years
8688  set optiframe / of1 * of1 /;
8689  set optiframeToCalc(optiframe);
8690   
8692  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
8694   
8696   
8697  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
8699  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8700  * SPDX-License-Identifier: BSD-3-Clause
8701   
8702  * ==== Overview of model dimensions ====
8703  parameters  acts(converter_techs) "active technologies"
8704              asts(storage_techs) "active storage technologies"
8705              atts(transfer_techs) "active transfer technologies"
8706   
8707  scalars nd "number of dispatch time steps per year"
8708          nn "number of network nodes"
8709          nl "number of network links"
8710          nt "number of converter, storage and transfer technologies"
8711          nc "number of commodities"
8712          ny "number of years of the capacity planning horizon";
8713   
8714  option acts < converter_availTech;
8715  option asts < storage_availTech;
8716  option atts < transfer_availTech;
8717   
8718  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
8719  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
8720  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
8721  nt = sum (storage_techs $asts(storage_techs), 1)
8722      + sum (converter_techs $acts(converter_techs), 1)
8723      + sum (transfer_techs $atts(transfer_techs), 1);
8724  nc = card(commodity);
8725  ny = sum (years $yearsToCalc(years), 1);
8726   
8727  file props / '' /;
8728  put props;
8729  put "### Model properties  ###" /;
8730  put "Number of active dispatch time steps per year: " nd:0:0  /;
8731  put "Number of active network nodes: " nn:0:0  /;
8732  put "Number of active network links: " nl:0:0  /;
8733  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
8734  put "Number of commodities: " nc:0:0  /;
8735  put "Number of years considered for capacity expansion: " ny:0:0  /;
8736  putclose;
8737   
8738  Model remix /
8739    M_converter
8740    M_storage
8741    M_transfer
8742    M_sourcesink
8743    M_balance
8744    M_accounting
8745  /;
8746   
8750   
8751  * ==== include methods  ====
8754   
8755  * check if the method is valid
8760   
8761   
8762  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
8764  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8765  * SPDX-License-Identifier: BSD-3-Clause
8766   
8769   
8772   
8773  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
8775  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8776  * SPDX-License-Identifier: BSD-3-Clause
8777   
8781   
8782  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
8784  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8785  * SPDX-License-Identifier: BSD-3-Clause
8786   
8790   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
8792  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8793  * SPDX-License-Identifier: BSD-3-Clause
8794   
8796   
8798   
8799  * ==== GAMS solver options ====
8805   
8806  * ==== REMix debug options ====
8810   
8811  * ==== REMix solver defaults ====
8819   
8827   
8837   
8845   
8854   
8855   
8856  * ==== setup optimization ====
8857  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8858     option limRow=0, limCol=0, solPrint=off;
8859  else
8860     option limRow=100000, limCol=100000, solPrint=on;
8861  );
8862   
8863   
8864  * ==== Solver specific default values ====
8865   
8885   
8886   
8888   
8889   
8891   
8892  option mip = cplex;
8893  option reslim = 1209600;
8894  option optcr = 1e-3;
8895  remix.threads = 8;
8896  remix.optFile = 1;
8897  remix.solveLink = 0;
8898  remix.holdFixed = 1;
8899   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8902  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8903  * SPDX-License-Identifier: BSD-3-Clause
8904   
8906   
8908  file opt / "cplex.opt" /;
8909  put opt;
8910  put "names no" /;
8911  put "rerun no" /;
8912   
8913  put "lpmethod 4" /;
8914  put "threads 8" /;
8915  put "barorder 3" /;
8916   
8918  put "scaind 0" /;
8919  put "predual -1" /;
8920   
8923  put "barepcomp 1e-6" /;
8925  put "solutiontype 2" /;
8926  put "epgap 1e-3" /;
8927   
8929  put "iis 0" /;
8930  put "quality 1" /;
8931   
8934  putclose;
8936   
8937   
8939   
8940   
8942   
8943   
8945   
8946   
8948   
8949   
8951   
8952   
8954   
8955   
8957   
8959   
8960   
8961  * ==== solve the problem ====
8962   
8963  loop ( optiframeToCalc,
8964      yearsSel(years) = no;
8965      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8966      yearsToFix(years) = no;
8967      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8968      accYearsSel(accYears) = no;
8969      accYearsSel("horizon") = yes;
8970      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8971      accYearsToFix(accYears) = no;
8972      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8973      timeModelSel(timeModel) = no;
8974      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8975      nodesModelSel(nodesModel) = no;
8976      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8977   
8978  * Fix decision for years previously optimized in case of myopic or foresight
8979      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8980          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8981          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8982              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8983      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8984          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8985   
8986      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8987          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8988          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8989              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8990      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8991          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8992   
8993      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8994          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8995              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8996                  sum(years$sameas(years, yearsToCalc),
8997                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8998                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8999              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9000                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
9001                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
9002      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
9003          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
9004   
9005      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9006          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9007          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9008              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
9009   
9010      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9011          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9012          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9013              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
9014   
9015      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9016          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
9017      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9018          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
9019      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9020          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
9021      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9022          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
9023      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
9024          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
9025   
9026   
9027      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
9028          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
9029          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
9030              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
9031      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
9032          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
9033   
9034      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
9035          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
9036          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
9037              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
9038      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
9039          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
9040   
9041      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
9042          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
9043              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9044                  sum(years$sameas(years, yearsToCalc),
9045                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
9046                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
9047              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9048                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
9049                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
9050      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
9051          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
9052   
9053      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9054          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9055          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9056              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
9057   
9058      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9059          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9060          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9061              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
9062   
9063      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9064          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
9065      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9066          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
9067      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9068          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
9069      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9070          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
9071      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9072          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
9073   
9074   
9075      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
9076          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
9077          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
9078              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
9079      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
9080          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
9081   
9082      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
9083          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
9084          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
9085              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
9086      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
9087          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
9088   
9089      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9090          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
9091              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9092                  sum(years$sameas(years, yearsToCalc),
9093                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
9094                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
9095              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9096                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
9097                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
9098      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9099          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
9100   
9101      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9102          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9103          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9104              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
9105   
9106      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9107          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9108          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9109              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
9110   
9111      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9112          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
9113      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9114          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
9115      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9116          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
9117      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9118          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
9119      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9120          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
9121   
9122      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
9123          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
9124   
9125  * Optimize and log values
9126      solve remix minimizing accounting_objective using mip;
9127      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
9128      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
9129   
9130  );
9131   
9135   
9136  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
9138  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9139  * SPDX-License-Identifier: BSD-3-Clause
9140   
9144   
9145  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
9147  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9148  * SPDX-License-Identifier: BSD-3-Clause
9149   
9153   
9154  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
9156  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9157  * SPDX-License-Identifier: BSD-3-Clause
9158   
9162   
9163  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
9165  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9166  * SPDX-License-Identifier: BSD-3-Clause
9167   
9170   
9171  * ==== indicator accounting ====
9172   
9173  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
9174      =
9175  * == converters ==
9176      sum ((converter_techs(techs),vintage)
9177                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9178                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
9179          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9180          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
9181   
9182      + sum ((years_a,converter_techs(techs),vintage)
9183                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9184                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
9185                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
9186                      and years_a.val <= yearsToCalc.val ),
9187          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
9188          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
9189          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
9190   
9191      + sum ((converter_techs(techs),vintage)
9192                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9193                      and converter_techParam(converter_techs,vintage,"freeDecom")),
9194          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9195          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
9196   
9197      + sum ((converter_techs(techs),vintage)
9198                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9199          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9200          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
9201   
9202      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
9203                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
9204          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9205          * timeLength(timeModelToCalc)
9206          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
9207          / timefrac
9208   
9209      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9210                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9211          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9212          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
9213          / timefrac
9214   
9215      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9216                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9217          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9218          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
9219              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
9220   
9221          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9222          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
9223              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
9224          / timefrac
9225   
9226  * == storage ==
9227      + sum ((storage_techs(techs),vintage)
9228                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9229                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
9230          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9231          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
9232   
9233      + sum ((years_a,storage_techs(techs),vintage)
9234                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9235                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
9236                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
9237                      and years_a.val <= yearsToCalc.val ),
9238          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
9239          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
9240          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
9241   
9242      + sum ((storage_techs(techs),vintage)
9243                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9244                      and storage_techParam(storage_techs,vintage,"freeDecom")),
9245          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9246          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
9247   
9248      + sum ((storage_techs(techs),vintage)
9249                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
9250          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9251          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
9252   
9253  * == transfer ==
9254      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9255                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9256                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9257                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9258          0.5
9259          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9260          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9261   
9262      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
9263                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9264                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9265                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
9266                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9267                      and years_a.val <= yearsToCalc.val ),
9268          0.5
9269          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9270          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
9271          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
9272   
9273      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
9274                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9275                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9276                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9277          0.5
9278          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9279          * transfer_lengthParam(linksModel,link_types,"length")
9280          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9281   
9282      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
9283                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9284                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9285                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9286                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9287                      and years_a.val <= yearsToCalc.val ),
9288          0.5
9289          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9290          * transfer_lengthParam(linksModel,link_types,"length")
9291          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9292          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
9293   
9294      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9295                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
9296                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9297                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9298          0.5
9299          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9300          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9301   
9302          + 0.5
9303          * sum (link_types,
9304              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9305              * transfer_lengthParam(linksModel,link_types,"length")
9306              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9307          ) )
9308   
9309   
9310      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9311                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9312                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
9313          + 0.5
9314          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9315          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9316   
9317          + 0.5
9318          * sum (link_types,
9319              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9320              * transfer_lengthParam(linksModel,link_types,"length")
9321              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9322   
9323          + 0.5
9324          * sum (timeModelToCalc,
9325              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9326              * timeLength(timeModelToCalc)
9327              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9328                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9329   
9330              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9331              * timeLength(timeModelToCalc)
9332              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9333                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9334              / timefrac
9335   
9336          + 0.5
9337          * sum ((timeModelToCalc, link_types),
9338              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9339              * timeLength(timeModelToCalc)
9340              * transfer_lengthParam(linksModel,link_types,"length")
9341              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9342                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9343   
9344              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9345              * timeLength(timeModelToCalc)
9346              * transfer_lengthParam(linksModel,link_types,"length")
9347              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9348                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9349              / timefrac
9350          )
9351   
9352   
9353  * == sources / sinks ==
9354      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
9355              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
9356          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9357          * timeLength(timeModelToCalc)
9358          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
9359      / timefrac
9360      ;
9361   
9362   
9363  * ==== full set of main indicators ====
9364   
9365  indicator_accounting(accNodesModel,accYears,indicator)
9366      $sum((accNodesModel_a,accYears_a,indicator_a)
9367              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
9368      =
9369      + sum((accNodesModel_a,accYears_a,indicator_a)
9370              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9371                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9372          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9373          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
9374   
9375      + sum((accNodesModel_a,accYears_a,indicator_a)
9376              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
9377          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9378          * (sum((nodesModelToCalc,yearsToCalc,techs)
9379                  $(sameas(accNodesModel_a, nodesModelToCalc)
9380                      and sameas(accYears_a, yearsToCalc)),
9381                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
9382      ;
9383   
9384  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9385      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9386      =
9387          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9388          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
9389              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
9390   
9391          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9392          * (sum((nodesModelToCalc,yearsToCalc,techs)
9393                  $(sameas(accNodesModel_a, nodesModelToCalc)
9394                      and sameas(accYears_a, yearsToCalc)),
9395                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
9396      ;
9397   
9398  indicator_accounting_var(accNodesModel,accYears,indicator)
9399      $accounting_indicator.l(accNodesModel,accYears,indicator)
9400      = accounting_indicator.l(accNodesModel,accYears,indicator);
9401   
9402  indicator_accounting_ref(accNodesModel,accYears,indicator)
9403      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
9406  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9407  * SPDX-License-Identifier: BSD-3-Clause
9408   
9409  * == variable indicators ==
9410      sum((accNodesModel_a,accYears_a,indicator_a)
9411          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9412              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9413          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9414          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
9415          )
9416   
9417  * == converters ==
9418      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9419              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9420                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9421          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9422          *
9423          ( sum ((converter_techs,vintage)
9424                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9425                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
9426              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9427              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
9428              )
9429   
9430          + sum ((years_a,converter_techs,vintage)
9431                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
9432                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9433                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
9434                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
9435                          and years_a.val <= yearsSel.val ),
9436              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
9437              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
9438              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
9439              )
9440   
9441          + sum ((yearsToCalc,converter_techs,vintage)
9442                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9443                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9444                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
9445                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
9446                          and yearsToCalc.val <= yearsSel.val ),
9447              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
9448              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
9449              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
9450              )
9451   
9452          + sum ((converter_techs,vintage)
9453                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9454                          and converter_techParam(converter_techs,vintage,"freeDecom")),
9455              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9456              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
9457   
9458          + sum ((converter_techs,vintage)
9459                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9460              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9461              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
9462   
9463          + sum ((timeModelSel,converter_techs,vintage,activity)
9464                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
9465              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9466              * timeLength(timeModelSel)
9467              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
9468          / timefrac
9469   
9470          + sum ((timeModelSel,converter_techs,vintage)
9471                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9472              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9473              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
9474          / timefrac
9475   
9476          + sum ((timeModelSel,converter_techs,vintage)
9477                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9478              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9479              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9480                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
9481   
9482              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9483              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9484                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
9485          / timefrac
9486          )
9487      )
9488   
9489  * == storage ==
9490      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9491              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9492                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9493          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9494          *
9495          ( sum ((storage_techs,vintage)
9496                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
9497                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
9498              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
9499              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
9500              )
9501   
9502          + sum ((years_a,storage_techs,vintage)
9503                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
9504                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9505                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
9506                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
9507                          and years_a.val <= yearsSel.val ),
9508              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
9509              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
9510              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
9511              )
9512   
9513          + sum ((yearsToCalc,storage_techs,vintage)
9514                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
9515                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9516                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
9517                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
9518                          and yearsToCalc.val <= yearsSel.val ),
9519              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
9520              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
9521              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
9522              )
9523   
9524          + sum ((storage_techs,vintage)
9525                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9526                          and storage_techParam(storage_techs,vintage,"freeDecom")),
9527              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9528              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
9529   
9530          + sum ((storage_techs,vintage)
9531                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
9532              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9533              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
9534          )
9535      )
9536   
9537   
9538  * == transfer ==
9539      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9540              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9541                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9542          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9543          *
9544          ( sum ((linksModelToCalc,transfer_techs,vintage)
9545                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9546                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9547                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
9548              0.5
9549              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9550              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
9551   
9552          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
9553                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9554                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9555                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9556                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9557                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
9558                          and years_a.val <= yearsSel.val ),
9559              0.5
9560              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9561              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9562              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
9563   
9564          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9565                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9566                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9567                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9568                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
9569                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
9570                          and yearsToCalc.val <= yearsSel.val ),
9571              0.5
9572              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9573              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
9574              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
9575   
9576          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
9577                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9578                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9579                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9580              0.5
9581              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9582              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9583              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
9584   
9585          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
9586                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9587                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9588                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9589                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9590                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9591                          and years_a.val <= yearsSel.val ),
9592              0.5
9593              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9594              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9595              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9596              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9597   
9598          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
9599                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9600                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9601                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9602                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
9603                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9604                          and yearsToCalc.val <= yearsSel.val ),
9605              0.5
9606              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9607              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9608              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
9609              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
9610   
9611          + sum ((linksModelToCalc,transfer_techs,vintage)
9612                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9613                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9614                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9615              0.5
9616              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9617              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
9618   
9619              + 0.5
9620              * sum (link_types,
9621                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9622                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9623                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
9624              ) )
9625   
9626          + sum ((linksModelToCalc,transfer_techs,vintage)
9627                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9628                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
9629              0.5
9630              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9631              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
9632   
9633              + 0.5
9634              * sum (link_types,
9635                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9636                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9637                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
9638   
9639              + 0.5
9640              * sum (timeModelSel,
9641                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9642                  * timeLength(timeModelSel)
9643                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9644                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
9645   
9646                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9647                  * timeLength(timeModelSel)
9648                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9649                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
9650                  / timefrac
9651   
9652              + 0.5
9653              * sum ((timeModelSel, link_types),
9654                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9655                  * timeLength(timeModelSel)
9656                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9657                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9658                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
9659   
9660                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9661                  * timeLength(timeModelSel)
9662                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9663                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9664                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
9665                  / timefrac
9666              )
9667          )
9668      )
9669   
9670   
9671  * == sources / sinks ==
9672      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9673              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9674                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9675          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9676          *
9677          sum ((timeModelSel,sourcesink_techs,commodity)
9678                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
9679              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
9680              * timeLength(timeModelSel)
9681              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
9682          / timefrac
9683      )
9685  ;
9686   
9687   
9688  * ==== link-specific indicator accounting ====
9689   
9690  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
9691      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
9692          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
9693      =
9694      sum ((transfer_techs(techs),vintage)
9695                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9696                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9697          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9698          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9699   
9700      + sum ((years_a,transfer_techs(techs),vintage)
9701                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9702                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9703                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9704                      and years_a.val <= yearsToCalc.val ),
9705          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9706          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9707          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
9708   
9709      + sum ((transfer_techs(techs),vintage,link_types)
9710                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9711                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9712          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9713          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9714          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9715   
9716      + sum ((years_a,transfer_techs(techs),vintage,link_types)
9717                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9718                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9719                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9720                      and years_a.val <= yearsToCalc.val ),
9721          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9722          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9723          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9724          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9725   
9726      + sum ((transfer_techs(techs),vintage)
9727                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
9728          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9729          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9730   
9731          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9732          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9733   
9734          + sum (link_types,
9735              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9736              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9737              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9738   
9739              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9740              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9741              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9742   
9743          + sum (timeModelToCalc,
9744              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9745              * timeLength(timeModelToCalc)
9746              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9747                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9748   
9749              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9750              * timeLength(timeModelToCalc)
9751              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9752                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9753              / timefrac
9754   
9755          + sum ((timeModelToCalc, link_types),
9756              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9757              * timeLength(timeModelToCalc)
9758              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9759              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9760                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9761   
9762              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9763              * timeLength(timeModelToCalc)
9764              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9765              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9766                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9767              / timefrac
9768      );
9769   
9770   
9771  * == converter capacities ==
9772   
9773  converter_ratedInput(converter_techs,vintage,commodity)
9774      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9775      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9776              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9777  converter_ratedInput(converter_techs,vintage,commodity)
9778      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9779      = 0;
9780   
9781  converter_ratedOutput(converter_techs,vintage,commodity)
9782      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9783      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9784              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9785  converter_ratedOutput(converter_techs,vintage,commodity)
9786      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9787      = 0;
9788   
9789  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9790      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9791          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9792      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9793              and converter_ratedOutput(converter_techs,vintage,commodity)),
9794          converter_ratedOutput(converter_techs,vintage,commodity));
9795   
9796  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9797      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9798          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9799      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9800              and converter_ratedOutput(converter_techs,vintage,commodity)),
9801          converter_ratedOutput(converter_techs,vintage,commodity));
9802   
9803  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9804      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9805   
9806  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9807      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9808   
9809  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9810  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9811      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9812       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9813      = sum(years_a$
9814            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9815             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9816             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9817        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9818   
9819  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9820      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9821   
9822  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9823      $(converter_ratedOutput(converter_techs,vintage,commodity))
9824      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9825          * converter_ratedOutput(converter_techs,vintage,commodity);
9826   
9827  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9828      = sum(vintage,
9829          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9830  option clear = converter_caps_ext;
9831   
9832  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9833      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9834          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9835          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9836      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9837          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9838   
9839  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9840      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9841          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9842          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9843      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9844          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9845   
9846  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9847      = sum((nodesModelToCalc,years)
9848              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9849                  and map_accYearsPostCalc(accYears,years)),
9850          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9851  option clear = converter_caps_novintage_ext;
9852   
9853  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9854      = sum((nodesModelToCalc,years)
9855              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9856                  and map_accYearsPostCalc(accYears,years)),
9857          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9858  option clear = converter_units_ext;
9859   
9860  * ==== transfer capacities ====
9861   
9862  max_transfer_coefficient(transfer_techs(techs),commodity)
9863          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9864          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9865   
9866  min_transfer_coefficient(transfer_techs(techs),commodity)
9867          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9868          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9869   
9870  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9871      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9872          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9873          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9874      = yes;
9875   
9876  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9877      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9878   
9879  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9880      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9881   
9882  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9883  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9884      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9885       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9886      = sum(years_a$
9887            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9888             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9889             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9890        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9891   
9892  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9893      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9894   
9895  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9896      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9897          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9898                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9899      = sum(vintage,
9900          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9901          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9902   
9903  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9904      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9905          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9906          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9907                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9908      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9909          * min_transfer_coefficient(transfer_techs,commodity);
9910   
9911  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9912      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9913          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9914          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9915                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9916      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9917          * max_transfer_coefficient(transfer_techs,commodity);
9918   
9919   
9920  * ==== transfer flows ====
9921   
9922  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9923      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9924      = sum(vintage,
9925          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9926              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9927          * timeLength(timeModelToCalc)
9928          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9929   
9930  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9931      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9932      = sum(timeModelToCalc,
9933          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9934   
9935  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9936      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9937      = sum(timeModelToCalc
9938              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9939          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9940   
9941  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9942      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9943      = sum(timeModelToCalc
9944              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9945          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9946   
9947  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9948      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9949      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9950          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9951   
9952  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9953      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9954          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9955          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9956      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9957          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9958   
9959  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9960      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9961          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9962              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9963      = -1 * abs(sum(vintage,
9964          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9965              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9966          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9967              + sum(link_types,
9968                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9969                  * transfer_lengthParam(linksModel,link_types,"length")))))
9970          * timeLength(timeModelToCalc);
9971   
9972  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9973      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9974          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9975              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9976      = sum(timeModelToCalc,
9977          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9978   
9979   
9980  * ==== storage capacities ====
9981   
9982  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9983      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9984              and storage_usedCom(storage_techs,vintage,commodity)
9985              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9986      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9987              and storage_usedCom(storage_techs,vintage,commodity)
9988              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9989          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9990   
9991  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9992      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9993              and storage_usedCom(storage_techs,vintage,commodity)
9994              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9995      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9996              and storage_usedCom(storage_techs,vintage,commodity)
9997              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9998          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9999   
10000  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
10001      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
10002      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
10003   
10004  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
10005      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
10006      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
10007   
10008  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
10009  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
10010      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
10011       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
10012      = sum(years_a$
10013            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
10014             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
10015             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
10016        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
10017   
10018  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
10019      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
10020   
10021  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
10022      $storage_sizeParam(storage_techs,vintage,commodity,"size")
10023      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
10024          * storage_sizeParam(storage_techs,vintage,commodity,"size");
10025   
10026  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
10027      = sum(vintage,
10028          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
10029   
10030  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
10031      $(storage_usedCom(storage_techs,vintage,commodity)
10032          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
10033               or storage_techParam(storage_techs,vintage,"usageDegradation")))
10034      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
10035                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
10036                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
10037                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
10038  option clear = storage_caps_ext;
10039   
10040  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
10041      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
10042          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
10043      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
10044          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
10045   
10046  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
10047      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
10048          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
10049      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
10050          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
10051   
10052  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
10053      = sum((nodesModelToCalc,years)
10054              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10055                  and map_accYearsPostCalc(accYears,years)),
10056          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
10057  option clear = storage_caps_novintage_ext;
10058   
10059  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
10060      = sum((nodesModelToCalc,years)
10061              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10062                  and map_accYearsPostCalc(accYears,years)),
10063          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
10064  option clear = storage_units_ext;
10065   
10066   
10067  * ==== storage levels and flows ====
10068   
10069  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10070      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
10071      =
10072      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10073      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10074          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10075      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10076          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10077      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
10078          * storage_sizeParam(storage_techs,vintage,commodity,"size")
10079          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
10080          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
10081              and ord(timeModelToCalc)=1)
10083      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10084          * timeLength(timeModelToCalc)
10086      ;
10087   
10088  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
10089      = sum((nodesModelToCalc,yearsToCalc,vintage)
10090              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
10091          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
10092  option clear = storage_flows_ext;
10093   
10094  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10095      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
10096      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
10097   
10098  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
10099      = sum((nodesModelToCalc,yearsToCalc,vintage)
10100              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
10101          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
10102  option clear = storage_level_out_ext;
10103   
10104  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
10105      = sum(timeModelToCalc,
10106          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10107   
10108  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
10109      = sum(timeModelToCalc
10110              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
10111          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10112   
10113  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
10114      = sum(timeModelToCalc
10115              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
10116          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10117   
10118  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
10119      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
10120          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
10121   
10122  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
10123      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
10124          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
10125      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
10126          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
10127   
10128  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
10129      = sum((nodesModelToCalc,yearsToCalc,vintage)
10130              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10131                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10132                  and map_accYearsPostCalc(accYears,yearsToCalc)),
10133          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10134          * timeLength(timeModelToCalc));
10135   
10136  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
10137      = sum(timeModelToCalc,
10138          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10139   
10140   
10141  * == commodity balance ==
10142   
10143  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
10144      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
10145          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
10146      = sum((activity)
10147              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
10148          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
10149              * timeLength(timeModelToCalc)
10150              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
10151          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
10152              * timeLength(timeModelToCalc)
10153              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
10154   
10155  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10156      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
10157          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
10158      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
10159          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10160              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10161          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10162              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10163          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
10164              * storage_sizeParam(storage_techs,vintage,commodity,"size")
10165              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
10166              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
10167                  and ord(timeModelToCalc)=1)
10168          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10169      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10170      * timeLength(timeModelToCalc);
10171   
10172  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
10173      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10174          and sameas(yearsToCalc,vintage))
10175      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
10176      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10177      * timeLength(timeModelToCalc);
10178   
10179  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
10180      $sum((linksModel)
10181          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
10182                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10183                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
10184      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
10185      + sum((linksModel)
10186              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
10187                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10188                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
10189   
10190  * incoming transfer flows
10191              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
10192                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
10193                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
10194                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
10195              * timeLength(timeModelToCalc)
10196              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
10197   
10198  * outgoing transfer flows
10199              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10200                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
10201                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10202                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
10203              * timeLength(timeModelToCalc)
10204              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
10205   
10206              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10207                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
10208                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10209                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
10210                      * timeLength(timeModelToCalc)
10211                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
10212                          + sum(link_types,
10213                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
10214                              * transfer_lengthParam(linksModel,link_types,"length")))))
10215      ;
10216   
10217  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
10218      = sum((nodesModelToCalc,yearsToCalc,vintage)
10219              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
10220                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10221                  and map_accYearsPostCalc(accYears,yearsToCalc)),
10222          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
10223  option clear = commodity_balance_ext;
10224   
10225   
10226  * ==== annual commodity sums ====
10227   
10228  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
10229      = sum(timeModelToCalc,
10230          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10231   
10232  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
10233      = sum(timeModelToCalc
10234              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
10235          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10236   
10237  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
10238      = sum(timeModelToCalc
10239              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
10240          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10241   
10242  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10243      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
10244          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
10245   
10246  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
10247      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
10248          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
10249      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10250          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
10251   
10252   
10253  * ==== marginal information ====
10254   
10255  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10256    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
10257    =
10258    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
10259   
10260  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10261      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
10262      =
10263      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
10264   
10265  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10266      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10267          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10268          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
10269      =
10270      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10271      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10272      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
10273   
10274  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
10275  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10276      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
10277      =
10278      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10279          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
10280  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10281      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
10282      =
10283      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10284          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
10285  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10286      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
10287      =
10288      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10289          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
10292   
10293  * ==== R2A postcalc information ====
10294   
10296   
10297   
10298  * ==== round profiles to reduce size of gdx ====
10299   
10301  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10302      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10303      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
10304   
10305  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10306      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10307      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10308   
10309  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10310      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10311      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10312   
10313  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10314      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10315      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10316   
10317  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10318      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10319      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10320   
10321  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10322      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10323      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
10324   
10325  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10326      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10327      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
10329   
10330  * ==== Dump diagnostics ====
10331   
10332  diagnostics("variables") = remix.numVar;
10333  diagnostics("equations") = remix.numEqu;
10334  diagnostics("iterations") = remix.iterUsd;
10335   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
10339  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10340  * SPDX-License-Identifier: BSD-3-Clause
10341   
10344   
10345  execute_unload "./results\PIC_energysystem_existing.gdx"
10347      metadata
10349      timeModel
10350      timeModelToCalc
10351      nodesModel
10352      linksModel
10353      indicator
10354      commodity
10355      techs
10356      accNodesModel
10357      accYears
10358   
10359      map_nodesModel
10360      map_linksModel
10361      map_nodesAccounting
10362   
10363      indicator_accounting
10364      indicator_accounting_var
10365      indicator_accounting_ref
10366      indicator_accounting_comp
10367      indicator_accounting_detailed
10368      indicator_accounting_links
10369   
10370      converter_caps
10371      converter_units
10373   
10374      transfer_caps
10375      transfer_links
10376      transfer_flows
10377      transfer_flows_annual
10378      transfer_losses
10379      transfer_losses_annual
10380   
10381      storage_caps
10382      storage_units
10383      storage_flows
10384      storage_level_out
10385      storage_flows_annual
10386      storage_losses_out
10387      storage_losses_annual
10389   
10390      commodity_balance
10391      commodity_balance_annual
10392   
10393      marginals_balance
10394      marginals_sourcesink_profile
10395      marginals_sourcesink_sum
10396      marginals_indicator_bounds
10397   
10399      diagnostics
10400      ;
10403   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/27/25 14:32:30 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/27/25 14:32:30\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_activities.csv
    55      412 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_activities.csv
    56      420 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_gridsegments.csv
    57      422 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_gridsegments.csv
    58      430 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_linksdata.csv
    59      432 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_linksdata.csv
    60      450 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_link_types.csv
    61      452 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_link_types.csv
    62      461 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_commodities.csv
    63      461 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_commodities.csv
    64      483 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_commodities.csv
    65      492 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_indicators.csv
    66      492 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_indicators.csv
    67      498 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_indicators.csv
    68      507 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_converter_techs.csv
    69      507 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_converter_techs.csv
    70      533 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_storage_techs.csv
    71      533 INCLUDE       29     303  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_storage_techs.csv
    72      537 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_transfer_techs.csv
    73      540 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_sourcesink_techs.csv
    74      540 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_sourcesink_techs.csv
    75      548 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_converter_techs.csv
    76      548 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_converter_techs.csv
    77      572 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_converter_techs.csv
    78      576 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_storage_techs.csv
    79      576 INCLUDE       29     319  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_storage_techs.csv
    80      578 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_storage_techs.csv
    81      583 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_transfer_techs.csv
    82      584 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_transfer_techs.csv
    83      588 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_sourcesink_techs.csv
    84      588 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_sourcesink_techs.csv
    85      592 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_sourcesink_techs.csv
    86      602 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_degradation_states.csv
    87      604 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_degradation_states.csv
    88      613 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_soc.csv
    89      615 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_soc.csv
    90      631 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_linkstartend.csv
    91      633 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_linkstartend.csv
    92      647 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    93      758 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_accnodes.csv
    94      760 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\set_accnodes.csv
    95      825 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_accnodes.csv
    96      827 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\map_accnodes.csv
    97      880 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    98      912 IF EXIST      97      32  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converterunits.csv
    99      912 INCLUDE       97      32  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converterunits.csv
   100      959 IF EXIST      97      34  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converterunits.csv
   101      973 IF EXIST      97      48  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converteractivity.csv
   102      975 IF EXIST      97      50  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converteractivity.csv
   103      992 IF EXIST      97      67  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converterstartup.csv
   104      994 IF EXIST      97      69  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_converterstartup.csv
   105     1013 IF EXIST      97      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_storageunits.csv
   106     1013 INCLUDE       97      88  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_storageunits.csv
   107     1018 IF EXIST      97      90  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_storageunits.csv
   108     1040 IF EXIST      97     112  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_transferlinks.csv
   109     1042 IF EXIST      97     114  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_transferlinks.csv
   110     1064 IF EXIST      97     136  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_transferperlength.csv
   111     1066 IF EXIST      97     138  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_transferperlength.csv
   112     1081 IF EXIST      97     153  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_sourcesinkflow.csv
   113     1081 INCLUDE       97     153  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_sourcesinkflow.csv
   114     1168 IF EXIST      97     155  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_sourcesinkflow.csv
   115     1182 IF EXIST      97     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_perindicator.csv
   116     1182 INCLUDE       97     169  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_perindicator.csv
   117     1188 IF EXIST      97     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_perindicator.csv
   118     1214 IF EXIST      97     197  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_indicatorbounds.csv
   119     1214 INCLUDE       97     197  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_indicatorbounds.csv
   120     1218 IF EXIST      97     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_indicatorbounds.csv
   121     1237 IF EXIST      97     218  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_indicatorbounds_links.csv
   122     1239 IF EXIST      97     220  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\accounting_indicatorbounds_links.csv
   123     1245 BATINCLUDE    97     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1313 BATINCLUDE    97     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1365 BATINCLUDE    97     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1417 BATINCLUDE    97     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1485 BATINCLUDE    97     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   128     1553 BATINCLUDE    97     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   129     1621 BATINCLUDE    97     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   130     2081 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   131     2156 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   132     2163 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   133     2170 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   134     2187 IF DEXIST    133      17  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\results\
   135     2405 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   136     2418 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   137     2521 IF EXIST     136     103  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_capacityparam.csv
   138     2521 INCLUDE      136     103  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_capacityparam.csv
   139     2781 IF EXIST     136     105  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_capacityparam.csv
   140     2789 BATINCLUDE   136     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   141     2800 BATINCLUDE   136     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   142     2833 IF EXIST     136     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_techparam.csv
   143     2833 INCLUDE      136     137  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_techparam.csv
   144     2858 IF EXIST     136     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_techparam.csv
   145     2880 IF EXIST     136     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_activityprofile.csv
   146     2880 INCLUDE      136     161  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_activityprofile.csv
   147     3022 IF EXIST     136     162  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_activityprofile.csv
   148     3024 IF EXIST     136     164  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_activityprofile.csv
   149     3045 IF EXIST     136     185  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficient.csv
   150     3045 INCLUDE      136     185  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficient.csv
   151     3097 IF EXIST     136     186  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficient.csv
   152     3098 IF EXIST     136     187  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficient.csv
   153     3100 IF EXIST     136     189  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficient.csv
   154     3113 IF EXIST     136     202  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficientprofile.csv
   155     3114 IF EXIST     136     203  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficientprofile.csv
   156     3116 IF EXIST     136     205  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\converter_coefficientprofile.csv
   157     4117 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   158     4210 IF EXIST     157      93  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_reservoirparam.csv
   159     4210 INCLUDE      157      93  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_reservoirparam.csv
   160     4227 IF EXIST     157      95  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_reservoirparam.csv
   161     4231 BATINCLUDE   157      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   162     4242 BATINCLUDE   157     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   163     4253 BATINCLUDE   157     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   164     4289 IF EXIST     157     127  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_techparam.csv
   165     4289 INCLUDE      157     127  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_techparam.csv
   166     4293 IF EXIST     157     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_techparam.csv
   167     4314 IF EXIST     157     150  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_sizeparam.csv
   168     4314 INCLUDE      157     150  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_sizeparam.csv
   169     4318 IF EXIST     157     152  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_sizeparam.csv
   170     4335 IF EXIST     157     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_socparam.csv
   171     4337 IF EXIST     157     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_socparam.csv
   172     4356 IF EXIST     157     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_degradationparam.csv
   173     4358 IF EXIST     157     192  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_degradationparam.csv
   174     4387 IF EXIST     157     221  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_levelprofile.csv
   175     4388 IF EXIST     157     222  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_levelprofile.csv
   176     4390 IF EXIST     157     224  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\storage_levelprofile.csv
   177     5327 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   178     5392 IF EXIST     177      71  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_linksparam.csv
   179     5394 IF EXIST     177      73  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_linksparam.csv
   180     5410 IF EXIST     177      89  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_flowprofile.csv
   181     5412 IF EXIST     177      91  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_flowprofile.csv
   182     5432 IF EXIST     177     111  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_techparam.csv
   183     5434 IF EXIST     177     113  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_techparam.csv
   184     5449 IF EXIST     177     128  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_coefficient.csv
   185     5451 IF EXIST     177     130  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_coefficient.csv
   186     5465 IF EXIST     177     144  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_coefperflow.csv
   187     5467 IF EXIST     177     146  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_coefperflow.csv
   188     5482 IF EXIST     177     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_coefperlength.csv
   189     5484 IF EXIST     177     163  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_coefperlength.csv
   190     5498 IF EXIST     177     177  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_reactperlength.csv
   191     5500 IF EXIST     177     179  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_reactperlength.csv
   192     5514 IF EXIST     177     193  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_lengthparam.csv
   193     5516 IF EXIST     177     195  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_lengthparam.csv
   194     5530 IF EXIST     177     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_gridsegments.csv
   195     5532 IF EXIST     177     211  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\transfer_gridsegments.csv
   196     6187 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   197     6225 IF EXIST     196      38  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_config.csv
   198     6225 INCLUDE      196      38  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_config.csv
   199     6494 IF EXIST     196      40  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_config.csv
   200     6498 BATINCLUDE   196      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   201     6526 IF EXIST     196      62  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_profile.csv
   202     6526 INCLUDE      196      62  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_profile.csv
   203     6696 IF EXIST     196      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_profile.csv
   204     6697 IF EXIST     196      64  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_profile.csv
   205     6699 IF EXIST     196      66  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_profile.csv
   206     6719 IF EXIST     196      86  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_annualsum.csv
   207     6719 INCLUDE      196      86  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_annualsum.csv
   208     6820 IF EXIST     196      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\225a\sourcesink_annualsum.csv
   209     6823 BATINCLUDE   196      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   210     7011 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   211     7159 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   212     7226 INCLUDE      211      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     7516 INCLUDE      211      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   214     7806 INCLUDE      211      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   215     8096 INCLUDE      211     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   216     8191 INCLUDE      211     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   217     8286 INCLUDE      211     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   218     8385 INCLUDE      211     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   219     8679 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   220     8698 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   221     8763 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   222     8774 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   223     8783 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   224     8791 INCLUDE      223       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   225     8901 INCLUDE      223       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   226     9137 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   227     9146 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   228     9155 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   229     9164 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   230     9405 INCLUDE      229     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   231    10338 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       13.125 SECONDS     79 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/27/25 14:32:30 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 9126


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.000E-04, 1.000E+06] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 5.357E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/27/25 14:32:30 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 9126


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    7,030,327
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    5,435,921
NON ZERO ELEMENTS    17,078,036


GENERATION TIME      =       35.640 SECONDS  4,059 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       53.109 SECONDS  4,059 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/27/25 14:32:30 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 9126


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  9126

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              557.2607

 RESOURCE USAGE, LIMIT         79.687   1209600.000
 ITERATION COUNT, LIMIT       125    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 2202.57 Mb (peak 2244.04 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 184.14 Mb (peak 481.54 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 77.59sec (det. 79350.37 ticks)


Optimal solution found
Objective:          557.260721

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        5.846e-07   1.429e-05   5.846e-07   1.429e-05
dual infeasibility          3.674e-08   2.254e-03   3.674e-08   2.254e-03
primal residual             2.715e-11   8.908e-10   2.715e-11   8.908e-10
dual residual               3.712e-08   2.947e-02   3.712e-08   2.947e-02
primal solution vector      6.373e+00   1.098e+05   6.373e+00   1.098e+05
dual solution vector        3.322e+02   1.976e+05   3.322e+02   1.976e+05
slacks                      1.000e+06   6.573e+07   1.000e+06   6.573e+07
reduced costs               1.173e+01   7.378e+04   1.173e+01   7.378e+04
comp. slackness viol.       7.980e-07   2.206e-03




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/27/25 14:32:30 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\cplex.opt


EXECUTION TIME       =       58.250 SECONDS  3,494 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_Island_Countries\process\run_remix.lst
