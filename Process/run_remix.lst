GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/25/25 13:29:23 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/25/25 13:29:23"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "66a5a6130aca6dccef1895913cfc7893fb9e08fc"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 818   
 819  map_accNodes(accNodesModel,accNodesModel_aggregation)
 820      $sum((nodesData, nodesModelToCalc)
 821              $( sameas(nodesModelToCalc,accNodesModel)
 822                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 823                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 824   
 825  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 826  map_accNodes(accNodesModel,accNodesModel) = yes;
 827  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 828  map_accLinks(accLinksModel,accLinksModel) = yes;
 829  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 830  map_accYears(accYears,accYears) = yes;
 831   
 832  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 833      $sum((nodesData)
 834              $( map_accNodesLoad(nodesData,accNodesModel)
 835                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 836   
 837  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 838  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 839  map_accLinksToCalc("global",linksModelToCalc) = yes;
 840  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 841  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 842  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 843   
 844  * Duplicate sets for postcalc reporting without horizon and accYears
 845  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 846  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 847  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 848  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 849   
 850  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 851  option map_nodesAccounting < map_accNodes;
 852   
 853  * ==== Generic sets  ====
 854  * These set names are repeated across different profile parameters.
 855  * they are not strictly related to each other and are not input data but
 856  * are needed for validation.
 857  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 858   
 859  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 860  * "Scenario indexes help to differentiate scenarios." /
 861   
 862  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 863  * "Capacity types differentiate investment decisions." /
 864   
 865  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 866  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 868  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 869  * SPDX-License-Identifier: BSD-3-Clause
 870   
 871  * // # accounting_input
 872  * // The parameters in this file describe the accounting of indicators in the model.
 873   
 874  * // ## Variables
 875  * // {special_table_input_variables}
1208   
1209  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1211  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1212  * SPDX-License-Identifier: BSD-3-Clause
1213   
1215   
1217   
1218  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1219  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1220      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1221      = yes;
1222   
1224  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1225  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1226      $sum((nodesData,accnodesData)
1227              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1228                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1229      = smax((nodesData,accnodesData)
1230              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1231                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1232          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1233      - smin((nodesData,accnodesData)
1234              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1235                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1236          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1237   
1238  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1240   
1241  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1242  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1243      $sum((nodesData,accnodesData)
1244              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1245                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1246      = sum((nodesData,accnodesData)
1247              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1248                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1249          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1250      / sum((nodesData,accnodesData)
1251              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1252                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1253          1);
1254   
1255  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1256  loop(accnodes,
1257  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1258      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1259                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1260      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1261              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1262  );
1263   
1264  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1265      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1266      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1267   
1268  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1269  loop(accYears,
1270  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1271      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1272              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1273      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1274              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1275  );
1276   
1277  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1279  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1280  * SPDX-License-Identifier: BSD-3-Clause
1281   
1283   
1285   
1286  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1287  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1288      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1289      = yes;
1290   
1292   
1293  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1294  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1295      $sum((nodesData,accnodesData)
1296              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1297                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1298      = sum((nodesData,accnodesData)
1299              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1300                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1301          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1302      / sum((nodesData,accnodesData)
1303              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1304                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1305          1);
1306   
1307  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1308  loop(accnodes,
1309  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1310      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1311                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1312      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1313              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1314  );
1315   
1316  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1317      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1318      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1319   
1320  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1321  loop(accYears,
1322  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1323      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1324              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1325      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1326              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1327  );
1328   
1329  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1331  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1332  * SPDX-License-Identifier: BSD-3-Clause
1333   
1335   
1337   
1338  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1339  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1340      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1341      = yes;
1342   
1344   
1345  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1346  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1347      $sum((nodesData,accnodesData)
1348              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1349                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1350      = sum((nodesData,accnodesData)
1351              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1352                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1353          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1354      / sum((nodesData,accnodesData)
1355              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1356                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1357          1);
1358   
1359  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1360  loop(accnodes,
1361  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1362      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1363                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1364      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1365              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1366  );
1367   
1368  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1369      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1370      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1371   
1372  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1373  loop(accYears,
1374  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1375      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1376              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1377      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1378              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1379  );
1380   
1381  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1383  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1384  * SPDX-License-Identifier: BSD-3-Clause
1385   
1387   
1389   
1390  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1391  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1392      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1393      = yes;
1394   
1396  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1397  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1398      $sum((nodesData,accnodesData)
1399              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1400                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1401      = smax((nodesData,accnodesData)
1402              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1403                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1404          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1405      - smin((nodesData,accnodesData)
1406              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1407                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1408          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1409   
1410  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1412   
1413  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1414  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1415      $sum((nodesData,accnodesData)
1416              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1417                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1418      = sum((nodesData,accnodesData)
1419              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1420                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1421          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1422      / sum((nodesData,accnodesData)
1423              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1424                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1425          1);
1426   
1427  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1428  loop(accnodes,
1429  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1430      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1431                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1432      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1433              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1434  );
1435   
1436  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1437      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1438      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1439   
1440  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1441  loop(accYears,
1442  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1443      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1444              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1445      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1446              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1447  );
1448   
1449  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1451  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1452  * SPDX-License-Identifier: BSD-3-Clause
1453   
1455   
1457   
1458  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1459  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1460      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1461      = yes;
1462   
1464  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1465  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1466      $sum((linksData,acclinksData)
1467              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1468                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1469      = smax((linksData,acclinksData)
1470              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1471                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1472          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1473      - smin((linksData,acclinksData)
1474              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1475                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1476          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1477   
1478  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1480   
1481  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1482  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1483      $sum((linksData,acclinksData)
1484              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1485                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1486      = sum((linksData,acclinksData)
1487              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1488                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1489          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1490      / sum((linksData,acclinksData)
1491              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1492                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1493          1);
1494   
1495  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1496  loop(acclinks,
1497  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1498      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1499                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1500      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1501              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1502  );
1503   
1504  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1505      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1506      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1507   
1508  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1509  loop(accYears,
1510  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1511      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1512              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1513      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1514              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1515  );
1516   
1517  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1519  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1520  * SPDX-License-Identifier: BSD-3-Clause
1521   
1523   
1525   
1526  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1527  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1528      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1529      = yes;
1530   
1532  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1533  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1534      $sum((linksData,acclinksData)
1535              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1536                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1537      = smax((linksData,acclinksData)
1538              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1539                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1540          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1541      - smin((linksData,acclinksData)
1542              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1543                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1544          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1545   
1546  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1548   
1549  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1550  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1551      $sum((linksData,acclinksData)
1552              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1553                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1554      = sum((linksData,acclinksData)
1555              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1556                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1557          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1558      / sum((linksData,acclinksData)
1559              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1560                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1561          1);
1562   
1563  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1564  loop(acclinks,
1565  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1566      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1567                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1568      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1569              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1570  );
1571   
1572  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1573      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1574      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1575   
1576  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1577  loop(accYears,
1578  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1579      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1580              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1581      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1582              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1583  );
1584   
1585  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1587  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1588  * SPDX-License-Identifier: BSD-3-Clause
1589   
1591   
1593   
1594  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1595  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1596      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1597      = yes;
1598   
1600   
1601  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1602  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1603      $sum((nodesData,accnodesData)
1604              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1605                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1606      = sum((nodesData,accnodesData)
1607              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1608                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1609          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1610      / sum((nodesData,accnodesData)
1611              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1612                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1613          1);
1614   
1615  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1616  loop(accnodes,
1617  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1618      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1619                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1620      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1621              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1622  );
1623   
1624  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1625      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1626      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1627   
1628  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1629  loop(accYears,
1630  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1631      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1632              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1633      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1634              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1635  );
1636   
1637  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1638   
1639  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1640  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1641      = sum((linksData)$sameas(linksModelToCalc,linksData),
1642              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1643   
1644  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1645      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1646              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1647   
1648  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1649  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1650      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1651          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1652   
1653  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1654      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1655      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1656              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1657          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1658   
1659  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1660  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1661      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1662      = yes;
1663   
1664  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1665  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1666      $sum((nodesDataToCalc,accnodesData)
1667              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1668                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1669      = sum((nodesDataToCalc,accnodesData)
1670              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1671                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1672          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1673      / sum((nodesDataToCalc,accnodesData)
1674              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1675                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1676          1);
1677   
1678  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1679   
1680  loop(accNodes,
1681  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1682      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1683              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1684          and map_accNodes(accNodesModel,accNodes)
1685              )
1686      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1687              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1688   
1689  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1690      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1691              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1692          and map_accNodes(accNodesModel,accNodes)
1693          and not sameas(accYears, "horizon"))
1694      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1695              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1696  );
1697   
1698  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1699      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1700          and sameas(accNodesModel,nodesModelToCalc)), 1)
1701      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1702          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1703   
1704  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1705      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1706          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1707      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1708          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1709   
1710   
1711  * Make sure all required indicators end up in the model
1712  set variableIndicators(accNodesModel,accYears,indicator);
1713  variableIndicators(accNodesModel,accYears,indicator)
1714     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1715        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1716     = yes;
1717   
1718  set activeIndicators(accNodesModel,accYears,indicator);
1719  activeIndicators(accNodesModel,accYears,indicator)
1720     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1725        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1726        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1727        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1728          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1729     = yes;
1730   
1731  set activeIndicators_links(linksModel,years,indicator);
1732  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1733     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1734        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1735        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1736     = yes;
1737   
1738  * Clear other dependencies and only add self mapping for variable and qp indicators
1739  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1740      $(variableIndicators(accNodesModel,accYears,indicator))
1741      = 0;
1742  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1743      $(variableIndicators(accNodesModel,accYears,indicator))
1744      = 1;
1745   
1746  * Calculate length of years and discount rates per indicator
1747  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1748  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1749      $(map_accYears(accYears_a,accYears)
1750          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1751      = 1;
1752   
1753  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1754      $(map_accYears(accYears_a,accYears)
1755          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1756          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1757      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1758   
1759  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1760      $(map_accYears(accYears_a,accYears)
1761          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1762          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1763          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1764          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1765      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1766   
1767  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1768      $(map_accYears(accYears_a,accYears)
1769          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1770          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1771          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1772      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1773          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1774                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1775   
1776  * Add self mapping for variable and qp indicators
1777  yearFactor(accNodesModel,accYears,indicator,accYears)
1778      $(variableIndicators(accNodesModel,accYears,indicator))
1779      = 1;
1780   
1781   
1782  * ==== calculate compound indicators for the optimization ====
1783  scalar compIndicators_pre;
1784  scalar compIndicators_post;
1785   
1786  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1787  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1788      $(activeIndicators(accNodesModel,accYears,indicator))
1789      = 1;
1790   
1791  set compoundIndicators_act(accNodesModel,accYears,indicator);
1792  option compoundIndicators_act < compoundIndicators;
1793   
1794  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1795  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1796  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1797      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1798   
1799  compIndicators_pre = 0;
1800  compIndicators_post = 1;
1801   
1802  option sparseval = 1;
1803  while(compIndicators_pre < compIndicators_post,
1804      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1805          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1806   
1807      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1808          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1809              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1810              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1811              and map_accYears(accYears_aa,accYears_a))
1812          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1813              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1814   
1815      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1816   
1817      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1818          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1819              and sum((accNodesModel_a,accYears_a,indicator_a)
1820                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1821          = sum((accNodesModel_a,accYears_a,indicator_a)
1822                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1823              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1824   
1825      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1826          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1827              and sum((accNodesModel_a,accYears_a,indicator_a)
1828                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1829          = sum((accNodesModel_a,accYears_a,indicator_a)
1830                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1831                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1832              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1833          / sum((accNodesModel_a,accYears_a,indicator_a)
1834                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1835                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1836   
1837      option compoundIndicators_act < compoundIndicators;
1838      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1839          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1840  );
1841  option sparseval = 0;
1842   
1843  * map to sub-years and sub-nodes
1844  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1845      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1846          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1847          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1848          and map_accYears(accYears_aa,accYears_a)
1849          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1850      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1851          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1852   
1853  * Remove all accounting regions and accounting years
1854  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1855      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1856          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1857          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1858              or sameas("horizon",accYears_aa)))
1859      = 0;
1860   
1861  * Remove all slack indicators except the ones declared in indicatorBounds
1862  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1863      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1864          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1865                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1866          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1867      = 0;
1868   
1869   
1870  * Map from extended parameter to final parameter
1871  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1872  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1873      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1874          and sum((accNodesModel_a,accYears_a,indicator_a)
1875                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1876      = sum((accNodesModel_a,accYears_a,indicator_a)
1877              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1878          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1879   
1880  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1881      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1882          and sum((accNodesModel_a,accYears_a,indicator_a)
1883                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1884      = sum((accNodesModel_a,accYears_a,indicator_a)
1885              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1886                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1887          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1888      / sum((accNodesModel_a,accYears_a,indicator_a)
1889              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1890                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1891   
1892  * Remove all accounting regions and accounting years
1893  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1894      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1895          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1896          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1897              or sameas("horizon",accYears_aa)))
1898      = 0;
1899   
1900  * Remove all slack indicators except the ones declared in indicatorBounds
1901  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1902      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1903          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1904          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1905      = 0;
1906   
1907   
1908  * ==== compound indicators for the post calculation ====
1909  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1910  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1911      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1912          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1913   
1914  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1915      $(activeIndicators(accNodesModel,accYears,indicator)
1916          or variableIndicators(accNodesModel,accYears,indicator))
1917      = 1;
1918   
1919  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1920  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1921   
1922  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1923  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1924  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1925   
1926  compIndicators_pre = 0;
1927  compIndicators_post = 1;
1928   
1929  option sparseval = 1;
1930  while(compIndicators_pre < compIndicators_post,
1931      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1932          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1933   
1934      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1935          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1936              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1937              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1938              and map_accYears(accYears_aa,accYears_a))
1939          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1940              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1941   
1942      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1943   
1944      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1945          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1946              and sum((accNodesModel_a,accYears_a,indicator_a)
1947                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1948          = sum((accNodesModel_a,accYears_a,indicator_a)
1949                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1950              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1951   
1952      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1953          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1954              and sum((accNodesModel_a,accYears_a,indicator_a)
1955                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1956          = sum((accNodesModel_a,accYears_a,indicator_a)
1957                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1958                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1959              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1960          / sum((accNodesModel_a,accYears_a,indicator_a)
1961                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1962                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1963   
1964      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1965      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1966          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1967  );
1968  option sparseval = 0;
1969   
1970  * map to sub-years and sub-nodes
1971  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1972      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1973          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1974          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1975          and map_accYears(accYears_aa,accYears_a)
1976          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1977      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1978          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1979   
1980  * Remove all accounting regions and accounting years
1981  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1982      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1983          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1984          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1985              or sameas("horizon",accYears_aa)))
1986      = 0;
1987   
1988  * Remove all slack indicators except the ones declared in indicatorBounds
1989  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1990      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1991          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1992                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1993          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1994      = 0;
1995   
1996   
1997  * Map from extended parameter to final parameter
1998  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1999  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2000      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2001          and sum((accNodesModel_a,accYears_a,indicator_a)
2002                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2003      = sum((accNodesModel_a,accYears_a,indicator_a)
2004              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2005          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2006   
2007  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2008      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2009          and sum((accNodesModel_a,accYears_a,indicator_a)
2010                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2011      = sum((accNodesModel_a,accYears_a,indicator_a)
2012              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2013                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2014          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2015      / sum((accNodesModel_a,accYears_a,indicator_a)
2016              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2017                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2018   
2019  * Remove all accounting regions and accounting years
2020  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2021      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2022          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2023   
2024          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2025              or sameas("horizon",accYears_aa)))
2026      = 0;
2027   
2028  * Remove all slack indicators except the ones declared in indicatorBounds
2029  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2030      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2031          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
2032          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2033      = 0;
2034   
2035   
2036  * Check if the objective value and optimization sense is set correctly
2037  scalar opti_values, opti_sense;
2038  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2039  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2040  abort$(opti_values < 1)
2041      "Accounting: No indicator specified as objective value"
2042  abort$(opti_values > 1)
2043      "Accounting: Too many indicators specified as objective value"
2044  abort$(opti_sense <> -1 and opti_sense <> 1)
2045      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
2047  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2048  * SPDX-License-Identifier: BSD-3-Clause
2049   
2050  * Calculation of annuities
2051  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2052          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
2053          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2054      "Accounting: Some converter technologies use annuities but have no amortization time"
2055   
2056  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
2057  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2058      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
2059      =
2060      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
2061          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2062          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
2063      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2064          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
2065   
2066   
2067  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2068          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
2069          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2070      "Accounting: Some storage technologies use annuities but have no amortization time"
2071   
2072  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
2073  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2074      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
2075      =
2076      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
2077          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2078          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
2079      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2080          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
2081   
2082   
2083  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2084          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
2085          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2086      "Accounting: Some transfer technologies use annuities but have no amortization time"
2087   
2088  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
2089  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2090      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
2091      =
2092      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
2093          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2094          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
2095      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2096          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
2097   
2098   
2099   
2100  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2101          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2102          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2103      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2104   
2105  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2106  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2107   
2108  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2109      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2110      =
2111      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2112          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2113          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2114      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2115          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2116   
2120   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2122  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2123  * SPDX-License-Identifier: BSD-3-Clause
2124   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2129  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2130  * SPDX-License-Identifier: BSD-3-Clause
2131   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2136  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2137  * SPDX-License-Identifier: BSD-3-Clause
2138  * // # Output data
2139  * // This is the reference data model of the REMix output.
2140  * //
2141  * // ## Standard output
2144   
2151   
2153   
2154  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2155  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2156  set profileType / "upper", "fixed", "lower" /;
2157  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2158   
2159  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2160  * // ### indicator_accounting
2161  * // Title: Accounting indicators Post-calculation
2162  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2163  * //
2164  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2165  * // ### indicator_accounting_ref
2166  * // Title: Accounting indicators reference
2167  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2168  * //
2169  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2170  * // ### indicator_accounting_var
2171  * // Title: Accounting indicators variable states
2172  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2173  * //
2174  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2175  * // ### indicator_accounting_comp
2176  * // Title: Accounting indicators composition
2177  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2178  * //
2179  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2180  * // ### indicator_accounting_detailed
2181  * // Title: Accounting indicators detail
2182  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2183  * //
2184  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2185  * // ### indicator_accounting_links
2186  * // Title: Accounting indicators per transfer link
2187  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2188  * //
2189  parameter converter_ratedInput(techs,vintage,commodity);
2190  parameter converter_ratedOutput(techs,vintage,commodity);
2191  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2192  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2193   
2194  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2195  * // ### converter_caps
2196  * // Title: Coverter capacities post-calculation
2197  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2198  * //
2199  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2200  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2201   
2202  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2203  * // ### converter_units
2204  * // Title: Coverter units post-calculation
2205  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2206  * //
2207  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2208   
2209  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2210  parameter max_transfer_coefficient(techs,commodity);
2211  parameter min_transfer_coefficient(techs,commodity);
2212  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2213  * // ### transfer_links
2214  * // Title: Transfer post-calculation
2215  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2216  * //
2217  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2218  * // ### transfer_caps
2219  * // Title: Transfer capacities post-calculation
2220  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2221  * //
2222  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2223  * // ### transfer_flows
2224  * // Title: Transfer hourly flows
2225  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2226  * //
2227  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2228  * // ### transfer_flows_annual
2229  * // Title: Transfer annual flows
2230  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2231  * //
2232  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2233  * // ### transfer_losses
2234  * // Title: Transfer hourly losses
2235  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2236  * //
2237  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2238  * // ### transfer_losses_annual
2239  * // Title: Transfer annual losses
2240  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2241  * //
2242  parameter storage_size_max(nodesModel,years,techs,commodity);
2243  parameter storage_size_min(nodesModel,years,techs,commodity);
2244  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2245  * // ### storage_units
2246  * // Title: Storage units post-calculation
2247  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2248  * //
2249  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2250  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2251  * // ### storage_caps
2252  * // Title: Storage capacities post-calculation
2253  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2254  * //
2255  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2256  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2257  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2258  * // ### storage_level_out
2259  * // Title: Storage level
2260  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2261  * //
2262  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2263  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2264  * // ### storage_flows
2265  * // Title: Storage hourly flows
2266  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2267  * //
2268  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2269  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2270  * // ### storage_flows_annual
2271  * // Title: Storage annual flows
2272  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2273  * //
2274  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2275  * // ### storage_losses_out
2276  * // Title: Storage hourly losses
2277  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2278  * //
2279  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2280  * // ### storage_losses_annual
2281  * // Title: Storage annual losses
2282  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2283  * //
2284  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2285  * // ### commodity_balance
2286  * // Title: Hourly commodity balance
2287  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2288  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2289  * //
2290  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2291  * // ### commodity_balance_annual
2292  * // Title: Annual commodity balance
2293  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2294  * //
2295  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2296  * // ### marginals_sourcesink_profile
2297  * // Title: Source-sink marginals
2298  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2299  * //
2300  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2301  * // ### marginals_balance
2302  * // Title: Nodel balance marginals
2303  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2304  * //
2305  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2306  * // ### marginals_sourcesink_sum
2307  * // Title: Source-sink annual marginals
2308  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2309  * //
2310  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2311  * // ### marginals_indicator_bounds
2312  * // Title: Indicator bounds marginals
2313  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2314  * //
2315  * // ## REMix-AMIRIS interface output
2316  * //
2317  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2318  * // ### r2a_annuity_cost_converter
2319  * // Title: Converter annuity cost
2320  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2321  * //
2322  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2323  * // ### r2a_spec_cost_converter
2324  * // Title: Converter specific cost
2325  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2326  * //
2327  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2328  * // ### r2a_spec_cost_fuel
2329  * // Title: Commodity specific cost
2330  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2331  * //
2332  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2333  * // ### r2a_spec_cost_indicator
2334  * // Title: Indicator specific cost
2335  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2336  * //
2337  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2338  * // ### r2a_converter_efficiencies
2339  * // Title: Indicator specific cost
2340  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2341  * //
2342  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2343  * // ### r2a_converter_avail_factor
2344  * // Title: Converter availability factor
2345  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2346  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2347  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2348  * //
2349  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2350  * // ### r2a_storage_e2p
2351  * // Title: E2P Storage
2352  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2353  * //
2354  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2355  * // ### r2a_storage_selfdischarge
2356  * // Title: Storage self discharge rates
2357  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2358   
2359  set attribute(*)
2360       /
2361      "variables"
2362      "equations"
2363      "iterations"
2364      /;
2365   
2366  parameter diagnostics(attribute);
2367   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2371  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2372  * SPDX-License-Identifier: BSD-3-Clause
2373   
2374  * ==== global settings ====
2376   
2378   
2380   
2382   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2384  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2385  * SPDX-License-Identifier: BSD-3-Clause
2386   
2387  * // # core_converter
2388  * // The equations in this file describe the converters in the model.
2389   
2390  * // ## Advanced features
2391  * //
2392  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2393  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2394  * //
2395  * // In the following table you can see which modifications you have to make to your data to use the different features.
2396  * //
2397  * // | Feature | Modification |
2398  * // | ------ | ------ |
2399  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2400  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2401  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2402  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2403  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2404  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2405   
2406  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2407  * //
2408  * // ### set_converter_techs.dat
2409  * // In this file all converter technologies are listed that can be used within your model.
2410  * //
2411  * // ### set_activities.dat
2412  * // All modes with which the converter technologies can be operated need to be added here.
2413  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2414  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2415  * //
2416  * // ### set_commodities.dat
2417  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2418  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2419   
2420  * // ## Variables
2421  * // {special_table_converter_variables}
3016   
3017  * // ## Load units from gdx file
3019   
3020   
3021  * ==== calculation of mappings ====
3022   
3023  * Technologies with a lifeTime > 0 are available
3024  set converter_availTech(nodesModel,years,converter_techs,vintage);
3025  converter_availTech(nodesModel,years,converter_techs,vintage)
3026      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3027          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3028   
3029  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3030  converter_availTech(nodesModel,years,converter_techs,vintage)
3031      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3032   
3033  * Technologies already built become unavailable if they have an unitsBuild of 0
3034  converter_availTech(nodesModel,years,converter_techs,vintage)
3035      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3036   
3037  * Used technologies are available technologies over their technical lifeTime
3038  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3039  converter_usedTech(nodesModel,years,converter_techs,vintage)
3040      $(vintage.val <= years.val
3041          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3042                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3043          ) = yes;
3044   
3045  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
3046  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3047  converter_decomTech(nodesModel,years,converter_techs,vintage)
3048    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3049                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3050      and sum(yearsToCalc
3051        $(sameas(years, yearsToCalc)
3052          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3053          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3054    = yes;
3055   
3056  converter_decomTech(nodesModel,years,converter_techs,vintage)
3057    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3058                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3059      and sum(yearsToCalc
3060        $(sameas(years, yearsToCalc)
3061          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3062          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3063    = yes;
3064   
3065  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
3066  converter_decomTech(nodesModel,years,converter_techs,vintage)
3067    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
3068      and sum(yearsToCalc
3069        $(sameas(years, yearsToCalc)
3070          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
3071    = yes;
3072   
3073  * Extend the decom frame to the model year after the last model year of usedTech
3074  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3075    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3076      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3077    = yes;
3078   
3079  * Mapping for used activities and commodities
3080  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3081  option converter_usedActCom < converter_coefficient;
3082   
3083  set converter_usedAct(converter_techs,vintage,activity);
3084  option converter_usedAct < converter_usedActCom;
3085   
3086  set converter_usedCom(converter_techs,vintage,commodity);
3087  option converter_usedCom < converter_usedActCom;
3088   
3089  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3090  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3091      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3092          and converter_usedAct(converter_techs,vintage,activity))
3093      = yes;
3094   
3095  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3096  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3097    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3098      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
3099    = 1;
3100   
3101  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3102  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3103    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3104      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
3105    = 1;
3106   
3107   
3108  * ==== aggregation of profiles ====
3109   
3110  * derive upper and lower profiles then aggregate
3111  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3112  option converter_activity_hasProfileIn < converter_activityProfileIn;
3113   
3114  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3115  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3116      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3117              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
3118   
3119  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3120  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3121   
3122  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3123  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3124      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3125              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
3126   
3127  * aagregate time dimension
3128  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3129  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3130    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3131    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
3132            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3133            / timeLength(timeModelToCalc));
3134  option clear = converter_activityProfileIn;
3135   
3136  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3137  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3138  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3139      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3140  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3141      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3142   
3143   
3144  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3145  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3146      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3147          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3148   
3149  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3150  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3151      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3152   
3153  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3154      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3155          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3156      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3157                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3158                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3159                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
3160      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3161              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3162   
3163  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3164      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3165          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3166      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3167                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3168                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
3169      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3170                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3171              1);
3172  option clear = converter_activityProfileIn_aggTime;
3173   
3174  * for fixed profiles overwrite upper and lower profile
3175  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3176      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3177      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3178   
3179  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3180      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3181      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3182   
3186   
3187  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3188  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3189  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3190      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3191   
3192  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3193      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3194          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3195      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3196            sum(timeData$timeMapping(timeData,timeModelToCalc),
3197                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3198                / timeLength(timeModelToCalc)
3199              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
3200      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3201              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3202   
3203  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3204      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3205          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3206      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3207                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3208            sum(timeData$timeMapping(timeData,timeModelToCalc),
3209                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3210                / timeLength(timeModelToCalc))
3211      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3212                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3213   
3216   
3217  * reduce coefficient delay based on time resolution
3218  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
3219    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
3220    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
3222   
3223  * ==== prepare partial load behavior parameters ====
3224   
3225  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3226  alias(commodity, com);
3227  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3228      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3229        and converter_usedAct(converter_techs,vintage,activity))
3230      = 1;
3231   
3232  * indicate that at least one activity of a technology makes use of partial load behavior
3233  set converter_hasMaxLoad(converter_techs,vintage);
3234  converter_hasMaxLoad(converter_techs,vintage)
3235    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3236              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3237   
3238  set converter_hasMinLoad(converter_techs,vintage);
3239  converter_hasMinLoad(converter_techs,vintage)
3240    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3241              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3242   
3243  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3244  converter_hasConstantFluxInActivity(converter_techs,vintage)
3245    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3246                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3247   
3248  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3249  set pc_converter_activityRequirements
3250      /
3251      minLoad             "Lower profile for converter activity"
3252      maxLoad             "Upper profile for converter activity"
3253      /;
3254  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3255  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3256    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3257  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3258    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3259   
3260  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3261   
3262  set converter_hasMinUptime(converter_techs,vintage);
3263  converter_hasMinUptime(converter_techs,vintage)
3264    $(converter_techParam(converter_techs,vintage,"minUptime")
3265      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3266    = yes;
3267   
3268  set converter_hasMinDowntime(converter_techs,vintage);
3269  converter_hasMinDowntime(converter_techs,vintage)
3270    $(converter_techParam(converter_techs,vintage,"minDowntime")
3271      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3272    = yes;
3273   
3274  * require integer unit counts if online state is to be tracked
3275  converter_techParam(converter_techs,vintage,"mipUnits")
3276      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3277        or converter_hasMinLoad(converter_techs, vintage)
3278        or converter_hasMaxLoad(converter_techs, vintage)
3279        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3280      = 1;
3281   
3282  * ==== floor mip converter units to integer values ====
3283  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3284      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3285      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3286  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3287      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3288      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3289   
3290  * ==== scalars and sets for minUptime and minDowntime ====
3291   
3292  scalar converter_maxUptimeReq;
3293  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3294  set uptimeSearchRange(timeModelToCalc);
3295  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3296   
3297  scalar converter_maxDowntimeReq;
3298  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3299  set downtimeSearchRange(timeModelToCalc);
3300  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3301   
3302  * ==== definition of variables ====
3303   
3304  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3305      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3306        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3307      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3308  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3309      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3310        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3311      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3312  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3313      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3314        and (converter_hasMinLoad(converter_techs, vintage)
3315              or converter_hasMaxLoad(converter_techs, vintage)))
3316      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3317   
3318   
3319  * Initialise variables for unitsBuild
3320  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3321      $converter_availTech(nodesModel,years,converter_techs,vintage)
3322      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3323  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3324      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3325      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3326  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3327      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3328      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3329   
3330  * Initialise variables for unitsDecom
3331  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3332    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3333      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3334    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3335                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3336                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3337                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3338          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3339   
3340  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3341    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3342    = sum(years$
3343          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3344            and converter_availTech(nodesModel,years,converter_techs,vintage)
3345            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3346            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3347        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3348      + sum(yearsToCalc_a$
3349          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3350            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3351            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3352            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3353        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3354        ;
3355   
3356  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3357      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3358          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3359      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3360   
3361   
3363   
3364   
3365  * Calculate planned unit expansion
3366  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3367  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3368  loop(years,
3369    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3370      =
3371      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3372          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3373      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3374          $converter_availTech(nodesModel,years,converter_techs,vintage)
3375      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3376          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3377  );
3378   
3379  * Set initial state for planned units
3380  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3381    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3382   
3383   
3384  * // ## Load units from gdx file
3386   
3387  * Calculate if planned unit expansion is bounded by upper and lower limits
3388  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3389  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3390    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3391          converter_techParam(converter_techs,vintage,"freeDecom"))
3392    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3393          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3394      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3395    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3396          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3397      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3398    = yes;
3399   
3400  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3401  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3402    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3403      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3404    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3405  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3406    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3407      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3408    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3409  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3410    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3411      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3412    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3413   
3414   
3415  * Add parameter for fixing capacities during myopic runs
3416  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3417  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3418  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3419   
3420  * Fix activities of upper limit if upper limit is zero
3421  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3422    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3423      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3424      = 0;
3425   
3426   
3427  * ==== declaration of equations ====
3428   
3429  equations
3430    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3431      ) "Ensures the units balance over the planning period."
3432    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3433      ) "Ensures the units balance over the planning period."
3434    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3435      ) "Restricts the free decommissioning of units over the planning period."
3436    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3437      ) "Upper bound for the total number of units."
3438    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3439      ) "Lower bound for the total number of units."
3440    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3441      ) "Fixed bound for the total number of units."
3442    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3443      ) "Fixes the total number of units to the corresponding integer variable."
3444    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3445      ) "Fixes the number of online units to the corresponding integer variable."
3446   
3447    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3448      ) "Lower limit on the activity."
3449    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3450      ) "Upper limit on the activity."
3451   
3452    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3453      ) "Fixed limit on the activity."
3454    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3455      ) "Positive ramping of unit activity."
3456    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3457      ) "Negative ramping of unit activity."
3458    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3459      ) "Restrict ramping up of unit activity."
3460   
3461    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3462      ) "Set online units to total number of operational units."
3463    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3464      ) "Allow shutting down units."
3465    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3466      ) "Variable counting the number of unit startups."
3467    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3468      ) "Variable tracking the number of unit shutdowns."
3469    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3470      ) "Limit the number of startup cycles a unit can perform."
3471    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3472      ) "Require recently started units to remain online for their respective minimum uptime."
3473    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3474      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3475    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3476      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3477    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3478      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3479    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3480      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3481    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3482      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3483    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3484      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3485    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3486      ) "Limit usage of an activity to corresponding units."
3487    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3488      ) "Limit usage of an activity to corresponding units."
3489    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3490      ) "Limit the number of units in one particular mode to the number of operational units."
3491    ;
3492   
3493  * ==== equation definition ====
3494  * // ## Equations
3495  * // ### Converter Units Balance
3496  * // Ensures that the total units are consistent with the built and decommissioned units.
3497  * // {Eq_converter_unitsBalance}
3498   
3499  * Equation using build only
3500  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3501      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3502            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3503          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3504          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3505      ..
3506      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3507      =e=
3508      sum ((years_a)
3509              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3510                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3511                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3512                  and years_a.val <= yearsSel.val ),
3513            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3514   
3515      + sum ((yearsToCalc)
3516              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3517                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3518                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3519                  and yearsToCalc.val <= yearsSel.val ),
3520            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3521   
3522  * Equation using build and decom
3523  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3524      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3525            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3526          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3527          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3528      ..
3529      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3530      =e=
3531      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3532        sum(years$sameas(years, yearsToCalc),
3533          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3534            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3535      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3536        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3537          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3538      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3539          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3540      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3541          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3542      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3543          ;
3544   
3545  * // ### Converter Units Free Decommission
3546  * // Restricts the free decommissioning of units over the planning period.
3547  * // {Eq_converter_unitsFreeDecom}
3548  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3549      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3550          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3551      ..
3552      sum(years$
3553            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3554              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3555          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3556      + sum(yearsToCalc$
3557            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3558              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3559              and yearsToCalc.val <= yearsSel.val),
3560          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3561      =g=
3562      sum(years$
3563            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3564              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3565              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3566          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3567      + sum(yearsToCalc$
3568            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3569              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3570              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3571          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3572   
3573  * // ### Converter Units Upper Limit
3574  * // Upper bound for the total number of units.
3575  * // {Eq_converter_unitsUpperLimit}
3576  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3577      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3578          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3579          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3580              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3581      ..
3582      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3583          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3584      =l=
3585      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3586   
3587  * // ### Converter Units Lower Limit
3588  * // Lower bound for the total number of units.
3589  * // {Eq_converter_unitsLowerLimit}
3590  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3591      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3592          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3593              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3594      ..
3595      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3596          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3597      =g=
3598      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3599   
3600  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3601      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3602          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3603      ..
3604      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3605          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3606      =e=
3607      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3608   
3609  * // ### Converter Units Total MIP
3610  * // Fixes the total number of units to the corresponding integer variable.
3611  * // {Eq_converter_unitsTotalMIP}
3612  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3613      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3614          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3615      ..
3616      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3617      =e=
3618      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3619   
3620  * // ### Converter Units Online MIP
3621  * // Fixes the number of online units to the corresponding integer variable.
3622  * // {Eq_converter_unitsOnlineMIP}
3623  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3624      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3625          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3626      ..
3627      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3628      =e=
3629      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3630   
3631  * // ### Converter Activity Lower Limit
3632  * // Lower limit on the activity.
3633  * // {Eq_converter_activityLowerLimit}
3634  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3635      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3636          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3637          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3638              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3639          and not converter_hasMinLoad(converter_techs, vintage))
3640      ..
3641      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3642          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3643      )
3644      =g=
3645      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3648      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3651   
3652  * // ### Converter Activity Upper Limit
3653  * // Upper limit on the activity.
3654  * // {Eq_converter_activityUpperLimit}
3655  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3656      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3657          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3658          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3659               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3660      ..
3661      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3662          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3663      )
3664      =l=
3665      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3668      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3671   
3672  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3673      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3674          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3675               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3676      ..
3677      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3678          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3679      )
3680      =e=
3681      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3684      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3687   
3688  * // ### Converter Positive Ramping
3689  * // Positive ramping of unit activity.
3690  * // {Eq_converter_rampPos}
3691  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3692    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3693        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3694      ..
3695      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3696      =g=
3697      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3698              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3699              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3700   
3701  * // ### Converter Negative Ramping
3702  * // Negative ramping of unit activity.
3703  * // {Eq_converter_rampNeg}
3704  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3705    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3706        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3707      ..
3708      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3709      =g=
3710      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3711              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3712              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3713   
3714  * // ### Converter Ramping Limit
3715  * // Restrict ramping up of unit activity.
3716  * // {Eq_converter_rampLimit}
3717  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3718    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3719          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3720      ..
3721      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3722              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3723              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3724    =l=
3725    converter_techParam(converter_techs,vintage,"activityRampLimit")
3728      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3731   
3734   
3735  * // ### Converter Units Online
3736  * // Set converter units online to total converter units for non-MIP case.
3737  * // {Eq_converter_unitsOnline}
3738  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3739      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3740          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3741    ..
3742    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3743    =e=
3744    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3745      ;
3746   
3747  * // ### Converter MIP Units Shutting Down
3748  * // Allow shutting down units.
3749  * // {Eq_converter_unitsOnlineUC}
3750  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3751      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3752          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3753    ..
3754    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3755    =l=
3756    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3757      ;
3760   
3761  * // ### Converter Activity Startups
3762  * // Variable counting the number of unit startups.
3763  * // {Eq_converter_activityStartups}
3764  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3765    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3766          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3767      ..
3768      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3769      =g=
3770          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3771      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3772   
3773  * // ### Converter Activity Shutdowns
3774  * // Variable tracking the number of unit shutdowns.
3775  * // {Eq_converter_activityShutdowns}
3776  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3777    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3778          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3779          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3780      ..
3781      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3782      =g=
3783          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3784      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3785   
3786  * // ### Converter Activity Startup Limit
3787  * // Limit the number of startup cycles a unit can perform.
3788  * // {Eq_converter_limitStartups}
3789  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3790    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3791          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3792      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3793      ..
3794      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3795    =l=
3796    converter_techParam(converter_techs,vintage,"startupLimit")
3797    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3798   
3799  alias(timeModelToCalc,ttc);
3800   
3801  * // ### Converter Units Minimum Uptime
3802  * // Require recently started units to remain online for their respective minimum uptime.
3803  * // {Eq_converter_minUptime}
3804  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3805    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3806          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3807      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3808      ..
3809      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3810          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3811              nodesModelSel,yearsSel,converter_techs,vintage))
3812          =l=
3813          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3814   
3815  * // ### Converter Units Minimum Downtime
3816  * // Require recently shut down units to remain offline for their respective minimum downtime.
3817  * // {Eq_converter_minDowntime}
3818  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3819    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3820          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3821      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3822      ..
3823      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3824          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3825              nodesModelSel,yearsSel,converter_techs,vintage))
3826          =l=
3827          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3828      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3829   
3830  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3831  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3832  alias(activity, act);
3833   
3834  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3835  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3836  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3837  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3838    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3839          and converter_hasMinLoad(converter_techs, vintage)
3840          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3841      ..
3842      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3843                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3844               and converter_usedAct(converter_techs,vintage,act)),
3845      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3846    =l=
3847    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3848      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3849                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3850                 and converter_usedAct(converter_techs,vintage,act)),
3851      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3852   
3853  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3854  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3855  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3856  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3857    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3858          and converter_hasMaxLoad(converter_techs,vintage)
3859          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3860      ..
3861      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3862                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3863               and converter_usedAct(converter_techs,vintage,act)),
3864      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3865    =l=
3866      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3867                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3868               and converter_usedAct(converter_techs,vintage,act)),
3869      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3870            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3871            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3872   
3873  * This equation is meant to enforce the lower limit requirements of activities in use.
3874  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3875  * because these activities can only run on units in the respectively strict activation state.
3876   
3877  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3878  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3879  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3880  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3881    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3882          and converter_hasMinLoad(converter_techs, vintage)
3883          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3884      ..
3885      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3886                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3887               and converter_usedAct(converter_techs,vintage,act)),
3888      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3889    =g=
3890      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3891                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3892               and converter_usedAct(converter_techs,vintage,act)),
3893      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3894            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3895            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3896   
3897   
3898  * Simple one-activity-per-unit partial load equations
3899  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3900  * // Enforce MIP units partial load upper limit.
3901  * // {Eq_converter_activityUpperLimitPartLoad}
3902  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3903    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3904          and (converter_hasMinLoad(converter_techs, vintage)
3905                or converter_hasMaxLoad(converter_techs, vintage)
3906                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3907          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3908      ..
3909      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3910    =l=
3911    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3912          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3913          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3914   
3915  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3916  * // Enforce MIP units partial load lower limit.
3917  * // {Eq_converter_activityLowerLimitPartLoad}
3918  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3919    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3920          and (converter_hasMinLoad(converter_techs, vintage)
3921                or converter_hasMaxLoad(converter_techs, vintage))
3922          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3923      ..
3924      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3925    =g=
3926    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3927          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3928          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3929   
3930  * // ### Converter MIP Units Idle Online Units
3931  * // Counts idle online units at every time step
3932  * // {Eq_converter_noOnlineIdle}
3933  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3934    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3935          and (converter_hasMinLoad(converter_techs, vintage)
3936              or converter_hasMaxLoad(converter_techs, vintage)
3937              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3938          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3939      ..
3940      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3941      =e=
3942      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3943            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3944   
3945  * // ### Converter MIP Units Idle Online Units Partial load
3946  * // Counts idle online units at every time step
3947  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3948  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3949    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3950          and (converter_hasMinLoad(converter_techs, vintage)
3951                  or converter_hasMaxLoad(converter_techs, vintage))
3952          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3953      ..
3954      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3955      =l=
3956      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3957            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3958   
3959  * // ### Converter MIP activity model limit
3960  * // Converter activity model limit
3961  * // {Eq_converter_activityModeLimit}
3962  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3963    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3964          and (converter_hasMinLoad(converter_techs, vintage)
3965                or converter_hasMaxLoad(converter_techs, vintage))
3966          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3967      ..
3968      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3969      =g=
3970      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3971   
3972  * ==== model definition ====
3973   
3974  Model M_converter
3975  /
3976    Eq_converter_unitsBalance
3977    Eq_converter_unitsBalanceFreeDecom
3978    Eq_converter_unitsFreeDecom
3979    Eq_converter_unitsUpperLimit
3980    Eq_converter_unitsLowerLimit
3981    Eq_converter_unitsFixedLimit
3982    Eq_converter_unitsTotalMIP
3983    Eq_converter_unitsOnlineMIP
3984    Eq_converter_activityUpperLimit
3985    Eq_converter_activityLowerLimit
3986    Eq_converter_activityFixedLimit
3987    Eq_converter_rampPos
3988    Eq_converter_rampNeg
3989    Eq_converter_rampLimit
3992    Eq_converter_unitsOnline
3993    Eq_converter_unitsOnlineUC
3996    Eq_converter_activityStartups
3997    Eq_converter_activityShutdowns
3998    Eq_converter_limitStartups
3999    Eq_converter_minUptime
4000    Eq_converter_minDowntime
4001    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4002    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4003    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4004    Eq_converter_activityUpperLimitPartLoad
4005    Eq_converter_activityLowerLimitPartLoad
4006    Eq_converter_noOnlineIdle
4007    Eq_converter_noOnlineIdleDetailedPartLoad
4008    Eq_converter_activityModeLimit
4009  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
4011  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4012  * SPDX-License-Identifier: BSD-3-Clause
4013   
4014  * // # core_storage
4015  * // The equations in this file describe the storages in the model.
4016   
4017  * // ## Variables
4018  * // {special_table_storage_variables}
4291   
4292   
4293  * === SoC mappings ===
4294  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4295  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4296      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4297        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4298      = yes;
4299   
4300  set storage_validSoCRange(storage_techs,vintage);
4301  storage_validSoCRange(storage_techs,vintage)
4302      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4303        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4304   
4305  * === Translate SoC parameters to ordered SoC-set ===
4306  * set ordered_socs / soc1*soc20 /;
4307  * alias(soc_states, soc_states_c);
4308  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4309  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4310  *     $storage_validSoCRange(storage_techs,vintage)
4311  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4312  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4313  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4314  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4315  *
4316  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4317  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4318  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4319  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4320  *     = yes;
4321   
4322  parameter storage_bigM(storage_techs,vintage);
4323  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4324  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4325  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4326   
4327  * === calculate the number of years represented by single year to calc ===
4328  alias(yearsToCalc, yearsToCalc_a)
4329  parameter representedYears(years);
4330  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4331                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4332   
4333  * ==== calculation of mappings ====
4334   
4335  * Technologies with a lifeTime > 0 are available
4336  set storage_availTech(nodesModel,years,storage_techs,vintage);
4337  storage_availTech(nodesModel,years,storage_techs,vintage)
4338      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4339          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4340   
4341  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4342  storage_availTech(nodesModel,years,storage_techs,vintage)
4343      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4344   
4345  * Technologies already built become unavailable if they have an unitsBuild of 0
4346  storage_availTech(nodesModel,years,storage_techs,vintage)
4347      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4348   
4349  * Used technologies are available technologies over their technical lifeTime
4350  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4351  storage_usedTech(nodesModel,years,storage_techs,vintage)
4352      $(vintage.val <= years.val
4353          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4354                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4355          ) = yes;
4356   
4357  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4358  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4359  storage_decomTech(nodesModel,years,storage_techs,vintage)
4360    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4361                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4362      and sum(yearsToCalc
4363        $(sameas(years, yearsToCalc)
4364          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4365          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4366    = yes;
4367   
4368  storage_decomTech(nodesModel,years,storage_techs,vintage)
4369    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4370                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4371      and sum(yearsToCalc
4372        $(sameas(years, yearsToCalc)
4373          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4374          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4375    = yes;
4376   
4377  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4378  storage_decomTech(nodesModel,years,storage_techs,vintage)
4379    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4380      and sum(yearsToCalc
4381        $(sameas(years, yearsToCalc)
4382          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4383    = yes;
4384   
4385  * Extend the decom frame to the year after the last year of usedTech
4386  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4387    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4388      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4389    = yes;
4390   
4391  * Mapping for used commodities
4392  set storage_usedCom(storage_techs,vintage,commodity);
4393  option storage_usedCom < storage_sizeParam;
4394   
4395  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4396  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4397      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4398          and storage_usedCom(storage_techs,vintage,commodity))
4399      = yes;
4400   
4401   
4402  * // ## Load units from gdx file
4404   
4405   
4406  * ==== aggregation of profiles ====
4407  * derive upper and lower profiles then aggregate
4408  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4409  option storage_level_hasProfileIn < storage_levelProfileIn;
4410   
4411  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4412  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4413      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4414              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4415   
4416  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4417  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4418  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4419      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4420  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4421      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4422   
4423  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4424  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4425                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4426   
4427  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4428      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4429          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4430      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4431              sum(timeData$timeMapping(timeData,timeModelToCalc),
4432                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4433                / timeLength(timeModelToCalc)
4434              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4435      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4436              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4437   
4438  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4439      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4440          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4441                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4442      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4443                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4444              sum(timeData$timeMapping(timeData,timeModelToCalc),
4445                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4446                / timeLength(timeModelToCalc))
4447      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4448                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4449   
4450  * for fixed profiles overwrite upper and lower profile
4451  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4452      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4453      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4454   
4455  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4456      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4457      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4458   
4459  * storage initial level
4460   
4461  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4462      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4463          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4464      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4465            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4466              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4467      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4468              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4469   
4470  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4471      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4472          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4473                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4474      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4475                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4476            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4477      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4478                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4479   
4480  * ==== parameter modifications ====
4481  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4482          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4483      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4484  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4485          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4486      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4487   
4488   
4489  * ==== definition of variables ====
4490   
4491  * Initialise variables for unitsBuild
4492  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4493      $storage_availTech(nodesModel,years,storage_techs,vintage)
4494      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4495  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4496      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4497      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4498  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4499      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4500      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4501   
4502  * Initialise variables for unitsDecom
4503  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4504      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4505        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4506      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4507                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4508                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4509                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4510          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4511   
4512  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4513    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4514    = sum(years$
4515          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4516            and storage_availTech(nodesModel,years,storage_techs,vintage)
4517            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4518            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4519        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4520      + sum(yearsToCalc_a$
4521          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4522            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4523            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4524            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4525        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4526        ;
4527   
4528  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4529      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4530        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4531      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4532   
4533   
4535   
4536   
4537  * Calculate planned unit expansion
4538  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4539  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4540  loop(years,
4541    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4542      =
4543      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4544          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4545      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4546          $storage_availTech(nodesModel,years,storage_techs,vintage)
4547      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4548          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4549  );
4550   
4551  * Set initial state for planned units
4552  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4553    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4554   
4555  * // ## Load units from gdx file
4557   
4558  * Calculate if planned unit expansion is bounded by upper and lower limits
4559  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4560  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4561    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4562          storage_techParam(storage_techs,vintage,"freeDecom"))
4563    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4564          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4565      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4566    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4567          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4568      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4569    = yes;
4570   
4571  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4572  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4573    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4574      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4575    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4576  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4577    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4578      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4579    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4580  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4581    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4582      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4583    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4584   
4585  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4586      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4587        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4588      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4589   
4590  * Add parameter for fixing capacities during myopic runs
4591  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4592  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4593  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4594   
4595  * ==== declaration of equations ====
4596   
4597  equations
4598    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4599      ) "Ensures the units balance over the planning period."
4600    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4601      ) "Ensures the units balance over the planning period."
4602    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4603      ) "Restricts the free decommissioning of units over the planning period."
4604    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4605      ) "Upper bound for the total number of units."
4606    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4607      ) "Lower bound for the total number of units."
4608    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4609      ) "Fixes the total number of units to the corresponding integer variable."
4610   
4611    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4612      ) "Upper bound for the total number of units."
4613    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4614      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4615    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4616      ) "Lower bound for the total number of units."
4617    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4618      ) "Stored commodities lost due to self discharge."
4619    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4620      ) "Currently available units must have been built at some point in time and have some state of degradation."
4621    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4622      ) "There cannot be more units from a certain year than the amount built in that year."
4623    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4624      ) "There is no recovery."
4625    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4626      ) "Limit charging rate based on unit capacity."
4627    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4628      ) "Limit discharging rate based on unit capacity."
4629    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4630      ) "Positive change in state of charge is influx."
4631    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4632      ) "Negative change in state of charge is outflux."
4633   
4634    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4635      ) "Sum of degradation class storage levels is the global level."
4636    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4637      ) "Upper bound for units of a certain state."
4638    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4639      ) "Positive change in state of charge is influx for each degradation class."
4640    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4641      ) "Determine degradation states of storage units."
4642    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4643      ) "All decomminsioned units must have a degradation state."
4644    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4645      ) "Only allow one range of degradation states per year and age group."
4646    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4647      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4648   
4649    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4650      ) "Every unit has a state of charge."
4651    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4652      ) "Every unit has a state of charge."
4653    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4654      ) "Number of units in particular SoC."
4655    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4656      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4657   
4658    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4659      ) "Limit charging rate based on unit capacity."
4660    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4661      ) "Limit discharging rate based on unit capacity."
4662    ;
4663   
4664  * ==== equation definition ====
4665  * // ## Equations
4666  * // ### Storage Units Balance
4667  * // Ensures that the total units are consistent with the built and decommissioned units.
4668  * // {Eq_storage_unitsBalance}
4669   
4670  * Equation using build only
4671  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4672      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4673            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4674          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4675          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4676      ..
4677      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4678      =e=
4679      sum ((years_a)
4680                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4681                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4682                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4683                          and years_a.val <= yearsSel.val ),
4684              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4685   
4686      + sum ((yearsToCalc)
4687                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4688                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4689                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4690                          and yearsToCalc.val <= yearsSel.val ),
4691              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4692   
4693  * Equation using build and decom
4694  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4695      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4696            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4697          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4698          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4699      ..
4700      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4701      =e=
4702          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4703        sum(years$sameas(years, yearsToCalc),
4704          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4705            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4706      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4707        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4708          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4709      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4710          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4711      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4712          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4713      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4714          ;
4715   
4716  * // ### Storage Units Free Decommission
4717  * // Restricts the free decommissioning of storage units over the planning period.
4718  * // {Eq_storage_unitsFreeDecom}
4719  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4720      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4721          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4722      ..
4723      sum(years$
4724            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4725              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4726          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4727      + sum(yearsToCalc$
4728            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4729              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4730              and yearsToCalc.val <= yearsSel.val),
4731          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4732      =g=
4733      sum(years$
4734            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4735              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4736              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4737          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4738      + sum(yearsToCalc$
4739            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4740              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4741              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4742          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4743   
4744  * // ### Storage Units Lower Limit
4745  * // Lower bound for the total number of storage units.
4746  * // {Eq_storage_unitsLowerLimit}
4747  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4748      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4749      ..
4750      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4751          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4752      =g=
4753      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4754   
4755  * // ### Storage Units Upper Limit
4756  * // Upper bound for the total number of storage units.
4757  * // {Eq_storage_unitsUpperLimit}
4758  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4759      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4760          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4761      ..
4762      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4763          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4764      =l=
4765      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4766   
4767  * // ### Storage Units Total MIP
4768  * // Fixes the total number of storage units to the corresponding integer variable.
4769  * // {Eq_storage_unitsTotalMIP}
4770  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4771      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4772          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4773      ..
4774      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4775      =e=
4776      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4777   
4778  * // ### Storage Level Lower Limit
4779  * // Lower limit on the storage level.
4780  * // {Eq_storage_levelLowerLimit}
4781  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4782      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4783          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4784      ..
4785      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4786      =g=
4787      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4788      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4789      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4790   
4791  * // ### Storage Level Upper Limit
4792  * // Upper limit on the storage level.
4793  * // {Eq_storage_levelUpperLimit}
4794  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4795      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4796          and not storage_hasDegradation(storage_techs,vintage)
4797          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4798      ..
4799      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4800      =l=
4801      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4802      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4803      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4804   
4805  * // ### Storage Level Upper Limit (degradation)
4806  * // Upper limit on the storage level if the storage technology accounts for degradation.
4807  * // {Eq_storage_levelUpperLimit_degradation}
4808  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4809      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4810          and storage_hasDegradation(storage_techs,vintage)
4811          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4812      ..
4813      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4814      =l=
4815      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4816      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4817      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4818              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4819                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4820                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4821   
4822  * // ### Storage Unit States Sum (degradation)
4823  * // The number of units in all degradation state must match the total unit number.
4824  * // {Eq_storage_unitsBalanceStates}
4825  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4826      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4827        and storage_hasDegradation(storage_techs,vintage))
4828      ..
4829      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4830      =e=
4831      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4832            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4833   
4834  * // ### Storage Unit States Upper Limit(degradation)
4835  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4836  * // {Eq_storage_unitsUpperLimitPerState}
4837  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4838      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4839          and storage_hasDegradation(storage_techs,vintage))
4840      ..
4841      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4842            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4843            + sum(years$(years.val <= yearsSel.val),
4844                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4845      =e=
4846      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4847   
4848  * // ### Storage Unit States Progression (degradation)
4849  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4850  * // {Eq_storage_unitsStatesNoRecovery}
4851  alias(degradation_states, dc_states);
4852  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4853      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4854        and yearsToCalc.val > yearsCom.val
4855        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4856      ..
4857      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4858                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4859              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4860              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4861      =l=
4862      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4863                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4864              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4865              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4866   
4867  * // ### Storage Losses
4868  * // Accumulation of storage losses.
4869  * // {Eq_storage_losses}
4870  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4871      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4872      ..
4873      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4874      =e=
4875      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4876          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4877        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4878            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4879        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4880            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4881            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4882            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4883                and ord(timeModelToCalc)=1))
4884      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4885      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4886      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4887          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4888        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4889          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4890      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4891        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4892          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4893      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4894        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4895                          and storage_validSoCRange(storage_techs,vintage)),
4896              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4897              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4898              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4899   
4900  * // ### C-Rate Limit
4901  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4902  * // {Eq_storage_cRateLimit}
4903  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4904      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4905        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4906      ..
4907      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4908      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4909          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4910      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4911          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4912      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4913          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4914          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4915          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4916              and ord(timeModelToCalc)=1)
4917      =l=
4918      storage_techParam(storage_techs,vintage,"maxCRate")
4919      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4920      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4921   
4922  * // ### E-Rate Limit
4923  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4924  * // {Eq_storage_eRateLimit}
4925  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4926      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4927        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4928      ..
4929      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4930      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4931          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4932      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4933          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4934      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4935          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4936          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4937          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4938              and ord(timeModelToCalc)=1)
4939      =g=
4940      - storage_techParam(storage_techs,vintage,"maxERate")
4941      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4942      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4943   
4944  * // ### Storage Charging
4945  * // Increases in storage levels are accounted as charging amounts.
4946  * // {Eq_storage_charge}
4947  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4948      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4949        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4950      ..
4951      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4952      =g=
4953      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4954      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4955          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4956      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4957          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4958      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4959          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4960          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4961          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4962              and ord(timeModelToCalc)=1);
4963   
4964  * // ### Storage Discharging
4965  * // Decreases in storage levels are accounted as discharging amounts.
4966  * // {Eq_storage_discharge}
4967  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4968      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4969        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4970      ..
4971      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4972      =g=
4973      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4974          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4975      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4976          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4977      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4978          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4979          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4980          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4981              and ord(timeModelToCalc)=1)
4982      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4983   
4984  * // ### Storage Level Sum (degradation)
4985  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4986  * // {Eq_storage_levelStateSum}
4987  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4988      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4989        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4990      ..
4991      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4992      =e=
4993      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4994   
4995  * // ### Storage Level Upper Limit per Age Group (degradation)
4996  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4997  * // {Eq_storage_levelUpperLimitPerAge}
4998  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4999      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5000        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5001      ..
5002      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5003      =l=
5004      storage_techParam(storage_techs,vintage,"levelUpperLimit")
5005      * storage_sizeParam(storage_techs,vintage,commodity,"size")
5006      * sum(degradation_states,
5007              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
5008                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
5009                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5010   
5011  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
5012  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
5013  * // {Eq_storage_chargeBasedDegradationDistribution}
5014  alias(years, prev_years);
5015  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5016      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5017        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5018      ..
5019      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5020          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5021      =l=
5022      storage_sizeParam(storage_techs,vintage,commodity,"size")
5023      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5024          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5025          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5026             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5027   
5028  * // ### Storage Charging per Commissioning Year (degradation)
5029  * // Increases in storage levels are accounted as charging amounts.
5030  * // {Eq_storage_chargingPerAge}
5031  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5032      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5033        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5034      ..
5035      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5036      =g=
5037      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5038      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5039   
5040  * // ### Storage Unit Decommissioning States Sum (degradation)
5041  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5042  * // {Eq_storage_unitsDecomStateSum}
5043  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5044      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5045      ..
5046      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5047      =e=
5048      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5049          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5050   
5051  * // ### Storage Unit Sequential Degradation (degradation)
5052  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5053  * // {Eq_storage_unitsDegradation}
5054  alias(degradation_states, degradation_states_a, degradation_states_b);
5055  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5056      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5057        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5058      ..
5059      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5060                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5061                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5062                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5063                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5064                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5065          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5066      * storage_bigM(storage_techs,vintage)
5067      =g=
5068      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5069   
5070  * // ### Storage Unit Sequential Degradation Range (degradation)
5071  * // Only one degradation range can be active.
5072  * // {Eq_storage_unitsDegradation_onlyOneRange}
5073  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5074      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5075      ..
5076      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5077            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5078      =e= 1;
5079   
5080  * // ### Storage Unit Sequential State of Charge (SoC)
5081  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5082  * // {Eq_storage_unitsSoC}
5083  alias(soc_states, soc_states_a, soc_states_b);
5084  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5085      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5086      ..
5087      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5088                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5089                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5090                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5091                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5092                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5093          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5094      * storage_bigM(storage_techs,vintage)
5095      =g=
5096      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5097   
5098  * // ### Storage Unit Sequential State of Charge Range (SoC)
5099  * // Only one state of charge range can be active.
5100  * // {Eq_storage_unitsSoC_onlyOneRange}
5101  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5102      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5103      ..
5104      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5105            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5106   
5107  * // ### Storage Unit State of Charge Sum (SoC)
5108  * // Each storage unit must have one state of charge.
5109  * // {Eq_storage_unitsSoC_sum}
5110  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5111      $storage_validSoCRange(storage_techs,vintage)
5112      ..
5113      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5114      =e=
5115      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5116            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5117   
5118  * // ### Storage Level State of Charge Sum (SoC)
5119  * // The total storage level must be represented by units in their specific states of charge.
5120  * // {Eq_storage_levelSoC}
5121  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5122      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5123      ..
5124      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5125      =e=
5126      storage_sizeParam(storage_techs,vintage,commodity,"size")
5127      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5128              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5129              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5130   
5131  * // ### C-Rate Limit (SoC)
5132  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5133  * // {Eq_storage_cRateLimit_SoC}
5134  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5135      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5136        and storage_validSoCRange(storage_techs,vintage)
5137        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5138      ..
5139      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5140      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5141          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5142      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5143          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5144      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5145          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5146          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5147          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5148              and ord(timeModelToCalc)=1)
5149      =l=
5150      storage_sizeParam(storage_techs,vintage,commodity,"size")
5151      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5152                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5153                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5154   
5155  * // ### E-Rate Limit (SoC)
5156  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5157  * // {Eq_storage_cRateLimit_SoC}
5158  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5159      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5160        and storage_validSoCRange(storage_techs,vintage)
5161        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5162      ..
5163      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5164      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5165          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5166      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5167          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5168      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5169          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5170          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5171          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5172              and ord(timeModelToCalc)=1)
5173      =g=
5174      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5175      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5176                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5177                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5178   
5179   
5180  * ==== model definition ====
5181   
5182  Model M_storage
5183  /
5184    Eq_storage_unitsBalance
5185    Eq_storage_unitsBalanceFreeDecom
5186    Eq_storage_unitsFreeDecom
5187    Eq_storage_unitsLowerLimit
5188    Eq_storage_unitsUpperLimit
5189    Eq_storage_levelUpperLimit_degradation
5190    Eq_storage_unitsTotalMIP
5191    Eq_storage_levelLowerLimit
5192    Eq_storage_levelUpperLimit
5195    Eq_storage_losses
5198    Eq_storage_unitsBalanceStates
5199    Eq_storage_unitsUpperLimitPerState
5200    Eq_storage_unitsStatesNoRecovery
5201    Eq_storage_cRateLimit
5202    Eq_storage_eRateLimit
5203    Eq_storage_charge
5204    Eq_storage_discharge
5205    Eq_storage_levelStateSum
5206    Eq_storage_levelUpperLimitPerAge
5207    Eq_storage_chargeBasedDegradationDistribution
5208    Eq_storage_chargingPerAge
5209    Eq_storage_unitsDecomStateSum
5210    Eq_storage_unitsDegradation
5211    Eq_storage_unitsDegradation_onlyOneRange
5212   
5213    Eq_storage_unitsSoC
5214    Eq_storage_unitsSoC_sum
5215    Eq_storage_unitsSoC_onlyOneRange
5216    Eq_storage_levelSoC
5217    Eq_storage_cRateLimit_SoC
5218    Eq_storage_eRateLimit_SoC
5219  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
5221  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5222  * SPDX-License-Identifier: BSD-3-Clause
5223   
5224  * // # core_transfer
5225  * // The equations in this file describe the commodity transfer in the model.
5226   
5227  * // ## Variables
5228  * // {special_table_transfer_variables}
5231   
5236   
5432   
5433  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5434  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5435      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5436   
5437   
5438  * ==== calculation of mappings ====
5439   
5440  * Technologies with a lifeTime > 0 are available
5441  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5442  transfer_availTech(linksModel,years,transfer_techs,vintage)
5443      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5444          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5445   
5446  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5447  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5448      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5449   
5450  * Technologies already built become unavailable if they have a linksBuild of 0
5451  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5452      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5453   
5454  * Used technologies are available technologies over their technical lifeTime
5455  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5456  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5457      $(vintage.val <= years.val
5458          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5459                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5460          ) = yes;
5461   
5462  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5463  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5464  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5465    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5466                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5467      and sum(yearsToCalc
5468        $(sameas(years, yearsToCalc)
5469          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5470          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5471    = yes;
5472   
5473  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5474    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5475                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5476      and sum(yearsToCalc
5477        $(sameas(years, yearsToCalc)
5478          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5479          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5480    = yes;
5481   
5482  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5483  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5484    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5485      and sum(yearsToCalc
5486        $(sameas(years, yearsToCalc)
5487          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5488    = yes;
5489   
5490  * Extend the decom frame to the year after the last year of usedTech
5491  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5492    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5493      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5494    = yes;
5495   
5496   
5497  * // ## Load links from gdx file
5499   
5500   
5501  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5502  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5503   
5504  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5505  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5506      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5507      = 1;
5508   
5509  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5510      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5511      = 1;
5512   
5513  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5514      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5515      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5516   
5517  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5518      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5519      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5520   
5521  * aggregate time dimension
5522  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5523  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5524      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5525      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5526            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5527            / timeLength(timeModelToCalc));
5528  option clear = transfer_flowProfileIn;
5529   
5530  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5531      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5532        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5533      = 1;
5534   
5535  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5536      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5537        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5538      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5539   
5540  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5541      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5542        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5543      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5544   
5545  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5546  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5547      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5548          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5549   
5550  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5551  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5552      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5554   
5555  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5556  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5557      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5558          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5559   
5560  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5561  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5562      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5563   
5564  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5565  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5566      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5567          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5568          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5569      = (1 / sum(linksData
5570                  $links_aggregate(linksModelToCalc,linksData),
5571              1 / ( sum(link_types,
5572                          transfer_lengthParamIn(linksData,link_types,"length")
5573                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5574                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5575   
5576  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5577  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5578      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5579              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5580   
5581  * aggregate coefficient delays per link and reduce based on time resolution
5582  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5584  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5585    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5586      or sum(link_types,
5587          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5588    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5589            + sum(link_types,
5590                transfer_lengthParam(linksModel,link_types,"length")
5591                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5592            / 1);
5594   
5595  * ==== parameter modifications ====
5596  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5597      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5598      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5599  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5600      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5601      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5602   
5603   
5604  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5605   
5606  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5607      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5608      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5609                       and transfer_incidenceData_flip(linksData) = 1),
5610              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5611              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5612          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5613                          and transfer_incidenceData_flip(linksData) = -1),
5614              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5615              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5616      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5617              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5618   
5619  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5620      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5621      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5622                       and transfer_incidenceData_flip(linksData) = 1),
5623              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5624              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5625          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5626                          and transfer_incidenceData_flip(linksData) = -1),
5627              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5628              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5629      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5630              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5631   
5632  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5633      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5634      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5635                       and transfer_incidenceData_flip(linksData) = 1
5636                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5637              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5638          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5639                          and transfer_incidenceData_flip(linksData) = -1
5640                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5641              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5642      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5643                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5644              1);
5645   
5646  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5647      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5648      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5649                       and transfer_incidenceData_flip(linksData) = 1
5650                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5651              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5652          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5653                          and transfer_incidenceData_flip(linksData) = -1
5654                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5655              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5656      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5657                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5658              1);
5659  option clear = transfer_flowProfileIn_aggTime;
5660   
5661  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5662   
5663  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5664      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5665      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5666                       and transfer_incidenceData_flip(linksData) = 1),
5667              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5668              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5669          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5670                          and transfer_incidenceData_flip(linksData) = -1),
5671              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5672              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5673      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5674              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5675   
5676  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5677      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5678      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5679                       and transfer_incidenceData_flip(linksData) = -1),
5680              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5681              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5682          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5683                          and transfer_incidenceData_flip(linksData) = 1),
5684              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5685              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5686      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5687              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5688   
5689  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5690      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5691      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5692                       and transfer_incidenceData_flip(linksData) = 1
5693                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5694              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5695          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5696                          and transfer_incidenceData_flip(linksData) = -1
5697                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5698              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5699      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5700                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5701              1);
5702   
5703  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5704      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5705      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5706                       and transfer_incidenceData_flip(linksData) = -1
5707                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5708              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5709          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5710                          and transfer_incidenceData_flip(linksData) = 1
5711                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5712              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5713      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5714                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5715              1);
5716   
5717  * Mapping for grid segments using DC optimal power flow
5718  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5719  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5720      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5723      = yes;
5726   
5727  * Ensure each grid segment uses exactly one commodity
5728  parameter checkGridSegmentCommodities(gridSegments);
5729  checkGridSegmentCommodities(gridSegments)
5730      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5731                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5732                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5733   
5734  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5735  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5736      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5737                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5738                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5739      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5740   
5741   
5745   
5746  scalar transfer_enableMIP;
5747  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5748   
5749   
5750  * ==== definition of variables ====
5751   
5752  * Initialise variables for linksBuild
5753  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5754      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5755      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5756  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5757      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5758      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5759  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5760      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5761      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5762   
5763  * Initialise variables for linksDecom
5764  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5765      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5766        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5767      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5768                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5769                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5770                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5771          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5772   
5773  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5774    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5775    = sum(years$
5776          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5777            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5778            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5779            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5780        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5781      + sum(yearsToCalc_a$
5782          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5783            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5784            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5785            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5786        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5787   
5788  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5789      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5790          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5791      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5792   
5793   
5795   
5796   
5797  * Calculate planned transfer links expansion
5798  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5799  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5800  loop(years,
5801    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5802      =
5803      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5804          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5805      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5806          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5807      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5808          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5809  );
5810   
5811  * Set initial state for planned units
5812  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5813    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5814   
5815  * // ## Load units from gdx file
5817   
5818  * Calculate if planned links expansion is bound by upper and lower limits
5819  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5820  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5821    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5822          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5823    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5824          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5825      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5826    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5827          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5828      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5829    = yes;
5830   
5831  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5832  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5833    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5834      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5835    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5836  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5837    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5838      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5839    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5840  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5841    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5842      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5843    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5844   
5845  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5846      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5847        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5848      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5849   
5850  * Add parameter for fixing capacities during myopic runs
5851  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5852  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5853  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5854   
5855  * ==== declaration of equations ====
5856   
5857  equations
5858    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5859      ) "Ensures the links balance over the planning period."
5860    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5861      ) "Ensures the links balance over the planning period."
5862    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5863      ) "Restricts the free decommissioning of links over the planning period."
5864    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5865      ) "Upper bound for the total number of links."
5866    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5867      ) "Lower bound for the total number of links."
5868    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5869      ) "Fixes the total number of links to the corresponding integer variable."
5870   
5871    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5872      ) "Upper bound for the flow along the transfer links."
5873    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5874      ) "Upper bound for the flow against the transfer links."
5875    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5876      )
5877    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5878      )
5879    ;
5880   
5881   
5882  * ==== equation definition ====
5883  * // ## Equations
5884  * // ### Transfer Links Balance
5885  * // Ensures that the transfer between nodes is balanced.
5886  * // {Eq_transfer_linksBalance}
5887   
5888  * Equation using build only
5889  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5890      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5891            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5892          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5893          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5894      ..
5895      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5896      =e=
5897      sum ((years_a)
5898              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5899                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5900                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5901                  and years_a.val <= yearsSel.val ),
5902            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5903   
5904      + sum ((yearsToCalc)
5905              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5906                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5907                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5908                  and yearsToCalc.val <= yearsSel.val ),
5909            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5910   
5911  * Equation using build and decom
5912  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5913      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5914            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5915          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5916          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5917      ..
5918      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5919      =e=
5920      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5921        sum(years$sameas(years, yearsToCalc),
5922          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5923            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5924      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5925        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5926          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5927      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5928          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5929      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5930          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5931      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5932          ;
5933   
5934  * // ### Transfer Links Free Decommissioning
5935  * // Balances free link decommissioning.
5936  * // {Eq_transfer_linksFreeDecom}
5937  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5938      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5939          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5940          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5941      ..
5942      sum(years$
5943            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5944              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5945              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5946          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5947      + sum(yearsToCalc$
5948            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5949              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5950              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5951              and yearsToCalc.val <= yearsSel.val),
5952          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5953      =g=
5954      sum(years$
5955            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5956              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5957              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5958          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5959      + sum(yearsToCalc$
5960            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5961              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5962              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5963          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5964   
5965  * // ### Transfer Links Lower Limit
5966  * // Ensures link capacity lower limits.
5967  * // {Eq_transfer_linksLowerLimit}
5968  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5969      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5970      ..
5971      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5972          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5973      =g=
5974      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5975   
5976  * // ### Transfer Links Upper Limit
5977  * // Ensures link capacity upper limits.
5978  * // {Eq_transfer_linksUpperLimit}
5979  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5980      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5981          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5982      ..
5983      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5984          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5985      =l=
5986      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5987   
5988  * // ### Transfer Links Total MIP
5989  * // Ensures number of MIP links.
5990  * // {Eq_transfer_linksTotalMIP}
5991  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5992      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5993          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5994      ..
5995      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5996      =e=
5997      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5998   
5999  * // ### Transfer Links Flow Along Upper Limit
6000  * // Ensures links flow along upper limit.
6001  * // {Eq_transfer_flowAlongUpperLimit}
6002  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6003      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6004      ..
6005      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6006      =l=
6007      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
6008      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6009      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6010      ;
6011   
6012  * // ### Transfer Links Flow Against Upper Limit
6013  * // Ensures links flow against upper limit.
6014  * // {Eq_transfer_flowAgainstUpperLimit}
6015  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6016      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6017      ..
6018      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6019      =l=
6020      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6021      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6022      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6023      ;
6024   
6025  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6026  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6027      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6028          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6029      = yes;
6030   
6031  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6032  option transfer_usedOpfLinks < transfer_usedOpf;
6033   
6034  set transfer_usedOpfSegments(years,gridSegments);
6035  option transfer_usedOpfSegments < transfer_usedOpf;
6036   
6040  * // ### Transfer DC optimal flow angle flows
6041  * // Angle flows.
6042  * // {Eq_transfer_dcopf_cycleFlows}
6043  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6044      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6045      ..
6046      sum ((transfer_techs,vintage)
6047              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6048          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6049              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6050          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6051      =e=
6052      sum ( nodesModelSel,
6053          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6054          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6058   
6059   
6060  * ==== model definition ====
6061   
6062  Model M_transfer
6063  /
6064    Eq_transfer_linksBalance
6065    Eq_transfer_linksBalanceFreeDecom
6066    Eq_transfer_linksFreeDecom
6067    Eq_transfer_linksLowerLimit
6068    Eq_transfer_linksUpperLimit
6069    Eq_transfer_linksTotalMIP
6070    Eq_transfer_flowAlongUpperLimit
6071    Eq_transfer_flowAgainstUpperLimit
6075    Eq_transfer_dcopf_angleFlows
6079  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
6081  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6082  * SPDX-License-Identifier: BSD-3-Clause
6083   
6084  * // # core_sourcesink
6085  * // The equations in this file describe the sources and sinks in the model.
6086   
6087  * // ## Variables
6088  * // {special_table_sourcesink_variables}
6590   
6591  * // ## Aggregation of profiles
6592  * // Profiles are rescaled based on the annual sum.
6593   
6594  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6595  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6596      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6597  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6598      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6599  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6600      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6601   
6602  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6603  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6604      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6605      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6606   
6607  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6608  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6609      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6610      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6611   
6612  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6613  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6614      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6615          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6616          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6617      = yes;
6618   
6619  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6620              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6621   
6622  * calculate scaling factor for each type
6623  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6624  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6625      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6626          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6627      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6628          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6629              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6630   
6631  * rescale profiles
6632  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6633      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6634      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6635          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6636   
6637  * // ## Aggregation of profiles
6638  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6639   
6640  * ==== aggregation of profiles ====
6641  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6642  option sourcesink_usesProfileIn < sourcesink_profileIn
6643   
6644  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6645  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6646      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6647          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6648      = yes;
6649   
6650  * aagregate time dimension
6651  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6652  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6653    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6654    = sum(timeMapping_t(timeModelToCalc,timeData),
6655            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6656      / timeLength(timeModelToCalc);
6657  option clear = sourcesink_profileIn;
6658   
6659  * sum up absolute profiles
6660  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6661  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6662      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6663      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6664              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6665  option clear = sourcesink_profileIn_aggTime;
6666   
6667  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6668  option sourcesink_enabled < sourcesink_config;
6669   
6673   
6674  * ==== declaration of variables ====
6675  * // ## Bounding of variables
6676  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6677  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6678      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6679          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6680          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6681      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6682   
6683  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6684      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6685          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6686          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6687      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6688   
6689  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6690      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6691          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6692      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6693   
6694  option clear = sourcesink_profile;
6695   
6696   
6697  * ==== equation definition ====
6698  * // ## Equations
6699  equations
6700  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6701      ) "Fixes the annual sum from sources / to sinks"
6702  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6703      ) "Limits the lower sum from sources / to sinks"
6704  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6705      ) "Limits the upper sum from sources / to sinks"
6706    ;
6707   
6708  * // ### Fixed annual sums for sources and sinks
6709  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6710  * // {Eq_sourcesink_useFixedSum}
6711  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6712      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6713          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6714      ..
6715      sum(timeModelSel,
6716          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6717          * timeLength(timeModelSel))
6718      =e=
6719      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6720      * timefrac
6721      ;
6722   
6723  * // ### Lower annual sums for sources and sinks
6724  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6725  * // {Eq_sourcesink_useLowerSum}
6726  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6727      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6728          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6729          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6730      ..
6731      sum(timeModelSel,
6732          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6733          * timeLength(timeModelSel))
6734      =g=
6735      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6736      * timefrac
6737      ;
6738   
6739  * // ### Upper annual sums for sources and sinks
6740  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6741  * // {Eq_sourcesink_useUpperSum}
6742  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6743      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6744          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6745          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6746      ..
6747      sum(timeModelSel,
6748          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6749          * timeLength(timeModelSel))
6750      =l=
6751      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6752      * timefrac
6753      ;
6754   
6755   
6756  * ==== model definition ====
6757   
6758  Model M_sourcesink
6759  /
6760    Eq_sourcesink_useFixedSum
6761    Eq_sourcesink_useLowerSum
6762    Eq_sourcesink_useUpperSum
6763  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
6765  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6766  * SPDX-License-Identifier: BSD-3-Clause
6767   
6768  * // # balance
6769  * // The equations in this file describe the commodity balancing in the model.
6770   
6771  Equations
6772    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6773      ) "Balance for each commodity used in each time step, region, and year";
6774   
6775   
6776  * ==== calculation of mappings ====
6777   
6778  set balance_techComm(techs,commodity);
6779  balance_techComm(converter_techs(techs),commodity)
6780      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6781  balance_techComm(storage_techs(techs),commodity)
6782      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6783  balance_techComm(transfer_techs(techs),commodity)
6784      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6785  balance_techComm(sourcesink_techs(techs),commodity)
6786      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6787   
6788  set balance_usedConverter(nodesModel,years,commodity);
6789  set balance_usedStorage(nodesModel,years,commodity);
6790  set balance_usedTransfer(nodesModel,years,commodity);
6791  set balance_usedSourceSink(nodesModel,years,commodity);
6792  set balance_usedBalance(nodesModel,years,commodity);
6793   
6794  balance_usedConverter(nodesModel,years,commodity)
6795      = sum ((converter_techs,vintage,activity)
6796              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6797                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6798   
6799  balance_usedStorage(nodesModel,years,commodity)
6800      = sum ((storage_techs,vintage,activity)
6801              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6802                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6803   
6804  balance_usedTransfer(nodesModel,years,commodity)
6805      = sum ((linksModel,transfer_techs,vintage)
6806              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6807                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6808   
6809  option balance_usedSourceSink < sourcesink_enabled;
6810   
6811  balance_usedBalance(nodesModel,years,commodity)
6812      $(balance_usedConverter(nodesModel,years,commodity)
6813          or balance_usedStorage(nodesModel,years,commodity)
6814          or balance_usedTransfer(nodesModel,years,commodity)
6815          or balance_usedSourceSink(nodesModel,years,commodity) )
6816      = yes;
6817   
6818   
6819  * ==== equation definition ====
6820   
6821  * // ### Balance commodities
6822  * // Balancing of commodities for all model regions, time steps, and years
6823  * // {Eq_balance_commodities}
6824  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6825      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6826      ..
6827  * converter
6828      sum((converter_techs,vintage,activity)
6829              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6830                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6831          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6832              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6833              * timeLength(timeModelToCalc)
6834          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6835              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6836              * timeLength(timeModelToCalc))
6837   
6838  * storages
6839      + sum((storage_techs,vintage)
6840              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6841                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6842          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6843              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6844          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6845              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6846          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
6847              * storage_sizeParam(storage_techs,vintage,commodity,"size")
6848              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6849              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
6850                  and ord(timeModelToCalc)=1)
6851          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6854          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6855          * timeLength(timeModelSel)
6858          )
6859   
6860  * incoming transfer
6861      + sum((linksModel,transfer_techs,vintage)
6862              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6863                  and linksModelToCalc(linksModel)),
6864          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6865                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6866            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6867                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6868          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6869          * timeLength(timeModelToCalc))
6870   
6871  * outgoing transfer
6872      - sum((linksModel,transfer_techs,vintage)
6873              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6874                  and linksModelToCalc(linksModel)),
6875          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6876                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6877            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6878                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6879          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6880          * timeLength(timeModelSel))
6881   
6882  * transfer losses
6883      + 0.5 * sum((linksModel,transfer_techs,vintage)
6884              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6885                  AND linksModelToCalc(linksModel)),
6886          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6887                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6888            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6889                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6890          * timeLength(timeModelSel)
6891          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6892              + sum(link_types,
6893                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6894                  * transfer_lengthParam(linksModel,link_types,"length"))))
6895   
6896  * sourcesink
6897      + sum((sourcesink_techs)
6898              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6899          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6900          * timeLength(timeModelSel))
6901      =e=
6902      0;
6903   
6904   
6905  * ==== model definition ====
6906   
6907  Model M_balance
6908  /
6909    Eq_balance_commodities
6910  /;
6911   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
6913  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6914  * SPDX-License-Identifier: BSD-3-Clause
6915   
6916  * // # accounting_equations
6917   
6918  * ==== declaration of variables ====
6919   
6920  variables
6921  accounting_indicator(accNodesModel,accYears,indicator)
6922  accounting_indicator_links(linksModel,years,indicator)
6923  accounting_objective
6924  ;
6925   
6926   
6927  * ==== definition of variables ====
6928   
6929  accounting_indicator.lo(accNodesModel,accYears,indicator)
6930      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6931          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6932      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6933   
6934  accounting_indicator.up(accNodesModel,accYears,indicator)
6935      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6936          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6937      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6938   
6939  accounting_indicator.fx(accNodesModel,accYears,indicator)
6940      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
6941          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6942      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6943   
6944   
6945  * set the variable levels to be fixed for years before the optimization years
6946  accounting_indicator.l(accNodesModel,accYears,indicator)
6947      $activeIndicators(accNodesModel,accYears,indicator)
6948      = 0;
6949   
6950   
6951  * ==== declaration of equations ====
6952   
6953  equations
6954  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
6955      ) "Ensures the fixed value of an indicator per accounting region"
6956  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
6957      ) "Ensures the upper limit of an indicator per accounting region"
6958  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
6959      ) "Ensures the lower limit of an indicator per accounting region"
6960  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
6961      ) "Ensures the fixed value of an indicator per model link"
6962  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
6963      ) "Ensures the upper limit of an indicator per model link"
6964  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
6965      ) "Ensures the lower limit of an indicator per model link"
6966  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6967    ;
6968   
6969   
6970  * ==== equations definition ====
6971  * // ## Equations
6972  * // ### Accounting Indicator Calculation
6973  * // Calculates the fixed limit for accounting indicators.
6974  * // {Eq_accounting_indicatorCalc_fixed}
6975  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
6976      $(activeIndicators(accNodesModel,accYears,indicator)
6977          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6978      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6980  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6981  * SPDX-License-Identifier: BSD-3-Clause
6982   
6983  * == variable indicators ==
6984      sum((accNodesModel_a,accYears_a,indicator_a)
6985          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6986              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6987          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6988          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6989          )
6990   
6991  * == converters ==
6992      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6993              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6994                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6995          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6996          *
6997          ( sum ((converter_techs,vintage)
6998                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6999                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7000              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7001              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7002              )
7003   
7004          + sum ((years_a,converter_techs,vintage)
7005                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7006                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7007                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7008                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7009                          and years_a.val <= yearsSel.val ),
7010              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7011              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7012              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7013              )
7014   
7015          + sum ((yearsToCalc,converter_techs,vintage)
7016                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7017                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7018                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7019                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7020                          and yearsToCalc.val <= yearsSel.val ),
7021              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7022              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7023              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7024              )
7025   
7026          + sum ((converter_techs,vintage)
7027                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7028                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7029              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7030              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7031   
7032          + sum ((converter_techs,vintage)
7033                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7034              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7035              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7036   
7037          + sum ((timeModelSel,converter_techs,vintage,activity)
7038                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7039              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7040              * timeLength(timeModelSel)
7041              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7042          / timefrac
7043   
7044          + sum ((timeModelSel,converter_techs,vintage)
7045                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7046              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7047              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7048          / timefrac
7049   
7050          + sum ((timeModelSel,converter_techs,vintage)
7051                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7052              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7053              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7054                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7055   
7056              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7057              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7058                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7059          / timefrac
7060          )
7061      )
7062   
7063  * == storage ==
7064      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7065              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7066                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7067          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7068          *
7069          ( sum ((storage_techs,vintage)
7070                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7071                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7072              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7073              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7074              )
7075   
7076          + sum ((years_a,storage_techs,vintage)
7077                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7078                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7079                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7080                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7081                          and years_a.val <= yearsSel.val ),
7082              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7083              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7084              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7085              )
7086   
7087          + sum ((yearsToCalc,storage_techs,vintage)
7088                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7089                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7090                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7091                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7092                          and yearsToCalc.val <= yearsSel.val ),
7093              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7094              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7095              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7096              )
7097   
7098          + sum ((storage_techs,vintage)
7099                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7100                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7101              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7102              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7103   
7104          + sum ((storage_techs,vintage)
7105                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7106              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7107              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7108          )
7109      )
7110   
7111   
7112  * == transfer ==
7113      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7114              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7115                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7116          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7117          *
7118          ( sum ((linksModelToCalc,transfer_techs,vintage)
7119                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7120                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7121                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7122              0.5
7123              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7124              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7125   
7126          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7127                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7128                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7129                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7130                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7131                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7132                          and years_a.val <= yearsSel.val ),
7133              0.5
7134              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7135              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7136              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7137   
7138          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7139                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7140                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7141                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7142                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7143                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7144                          and yearsToCalc.val <= yearsSel.val ),
7145              0.5
7146              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7147              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7148              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7149   
7150          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7151                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7152                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7153                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7154              0.5
7155              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7156              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7157              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7158   
7159          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7160                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7161                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7162                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7163                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7164                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7165                          and years_a.val <= yearsSel.val ),
7166              0.5
7167              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7168              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7169              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7170              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7171   
7172          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7173                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7174                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7175                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7176                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7177                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7178                          and yearsToCalc.val <= yearsSel.val ),
7179              0.5
7180              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7181              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7182              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7183              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7184   
7185          + sum ((linksModelToCalc,transfer_techs,vintage)
7186                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7187                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7188                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7189              0.5
7190              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7191              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7192   
7193              + 0.5
7194              * sum (link_types,
7195                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7196                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7197                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7198              ) )
7199   
7200          + sum ((linksModelToCalc,transfer_techs,vintage)
7201                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7202                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7203              0.5
7204              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7205              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7206   
7207              + 0.5
7208              * sum (link_types,
7209                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7210                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7211                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7212   
7213              + 0.5
7214              * sum (timeModelSel,
7215                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7216                  * timeLength(timeModelSel)
7217                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7218                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7219   
7220                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7221                  * timeLength(timeModelSel)
7222                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7223                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7224                  / timefrac
7225   
7226              + 0.5
7227              * sum ((timeModelSel, link_types),
7228                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7229                  * timeLength(timeModelSel)
7230                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7231                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7232                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7233   
7234                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7235                  * timeLength(timeModelSel)
7236                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7237                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7238                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7239                  / timefrac
7240              )
7241          )
7242      )
7243   
7244   
7245  * == sources / sinks ==
7246      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7247              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7248                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7249          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7250          *
7251          sum ((timeModelSel,sourcesink_techs,commodity)
7252                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7253              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7254              * timeLength(timeModelSel)
7255              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7256          / timefrac
7257      )
7258      =e=
7259      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7260   
7261  * // ### Accounting Indicator Calculation
7262  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7263  * // {Eq_accounting_indicatorCalc_upper}
7264  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
7265      $(activeIndicators(accNodesModel,accYears,indicator)
7266          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7267          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7268      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7270  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7271  * SPDX-License-Identifier: BSD-3-Clause
7272   
7273  * == variable indicators ==
7274      sum((accNodesModel_a,accYears_a,indicator_a)
7275          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7276              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7277          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7278          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7279          )
7280   
7281  * == converters ==
7282      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7283              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7284                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7285          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7286          *
7287          ( sum ((converter_techs,vintage)
7288                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7289                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7290              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7291              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7292              )
7293   
7294          + sum ((years_a,converter_techs,vintage)
7295                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7296                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7297                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7298                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7299                          and years_a.val <= yearsSel.val ),
7300              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7301              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7302              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7303              )
7304   
7305          + sum ((yearsToCalc,converter_techs,vintage)
7306                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7307                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7308                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7309                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7310                          and yearsToCalc.val <= yearsSel.val ),
7311              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7312              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7313              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7314              )
7315   
7316          + sum ((converter_techs,vintage)
7317                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7318                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7319              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7320              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7321   
7322          + sum ((converter_techs,vintage)
7323                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7324              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7325              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7326   
7327          + sum ((timeModelSel,converter_techs,vintage,activity)
7328                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7329              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7330              * timeLength(timeModelSel)
7331              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7332          / timefrac
7333   
7334          + sum ((timeModelSel,converter_techs,vintage)
7335                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7336              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7337              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7338          / timefrac
7339   
7340          + sum ((timeModelSel,converter_techs,vintage)
7341                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7342              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7343              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7344                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7345   
7346              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7347              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7348                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7349          / timefrac
7350          )
7351      )
7352   
7353  * == storage ==
7354      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7355              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7356                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7357          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7358          *
7359          ( sum ((storage_techs,vintage)
7360                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7361                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7362              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7363              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7364              )
7365   
7366          + sum ((years_a,storage_techs,vintage)
7367                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7368                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7369                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7370                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7371                          and years_a.val <= yearsSel.val ),
7372              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7373              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7374              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7375              )
7376   
7377          + sum ((yearsToCalc,storage_techs,vintage)
7378                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7379                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7380                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7381                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7382                          and yearsToCalc.val <= yearsSel.val ),
7383              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7384              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7385              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7386              )
7387   
7388          + sum ((storage_techs,vintage)
7389                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7390                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7391              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7392              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7393   
7394          + sum ((storage_techs,vintage)
7395                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7396              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7397              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7398          )
7399      )
7400   
7401   
7402  * == transfer ==
7403      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7404              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7405                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7406          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7407          *
7408          ( sum ((linksModelToCalc,transfer_techs,vintage)
7409                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7410                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7411                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7412              0.5
7413              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7414              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7415   
7416          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7417                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7418                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7419                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7420                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7421                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7422                          and years_a.val <= yearsSel.val ),
7423              0.5
7424              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7425              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7426              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7427   
7428          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7429                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7430                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7431                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7432                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7433                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7434                          and yearsToCalc.val <= yearsSel.val ),
7435              0.5
7436              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7437              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7438              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7439   
7440          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7441                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7442                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7443                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7444              0.5
7445              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7446              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7447              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7448   
7449          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7450                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7451                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7452                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7453                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7454                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7455                          and years_a.val <= yearsSel.val ),
7456              0.5
7457              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7458              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7459              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7460              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7461   
7462          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7463                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7464                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7465                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7466                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7467                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7468                          and yearsToCalc.val <= yearsSel.val ),
7469              0.5
7470              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7471              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7472              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7473              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7474   
7475          + sum ((linksModelToCalc,transfer_techs,vintage)
7476                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7477                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7478                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7479              0.5
7480              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7481              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7482   
7483              + 0.5
7484              * sum (link_types,
7485                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7486                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7487                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7488              ) )
7489   
7490          + sum ((linksModelToCalc,transfer_techs,vintage)
7491                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7492                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7493              0.5
7494              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7495              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7496   
7497              + 0.5
7498              * sum (link_types,
7499                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7500                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7501                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7502   
7503              + 0.5
7504              * sum (timeModelSel,
7505                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7506                  * timeLength(timeModelSel)
7507                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7508                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7509   
7510                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7511                  * timeLength(timeModelSel)
7512                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7513                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7514                  / timefrac
7515   
7516              + 0.5
7517              * sum ((timeModelSel, link_types),
7518                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7519                  * timeLength(timeModelSel)
7520                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7521                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7522                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7523   
7524                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7525                  * timeLength(timeModelSel)
7526                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7527                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7528                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7529                  / timefrac
7530              )
7531          )
7532      )
7533   
7534   
7535  * == sources / sinks ==
7536      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7537              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7538                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7539          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7540          *
7541          sum ((timeModelSel,sourcesink_techs,commodity)
7542                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7543              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7544              * timeLength(timeModelSel)
7545              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7546          / timefrac
7547      )
7548      =l=
7549      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7550   
7551  * // ### Accounting Indicator Calculation
7552  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7553  * // {Eq_accounting_indicatorCalc_lower}
7554  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
7555      $(activeIndicators(accNodesModel,accYears,indicator)
7556          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7557          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7558      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7560  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7561  * SPDX-License-Identifier: BSD-3-Clause
7562   
7563  * == variable indicators ==
7564      sum((accNodesModel_a,accYears_a,indicator_a)
7565          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7566              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7567          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7568          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7569          )
7570   
7571  * == converters ==
7572      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7573              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7574                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7575          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7576          *
7577          ( sum ((converter_techs,vintage)
7578                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7579                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7580              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7581              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7582              )
7583   
7584          + sum ((years_a,converter_techs,vintage)
7585                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7586                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7587                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7588                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7589                          and years_a.val <= yearsSel.val ),
7590              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7591              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7592              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7593              )
7594   
7595          + sum ((yearsToCalc,converter_techs,vintage)
7596                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7597                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7598                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7599                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7600                          and yearsToCalc.val <= yearsSel.val ),
7601              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7602              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7603              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7604              )
7605   
7606          + sum ((converter_techs,vintage)
7607                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7608                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7609              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7610              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7611   
7612          + sum ((converter_techs,vintage)
7613                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7614              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7615              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7616   
7617          + sum ((timeModelSel,converter_techs,vintage,activity)
7618                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7619              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7620              * timeLength(timeModelSel)
7621              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7622          / timefrac
7623   
7624          + sum ((timeModelSel,converter_techs,vintage)
7625                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7626              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7627              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7628          / timefrac
7629   
7630          + sum ((timeModelSel,converter_techs,vintage)
7631                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7632              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7633              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7634                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7635   
7636              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7637              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7638                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7639          / timefrac
7640          )
7641      )
7642   
7643  * == storage ==
7644      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7645              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7646                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7647          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7648          *
7649          ( sum ((storage_techs,vintage)
7650                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7651                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7652              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7653              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7654              )
7655   
7656          + sum ((years_a,storage_techs,vintage)
7657                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7658                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7659                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7660                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7661                          and years_a.val <= yearsSel.val ),
7662              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7663              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7664              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7665              )
7666   
7667          + sum ((yearsToCalc,storage_techs,vintage)
7668                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7669                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7670                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7671                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7672                          and yearsToCalc.val <= yearsSel.val ),
7673              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7674              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7675              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7676              )
7677   
7678          + sum ((storage_techs,vintage)
7679                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7680                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7681              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7682              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7683   
7684          + sum ((storage_techs,vintage)
7685                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7686              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7687              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7688          )
7689      )
7690   
7691   
7692  * == transfer ==
7693      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7694              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7695                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7696          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7697          *
7698          ( sum ((linksModelToCalc,transfer_techs,vintage)
7699                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7700                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7701                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7702              0.5
7703              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7704              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7705   
7706          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7707                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7708                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7709                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7710                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7711                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7712                          and years_a.val <= yearsSel.val ),
7713              0.5
7714              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7715              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7716              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7717   
7718          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7719                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7720                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7721                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7722                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7723                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7724                          and yearsToCalc.val <= yearsSel.val ),
7725              0.5
7726              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7727              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7728              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7729   
7730          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7731                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7732                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7733                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7734              0.5
7735              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7736              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7737              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7738   
7739          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7740                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7741                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7742                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7743                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7744                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7745                          and years_a.val <= yearsSel.val ),
7746              0.5
7747              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7748              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7749              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7750              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7751   
7752          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7753                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7754                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7755                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7756                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7757                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7758                          and yearsToCalc.val <= yearsSel.val ),
7759              0.5
7760              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7761              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7762              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7763              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7764   
7765          + sum ((linksModelToCalc,transfer_techs,vintage)
7766                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7767                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7768                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7769              0.5
7770              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7771              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7772   
7773              + 0.5
7774              * sum (link_types,
7775                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7776                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7777                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7778              ) )
7779   
7780          + sum ((linksModelToCalc,transfer_techs,vintage)
7781                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7782                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7783              0.5
7784              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7785              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7786   
7787              + 0.5
7788              * sum (link_types,
7789                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7790                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7791                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7792   
7793              + 0.5
7794              * sum (timeModelSel,
7795                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7796                  * timeLength(timeModelSel)
7797                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7798                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7799   
7800                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7801                  * timeLength(timeModelSel)
7802                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7803                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7804                  / timefrac
7805   
7806              + 0.5
7807              * sum ((timeModelSel, link_types),
7808                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7809                  * timeLength(timeModelSel)
7810                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7811                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7812                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7813   
7814                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7815                  * timeLength(timeModelSel)
7816                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7817                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7818                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7819                  / timefrac
7820              )
7821          )
7822      )
7823   
7824   
7825  * == sources / sinks ==
7826      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7827              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7828                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7829          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7830          *
7831          sum ((timeModelSel,sourcesink_techs,commodity)
7832                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7833              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7834              * timeLength(timeModelSel)
7835              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7836          / timefrac
7837      )
7838      =g=
7839      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7840   
7841   
7842  * // ### Accounting Indicator Calculation Links
7843  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7844  * // {Eq_accounting_indicatorCalc_links_fixed}
7845  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
7846      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7847          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7848      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7850  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7851  * SPDX-License-Identifier: BSD-3-Clause
7852   
7853      sum ((transfer_techs,vintage)
7854                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7855                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7856          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7857          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7858   
7859      + sum ((years_a,transfer_techs,vintage)
7860                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7861                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7862                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7863                      and years_a.val <= yearsSel.val ),
7864          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7865          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7866          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7867   
7868      + sum ((transfer_techs,vintage,link_types)
7869                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7870                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7871          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7872          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7873          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7874   
7875      + sum ((years_a,transfer_techs,vintage,link_types)
7876                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7877                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7878                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7879                      and years_a.val <= yearsSel.val ),
7880          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7881          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7882          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7883          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7884   
7885      + sum ((transfer_techs,vintage)
7886                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7887                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7888          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7889          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7890   
7891          + sum (link_types,
7892              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7893              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7894              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7895          ) )
7896   
7897      + sum ((transfer_techs,vintage)
7898                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7899          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7900          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7901   
7902          + sum (link_types,
7903              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7904              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7905              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7906   
7907          + sum (timeModelSel,
7908              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7909              * timeLength(timeModelSel)
7910              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7911                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7912   
7913              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7914              * timeLength(timeModelSel)
7915              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7916                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7917              / timefrac
7918   
7919          + sum ((timeModelSel, link_types),
7920              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7921              * timeLength(timeModelSel)
7922              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7923              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7924                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7925   
7926              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7927              * timeLength(timeModelSel)
7928              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7929              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7930                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7931              / timefrac
7932          )
7933      =e=
7934  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
7935   
7936  * // ### Accounting Indicator Calculation Links
7937  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7938  * // {Eq_accounting_indicatorCalc_links_upper}
7939  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
7940      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7941          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
7942          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7943      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7945  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7946  * SPDX-License-Identifier: BSD-3-Clause
7947   
7948      sum ((transfer_techs,vintage)
7949                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7950                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7951          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7952          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7953   
7954      + sum ((years_a,transfer_techs,vintage)
7955                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7956                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7957                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7958                      and years_a.val <= yearsSel.val ),
7959          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7960          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7961          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7962   
7963      + sum ((transfer_techs,vintage,link_types)
7964                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7965                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7966          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7967          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7968          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7969   
7970      + sum ((years_a,transfer_techs,vintage,link_types)
7971                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7972                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7973                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7974                      and years_a.val <= yearsSel.val ),
7975          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7976          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7977          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7978          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7979   
7980      + sum ((transfer_techs,vintage)
7981                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7982                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7983          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7984          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7985   
7986          + sum (link_types,
7987              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7988              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7989              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7990          ) )
7991   
7992      + sum ((transfer_techs,vintage)
7993                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7994          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7995          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7996   
7997          + sum (link_types,
7998              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7999              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8000              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8001   
8002          + sum (timeModelSel,
8003              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8004              * timeLength(timeModelSel)
8005              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8006                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8007   
8008              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8009              * timeLength(timeModelSel)
8010              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8011                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8012              / timefrac
8013   
8014          + sum ((timeModelSel, link_types),
8015              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8016              * timeLength(timeModelSel)
8017              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8018              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8019                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8020   
8021              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8022              * timeLength(timeModelSel)
8023              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8024              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8025                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8026              / timefrac
8027          )
8028      =l=
8029  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
8030   
8031  * // ### Accounting Indicator Calculation Links
8032  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8033  * // {Eq_accounting_indicatorCalc_links_lower}
8034  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
8035      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8036          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
8037          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8038      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8040  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8041  * SPDX-License-Identifier: BSD-3-Clause
8042   
8043      sum ((transfer_techs,vintage)
8044                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8045                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8046          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8047          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8048   
8049      + sum ((years_a,transfer_techs,vintage)
8050                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8051                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8052                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8053                      and years_a.val <= yearsSel.val ),
8054          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8055          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8056          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8057   
8058      + sum ((transfer_techs,vintage,link_types)
8059                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8060                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8061          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8062          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8063          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8064   
8065      + sum ((years_a,transfer_techs,vintage,link_types)
8066                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8067                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8068                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8069                      and years_a.val <= yearsSel.val ),
8070          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8071          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8072          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8073          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8074   
8075      + sum ((transfer_techs,vintage)
8076                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8077                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8078          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8079          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8080   
8081          + sum (link_types,
8082              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8083              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8084              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8085          ) )
8086   
8087      + sum ((transfer_techs,vintage)
8088                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8089          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8090          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8091   
8092          + sum (link_types,
8093              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8094              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8095              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8096   
8097          + sum (timeModelSel,
8098              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8099              * timeLength(timeModelSel)
8100              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8101                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8102   
8103              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8104              * timeLength(timeModelSel)
8105              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8106                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8107              / timefrac
8108   
8109          + sum ((timeModelSel, link_types),
8110              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8111              * timeLength(timeModelSel)
8112              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8113              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8114                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8115   
8116              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8117              * timeLength(timeModelSel)
8118              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8119              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8120                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8121              / timefrac
8122          )
8123      =g=
8124  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
8125   
8126   
8127  * // ### Accounting Objective
8128  * // Calculates the indicators for the objective.
8129  * // {Eq_accounting_objective}
8130  Eq_accounting_objective
8131      ..
8132      accounting_objective
8133      =e=
8134      sum ((accNodesModel,accYears,indicator)
8135              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8136          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
8137          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8139  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8140  * SPDX-License-Identifier: BSD-3-Clause
8141   
8142  * == variable indicators ==
8143      sum((accNodesModel_a,accYears_a,indicator_a)
8144          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8145              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8146          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8147          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8148          )
8149   
8150  * == converters ==
8151      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8152              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8153                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8154          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8155          *
8156          ( sum ((converter_techs,vintage)
8157                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8158                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8159              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8160              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8161              )
8162   
8163          + sum ((years_a,converter_techs,vintage)
8164                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8165                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8166                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8167                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8168                          and years_a.val <= yearsSel.val ),
8169              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8170              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8171              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8172              )
8173   
8174          + sum ((yearsToCalc,converter_techs,vintage)
8175                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8176                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8177                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8178                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8179                          and yearsToCalc.val <= yearsSel.val ),
8180              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8181              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8182              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8183              )
8184   
8185          + sum ((converter_techs,vintage)
8186                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8187                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8188              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8189              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8190   
8191          + sum ((converter_techs,vintage)
8192                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8193              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8194              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8195   
8196          + sum ((timeModelSel,converter_techs,vintage,activity)
8197                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8198              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8199              * timeLength(timeModelSel)
8200              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8201          / timefrac
8202   
8203          + sum ((timeModelSel,converter_techs,vintage)
8204                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8205              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8206              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8207          / timefrac
8208   
8209          + sum ((timeModelSel,converter_techs,vintage)
8210                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8211              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8212              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8213                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8214   
8215              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8216              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8217                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8218          / timefrac
8219          )
8220      )
8221   
8222  * == storage ==
8223      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8224              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8225                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8226          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8227          *
8228          ( sum ((storage_techs,vintage)
8229                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8230                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8231              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8232              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8233              )
8234   
8235          + sum ((years_a,storage_techs,vintage)
8236                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8237                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8238                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8239                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8240                          and years_a.val <= yearsSel.val ),
8241              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8242              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8243              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8244              )
8245   
8246          + sum ((yearsToCalc,storage_techs,vintage)
8247                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8248                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8249                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8250                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8251                          and yearsToCalc.val <= yearsSel.val ),
8252              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8253              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8254              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8255              )
8256   
8257          + sum ((storage_techs,vintage)
8258                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8259                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8260              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8261              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8262   
8263          + sum ((storage_techs,vintage)
8264                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8265              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8266              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8267          )
8268      )
8269   
8270   
8271  * == transfer ==
8272      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8273              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8274                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8275          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8276          *
8277          ( sum ((linksModelToCalc,transfer_techs,vintage)
8278                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8279                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8280                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8281              0.5
8282              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8283              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8284   
8285          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8286                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8287                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8288                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8289                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8290                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8291                          and years_a.val <= yearsSel.val ),
8292              0.5
8293              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8294              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8295              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8296   
8297          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8298                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8299                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8300                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8301                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8302                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8303                          and yearsToCalc.val <= yearsSel.val ),
8304              0.5
8305              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8306              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8307              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8308   
8309          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8310                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8311                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8312                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8313              0.5
8314              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8315              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8316              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8317   
8318          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8319                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8320                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8321                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8322                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8323                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8324                          and years_a.val <= yearsSel.val ),
8325              0.5
8326              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8327              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8328              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8329              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8330   
8331          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8332                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8333                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8334                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8335                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8336                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8337                          and yearsToCalc.val <= yearsSel.val ),
8338              0.5
8339              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8340              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8341              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8342              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8343   
8344          + sum ((linksModelToCalc,transfer_techs,vintage)
8345                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8346                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8347                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8348              0.5
8349              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8350              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8351   
8352              + 0.5
8353              * sum (link_types,
8354                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8355                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8356                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8357              ) )
8358   
8359          + sum ((linksModelToCalc,transfer_techs,vintage)
8360                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8361                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8362              0.5
8363              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8364              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8365   
8366              + 0.5
8367              * sum (link_types,
8368                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8369                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8370                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8371   
8372              + 0.5
8373              * sum (timeModelSel,
8374                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8375                  * timeLength(timeModelSel)
8376                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8377                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8378   
8379                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8380                  * timeLength(timeModelSel)
8381                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8382                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8383                  / timefrac
8384   
8385              + 0.5
8386              * sum ((timeModelSel, link_types),
8387                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8388                  * timeLength(timeModelSel)
8389                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8390                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8391                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8392   
8393                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8394                  * timeLength(timeModelSel)
8395                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8396                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8397                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8398                  / timefrac
8399              )
8400          )
8401      )
8402   
8403   
8404  * == sources / sinks ==
8405      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8406              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8407                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8408          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8409          *
8410          sum ((timeModelSel,sourcesink_techs,commodity)
8411                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8412              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8413              * timeLength(timeModelSel)
8414              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8415          / timefrac
8416      )
8417      )
8418   
8419   
8420  * ==== model definition ====
8421   
8422  Model M_accounting
8423  /
8424  Eq_accounting_indicatorCalc_fixed
8425  Eq_accounting_indicatorCalc_upper
8426  Eq_accounting_indicatorCalc_lower
8427  Eq_accounting_indicatorCalc_links_fixed
8428  Eq_accounting_indicatorCalc_links_upper
8429  Eq_accounting_indicatorCalc_links_lower
8430  Eq_accounting_objective
8431  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
8433  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8434  * SPDX-License-Identifier: BSD-3-Clause
8435   
8436  * ==== optimization frames ====
8438   
8439  * mapping from optimization frame to years
8441  set optiframe / of1 * of1 /;
8442  set optiframeToCalc(optiframe);
8443   
8445  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
8447   
8449   
8450  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
8452  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8453  * SPDX-License-Identifier: BSD-3-Clause
8454   
8455  * ==== Overview of model dimensions ====
8456  parameters  acts(converter_techs) "active technologies"
8457              asts(storage_techs) "active storage technologies"
8458              atts(transfer_techs) "active transfer technologies"
8459   
8460  scalars nd "number of dispatch time steps per year"
8461          nn "number of network nodes"
8462          nl "number of network links"
8463          nt "number of converter, storage and transfer technologies"
8464          nc "number of commodities"
8465          ny "number of years of the capacity planning horizon";
8466   
8467  option acts < converter_availTech;
8468  option asts < storage_availTech;
8469  option atts < transfer_availTech;
8470   
8471  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
8472  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
8473  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
8474  nt = sum (storage_techs $asts(storage_techs), 1)
8475      + sum (converter_techs $acts(converter_techs), 1)
8476      + sum (transfer_techs $atts(transfer_techs), 1);
8477  nc = card(commodity);
8478  ny = sum (years $yearsToCalc(years), 1);
8479   
8480  file props / '' /;
8481  put props;
8482  put "### Model properties  ###" /;
8483  put "Number of active dispatch time steps per year: " nd:0:0  /;
8484  put "Number of active network nodes: " nn:0:0  /;
8485  put "Number of active network links: " nl:0:0  /;
8486  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
8487  put "Number of commodities: " nc:0:0  /;
8488  put "Number of years considered for capacity expansion: " ny:0:0  /;
8489  putclose;
8490   
8491  Model remix /
8492    M_converter
8493    M_storage
8494    M_transfer
8495    M_sourcesink
8496    M_balance
8497    M_accounting
8498  /;
8499   
8503   
8504  * ==== include methods  ====
8507   
8508  * check if the method is valid
8513   
8514   
8515  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
8517  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8518  * SPDX-License-Identifier: BSD-3-Clause
8519   
8522   
8525   
8526  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
8528  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8529  * SPDX-License-Identifier: BSD-3-Clause
8530   
8534   
8535  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
8537  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8538  * SPDX-License-Identifier: BSD-3-Clause
8539   
8543   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
8545  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8546  * SPDX-License-Identifier: BSD-3-Clause
8547   
8549   
8551   
8552  * ==== GAMS solver options ====
8558   
8559  * ==== REMix debug options ====
8563   
8564  * ==== REMix solver defaults ====
8572   
8580   
8590   
8598   
8607   
8608   
8609  * ==== setup optimization ====
8610  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8611     option limRow=0, limCol=0, solPrint=off;
8612  else
8613     option limRow=100000, limCol=100000, solPrint=on;
8614  );
8615   
8616   
8617  * ==== Solver specific default values ====
8618   
8638   
8639   
8641   
8642   
8644   
8645  option mip = cplex;
8646  option reslim = 1209600;
8647  option optcr = 1e-3;
8648  remix.threads = 8;
8649  remix.optFile = 1;
8650  remix.solveLink = 0;
8651  remix.holdFixed = 1;
8652   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8655  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8656  * SPDX-License-Identifier: BSD-3-Clause
8657   
8659   
8661  file opt / "cplex.opt" /;
8662  put opt;
8663  put "names no" /;
8664  put "rerun no" /;
8665   
8666  put "lpmethod 4" /;
8667  put "threads 8" /;
8668  put "barorder 3" /;
8669   
8671  put "scaind 0" /;
8672  put "predual -1" /;
8673   
8676  put "barepcomp 1e-6" /;
8678  put "solutiontype 2" /;
8679  put "epgap 1e-3" /;
8680   
8682  put "iis 0" /;
8683  put "quality 1" /;
8684   
8687  putclose;
8689   
8690   
8692   
8693   
8695   
8696   
8698   
8699   
8701   
8702   
8704   
8705   
8707   
8708   
8710   
8712   
8713   
8714  * ==== solve the problem ====
8715   
8716  loop ( optiframeToCalc,
8717      yearsSel(years) = no;
8718      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8719      yearsToFix(years) = no;
8720      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8721      accYearsSel(accYears) = no;
8722      accYearsSel("horizon") = yes;
8723      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8724      accYearsToFix(accYears) = no;
8725      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8726      timeModelSel(timeModel) = no;
8727      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8728      nodesModelSel(nodesModel) = no;
8729      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8730   
8731  * Fix decision for years previously optimized in case of myopic or foresight
8732      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8733          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8734          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8735              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8736      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8737          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8738   
8739      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8740          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8741          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8742              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8743      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8744          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8745   
8746      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8747          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8748              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8749                  sum(years$sameas(years, yearsToCalc),
8750                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8751                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8752              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8753                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
8754                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
8755      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8756          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
8757   
8758      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8759          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8760          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8761              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8762   
8763      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8764          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8765          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8766              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
8767   
8768      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8769          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8770      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8771          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8772      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8773          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8774      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8775          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8776      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8777          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8778   
8779   
8780      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8781          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8782          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8783              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8784      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8785          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8786   
8787      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8788          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8789          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8790              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8791      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8792          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8793   
8794      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8795          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
8796              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8797                  sum(years$sameas(years, yearsToCalc),
8798                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
8799                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
8800              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8801                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
8802                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
8803      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8804          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
8805   
8806      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8807          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8808          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8809              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
8810   
8811      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8812          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8813          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8814              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
8815   
8816      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8817          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8818      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8819          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8820      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8821          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8822      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8823          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8824      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8825          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8826   
8827   
8828      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8829          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8830          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8831              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8832      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8833          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8834   
8835      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8836          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8837          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
8838              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
8839      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8840          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8841   
8842      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8843          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
8844              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8845                  sum(years$sameas(years, yearsToCalc),
8846                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
8847                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
8848              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8849                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
8850                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
8851      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8852          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
8853   
8854      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8855          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8856          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8857              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8858   
8859      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8860          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8861          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8862              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8863   
8864      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8865          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8866      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8867          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8868      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8869          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8870      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8871          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8872      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8873          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8874   
8875      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8876          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8877   
8878  * Optimize and log values
8879      solve remix minimizing accounting_objective using mip;
8880      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8881      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8882   
8883  );
8884   
8888   
8889  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
8891  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8892  * SPDX-License-Identifier: BSD-3-Clause
8893   
8897   
8898  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
8900  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8901  * SPDX-License-Identifier: BSD-3-Clause
8902   
8906   
8907  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
8909  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8910  * SPDX-License-Identifier: BSD-3-Clause
8911   
8915   
8916  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
8918  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8919  * SPDX-License-Identifier: BSD-3-Clause
8920   
8923   
8924  * ==== indicator accounting ====
8925   
8926  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8927      =
8928  * == converters ==
8929      sum ((converter_techs(techs),vintage)
8930                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8931                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
8932          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8933          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
8934   
8935      + sum ((years_a,converter_techs(techs),vintage)
8936                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8937                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
8938                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
8939                      and years_a.val <= yearsToCalc.val ),
8940          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8941          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
8942          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
8943   
8944      + sum ((converter_techs(techs),vintage)
8945                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8946                      and converter_techParam(converter_techs,vintage,"freeDecom")),
8947          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8948          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
8949   
8950      + sum ((converter_techs(techs),vintage)
8951                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8952          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8953          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
8954   
8955      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8956                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8957          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8958          * timeLength(timeModelToCalc)
8959          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
8960          / timefrac
8961   
8962      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8963                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8964          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8965          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
8966          / timefrac
8967   
8968      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8969                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8970          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8971          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8972              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
8973   
8974          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8975          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8976              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
8977          / timefrac
8978   
8979  * == storage ==
8980      + sum ((storage_techs(techs),vintage)
8981                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8982                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
8983          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8984          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
8985   
8986      + sum ((years_a,storage_techs(techs),vintage)
8987                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8988                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
8989                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
8990                      and years_a.val <= yearsToCalc.val ),
8991          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8992          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
8993          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
8994   
8995      + sum ((storage_techs(techs),vintage)
8996                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8997                      and storage_techParam(storage_techs,vintage,"freeDecom")),
8998          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8999          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
9000   
9001      + sum ((storage_techs(techs),vintage)
9002                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
9003          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9004          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
9005   
9006  * == transfer ==
9007      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9008                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9009                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9010                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9011          0.5
9012          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9013          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9014   
9015      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
9016                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9017                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9018                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
9019                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9020                      and years_a.val <= yearsToCalc.val ),
9021          0.5
9022          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9023          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
9024          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
9025   
9026      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
9027                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9028                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9029                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9030          0.5
9031          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9032          * transfer_lengthParam(linksModel,link_types,"length")
9033          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9034   
9035      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
9036                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9037                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9038                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9039                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9040                      and years_a.val <= yearsToCalc.val ),
9041          0.5
9042          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9043          * transfer_lengthParam(linksModel,link_types,"length")
9044          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9045          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
9046   
9047      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9048                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
9049                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9050                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9051          0.5
9052          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9053          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9054   
9055          + 0.5
9056          * sum (link_types,
9057              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9058              * transfer_lengthParam(linksModel,link_types,"length")
9059              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9060          ) )
9061   
9062   
9063      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9064                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9065                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
9066          + 0.5
9067          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9068          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9069   
9070          + 0.5
9071          * sum (link_types,
9072              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9073              * transfer_lengthParam(linksModel,link_types,"length")
9074              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9075   
9076          + 0.5
9077          * sum (timeModelToCalc,
9078              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9079              * timeLength(timeModelToCalc)
9080              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9081                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9082   
9083              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9084              * timeLength(timeModelToCalc)
9085              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9086                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9087              / timefrac
9088   
9089          + 0.5
9090          * sum ((timeModelToCalc, link_types),
9091              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9092              * timeLength(timeModelToCalc)
9093              * transfer_lengthParam(linksModel,link_types,"length")
9094              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9095                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9096   
9097              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9098              * timeLength(timeModelToCalc)
9099              * transfer_lengthParam(linksModel,link_types,"length")
9100              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9101                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9102              / timefrac
9103          )
9104   
9105   
9106  * == sources / sinks ==
9107      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
9108              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
9109          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9110          * timeLength(timeModelToCalc)
9111          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
9112      / timefrac
9113      ;
9114   
9115   
9116  * ==== full set of main indicators ====
9117   
9118  indicator_accounting(accNodesModel,accYears,indicator)
9119      $sum((accNodesModel_a,accYears_a,indicator_a)
9120              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
9121      =
9122      + sum((accNodesModel_a,accYears_a,indicator_a)
9123              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9124                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9125          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9126          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
9127   
9128      + sum((accNodesModel_a,accYears_a,indicator_a)
9129              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
9130          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9131          * (sum((nodesModelToCalc,yearsToCalc,techs)
9132                  $(sameas(accNodesModel_a, nodesModelToCalc)
9133                      and sameas(accYears_a, yearsToCalc)),
9134                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
9135      ;
9136   
9137  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9138      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9139      =
9140          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9141          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
9142              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
9143   
9144          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9145          * (sum((nodesModelToCalc,yearsToCalc,techs)
9146                  $(sameas(accNodesModel_a, nodesModelToCalc)
9147                      and sameas(accYears_a, yearsToCalc)),
9148                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
9149      ;
9150   
9151  indicator_accounting_var(accNodesModel,accYears,indicator)
9152      $accounting_indicator.l(accNodesModel,accYears,indicator)
9153      = accounting_indicator.l(accNodesModel,accYears,indicator);
9154   
9155  indicator_accounting_ref(accNodesModel,accYears,indicator)
9156      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
9159  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9160  * SPDX-License-Identifier: BSD-3-Clause
9161   
9162  * == variable indicators ==
9163      sum((accNodesModel_a,accYears_a,indicator_a)
9164          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9165              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9166          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9167          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
9168          )
9169   
9170  * == converters ==
9171      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9172              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9173                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9174          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9175          *
9176          ( sum ((converter_techs,vintage)
9177                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9178                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
9179              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9180              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
9181              )
9182   
9183          + sum ((years_a,converter_techs,vintage)
9184                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
9185                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9186                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
9187                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
9188                          and years_a.val <= yearsSel.val ),
9189              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
9190              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
9191              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
9192              )
9193   
9194          + sum ((yearsToCalc,converter_techs,vintage)
9195                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9196                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9197                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
9198                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
9199                          and yearsToCalc.val <= yearsSel.val ),
9200              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
9201              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
9202              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
9203              )
9204   
9205          + sum ((converter_techs,vintage)
9206                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9207                          and converter_techParam(converter_techs,vintage,"freeDecom")),
9208              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9209              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
9210   
9211          + sum ((converter_techs,vintage)
9212                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9213              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9214              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
9215   
9216          + sum ((timeModelSel,converter_techs,vintage,activity)
9217                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
9218              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9219              * timeLength(timeModelSel)
9220              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
9221          / timefrac
9222   
9223          + sum ((timeModelSel,converter_techs,vintage)
9224                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9225              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9226              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
9227          / timefrac
9228   
9229          + sum ((timeModelSel,converter_techs,vintage)
9230                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9231              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9232              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9233                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
9234   
9235              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9236              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9237                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
9238          / timefrac
9239          )
9240      )
9241   
9242  * == storage ==
9243      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9244              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9245                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9246          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9247          *
9248          ( sum ((storage_techs,vintage)
9249                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
9250                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
9251              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
9252              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
9253              )
9254   
9255          + sum ((years_a,storage_techs,vintage)
9256                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
9257                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9258                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
9259                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
9260                          and years_a.val <= yearsSel.val ),
9261              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
9262              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
9263              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
9264              )
9265   
9266          + sum ((yearsToCalc,storage_techs,vintage)
9267                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
9268                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9269                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
9270                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
9271                          and yearsToCalc.val <= yearsSel.val ),
9272              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
9273              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
9274              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
9275              )
9276   
9277          + sum ((storage_techs,vintage)
9278                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9279                          and storage_techParam(storage_techs,vintage,"freeDecom")),
9280              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9281              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
9282   
9283          + sum ((storage_techs,vintage)
9284                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
9285              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9286              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
9287          )
9288      )
9289   
9290   
9291  * == transfer ==
9292      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9293              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9294                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9295          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9296          *
9297          ( sum ((linksModelToCalc,transfer_techs,vintage)
9298                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9299                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9300                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
9301              0.5
9302              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9303              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
9304   
9305          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
9306                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9307                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9308                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9309                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9310                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
9311                          and years_a.val <= yearsSel.val ),
9312              0.5
9313              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9314              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9315              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
9316   
9317          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9318                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9319                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9320                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9321                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
9322                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
9323                          and yearsToCalc.val <= yearsSel.val ),
9324              0.5
9325              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9326              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
9327              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
9328   
9329          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
9330                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9331                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9332                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9333              0.5
9334              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9335              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9336              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
9337   
9338          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
9339                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9340                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9341                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9342                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9343                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9344                          and years_a.val <= yearsSel.val ),
9345              0.5
9346              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9347              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9348              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9349              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9350   
9351          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
9352                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9353                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9354                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9355                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
9356                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9357                          and yearsToCalc.val <= yearsSel.val ),
9358              0.5
9359              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9360              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9361              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
9362              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
9363   
9364          + sum ((linksModelToCalc,transfer_techs,vintage)
9365                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9366                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9367                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9368              0.5
9369              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9370              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
9371   
9372              + 0.5
9373              * sum (link_types,
9374                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9375                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9376                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
9377              ) )
9378   
9379          + sum ((linksModelToCalc,transfer_techs,vintage)
9380                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9381                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
9382              0.5
9383              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9384              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
9385   
9386              + 0.5
9387              * sum (link_types,
9388                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9389                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9390                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
9391   
9392              + 0.5
9393              * sum (timeModelSel,
9394                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9395                  * timeLength(timeModelSel)
9396                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9397                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
9398   
9399                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9400                  * timeLength(timeModelSel)
9401                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9402                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
9403                  / timefrac
9404   
9405              + 0.5
9406              * sum ((timeModelSel, link_types),
9407                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9408                  * timeLength(timeModelSel)
9409                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9410                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9411                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
9412   
9413                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9414                  * timeLength(timeModelSel)
9415                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9416                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9417                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
9418                  / timefrac
9419              )
9420          )
9421      )
9422   
9423   
9424  * == sources / sinks ==
9425      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9426              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9427                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9428          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9429          *
9430          sum ((timeModelSel,sourcesink_techs,commodity)
9431                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
9432              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
9433              * timeLength(timeModelSel)
9434              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
9435          / timefrac
9436      )
9438  ;
9439   
9440   
9441  * ==== link-specific indicator accounting ====
9442   
9443  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
9444      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
9445          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
9446      =
9447      sum ((transfer_techs(techs),vintage)
9448                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9449                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9450          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9451          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9452   
9453      + sum ((years_a,transfer_techs(techs),vintage)
9454                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9455                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9456                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9457                      and years_a.val <= yearsToCalc.val ),
9458          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9459          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9460          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
9461   
9462      + sum ((transfer_techs(techs),vintage,link_types)
9463                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9464                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9465          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9466          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9467          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9468   
9469      + sum ((years_a,transfer_techs(techs),vintage,link_types)
9470                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9471                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9472                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9473                      and years_a.val <= yearsToCalc.val ),
9474          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9475          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9476          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9477          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9478   
9479      + sum ((transfer_techs(techs),vintage)
9480                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
9481          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9482          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9483   
9484          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9485          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9486   
9487          + sum (link_types,
9488              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9489              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9490              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9491   
9492              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9493              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9494              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9495   
9496          + sum (timeModelToCalc,
9497              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9498              * timeLength(timeModelToCalc)
9499              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9500                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9501   
9502              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9503              * timeLength(timeModelToCalc)
9504              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9505                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9506              / timefrac
9507   
9508          + sum ((timeModelToCalc, link_types),
9509              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9510              * timeLength(timeModelToCalc)
9511              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9512              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9513                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9514   
9515              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9516              * timeLength(timeModelToCalc)
9517              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9518              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9519                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9520              / timefrac
9521      );
9522   
9523   
9524  * == converter capacities ==
9525   
9526  converter_ratedInput(converter_techs,vintage,commodity)
9527      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9528      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9529              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9530  converter_ratedInput(converter_techs,vintage,commodity)
9531      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9532      = 0;
9533   
9534  converter_ratedOutput(converter_techs,vintage,commodity)
9535      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9536      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9537              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9538  converter_ratedOutput(converter_techs,vintage,commodity)
9539      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9540      = 0;
9541   
9542  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9543      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9544          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9545      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9546              and converter_ratedOutput(converter_techs,vintage,commodity)),
9547          converter_ratedOutput(converter_techs,vintage,commodity));
9548   
9549  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9550      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9551          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9552      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9553              and converter_ratedOutput(converter_techs,vintage,commodity)),
9554          converter_ratedOutput(converter_techs,vintage,commodity));
9555   
9556  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9557      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9558   
9559  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9560      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9561   
9562  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9563  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9564      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9565       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9566      = sum(years_a$
9567            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9568             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9569             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9570        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9571   
9572  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9573      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9574   
9575  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9576      $(converter_ratedOutput(converter_techs,vintage,commodity))
9577      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9578          * converter_ratedOutput(converter_techs,vintage,commodity);
9579   
9580  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9581      = sum(vintage,
9582          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9583  option clear = converter_caps_ext;
9584   
9585  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9586      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9587          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9588          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9589      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9590          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9591   
9592  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9593      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9594          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9595          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9596      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9597          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9598   
9599  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9600      = sum((nodesModelToCalc,years)
9601              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9602                  and map_accYearsPostCalc(accYears,years)),
9603          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9604  option clear = converter_caps_novintage_ext;
9605   
9606  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9607      = sum((nodesModelToCalc,years)
9608              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9609                  and map_accYearsPostCalc(accYears,years)),
9610          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9611  option clear = converter_units_ext;
9612   
9613  * ==== transfer capacities ====
9614   
9615  max_transfer_coefficient(transfer_techs(techs),commodity)
9616          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9617          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9618   
9619  min_transfer_coefficient(transfer_techs(techs),commodity)
9620          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9621          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9622   
9623  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9624      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9625          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9626          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9627      = yes;
9628   
9629  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9630      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9631   
9632  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9633      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9634   
9635  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9636  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9637      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9638       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9639      = sum(years_a$
9640            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9641             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9642             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9643        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9644   
9645  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9646      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9647   
9648  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9649      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9650          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9651                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9652      = sum(vintage,
9653          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9654          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9655   
9656  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9657      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9658          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9659          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9660                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9661      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9662          * min_transfer_coefficient(transfer_techs,commodity);
9663   
9664  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9665      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9666          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9667          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9668                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9669      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9670          * max_transfer_coefficient(transfer_techs,commodity);
9671   
9672   
9673  * ==== transfer flows ====
9674   
9675  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9676      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9677      = sum(vintage,
9678          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9679              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9680          * timeLength(timeModelToCalc)
9681          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9682   
9683  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9684      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9685      = sum(timeModelToCalc,
9686          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9687   
9688  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9689      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9690      = sum(timeModelToCalc
9691              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9692          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9693   
9694  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9695      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9696      = sum(timeModelToCalc
9697              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9698          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9699   
9700  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9701      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9702      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9703          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9704   
9705  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9706      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9707          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9708          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9709      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9710          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9711   
9712  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9713      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9714          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9715              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9716      = -1 * abs(sum(vintage,
9717          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9718              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9719          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9720              + sum(link_types,
9721                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9722                  * transfer_lengthParam(linksModel,link_types,"length")))))
9723          * timeLength(timeModelToCalc);
9724   
9725  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9726      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9727          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9728              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9729      = sum(timeModelToCalc,
9730          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9731   
9732   
9733  * ==== storage capacities ====
9734   
9735  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9736      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9737              and storage_usedCom(storage_techs,vintage,commodity)
9738              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9739      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9740              and storage_usedCom(storage_techs,vintage,commodity)
9741              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9742          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9743   
9744  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9745      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9746              and storage_usedCom(storage_techs,vintage,commodity)
9747              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9748      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9749              and storage_usedCom(storage_techs,vintage,commodity)
9750              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9751          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9752   
9753  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9754      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9755      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9756   
9757  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9758      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9759      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9760   
9761  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
9762  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9763      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
9764       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9765      = sum(years_a$
9766            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9767             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9768             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9769        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
9770   
9771  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9772      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9773   
9774  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9775      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9776      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9777          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9778   
9779  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
9780      = sum(vintage,
9781          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9782   
9783  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9784      $(storage_usedCom(storage_techs,vintage,commodity)
9785          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9786               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9787      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9788                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9789                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9790                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9791  option clear = storage_caps_ext;
9792   
9793  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
9794      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9795          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9796      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9797          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9798   
9799  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
9800      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9801          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9802      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9803          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9804   
9805  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9806      = sum((nodesModelToCalc,years)
9807              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9808                  and map_accYearsPostCalc(accYears,years)),
9809          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
9810  option clear = storage_caps_novintage_ext;
9811   
9812  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9813      = sum((nodesModelToCalc,years)
9814              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9815                  and map_accYearsPostCalc(accYears,years)),
9816          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9817  option clear = storage_units_ext;
9818   
9819   
9820  * ==== storage levels and flows ====
9821   
9822  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9823      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9824      =
9825      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9826      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9827          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9828      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9829          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9830      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9831          * storage_sizeParam(storage_techs,vintage,commodity,"size")
9832          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9833          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9834              and ord(timeModelToCalc)=1)
9836      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9837          * timeLength(timeModelToCalc)
9839      ;
9840   
9841  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9842      = sum((nodesModelToCalc,yearsToCalc,vintage)
9843              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9844          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9845  option clear = storage_flows_ext;
9846   
9847  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9848      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9849      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9850   
9851  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9852      = sum((nodesModelToCalc,yearsToCalc,vintage)
9853              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9854          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9855  option clear = storage_level_out_ext;
9856   
9857  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9858      = sum(timeModelToCalc,
9859          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9860   
9861  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9862      = sum(timeModelToCalc
9863              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9864          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9865   
9866  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9867      = sum(timeModelToCalc
9868              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9869          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9870   
9871  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
9872      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9873          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9874   
9875  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9876      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
9877          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9878      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
9879          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9880   
9881  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9882      = sum((nodesModelToCalc,yearsToCalc,vintage)
9883              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9884                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9885                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9886          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9887          * timeLength(timeModelToCalc));
9888   
9889  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9890      = sum(timeModelToCalc,
9891          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9892   
9893   
9894  * == commodity balance ==
9895   
9896  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9897      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9898          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9899      = sum((activity)
9900              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9901          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9902              * timeLength(timeModelToCalc)
9903              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9904          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9905              * timeLength(timeModelToCalc)
9906              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9907   
9908  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9909      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9910          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9911      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9912          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9913              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9914          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9915              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9916          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9917              * storage_sizeParam(storage_techs,vintage,commodity,"size")
9918              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9919              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9920                  and ord(timeModelToCalc)=1)
9921          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9922      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9923      * timeLength(timeModelToCalc);
9924   
9925  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9926      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9927          and sameas(yearsToCalc,vintage))
9928      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9929      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9930      * timeLength(timeModelToCalc);
9931   
9932  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9933      $sum((linksModel)
9934          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9935                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9936                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9937      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9938      + sum((linksModel)
9939              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9940                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9941                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9942   
9943  * incoming transfer flows
9944              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9945                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9946                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9947                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9948              * timeLength(timeModelToCalc)
9949              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9950   
9951  * outgoing transfer flows
9952              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9953                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9954                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9955                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9956              * timeLength(timeModelToCalc)
9957              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9958   
9959              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9960                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9961                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9962                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9963                      * timeLength(timeModelToCalc)
9964                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9965                          + sum(link_types,
9966                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9967                              * transfer_lengthParam(linksModel,link_types,"length")))))
9968      ;
9969   
9970  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9971      = sum((nodesModelToCalc,yearsToCalc,vintage)
9972              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9973                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9974                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9975          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9976  option clear = commodity_balance_ext;
9977   
9978   
9979  * ==== annual commodity sums ====
9980   
9981  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
9982      = sum(timeModelToCalc,
9983          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9984   
9985  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9986      = sum(timeModelToCalc
9987              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9988          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9989   
9990  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9991      = sum(timeModelToCalc
9992              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9993          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9994   
9995  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9996      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9997          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9998   
9999  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
10000      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
10001          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
10002      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10003          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
10004   
10005   
10006  * ==== marginal information ====
10007   
10008  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10009    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
10010    =
10011    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
10012   
10013  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10014      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
10015      =
10016      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
10017   
10018  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10019      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10020          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10021          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
10022      =
10023      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10024      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10025      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
10026   
10027  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
10028  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10029      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
10030      =
10031      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10032          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
10033  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10034      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
10035      =
10036      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10037          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
10038  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10039      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
10040      =
10041      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10042          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
10045   
10046  * ==== R2A postcalc information ====
10047   
10049   
10050   
10051  * ==== round profiles to reduce size of gdx ====
10052   
10054  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10055      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10056      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
10057   
10058  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10059      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10060      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10061   
10062  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10063      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10064      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10065   
10066  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10067      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10068      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10069   
10070  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10071      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10072      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10073   
10074  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10075      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10076      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
10077   
10078  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10079      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10080      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
10082   
10083  * ==== Dump diagnostics ====
10084   
10085  diagnostics("variables") = remix.numVar;
10086  diagnostics("equations") = remix.numEqu;
10087  diagnostics("iterations") = remix.iterUsd;
10088   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
10092  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10093  * SPDX-License-Identifier: BSD-3-Clause
10094   
10097   
10098  execute_unload "./results\PIC_energyststem_existing.gdx"
10100      metadata
10102      timeModel
10103      timeModelToCalc
10104      nodesModel
10105      linksModel
10106      indicator
10107      commodity
10108      techs
10109      accNodesModel
10110      accYears
10111   
10112      map_nodesModel
10113      map_linksModel
10114      map_nodesAccounting
10115   
10116      indicator_accounting
10117      indicator_accounting_var
10118      indicator_accounting_ref
10119      indicator_accounting_comp
10120      indicator_accounting_detailed
10121      indicator_accounting_links
10122   
10123      converter_caps
10124      converter_units
10126   
10127      transfer_caps
10128      transfer_links
10129      transfer_flows
10130      transfer_flows_annual
10131      transfer_losses
10132      transfer_losses_annual
10133   
10134      storage_caps
10135      storage_units
10136      storage_flows
10137      storage_level_out
10138      storage_flows_annual
10139      storage_losses_out
10140      storage_losses_annual
10142   
10143      commodity_balance
10144      commodity_balance_annual
10145   
10146      marginals_balance
10147      marginals_sourcesink_profile
10148      marginals_sourcesink_sum
10149      marginals_indicator_bounds
10150   
10152      diagnostics
10153      ;
10156   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/25/25 13:29:23 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/25/25 13:29:23\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    55      412 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    56      420 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    57      422 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    58      430 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    59      432 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    60      450 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    61      452 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    62      461 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    63      461 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    64      478 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    65      487 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    66      487 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    67      493 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    68      502 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    69      502 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    70      524 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    71      524 INCLUDE       29     303  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    72      528 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    73      531 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    74      531 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    75      539 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    76      539 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    77      559 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    78      563 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    79      563 INCLUDE       29     319  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    80      565 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    81      570 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    82      571 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    83      575 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    84      575 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    85      579 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    86      589 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    87      591 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    88      600 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    89      602 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    90      618 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    91      620 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    92      634 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    93      745 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    94      747 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    95      812 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    96      814 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    97      867 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    98      899 IF EXIST      97      32  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
    99      899 INCLUDE       97      32  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   100      938 IF EXIST      97      34  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   101      952 IF EXIST      97      48  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   102      954 IF EXIST      97      50  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   103      971 IF EXIST      97      67  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   104      973 IF EXIST      97      69  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   105      992 IF EXIST      97      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   106      992 INCLUDE       97      88  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   107      997 IF EXIST      97      90  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   108     1019 IF EXIST      97     112  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   109     1021 IF EXIST      97     114  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   110     1043 IF EXIST      97     136  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   111     1045 IF EXIST      97     138  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   112     1060 IF EXIST      97     153  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   113     1060 INCLUDE       97     153  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   114     1133 IF EXIST      97     155  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   115     1147 IF EXIST      97     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   116     1147 INCLUDE       97     169  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   117     1153 IF EXIST      97     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   118     1179 IF EXIST      97     197  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   119     1179 INCLUDE       97     197  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   120     1183 IF EXIST      97     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   121     1202 IF EXIST      97     218  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   122     1204 IF EXIST      97     220  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   123     1210 BATINCLUDE    97     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1278 BATINCLUDE    97     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1330 BATINCLUDE    97     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1382 BATINCLUDE    97     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1450 BATINCLUDE    97     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   128     1518 BATINCLUDE    97     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   129     1586 BATINCLUDE    97     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   130     2046 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   131     2121 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   132     2128 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   133     2135 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   134     2152 IF DEXIST    133      17  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\results\
   135     2370 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   136     2383 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   137     2486 IF EXIST     136     103  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   138     2486 INCLUDE      136     103  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   139     2690 IF EXIST     136     105  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   140     2698 BATINCLUDE   136     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   141     2709 BATINCLUDE   136     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   142     2742 IF EXIST     136     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   143     2742 INCLUDE      136     137  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   144     2763 IF EXIST     136     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   145     2785 IF EXIST     136     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   146     2785 INCLUDE      136     161  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   147     2927 IF EXIST     136     162  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   148     2929 IF EXIST     136     164  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   149     2950 IF EXIST     136     185  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   150     2950 INCLUDE      136     185  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   151     2990 IF EXIST     136     186  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   152     2991 IF EXIST     136     187  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   153     2993 IF EXIST     136     189  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   154     3006 IF EXIST     136     202  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   155     3007 IF EXIST     136     203  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   156     3009 IF EXIST     136     205  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   157     4010 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   158     4103 IF EXIST     157      93  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   159     4103 INCLUDE      157      93  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   160     4120 IF EXIST     157      95  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   161     4124 BATINCLUDE   157      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   162     4135 BATINCLUDE   157     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   163     4146 BATINCLUDE   157     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   164     4182 IF EXIST     157     127  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   165     4182 INCLUDE      157     127  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   166     4186 IF EXIST     157     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   167     4207 IF EXIST     157     150  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   168     4207 INCLUDE      157     150  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   169     4211 IF EXIST     157     152  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   170     4228 IF EXIST     157     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   171     4230 IF EXIST     157     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   172     4249 IF EXIST     157     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   173     4251 IF EXIST     157     192  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   174     4280 IF EXIST     157     221  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   175     4281 IF EXIST     157     222  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   176     4283 IF EXIST     157     224  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   177     5220 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   178     5285 IF EXIST     177      71  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   179     5287 IF EXIST     177      73  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   180     5303 IF EXIST     177      89  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   181     5305 IF EXIST     177      91  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   182     5325 IF EXIST     177     111  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   183     5327 IF EXIST     177     113  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   184     5342 IF EXIST     177     128  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   185     5344 IF EXIST     177     130  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   186     5358 IF EXIST     177     144  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   187     5360 IF EXIST     177     146  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   188     5375 IF EXIST     177     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   189     5377 IF EXIST     177     163  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   190     5391 IF EXIST     177     177  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   191     5393 IF EXIST     177     179  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   192     5407 IF EXIST     177     193  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   193     5409 IF EXIST     177     195  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   194     5423 IF EXIST     177     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   195     5425 IF EXIST     177     211  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   196     6080 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   197     6118 IF EXIST     196      38  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   198     6118 INCLUDE      196      38  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   199     6317 IF EXIST     196      40  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   200     6321 BATINCLUDE   196      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   201     6349 IF EXIST     196      62  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   202     6349 INCLUDE      196      62  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   203     6463 IF EXIST     196      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   204     6464 IF EXIST     196      64  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   205     6466 IF EXIST     196      66  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   206     6486 IF EXIST     196      86  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   207     6486 INCLUDE      196      86  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   208     6573 IF EXIST     196      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   209     6576 BATINCLUDE   196      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   210     6764 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   211     6912 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   212     6979 INCLUDE      211      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     7269 INCLUDE      211      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   214     7559 INCLUDE      211      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   215     7849 INCLUDE      211     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   216     7944 INCLUDE      211     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   217     8039 INCLUDE      211     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   218     8138 INCLUDE      211     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   219     8432 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   220     8451 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   221     8516 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   222     8527 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   223     8536 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   224     8544 INCLUDE      223       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   225     8654 INCLUDE      223       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   226     8890 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   227     8899 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   228     8908 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   229     8917 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   230     9158 INCLUDE      229     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   231    10091 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        7.047 SECONDS     64 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/25/25 13:29:23 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8879


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.800E-04, 1.000E+06] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 5.357E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/25/25 13:29:23 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8879


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    5,435,881
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    4,332,049
NON ZERO ELEMENTS    13,276,028


GENERATION TIME      =       22.938 SECONDS  3,068 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       38.391 SECONDS  3,068 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/25/25 13:29:23 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8879


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8879

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              554.6288

 RESOURCE USAGE, LIMIT         92.454   1209600.000
 ITERATION COUNT, LIMIT       138    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 1721.64 Mb (peak 1754.69 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 144.84 Mb (peak 377.56 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 90.23sec (det. 80498.51 ticks)


Optimal solution found
Objective:          554.628816

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.882e-07   1.411e-06   1.882e-07   1.411e-06
dual infeasibility          8.219e-09   5.362e-04   8.219e-09   5.362e-04
primal residual             2.705e-11   8.356e-10   2.705e-11   8.356e-10
dual residual               4.412e-07   6.586e-03   4.412e-07   6.586e-03
primal solution vector      6.371e+00   1.094e+05   6.371e+00   1.094e+05
dual solution vector        4.909e+02   1.438e+05   4.909e+02   1.438e+05
slacks                      1.000e+06   5.258e+07   1.000e+06   5.258e+07
reduced costs               1.176e+01   3.507e+04   1.176e+01   3.507e+04
comp. slackness viol.       1.832e-07   3.982e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/25/25 13:29:23 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt


EXECUTION TIME       =       38.985 SECONDS  2,678 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\run_remix.lst
