GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/20/25 11:28:14 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/20/25 11:28:14"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "6b3a8d450f632bf14f1bf88da0b8d636937ccdff"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 793   
 794  map_accNodes(accNodesModel,accNodesModel_aggregation)
 795      $sum((nodesData, nodesModelToCalc)
 796              $( sameas(nodesModelToCalc,accNodesModel)
 797                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 798                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 799   
 800  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 801  map_accNodes(accNodesModel,accNodesModel) = yes;
 802  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 803  map_accLinks(accLinksModel,accLinksModel) = yes;
 804  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 805  map_accYears(accYears,accYears) = yes;
 806   
 807  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 808      $sum((nodesData)
 809              $( map_accNodesLoad(nodesData,accNodesModel)
 810                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 811   
 812  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 813  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 814  map_accLinksToCalc("global",linksModelToCalc) = yes;
 815  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 816  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 817  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 818   
 819  * Duplicate sets for postcalc reporting without horizon and accYears
 820  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 821  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 822  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 823  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 824   
 825  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 826  option map_nodesAccounting < map_accNodes;
 827   
 828  * ==== Generic sets  ====
 829  * These set names are repeated across different profile parameters.
 830  * they are not strictly related to each other and are not input data but
 831  * are needed for validation.
 832  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 833   
 834  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 835  * "Scenario indexes help to differentiate scenarios." /
 836   
 837  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 838  * "Capacity types differentiate investment decisions." /
 839   
 840  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 841  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 843  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 844  * SPDX-License-Identifier: BSD-3-Clause
 845   
 846  * // # accounting_input
 847  * // The parameters in this file describe the accounting of indicators in the model.
 848   
 849  * // ## Variables
 850  * // {special_table_input_variables}
1113   
1114  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1116  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1117  * SPDX-License-Identifier: BSD-3-Clause
1118   
1120   
1122   
1123  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1124  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1125      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1126      = yes;
1127   
1129  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1130  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1131      $sum((nodesData,accnodesData)
1132              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1133                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1134      = smax((nodesData,accnodesData)
1135              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1136                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1137          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1138      - smin((nodesData,accnodesData)
1139              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1140                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1141          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1142   
1143  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1145   
1146  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1147  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1148      $sum((nodesData,accnodesData)
1149              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1150                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1151      = sum((nodesData,accnodesData)
1152              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1153                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1154          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1155      / sum((nodesData,accnodesData)
1156              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1157                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1158          1);
1159   
1160  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1161  loop(accnodes,
1162  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1163      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1164                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1165      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1166              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1167  );
1168   
1169  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1170      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1171      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1172   
1173  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1174  loop(accYears,
1175  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1176      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1177              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1178      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1179              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1180  );
1181   
1182  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1184  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1185  * SPDX-License-Identifier: BSD-3-Clause
1186   
1188   
1190   
1191  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1192  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1193      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1194      = yes;
1195   
1197   
1198  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1199  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1200      $sum((nodesData,accnodesData)
1201              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1202                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1203      = sum((nodesData,accnodesData)
1204              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1205                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1206          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1207      / sum((nodesData,accnodesData)
1208              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1209                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1210          1);
1211   
1212  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1213  loop(accnodes,
1214  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1215      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1216                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1217      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1218              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1219  );
1220   
1221  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1222      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1223      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1224   
1225  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1226  loop(accYears,
1227  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1228      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1229              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1230      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1231              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1232  );
1233   
1234  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1236  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1237  * SPDX-License-Identifier: BSD-3-Clause
1238   
1240   
1242   
1243  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1244  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1245      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1246      = yes;
1247   
1249   
1250  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1251  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1252      $sum((nodesData,accnodesData)
1253              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1254                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1255      = sum((nodesData,accnodesData)
1256              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1257                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1258          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1259      / sum((nodesData,accnodesData)
1260              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1261                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1262          1);
1263   
1264  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1265  loop(accnodes,
1266  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1267      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1268                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1269      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1270              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1271  );
1272   
1273  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1274      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1275      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1276   
1277  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1278  loop(accYears,
1279  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1280      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1281              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1282      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1283              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1284  );
1285   
1286  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1288  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1289  * SPDX-License-Identifier: BSD-3-Clause
1290   
1292   
1294   
1295  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1296  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1297      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1298      = yes;
1299   
1301  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1302  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1303      $sum((nodesData,accnodesData)
1304              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1305                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1306      = smax((nodesData,accnodesData)
1307              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1308                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1309          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1310      - smin((nodesData,accnodesData)
1311              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1312                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1313          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1314   
1315  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1317   
1318  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1319  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1320      $sum((nodesData,accnodesData)
1321              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1322                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1323      = sum((nodesData,accnodesData)
1324              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1325                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1326          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1327      / sum((nodesData,accnodesData)
1328              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1329                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1330          1);
1331   
1332  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1333  loop(accnodes,
1334  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1335      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1336                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1337      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1338              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1339  );
1340   
1341  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1342      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1343      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1344   
1345  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1346  loop(accYears,
1347  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1348      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1349              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1350      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1351              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1352  );
1353   
1354  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1356  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1357  * SPDX-License-Identifier: BSD-3-Clause
1358   
1360   
1362   
1363  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1364  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1365      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1366      = yes;
1367   
1369  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1370  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1371      $sum((linksData,acclinksData)
1372              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1373                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1374      = smax((linksData,acclinksData)
1375              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1376                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1377          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1378      - smin((linksData,acclinksData)
1379              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1380                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1381          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1382   
1383  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1385   
1386  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1387  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1388      $sum((linksData,acclinksData)
1389              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1390                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1391      = sum((linksData,acclinksData)
1392              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1393                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1394          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1395      / sum((linksData,acclinksData)
1396              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1397                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1398          1);
1399   
1400  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1401  loop(acclinks,
1402  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1403      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1404                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1405      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1406              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1407  );
1408   
1409  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1410      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1411      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1412   
1413  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1414  loop(accYears,
1415  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1416      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1417              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1418      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1419              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1420  );
1421   
1422  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1424  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1425  * SPDX-License-Identifier: BSD-3-Clause
1426   
1428   
1430   
1431  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1432  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1433      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1434      = yes;
1435   
1437  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1438  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1439      $sum((linksData,acclinksData)
1440              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1441                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1442      = smax((linksData,acclinksData)
1443              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1444                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1445          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1446      - smin((linksData,acclinksData)
1447              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1448                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1449          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1450   
1451  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1453   
1454  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1455  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1456      $sum((linksData,acclinksData)
1457              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1458                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1459      = sum((linksData,acclinksData)
1460              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1461                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1462          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1463      / sum((linksData,acclinksData)
1464              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1465                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1466          1);
1467   
1468  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1469  loop(acclinks,
1470  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1471      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1472                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1473      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1474              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1475  );
1476   
1477  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1478      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1479      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1480   
1481  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1482  loop(accYears,
1483  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1484      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1485              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1486      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1487              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1488  );
1489   
1490  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1492  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1493  * SPDX-License-Identifier: BSD-3-Clause
1494   
1496   
1498   
1499  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1500  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1501      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1502      = yes;
1503   
1505   
1506  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1507  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1508      $sum((nodesData,accnodesData)
1509              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1510                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1511      = sum((nodesData,accnodesData)
1512              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1513                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1514          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1515      / sum((nodesData,accnodesData)
1516              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1517                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1518          1);
1519   
1520  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1521  loop(accnodes,
1522  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1523      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1524                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1525      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1526              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1527  );
1528   
1529  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1530      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1531      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1532   
1533  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1534  loop(accYears,
1535  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1536      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1537              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1538      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1539              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1540  );
1541   
1542  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1543   
1544  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1545  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1546      = sum((linksData)$sameas(linksModelToCalc,linksData),
1547              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1548   
1549  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1550      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1551              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1552   
1553  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1554  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1555      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1556          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1557   
1558  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1559      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1560      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1561              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1562          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1563   
1564  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1565  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1566      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1567      = yes;
1568   
1569  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1570  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1571      $sum((nodesDataToCalc,accnodesData)
1572              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1573                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1574      = sum((nodesDataToCalc,accnodesData)
1575              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1576                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1577          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1578      / sum((nodesDataToCalc,accnodesData)
1579              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1580                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1581          1);
1582   
1583  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1584   
1585  loop(accNodes,
1586  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1587      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1588              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1589          and map_accNodes(accNodesModel,accNodes)
1590              )
1591      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1592              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1593   
1594  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1595      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1596              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1597          and map_accNodes(accNodesModel,accNodes)
1598          and not sameas(accYears, "horizon"))
1599      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1600              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1601  );
1602   
1603  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1604      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1605          and sameas(accNodesModel,nodesModelToCalc)), 1)
1606      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1607          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1608   
1609  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1610      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1611          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1612      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1613          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1614   
1615   
1616  * Make sure all required indicators end up in the model
1617  set variableIndicators(accNodesModel,accYears,indicator);
1618  variableIndicators(accNodesModel,accYears,indicator)
1619     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1620        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1621     = yes;
1622   
1623  set activeIndicators(accNodesModel,accYears,indicator);
1624  activeIndicators(accNodesModel,accYears,indicator)
1625     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1630        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1631        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1632        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1633          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1634     = yes;
1635   
1636  set activeIndicators_links(linksModel,years,indicator);
1637  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1638     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1639        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1640        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1641     = yes;
1642   
1643  * Clear other dependencies and only add self mapping for variable and qp indicators
1644  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1645      $(variableIndicators(accNodesModel,accYears,indicator))
1646      = 0;
1647  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1648      $(variableIndicators(accNodesModel,accYears,indicator))
1649      = 1;
1650   
1651  * Calculate length of years and discount rates per indicator
1652  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1653  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1654      $(map_accYears(accYears_a,accYears)
1655          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1656      = 1;
1657   
1658  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1659      $(map_accYears(accYears_a,accYears)
1660          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1661          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1662      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1663   
1664  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1665      $(map_accYears(accYears_a,accYears)
1666          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1667          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1668          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1669          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1670      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1671   
1672  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1673      $(map_accYears(accYears_a,accYears)
1674          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1675          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1676          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1677      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1678          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1679                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1680   
1681  * Add self mapping for variable and qp indicators
1682  yearFactor(accNodesModel,accYears,indicator,accYears)
1683      $(variableIndicators(accNodesModel,accYears,indicator))
1684      = 1;
1685   
1686   
1687  * ==== calculate compound indicators for the optimization ====
1688  scalar compIndicators_pre;
1689  scalar compIndicators_post;
1690   
1691  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1692  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1693      $(activeIndicators(accNodesModel,accYears,indicator))
1694      = 1;
1695   
1696  set compoundIndicators_act(accNodesModel,accYears,indicator);
1697  option compoundIndicators_act < compoundIndicators;
1698   
1699  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1700  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1701  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1702      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1703   
1704  compIndicators_pre = 0;
1705  compIndicators_post = 1;
1706   
1707  option sparseval = 1;
1708  while(compIndicators_pre < compIndicators_post,
1709      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1710          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1711   
1712      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1713          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1714              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1715              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1716              and map_accYears(accYears_aa,accYears_a))
1717          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1718              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1719   
1720      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1721   
1722      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1723          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1724              and sum((accNodesModel_a,accYears_a,indicator_a)
1725                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1726          = sum((accNodesModel_a,accYears_a,indicator_a)
1727                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1728              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1729   
1730      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1731          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1732              and sum((accNodesModel_a,accYears_a,indicator_a)
1733                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1734          = sum((accNodesModel_a,accYears_a,indicator_a)
1735                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1736                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1737              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1738          / sum((accNodesModel_a,accYears_a,indicator_a)
1739                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1740                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1741   
1742      option compoundIndicators_act < compoundIndicators;
1743      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1744          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1745  );
1746  option sparseval = 0;
1747   
1748  * map to sub-years and sub-nodes
1749  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1750      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1751          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1752          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1753          and map_accYears(accYears_aa,accYears_a)
1754          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1755      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1756          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1757   
1758  * Remove all accounting regions and accounting years
1759  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1760      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1761          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1762          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1763              or sameas("horizon",accYears_aa)))
1764      = 0;
1765   
1766  * Remove all slack indicators except the ones declared in indicatorBounds
1767  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1768      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1769          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1770                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1771          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1772      = 0;
1773   
1774   
1775  * Map from extended parameter to final parameter
1776  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1777  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1778      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1779          and sum((accNodesModel_a,accYears_a,indicator_a)
1780                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1781      = sum((accNodesModel_a,accYears_a,indicator_a)
1782              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1783          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1784   
1785  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1786      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1787          and sum((accNodesModel_a,accYears_a,indicator_a)
1788                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1789      = sum((accNodesModel_a,accYears_a,indicator_a)
1790              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1791                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1792          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1793      / sum((accNodesModel_a,accYears_a,indicator_a)
1794              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1795                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1796   
1797  * Remove all accounting regions and accounting years
1798  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1799      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1800          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1801          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1802              or sameas("horizon",accYears_aa)))
1803      = 0;
1804   
1805  * Remove all slack indicators except the ones declared in indicatorBounds
1806  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1807      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1808          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1809          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1810      = 0;
1811   
1812   
1813  * ==== compound indicators for the post calculation ====
1814  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1815  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1816      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1817          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1818   
1819  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1820      $(activeIndicators(accNodesModel,accYears,indicator)
1821          or variableIndicators(accNodesModel,accYears,indicator))
1822      = 1;
1823   
1824  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1825  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1826   
1827  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1828  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1829  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1830   
1831  compIndicators_pre = 0;
1832  compIndicators_post = 1;
1833   
1834  option sparseval = 1;
1835  while(compIndicators_pre < compIndicators_post,
1836      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1837          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1838   
1839      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1840          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1841              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1842              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1843              and map_accYears(accYears_aa,accYears_a))
1844          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1845              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1846   
1847      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1848   
1849      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1850          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1851              and sum((accNodesModel_a,accYears_a,indicator_a)
1852                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1853          = sum((accNodesModel_a,accYears_a,indicator_a)
1854                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1855              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1856   
1857      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1858          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1859              and sum((accNodesModel_a,accYears_a,indicator_a)
1860                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1861          = sum((accNodesModel_a,accYears_a,indicator_a)
1862                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1863                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1864              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1865          / sum((accNodesModel_a,accYears_a,indicator_a)
1866                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1867                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1868   
1869      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1870      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1871          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1872  );
1873  option sparseval = 0;
1874   
1875  * map to sub-years and sub-nodes
1876  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1877      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1878          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1879          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1880          and map_accYears(accYears_aa,accYears_a)
1881          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1882      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1883          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1884   
1885  * Remove all accounting regions and accounting years
1886  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1887      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1888          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1889          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1890              or sameas("horizon",accYears_aa)))
1891      = 0;
1892   
1893  * Remove all slack indicators except the ones declared in indicatorBounds
1894  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1895      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1896          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1897                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1898          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1899      = 0;
1900   
1901   
1902  * Map from extended parameter to final parameter
1903  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1904  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1905      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1906          and sum((accNodesModel_a,accYears_a,indicator_a)
1907                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1908      = sum((accNodesModel_a,accYears_a,indicator_a)
1909              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1910          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1911   
1912  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1913      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1914          and sum((accNodesModel_a,accYears_a,indicator_a)
1915                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1916      = sum((accNodesModel_a,accYears_a,indicator_a)
1917              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1918                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1919          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1920      / sum((accNodesModel_a,accYears_a,indicator_a)
1921              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1922                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1923   
1924  * Remove all accounting regions and accounting years
1925  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1926      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1927          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1928   
1929          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1930              or sameas("horizon",accYears_aa)))
1931      = 0;
1932   
1933  * Remove all slack indicators except the ones declared in indicatorBounds
1934  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1935      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1936          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1937          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1938      = 0;
1939   
1940   
1941  * Check if the objective value and optimization sense is set correctly
1942  scalar opti_values, opti_sense;
1943  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1944  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1945  abort$(opti_values < 1)
1946      "Accounting: No indicator specified as objective value"
1947  abort$(opti_values > 1)
1948      "Accounting: Too many indicators specified as objective value"
1949  abort$(opti_sense <> -1 and opti_sense <> 1)
1950      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
1952  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1953  * SPDX-License-Identifier: BSD-3-Clause
1954   
1955  * Calculation of annuities
1956  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1957          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
1958          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1959      "Accounting: Some converter technologies use annuities but have no amortization time"
1960   
1961  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
1962  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1963      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
1964      =
1965      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
1966          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1967          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
1968      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1969          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
1970   
1971   
1972  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1973          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
1974          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1975      "Accounting: Some storage technologies use annuities but have no amortization time"
1976   
1977  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
1978  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1979      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
1980      =
1981      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
1982          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1983          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
1984      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1985          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
1986   
1987   
1988  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1989          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
1990          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1991      "Accounting: Some transfer technologies use annuities but have no amortization time"
1992   
1993  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
1994  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1995      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
1996      =
1997      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
1998          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1999          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
2000      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2001          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
2002   
2003   
2004   
2005  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2006          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2007          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2008      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2009   
2010  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2011  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2012   
2013  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2014      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2015      =
2016      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2017          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2018          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2019      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2020          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2021   
2025   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2027  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2028  * SPDX-License-Identifier: BSD-3-Clause
2029   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2034  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2035  * SPDX-License-Identifier: BSD-3-Clause
2036   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2041  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2042  * SPDX-License-Identifier: BSD-3-Clause
2043  * // # Output data
2044  * // This is the reference data model of the REMix output.
2045  * //
2046  * // ## Standard output
2049   
2056   
2058   
2059  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2060  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2061  set profileType / "upper", "fixed", "lower" /;
2062  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2063   
2064  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2065  * // ### indicator_accounting
2066  * // Title: Accounting indicators Post-calculation
2067  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2068  * //
2069  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2070  * // ### indicator_accounting_ref
2071  * // Title: Accounting indicators reference
2072  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2073  * //
2074  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2075  * // ### indicator_accounting_var
2076  * // Title: Accounting indicators variable states
2077  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2078  * //
2079  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2080  * // ### indicator_accounting_comp
2081  * // Title: Accounting indicators composition
2082  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2083  * //
2084  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2085  * // ### indicator_accounting_detailed
2086  * // Title: Accounting indicators detail
2087  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2088  * //
2089  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2090  * // ### indicator_accounting_links
2091  * // Title: Accounting indicators per transfer link
2092  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2093  * //
2094  parameter converter_ratedInput(techs,vintage,commodity);
2095  parameter converter_ratedOutput(techs,vintage,commodity);
2096  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2097  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2098   
2099  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2100  * // ### converter_caps
2101  * // Title: Coverter capacities post-calculation
2102  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2103  * //
2104  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2105  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2106   
2107  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2108  * // ### converter_units
2109  * // Title: Coverter units post-calculation
2110  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2111  * //
2112  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2113   
2114  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2115  parameter max_transfer_coefficient(techs,commodity);
2116  parameter min_transfer_coefficient(techs,commodity);
2117  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2118  * // ### transfer_links
2119  * // Title: Transfer post-calculation
2120  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2121  * //
2122  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2123  * // ### transfer_caps
2124  * // Title: Transfer capacities post-calculation
2125  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2126  * //
2127  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2128  * // ### transfer_flows
2129  * // Title: Transfer hourly flows
2130  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2131  * //
2132  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2133  * // ### transfer_flows_annual
2134  * // Title: Transfer annual flows
2135  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2136  * //
2137  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2138  * // ### transfer_losses
2139  * // Title: Transfer hourly losses
2140  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2141  * //
2142  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2143  * // ### transfer_losses_annual
2144  * // Title: Transfer annual losses
2145  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2146  * //
2147  parameter storage_size_max(nodesModel,years,techs,commodity);
2148  parameter storage_size_min(nodesModel,years,techs,commodity);
2149  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2150  * // ### storage_units
2151  * // Title: Storage units post-calculation
2152  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2153  * //
2154  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2155  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2156  * // ### storage_caps
2157  * // Title: Storage capacities post-calculation
2158  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2159  * //
2160  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2161  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2162  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2163  * // ### storage_level_out
2164  * // Title: Storage level
2165  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2166  * //
2167  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2168  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2169  * // ### storage_flows
2170  * // Title: Storage hourly flows
2171  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2172  * //
2173  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2174  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2175  * // ### storage_flows_annual
2176  * // Title: Storage annual flows
2177  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2178  * //
2179  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2180  * // ### storage_losses_out
2181  * // Title: Storage hourly losses
2182  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2183  * //
2184  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2185  * // ### storage_losses_annual
2186  * // Title: Storage annual losses
2187  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2188  * //
2189  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2190  * // ### commodity_balance
2191  * // Title: Hourly commodity balance
2192  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2193  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2194  * //
2195  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2196  * // ### commodity_balance_annual
2197  * // Title: Annual commodity balance
2198  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2199  * //
2200  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2201  * // ### marginals_sourcesink_profile
2202  * // Title: Source-sink marginals
2203  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2204  * //
2205  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2206  * // ### marginals_balance
2207  * // Title: Nodel balance marginals
2208  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2209  * //
2210  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2211  * // ### marginals_sourcesink_sum
2212  * // Title: Source-sink annual marginals
2213  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2214  * //
2215  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2216  * // ### marginals_indicator_bounds
2217  * // Title: Indicator bounds marginals
2218  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2219  * //
2220  * // ## REMix-AMIRIS interface output
2221  * //
2222  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2223  * // ### r2a_annuity_cost_converter
2224  * // Title: Converter annuity cost
2225  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2226  * //
2227  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2228  * // ### r2a_spec_cost_converter
2229  * // Title: Converter specific cost
2230  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2231  * //
2232  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2233  * // ### r2a_spec_cost_fuel
2234  * // Title: Commodity specific cost
2235  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2236  * //
2237  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2238  * // ### r2a_spec_cost_indicator
2239  * // Title: Indicator specific cost
2240  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2241  * //
2242  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2243  * // ### r2a_converter_efficiencies
2244  * // Title: Indicator specific cost
2245  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2246  * //
2247  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2248  * // ### r2a_converter_avail_factor
2249  * // Title: Converter availability factor
2250  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2251  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2252  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2253  * //
2254  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2255  * // ### r2a_storage_e2p
2256  * // Title: E2P Storage
2257  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2258  * //
2259  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2260  * // ### r2a_storage_selfdischarge
2261  * // Title: Storage self discharge rates
2262  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2263   
2264  set attribute(*)
2265       /
2266      "variables"
2267      "equations"
2268      "iterations"
2269      /;
2270   
2271  parameter diagnostics(attribute);
2272   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2276  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2277  * SPDX-License-Identifier: BSD-3-Clause
2278   
2279  * ==== global settings ====
2281   
2283   
2285   
2287   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2289  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2290  * SPDX-License-Identifier: BSD-3-Clause
2291   
2292  * // # core_converter
2293  * // The equations in this file describe the converters in the model.
2294   
2295  * // ## Advanced features
2296  * //
2297  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2298  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2299  * //
2300  * // In the following table you can see which modifications you have to make to your data to use the different features.
2301  * //
2302  * // | Feature | Modification |
2303  * // | ------ | ------ |
2304  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2305  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2306  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2307  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2308  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2309  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2310   
2311  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2312  * //
2313  * // ### set_converter_techs.dat
2314  * // In this file all converter technologies are listed that can be used within your model.
2315  * //
2316  * // ### set_activities.dat
2317  * // All modes with which the converter technologies can be operated need to be added here.
2318  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2319  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2320  * //
2321  * // ### set_commodities.dat
2322  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2323  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2324   
2325  * // ## Variables
2326  * // {special_table_converter_variables}
2796   
2797  * // ## Load units from gdx file
2799   
2800   
2801  * ==== calculation of mappings ====
2802   
2803  * Technologies with a lifeTime > 0 are available
2804  set converter_availTech(nodesModel,years,converter_techs,vintage);
2805  converter_availTech(nodesModel,years,converter_techs,vintage)
2806      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
2807          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
2808   
2809  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
2810  converter_availTech(nodesModel,years,converter_techs,vintage)
2811      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
2812   
2813  * Technologies already built become unavailable if they have an unitsBuild of 0
2814  converter_availTech(nodesModel,years,converter_techs,vintage)
2815      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
2816   
2817  * Used technologies are available technologies over their technical lifeTime
2818  set converter_usedTech(nodesModel,years,converter_techs,vintage);
2819  converter_usedTech(nodesModel,years,converter_techs,vintage)
2820      $(vintage.val <= years.val
2821          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
2822                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
2823          ) = yes;
2824   
2825  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
2826  set converter_decomTech(nodesModel,years,converter_techs,vintage);
2827  converter_decomTech(nodesModel,years,converter_techs,vintage)
2828    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2829                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2830      and sum(yearsToCalc
2831        $(sameas(years, yearsToCalc)
2832          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2833          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2834    = yes;
2835   
2836  converter_decomTech(nodesModel,years,converter_techs,vintage)
2837    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2838                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2839      and sum(yearsToCalc
2840        $(sameas(years, yearsToCalc)
2841          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2842          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2843    = yes;
2844   
2845  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
2846  converter_decomTech(nodesModel,years,converter_techs,vintage)
2847    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
2848      and sum(yearsToCalc
2849        $(sameas(years, yearsToCalc)
2850          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
2851    = yes;
2852   
2853  * Extend the decom frame to the model year after the last model year of usedTech
2854  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2855    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
2856      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
2857    = yes;
2858   
2859  * Mapping for used activities and commodities
2860  set converter_usedActCom(converter_techs,vintage,activity,commodity);
2861  option converter_usedActCom < converter_coefficient;
2862   
2863  set converter_usedAct(converter_techs,vintage,activity);
2864  option converter_usedAct < converter_usedActCom;
2865   
2866  set converter_usedCom(converter_techs,vintage,commodity);
2867  option converter_usedCom < converter_usedActCom;
2868   
2869  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
2870  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
2871      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2872          and converter_usedAct(converter_techs,vintage,activity))
2873      = yes;
2874   
2875  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
2876  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2877    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2878      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
2879    = 1;
2880   
2881  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
2882  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2883    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2884      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
2885    = 1;
2886   
2887   
2888  * ==== aggregation of profiles ====
2889   
2890  * derive upper and lower profiles then aggregate
2891  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
2892  option converter_activity_hasProfileIn < converter_activityProfileIn;
2893   
2894  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
2895  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2896      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2897              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
2898   
2899  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
2900  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
2901   
2902  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
2903  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2904      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2905              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
2906   
2907  * aagregate time dimension
2908  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
2909  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2910    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2911    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
2912            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2913            / timeLength(timeModelToCalc));
2914  option clear = converter_activityProfileIn;
2915   
2916  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2917  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
2918  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
2919      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
2920  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
2921      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
2922   
2923   
2924  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2925  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2926      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
2927          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
2928   
2929  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2930  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2931      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
2932   
2933  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2934      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2935          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2936      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2937                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
2938                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2939                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
2940      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2941              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2942   
2943  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2944      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2945          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2946      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2947                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
2948                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
2949      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2950                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2951              1);
2952  option clear = converter_activityProfileIn_aggTime;
2953   
2954  * for fixed profiles overwrite upper and lower profile
2955  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
2956      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2957      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2958   
2959  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
2960      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2961      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2962   
2966   
2967  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2968  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
2969  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2970      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
2971   
2972  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2973      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2974          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
2975      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2976            sum(timeData$timeMapping(timeData,timeModelToCalc),
2977                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2978                / timeLength(timeModelToCalc)
2979              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
2980      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2981              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2982   
2983  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2984      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2985          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2986      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2987                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2988            sum(timeData$timeMapping(timeData,timeModelToCalc),
2989                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2990                / timeLength(timeModelToCalc))
2991      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2992                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
2993   
2996   
2997  * reduce coefficient delay based on time resolution
2998  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
2999    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
3000    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
3002   
3003  * ==== prepare partial load behavior parameters ====
3004   
3005  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3006  alias(commodity, com);
3007  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3008      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3009        and converter_usedAct(converter_techs,vintage,activity))
3010      = 1;
3011   
3012  * indicate that at least one activity of a technology makes use of partial load behavior
3013  set converter_hasMaxLoad(converter_techs,vintage);
3014  converter_hasMaxLoad(converter_techs,vintage)
3015    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3016              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3017   
3018  set converter_hasMinLoad(converter_techs,vintage);
3019  converter_hasMinLoad(converter_techs,vintage)
3020    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3021              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3022   
3023  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3024  converter_hasConstantFluxInActivity(converter_techs,vintage)
3025    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3026                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3027   
3028  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3029  set pc_converter_activityRequirements
3030      /
3031      minLoad             "Lower profile for converter activity"
3032      maxLoad             "Upper profile for converter activity"
3033      /;
3034  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3035  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3036    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3037  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3038    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3039   
3040  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3041   
3042  set converter_hasMinUptime(converter_techs,vintage);
3043  converter_hasMinUptime(converter_techs,vintage)
3044    $(converter_techParam(converter_techs,vintage,"minUptime")
3045      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3046    = yes;
3047   
3048  set converter_hasMinDowntime(converter_techs,vintage);
3049  converter_hasMinDowntime(converter_techs,vintage)
3050    $(converter_techParam(converter_techs,vintage,"minDowntime")
3051      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3052    = yes;
3053   
3054  * require integer unit counts if online state is to be tracked
3055  converter_techParam(converter_techs,vintage,"mipUnits")
3056      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3057        or converter_hasMinLoad(converter_techs, vintage)
3058        or converter_hasMaxLoad(converter_techs, vintage)
3059        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3060      = 1;
3061   
3062  * ==== floor mip converter units to integer values ====
3063  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3064      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3065      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3066  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3067      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3068      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3069   
3070  * ==== scalars and sets for minUptime and minDowntime ====
3071   
3072  scalar converter_maxUptimeReq;
3073  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3074  set uptimeSearchRange(timeModelToCalc);
3075  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3076   
3077  scalar converter_maxDowntimeReq;
3078  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3079  set downtimeSearchRange(timeModelToCalc);
3080  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3081   
3082  * ==== definition of variables ====
3083   
3084  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3085      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3086        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3087      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3088  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3089      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3090        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3091      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3092  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3093      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3094        and (converter_hasMinLoad(converter_techs, vintage)
3095              or converter_hasMaxLoad(converter_techs, vintage)))
3096      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3097   
3098   
3099  * Initialise variables for unitsBuild
3100  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3101      $converter_availTech(nodesModel,years,converter_techs,vintage)
3102      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3103  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3104      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3105      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3106  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3107      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3108      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3109   
3110  * Initialise variables for unitsDecom
3111  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3112    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3113      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3114    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3115                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3116                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3117                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3118          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3119   
3120  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3121    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3122    = sum(years$
3123          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3124            and converter_availTech(nodesModel,years,converter_techs,vintage)
3125            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3126            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3127        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3128      + sum(yearsToCalc_a$
3129          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3130            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3131            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3132            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3133        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3134        ;
3135   
3136  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3137      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3138          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3139      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3140   
3141   
3143   
3144   
3145  * Calculate planned unit expansion
3146  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3147  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3148  loop(years,
3149    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3150      =
3151      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3152          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3153      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3154          $converter_availTech(nodesModel,years,converter_techs,vintage)
3155      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3156          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3157  );
3158   
3159  * Set initial state for planned units
3160  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3161    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3162   
3163   
3164  * // ## Load units from gdx file
3166   
3167  * Calculate if planned unit expansion is bounded by upper and lower limits
3168  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3169  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3170    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3171          converter_techParam(converter_techs,vintage,"freeDecom"))
3172    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3173          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3174      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3175    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3176          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3177      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3178    = yes;
3179   
3180  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3181  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3182    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3183      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3184    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3185  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3186    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3187      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3188    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3189  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3190    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3191      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3192    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3193   
3194   
3195  * Add parameter for fixing capacities during myopic runs
3196  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3197  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3198  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3199   
3200  * Fix activities of upper limit if upper limit is zero
3201  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3202    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3203      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3204      = 0;
3205   
3206   
3207  * ==== declaration of equations ====
3208   
3209  equations
3210    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3211      ) "Ensures the units balance over the planning period."
3212    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3213      ) "Ensures the units balance over the planning period."
3214    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3215      ) "Restricts the free decommissioning of units over the planning period."
3216    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3217      ) "Upper bound for the total number of units."
3218    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3219      ) "Lower bound for the total number of units."
3220    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3221      ) "Fixed bound for the total number of units."
3222    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3223      ) "Fixes the total number of units to the corresponding integer variable."
3224    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3225      ) "Fixes the number of online units to the corresponding integer variable."
3226   
3227    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3228      ) "Lower limit on the activity."
3229    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3230      ) "Upper limit on the activity."
3231   
3232    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3233      ) "Fixed limit on the activity."
3234    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3235      ) "Positive ramping of unit activity."
3236    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3237      ) "Negative ramping of unit activity."
3238    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3239      ) "Restrict ramping up of unit activity."
3240   
3241    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3242      ) "Set online units to total number of operational units."
3243    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3244      ) "Allow shutting down units."
3245    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3246      ) "Variable counting the number of unit startups."
3247    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3248      ) "Variable tracking the number of unit shutdowns."
3249    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3250      ) "Limit the number of startup cycles a unit can perform."
3251    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3252      ) "Require recently started units to remain online for their respective minimum uptime."
3253    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3254      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3255    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3256      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3257    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3258      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3259    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3260      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3261    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3262      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3263    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3264      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3265    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3266      ) "Limit usage of an activity to corresponding units."
3267    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3268      ) "Limit usage of an activity to corresponding units."
3269    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3270      ) "Limit the number of units in one particular mode to the number of operational units."
3271    ;
3272   
3273  * ==== equation definition ====
3274  * // ## Equations
3275  * // ### Converter Units Balance
3276  * // Ensures that the total units are consistent with the built and decommissioned units.
3277  * // {Eq_converter_unitsBalance}
3278   
3279  * Equation using build only
3280  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3281      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3282            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3283          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3284          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3285      ..
3286      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3287      =e=
3288      sum ((years_a)
3289              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3290                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3291                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3292                  and years_a.val <= yearsSel.val ),
3293            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3294   
3295      + sum ((yearsToCalc)
3296              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3297                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3298                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3299                  and yearsToCalc.val <= yearsSel.val ),
3300            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3301   
3302  * Equation using build and decom
3303  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3304      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3305            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3306          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3307          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3308      ..
3309      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3310      =e=
3311      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3312        sum(years$sameas(years, yearsToCalc),
3313          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3314            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3315      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3316        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3317          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3318      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3319          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3320      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3321          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3322      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3323          ;
3324   
3325  * // ### Converter Units Free Decommission
3326  * // Restricts the free decommissioning of units over the planning period.
3327  * // {Eq_converter_unitsFreeDecom}
3328  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3329      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3330          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3331      ..
3332      sum(years$
3333            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3334              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3335          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3336      + sum(yearsToCalc$
3337            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3338              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3339              and yearsToCalc.val <= yearsSel.val),
3340          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3341      =g=
3342      sum(years$
3343            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3344              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3345              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3346          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3347      + sum(yearsToCalc$
3348            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3349              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3350              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3351          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3352   
3353  * // ### Converter Units Upper Limit
3354  * // Upper bound for the total number of units.
3355  * // {Eq_converter_unitsUpperLimit}
3356  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3357      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3358          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3359          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3360              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3361      ..
3362      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3363          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3364      =l=
3365      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3366   
3367  * // ### Converter Units Lower Limit
3368  * // Lower bound for the total number of units.
3369  * // {Eq_converter_unitsLowerLimit}
3370  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3371      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3372          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3373              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3374      ..
3375      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3376          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3377      =g=
3378      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3379   
3380  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3381      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3382          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3383      ..
3384      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3385          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3386      =e=
3387      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3388   
3389  * // ### Converter Units Total MIP
3390  * // Fixes the total number of units to the corresponding integer variable.
3391  * // {Eq_converter_unitsTotalMIP}
3392  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3393      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3394          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3395      ..
3396      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3397      =e=
3398      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3399   
3400  * // ### Converter Units Online MIP
3401  * // Fixes the number of online units to the corresponding integer variable.
3402  * // {Eq_converter_unitsOnlineMIP}
3403  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3404      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3405          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3406      ..
3407      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3408      =e=
3409      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3410   
3411  * // ### Converter Activity Lower Limit
3412  * // Lower limit on the activity.
3413  * // {Eq_converter_activityLowerLimit}
3414  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3415      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3416          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3417          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3418              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3419          and not converter_hasMinLoad(converter_techs, vintage))
3420      ..
3421      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3422          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3423      )
3424      =g=
3425      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3428      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3431   
3432  * // ### Converter Activity Upper Limit
3433  * // Upper limit on the activity.
3434  * // {Eq_converter_activityUpperLimit}
3435  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3436      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3437          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3438          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3439               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3440      ..
3441      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3442          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3443      )
3444      =l=
3445      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3448      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3451   
3452  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3453      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3454          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3455               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3456      ..
3457      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3458          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3459      )
3460      =e=
3461      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3464      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3467   
3468  * // ### Converter Positive Ramping
3469  * // Positive ramping of unit activity.
3470  * // {Eq_converter_rampPos}
3471  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3472    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3473        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3474      ..
3475      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3476      =g=
3477      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3478              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3479              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3480   
3481  * // ### Converter Negative Ramping
3482  * // Negative ramping of unit activity.
3483  * // {Eq_converter_rampNeg}
3484  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3485    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3486        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3487      ..
3488      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3489      =g=
3490      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3491              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3492              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3493   
3494  * // ### Converter Ramping Limit
3495  * // Restrict ramping up of unit activity.
3496  * // {Eq_converter_rampLimit}
3497  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3498    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3499          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3500      ..
3501      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3502              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3503              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3504    =l=
3505    converter_techParam(converter_techs,vintage,"activityRampLimit")
3508      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3511   
3514   
3515  * // ### Converter Units Online
3516  * // Set converter units online to total converter units for non-MIP case.
3517  * // {Eq_converter_unitsOnline}
3518  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3519      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3520          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3521    ..
3522    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3523    =e=
3524    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3525      ;
3526   
3527  * // ### Converter MIP Units Shutting Down
3528  * // Allow shutting down units.
3529  * // {Eq_converter_unitsOnlineUC}
3530  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3531      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3532          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3533    ..
3534    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3535    =l=
3536    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3537      ;
3540   
3541  * // ### Converter Activity Startups
3542  * // Variable counting the number of unit startups.
3543  * // {Eq_converter_activityStartups}
3544  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3545    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3546          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3547      ..
3548      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3549      =g=
3550          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3551      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3552   
3553  * // ### Converter Activity Shutdowns
3554  * // Variable tracking the number of unit shutdowns.
3555  * // {Eq_converter_activityShutdowns}
3556  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3557    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3558          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3559          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3560      ..
3561      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3562      =g=
3563          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3564      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3565   
3566  * // ### Converter Activity Startup Limit
3567  * // Limit the number of startup cycles a unit can perform.
3568  * // {Eq_converter_limitStartups}
3569  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3570    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3571          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3572      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3573      ..
3574      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3575    =l=
3576    converter_techParam(converter_techs,vintage,"startupLimit")
3577    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3578   
3579  alias(timeModelToCalc,ttc);
3580   
3581  * // ### Converter Units Minimum Uptime
3582  * // Require recently started units to remain online for their respective minimum uptime.
3583  * // {Eq_converter_minUptime}
3584  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3585    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3586          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3587      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3588      ..
3589      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3590          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3591              nodesModelSel,yearsSel,converter_techs,vintage))
3592          =l=
3593          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3594   
3595  * // ### Converter Units Minimum Downtime
3596  * // Require recently shut down units to remain offline for their respective minimum downtime.
3597  * // {Eq_converter_minDowntime}
3598  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3599    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3600          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3601      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3602      ..
3603      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3604          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3605              nodesModelSel,yearsSel,converter_techs,vintage))
3606          =l=
3607          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3608      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3609   
3610  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3611  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3612  alias(activity, act);
3613   
3614  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3615  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3616  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3617  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3618    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3619          and converter_hasMinLoad(converter_techs, vintage)
3620          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3621      ..
3622      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3623                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3624               and converter_usedAct(converter_techs,vintage,act)),
3625      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3626    =l=
3627    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3628      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3629                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3630                 and converter_usedAct(converter_techs,vintage,act)),
3631      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3632   
3633  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3634  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3635  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3636  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3637    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3638          and converter_hasMaxLoad(converter_techs,vintage)
3639          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3640      ..
3641      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3642                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3643               and converter_usedAct(converter_techs,vintage,act)),
3644      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3645    =l=
3646      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3647                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3648               and converter_usedAct(converter_techs,vintage,act)),
3649      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3650            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3651            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3652   
3653  * This equation is meant to enforce the lower limit requirements of activities in use.
3654  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3655  * because these activities can only run on units in the respectively strict activation state.
3656   
3657  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3658  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3659  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3660  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3661    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3662          and converter_hasMinLoad(converter_techs, vintage)
3663          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3664      ..
3665      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3666                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3667               and converter_usedAct(converter_techs,vintage,act)),
3668      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3669    =g=
3670      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3671                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3672               and converter_usedAct(converter_techs,vintage,act)),
3673      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3674            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3675            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3676   
3677   
3678  * Simple one-activity-per-unit partial load equations
3679  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3680  * // Enforce MIP units partial load upper limit.
3681  * // {Eq_converter_activityUpperLimitPartLoad}
3682  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3683    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3684          and (converter_hasMinLoad(converter_techs, vintage)
3685                or converter_hasMaxLoad(converter_techs, vintage)
3686                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3687          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3688      ..
3689      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3690    =l=
3691    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3692          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3693          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3694   
3695  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3696  * // Enforce MIP units partial load lower limit.
3697  * // {Eq_converter_activityLowerLimitPartLoad}
3698  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3699    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3700          and (converter_hasMinLoad(converter_techs, vintage)
3701                or converter_hasMaxLoad(converter_techs, vintage))
3702          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3703      ..
3704      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3705    =g=
3706    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3707          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3708          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3709   
3710  * // ### Converter MIP Units Idle Online Units
3711  * // Counts idle online units at every time step
3712  * // {Eq_converter_noOnlineIdle}
3713  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3714    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3715          and (converter_hasMinLoad(converter_techs, vintage)
3716              or converter_hasMaxLoad(converter_techs, vintage)
3717              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3718          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3719      ..
3720      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3721      =e=
3722      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3723            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3724   
3725  * // ### Converter MIP Units Idle Online Units Partial load
3726  * // Counts idle online units at every time step
3727  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3728  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3729    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3730          and (converter_hasMinLoad(converter_techs, vintage)
3731                  or converter_hasMaxLoad(converter_techs, vintage))
3732          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3733      ..
3734      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3735      =l=
3736      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3737            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3738   
3739  * // ### Converter MIP activity model limit
3740  * // Converter activity model limit
3741  * // {Eq_converter_activityModeLimit}
3742  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3743    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3744          and (converter_hasMinLoad(converter_techs, vintage)
3745                or converter_hasMaxLoad(converter_techs, vintage))
3746          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3747      ..
3748      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3749      =g=
3750      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3751   
3752  * ==== model definition ====
3753   
3754  Model M_converter
3755  /
3756    Eq_converter_unitsBalance
3757    Eq_converter_unitsBalanceFreeDecom
3758    Eq_converter_unitsFreeDecom
3759    Eq_converter_unitsUpperLimit
3760    Eq_converter_unitsLowerLimit
3761    Eq_converter_unitsFixedLimit
3762    Eq_converter_unitsTotalMIP
3763    Eq_converter_unitsOnlineMIP
3764    Eq_converter_activityUpperLimit
3765    Eq_converter_activityLowerLimit
3766    Eq_converter_activityFixedLimit
3767    Eq_converter_rampPos
3768    Eq_converter_rampNeg
3769    Eq_converter_rampLimit
3772    Eq_converter_unitsOnline
3773    Eq_converter_unitsOnlineUC
3776    Eq_converter_activityStartups
3777    Eq_converter_activityShutdowns
3778    Eq_converter_limitStartups
3779    Eq_converter_minUptime
3780    Eq_converter_minDowntime
3781    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
3782    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
3783    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
3784    Eq_converter_activityUpperLimitPartLoad
3785    Eq_converter_activityLowerLimitPartLoad
3786    Eq_converter_noOnlineIdle
3787    Eq_converter_noOnlineIdleDetailedPartLoad
3788    Eq_converter_activityModeLimit
3789  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
3791  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
3792  * SPDX-License-Identifier: BSD-3-Clause
3793   
3794  * // # core_storage
3795  * // The equations in this file describe the storages in the model.
3796   
3797  * // ## Variables
3798  * // {special_table_storage_variables}
4071   
4072   
4073  * === SoC mappings ===
4074  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4075  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4076      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4077        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4078      = yes;
4079   
4080  set storage_validSoCRange(storage_techs,vintage);
4081  storage_validSoCRange(storage_techs,vintage)
4082      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4083        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4084   
4085  * === Translate SoC parameters to ordered SoC-set ===
4086  * set ordered_socs / soc1*soc20 /;
4087  * alias(soc_states, soc_states_c);
4088  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4089  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4090  *     $storage_validSoCRange(storage_techs,vintage)
4091  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4092  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4093  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4094  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4095  *
4096  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4097  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4098  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4099  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4100  *     = yes;
4101   
4102  parameter storage_bigM(storage_techs,vintage);
4103  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4104  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4105  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4106   
4107  * === calculate the number of years represented by single year to calc ===
4108  alias(yearsToCalc, yearsToCalc_a)
4109  parameter representedYears(years);
4110  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4111                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4112   
4113  * ==== calculation of mappings ====
4114   
4115  * Technologies with a lifeTime > 0 are available
4116  set storage_availTech(nodesModel,years,storage_techs,vintage);
4117  storage_availTech(nodesModel,years,storage_techs,vintage)
4118      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4119          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4120   
4121  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4122  storage_availTech(nodesModel,years,storage_techs,vintage)
4123      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4124   
4125  * Technologies already built become unavailable if they have an unitsBuild of 0
4126  storage_availTech(nodesModel,years,storage_techs,vintage)
4127      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4128   
4129  * Used technologies are available technologies over their technical lifeTime
4130  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4131  storage_usedTech(nodesModel,years,storage_techs,vintage)
4132      $(vintage.val <= years.val
4133          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4134                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4135          ) = yes;
4136   
4137  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4138  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4139  storage_decomTech(nodesModel,years,storage_techs,vintage)
4140    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4141                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4142      and sum(yearsToCalc
4143        $(sameas(years, yearsToCalc)
4144          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4145          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4146    = yes;
4147   
4148  storage_decomTech(nodesModel,years,storage_techs,vintage)
4149    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4150                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4151      and sum(yearsToCalc
4152        $(sameas(years, yearsToCalc)
4153          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4154          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4155    = yes;
4156   
4157  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4158  storage_decomTech(nodesModel,years,storage_techs,vintage)
4159    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4160      and sum(yearsToCalc
4161        $(sameas(years, yearsToCalc)
4162          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4163    = yes;
4164   
4165  * Extend the decom frame to the year after the last year of usedTech
4166  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4167    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4168      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4169    = yes;
4170   
4171  * Mapping for used commodities
4172  set storage_usedCom(storage_techs,vintage,commodity);
4173  option storage_usedCom < storage_sizeParam;
4174   
4175  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4176  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4177      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4178          and storage_usedCom(storage_techs,vintage,commodity))
4179      = yes;
4180   
4181   
4182  * // ## Load units from gdx file
4184   
4185   
4186  * ==== aggregation of profiles ====
4187  * derive upper and lower profiles then aggregate
4188  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4189  option storage_level_hasProfileIn < storage_levelProfileIn;
4190   
4191  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4192  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4193      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4194              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4195   
4196  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4197  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4198  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4199      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4200  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4201      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4202   
4203  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4204  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4205                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4206   
4207  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4208      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4209          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4210      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4211              sum(timeData$timeMapping(timeData,timeModelToCalc),
4212                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4213                / timeLength(timeModelToCalc)
4214              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4215      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4216              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4217   
4218  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4219      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4220          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4221                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4222      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4223                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4224              sum(timeData$timeMapping(timeData,timeModelToCalc),
4225                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4226                / timeLength(timeModelToCalc))
4227      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4228                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4229   
4230  * for fixed profiles overwrite upper and lower profile
4231  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4232      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4233      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4234   
4235  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4236      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4237      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4238   
4239  * storage initial level
4240   
4241  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4242      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4243          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4244      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4245            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4246              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4247      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4248              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4249   
4250  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4251      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4252          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4253                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4254      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4255                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4256            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4257      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4258                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4259   
4260  * ==== parameter modifications ====
4261  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4262          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4263      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4264  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4265          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4266      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4267   
4268   
4269  * ==== definition of variables ====
4270   
4271  * Initialise variables for unitsBuild
4272  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4273      $storage_availTech(nodesModel,years,storage_techs,vintage)
4274      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4275  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4276      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4277      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4278  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4279      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4280      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4281   
4282  * Initialise variables for unitsDecom
4283  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4284      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4285        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4286      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4287                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4288                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4289                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4290          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4291   
4292  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4293    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4294    = sum(years$
4295          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4296            and storage_availTech(nodesModel,years,storage_techs,vintage)
4297            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4298            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4299        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4300      + sum(yearsToCalc_a$
4301          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4302            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4303            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4304            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4305        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4306        ;
4307   
4308  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4309      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4310        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4311      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4312   
4313   
4315   
4316   
4317  * Calculate planned unit expansion
4318  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4319  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4320  loop(years,
4321    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4322      =
4323      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4324          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4325      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4326          $storage_availTech(nodesModel,years,storage_techs,vintage)
4327      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4328          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4329  );
4330   
4331  * Set initial state for planned units
4332  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4333    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4334   
4335  * // ## Load units from gdx file
4337   
4338  * Calculate if planned unit expansion is bounded by upper and lower limits
4339  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4340  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4341    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4342          storage_techParam(storage_techs,vintage,"freeDecom"))
4343    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4344          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4345      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4346    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4347          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4348      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4349    = yes;
4350   
4351  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4352  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4353    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4354      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4355    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4356  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4357    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4358      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4359    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4360  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4361    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4362      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4363    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4364   
4365  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4366      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4367        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4368      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4369   
4370  * Add parameter for fixing capacities during myopic runs
4371  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4372  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4373  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4374   
4375  * ==== declaration of equations ====
4376   
4377  equations
4378    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4379      ) "Ensures the units balance over the planning period."
4380    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4381      ) "Ensures the units balance over the planning period."
4382    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4383      ) "Restricts the free decommissioning of units over the planning period."
4384    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4385      ) "Upper bound for the total number of units."
4386    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4387      ) "Lower bound for the total number of units."
4388    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4389      ) "Fixes the total number of units to the corresponding integer variable."
4390   
4391    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4392      ) "Upper bound for the total number of units."
4393    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4394      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4395    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4396      ) "Lower bound for the total number of units."
4397    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4398      ) "Stored commodities lost due to self discharge."
4399    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4400      ) "Currently available units must have been built at some point in time and have some state of degradation."
4401    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4402      ) "There cannot be more units from a certain year than the amount built in that year."
4403    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4404      ) "There is no recovery."
4405    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4406      ) "Limit charging rate based on unit capacity."
4407    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4408      ) "Limit discharging rate based on unit capacity."
4409    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4410      ) "Positive change in state of charge is influx."
4411    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4412      ) "Negative change in state of charge is outflux."
4413   
4414    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4415      ) "Sum of degradation class storage levels is the global level."
4416    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4417      ) "Upper bound for units of a certain state."
4418    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4419      ) "Positive change in state of charge is influx for each degradation class."
4420    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4421      ) "Determine degradation states of storage units."
4422    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4423      ) "All decomminsioned units must have a degradation state."
4424    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4425      ) "Only allow one range of degradation states per year and age group."
4426    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4427      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4428   
4429    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4430      ) "Every unit has a state of charge."
4431    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4432      ) "Every unit has a state of charge."
4433    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4434      ) "Number of units in particular SoC."
4435    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4436      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4437   
4438    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4439      ) "Limit charging rate based on unit capacity."
4440    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4441      ) "Limit discharging rate based on unit capacity."
4442    ;
4443   
4444  * ==== equation definition ====
4445  * // ## Equations
4446  * // ### Storage Units Balance
4447  * // Ensures that the total units are consistent with the built and decommissioned units.
4448  * // {Eq_storage_unitsBalance}
4449   
4450  * Equation using build only
4451  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4452      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4453            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4454          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4455          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4456      ..
4457      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4458      =e=
4459      sum ((years_a)
4460                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4461                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4462                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4463                          and years_a.val <= yearsSel.val ),
4464              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4465   
4466      + sum ((yearsToCalc)
4467                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4468                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4469                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4470                          and yearsToCalc.val <= yearsSel.val ),
4471              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4472   
4473  * Equation using build and decom
4474  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4475      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4476            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4477          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4478          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4479      ..
4480      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4481      =e=
4482          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4483        sum(years$sameas(years, yearsToCalc),
4484          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4485            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4486      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4487        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4488          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4489      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4490          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4491      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4492          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4493      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4494          ;
4495   
4496  * // ### Storage Units Free Decommission
4497  * // Restricts the free decommissioning of storage units over the planning period.
4498  * // {Eq_storage_unitsFreeDecom}
4499  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4500      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4501          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4502      ..
4503      sum(years$
4504            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4505              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4506          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4507      + sum(yearsToCalc$
4508            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4509              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4510              and yearsToCalc.val <= yearsSel.val),
4511          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4512      =g=
4513      sum(years$
4514            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4515              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4516              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4517          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4518      + sum(yearsToCalc$
4519            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4520              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4521              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4522          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4523   
4524  * // ### Storage Units Lower Limit
4525  * // Lower bound for the total number of storage units.
4526  * // {Eq_storage_unitsLowerLimit}
4527  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4528      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4529      ..
4530      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4531          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4532      =g=
4533      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4534   
4535  * // ### Storage Units Upper Limit
4536  * // Upper bound for the total number of storage units.
4537  * // {Eq_storage_unitsUpperLimit}
4538  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4539      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4540          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4541      ..
4542      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4543          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4544      =l=
4545      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4546   
4547  * // ### Storage Units Total MIP
4548  * // Fixes the total number of storage units to the corresponding integer variable.
4549  * // {Eq_storage_unitsTotalMIP}
4550  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4551      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4552          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4553      ..
4554      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4555      =e=
4556      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4557   
4558  * // ### Storage Level Lower Limit
4559  * // Lower limit on the storage level.
4560  * // {Eq_storage_levelLowerLimit}
4561  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4562      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4563          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4564      ..
4565      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4566      =g=
4567      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4568      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4569      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4570   
4571  * // ### Storage Level Upper Limit
4572  * // Upper limit on the storage level.
4573  * // {Eq_storage_levelUpperLimit}
4574  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4575      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4576          and not storage_hasDegradation(storage_techs,vintage)
4577          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4578      ..
4579      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4580      =l=
4581      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4582      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4583      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4584   
4585  * // ### Storage Level Upper Limit (degradation)
4586  * // Upper limit on the storage level if the storage technology accounts for degradation.
4587  * // {Eq_storage_levelUpperLimit_degradation}
4588  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4589      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4590          and storage_hasDegradation(storage_techs,vintage)
4591          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4592      ..
4593      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4594      =l=
4595      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4596      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4597      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4598              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4599                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4600                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4601   
4602  * // ### Storage Unit States Sum (degradation)
4603  * // The number of units in all degradation state must match the total unit number.
4604  * // {Eq_storage_unitsBalanceStates}
4605  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4606      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4607        and storage_hasDegradation(storage_techs,vintage))
4608      ..
4609      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4610      =e=
4611      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4612            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4613   
4614  * // ### Storage Unit States Upper Limit(degradation)
4615  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4616  * // {Eq_storage_unitsUpperLimitPerState}
4617  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4618      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4619          and storage_hasDegradation(storage_techs,vintage))
4620      ..
4621      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4622            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4623            + sum(years$(years.val <= yearsSel.val),
4624                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4625      =e=
4626      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4627   
4628  * // ### Storage Unit States Progression (degradation)
4629  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4630  * // {Eq_storage_unitsStatesNoRecovery}
4631  alias(degradation_states, dc_states);
4632  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4633      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4634        and yearsToCalc.val > yearsCom.val
4635        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4636      ..
4637      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4638                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4639              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4640              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4641      =l=
4642      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4643                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4644              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4645              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4646   
4647  * // ### Storage Losses
4648  * // Accumulation of storage losses.
4649  * // {Eq_storage_losses}
4650  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4651      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4652      ..
4653      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4654      =e=
4655      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4656          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4657        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4658            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4659        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4660            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4661            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4662            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4663                and ord(timeModelToCalc)=1))
4664      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4665      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4666      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4667          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4668        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4669          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4670      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4671        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4672          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4673      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4674        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4675                          and storage_validSoCRange(storage_techs,vintage)),
4676              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4677              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4678              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4679   
4680  * // ### C-Rate Limit
4681  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4682  * // {Eq_storage_cRateLimit}
4683  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4684      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4685        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4686      ..
4687      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4688      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4689          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4690      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4691          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4692      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4693          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4694          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4695          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4696              and ord(timeModelToCalc)=1)
4697      =l=
4698      storage_techParam(storage_techs,vintage,"maxCRate")
4699      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4700      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4701   
4702  * // ### E-Rate Limit
4703  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4704  * // {Eq_storage_eRateLimit}
4705  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4706      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4707        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4708      ..
4709      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4710      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4711          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4712      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4713          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4714      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4715          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4716          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4717          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4718              and ord(timeModelToCalc)=1)
4719      =g=
4720      - storage_techParam(storage_techs,vintage,"maxERate")
4721      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4722      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4723   
4724  * // ### Storage Charging
4725  * // Increases in storage levels are accounted as charging amounts.
4726  * // {Eq_storage_charge}
4727  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4728      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4729        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4730      ..
4731      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4732      =g=
4733      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4734      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4735          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4736      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4737          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4738      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4739          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4740          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4741          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4742              and ord(timeModelToCalc)=1);
4743   
4744  * // ### Storage Discharging
4745  * // Decreases in storage levels are accounted as discharging amounts.
4746  * // {Eq_storage_discharge}
4747  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4748      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4749        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4750      ..
4751      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4752      =g=
4753      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4754          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4755      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4756          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4757      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4758          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4759          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4760          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4761              and ord(timeModelToCalc)=1)
4762      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4763   
4764  * // ### Storage Level Sum (degradation)
4765  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4766  * // {Eq_storage_levelStateSum}
4767  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4768      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4769        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4770      ..
4771      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4772      =e=
4773      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4774   
4775  * // ### Storage Level Upper Limit per Age Group (degradation)
4776  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4777  * // {Eq_storage_levelUpperLimitPerAge}
4778  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4779      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4780        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4781      ..
4782      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4783      =l=
4784      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4785      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4786      * sum(degradation_states,
4787              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4788                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4789                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4790   
4791  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4792  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4793  * // {Eq_storage_chargeBasedDegradationDistribution}
4794  alias(years, prev_years);
4795  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4796      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4797        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4798      ..
4799      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
4800          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
4801      =l=
4802      storage_sizeParam(storage_techs,vintage,commodity,"size")
4803      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
4804          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
4805          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
4806             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
4807   
4808  * // ### Storage Charging per Commissioning Year (degradation)
4809  * // Increases in storage levels are accounted as charging amounts.
4810  * // {Eq_storage_chargingPerAge}
4811  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4812      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4813        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4814      ..
4815      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4816      =g=
4817      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4818      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
4819   
4820  * // ### Storage Unit Decommissioning States Sum (degradation)
4821  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
4822  * // {Eq_storage_unitsDecomStateSum}
4823  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
4824      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
4825      ..
4826      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4827      =e=
4828      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4829          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4830   
4831  * // ### Storage Unit Sequential Degradation (degradation)
4832  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
4833  * // {Eq_storage_unitsDegradation}
4834  alias(degradation_states, degradation_states_a, degradation_states_b);
4835  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4836      $(storage_techParam(storage_techs,vintage,"usageDegradation")
4837        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4838      ..
4839      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4840                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
4841                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4842                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
4843                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
4844                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
4845          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
4846      * storage_bigM(storage_techs,vintage)
4847      =g=
4848      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
4849   
4850  * // ### Storage Unit Sequential Degradation Range (degradation)
4851  * // Only one degradation range can be active.
4852  * // {Eq_storage_unitsDegradation_onlyOneRange}
4853  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4854      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4855      ..
4856      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4857            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
4858      =e= 1;
4859   
4860  * // ### Storage Unit Sequential State of Charge (SoC)
4861  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
4862  * // {Eq_storage_unitsSoC}
4863  alias(soc_states, soc_states_a, soc_states_b);
4864  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4865      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4866      ..
4867      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4868                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
4869                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4870                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
4871                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
4872                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
4873          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
4874      * storage_bigM(storage_techs,vintage)
4875      =g=
4876      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
4877   
4878  * // ### Storage Unit Sequential State of Charge Range (SoC)
4879  * // Only one state of charge range can be active.
4880  * // {Eq_storage_unitsSoC_onlyOneRange}
4881  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4882      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4883      ..
4884      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4885            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
4886   
4887  * // ### Storage Unit State of Charge Sum (SoC)
4888  * // Each storage unit must have one state of charge.
4889  * // {Eq_storage_unitsSoC_sum}
4890  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4891      $storage_validSoCRange(storage_techs,vintage)
4892      ..
4893      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4894      =e=
4895      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4896            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4897   
4898  * // ### Storage Level State of Charge Sum (SoC)
4899  * // The total storage level must be represented by units in their specific states of charge.
4900  * // {Eq_storage_levelSoC}
4901  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4902      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
4903      ..
4904      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4905      =e=
4906      storage_sizeParam(storage_techs,vintage,commodity,"size")
4907      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4908              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4909              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
4910   
4911  * // ### C-Rate Limit (SoC)
4912  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4913  * // {Eq_storage_cRateLimit_SoC}
4914  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4915      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4916        and storage_validSoCRange(storage_techs,vintage)
4917        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
4918      ..
4919      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4920      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4921          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4922      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4923          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4924      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4925          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4926          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4927          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4928              and ord(timeModelToCalc)=1)
4929      =l=
4930      storage_sizeParam(storage_techs,vintage,commodity,"size")
4931      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4932                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
4933                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4934   
4935  * // ### E-Rate Limit (SoC)
4936  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4937  * // {Eq_storage_cRateLimit_SoC}
4938  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4939      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4940        and storage_validSoCRange(storage_techs,vintage)
4941        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
4942      ..
4943      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4944      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4945          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4946      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4947          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4948      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4949          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4950          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4951          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4952              and ord(timeModelToCalc)=1)
4953      =g=
4954      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4955      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4956                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
4957                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4958   
4959   
4960  * ==== model definition ====
4961   
4962  Model M_storage
4963  /
4964    Eq_storage_unitsBalance
4965    Eq_storage_unitsBalanceFreeDecom
4966    Eq_storage_unitsFreeDecom
4967    Eq_storage_unitsLowerLimit
4968    Eq_storage_unitsUpperLimit
4969    Eq_storage_levelUpperLimit_degradation
4970    Eq_storage_unitsTotalMIP
4971    Eq_storage_levelLowerLimit
4972    Eq_storage_levelUpperLimit
4975    Eq_storage_losses
4978    Eq_storage_unitsBalanceStates
4979    Eq_storage_unitsUpperLimitPerState
4980    Eq_storage_unitsStatesNoRecovery
4981    Eq_storage_cRateLimit
4982    Eq_storage_eRateLimit
4983    Eq_storage_charge
4984    Eq_storage_discharge
4985    Eq_storage_levelStateSum
4986    Eq_storage_levelUpperLimitPerAge
4987    Eq_storage_chargeBasedDegradationDistribution
4988    Eq_storage_chargingPerAge
4989    Eq_storage_unitsDecomStateSum
4990    Eq_storage_unitsDegradation
4991    Eq_storage_unitsDegradation_onlyOneRange
4992   
4993    Eq_storage_unitsSoC
4994    Eq_storage_unitsSoC_sum
4995    Eq_storage_unitsSoC_onlyOneRange
4996    Eq_storage_levelSoC
4997    Eq_storage_cRateLimit_SoC
4998    Eq_storage_eRateLimit_SoC
4999  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
5001  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5002  * SPDX-License-Identifier: BSD-3-Clause
5003   
5004  * // # core_transfer
5005  * // The equations in this file describe the commodity transfer in the model.
5006   
5007  * // ## Variables
5008  * // {special_table_transfer_variables}
5011   
5016   
5212   
5213  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5214  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5215      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5216   
5217   
5218  * ==== calculation of mappings ====
5219   
5220  * Technologies with a lifeTime > 0 are available
5221  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5222  transfer_availTech(linksModel,years,transfer_techs,vintage)
5223      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5224          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5225   
5226  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5227  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5228      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5229   
5230  * Technologies already built become unavailable if they have a linksBuild of 0
5231  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5232      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5233   
5234  * Used technologies are available technologies over their technical lifeTime
5235  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5236  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5237      $(vintage.val <= years.val
5238          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5239                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5240          ) = yes;
5241   
5242  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5243  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5244  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5245    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5246                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5247      and sum(yearsToCalc
5248        $(sameas(years, yearsToCalc)
5249          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5250          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5251    = yes;
5252   
5253  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5254    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5255                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5256      and sum(yearsToCalc
5257        $(sameas(years, yearsToCalc)
5258          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5259          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5260    = yes;
5261   
5262  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5263  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5264    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5265      and sum(yearsToCalc
5266        $(sameas(years, yearsToCalc)
5267          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5268    = yes;
5269   
5270  * Extend the decom frame to the year after the last year of usedTech
5271  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5272    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5273      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5274    = yes;
5275   
5276   
5277  * // ## Load links from gdx file
5279   
5280   
5281  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5282  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5283   
5284  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5285  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5286      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5287      = 1;
5288   
5289  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5290      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5291      = 1;
5292   
5293  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5294      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5295      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5296   
5297  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5298      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5299      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5300   
5301  * aggregate time dimension
5302  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5303  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5304      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5305      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5306            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5307            / timeLength(timeModelToCalc));
5308  option clear = transfer_flowProfileIn;
5309   
5310  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5311      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5312        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5313      = 1;
5314   
5315  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5316      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5317        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5318      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5319   
5320  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5321      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5322        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5323      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5324   
5325  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5326  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5327      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5328          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5329   
5330  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5331  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5332      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5334   
5335  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5336  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5337      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5338          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5339   
5340  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5341  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5342      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5343   
5344  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5345  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5346      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5347          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5348          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5349      = (1 / sum(linksData
5350                  $links_aggregate(linksModelToCalc,linksData),
5351              1 / ( sum(link_types,
5352                          transfer_lengthParamIn(linksData,link_types,"length")
5353                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5354                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5355   
5356  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5357  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5358      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5359              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5360   
5361  * aggregate coefficient delays per link and reduce based on time resolution
5362  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5364  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5365    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5366      or sum(link_types,
5367          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5368    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5369            + sum(link_types,
5370                transfer_lengthParam(linksModel,link_types,"length")
5371                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5372            / 1);
5374   
5375  * ==== parameter modifications ====
5376  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5377      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5378      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5379  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5380      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5381      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5382   
5383   
5384  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5385   
5386  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5387      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5388      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5389                       and transfer_incidenceData_flip(linksData) = 1),
5390              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5391              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5392          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5393                          and transfer_incidenceData_flip(linksData) = -1),
5394              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5395              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5396      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5397              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5398   
5399  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5400      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5401      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5402                       and transfer_incidenceData_flip(linksData) = 1),
5403              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5404              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5405          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5406                          and transfer_incidenceData_flip(linksData) = -1),
5407              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5408              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5409      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5410              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5411   
5412  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5413      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5414      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5415                       and transfer_incidenceData_flip(linksData) = 1
5416                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5417              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5418          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5419                          and transfer_incidenceData_flip(linksData) = -1
5420                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5421              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5422      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5423                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5424              1);
5425   
5426  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5427      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5428      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5429                       and transfer_incidenceData_flip(linksData) = 1
5430                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5431              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5432          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5433                          and transfer_incidenceData_flip(linksData) = -1
5434                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5435              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5436      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5437                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5438              1);
5439  option clear = transfer_flowProfileIn_aggTime;
5440   
5441  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5442   
5443  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5444      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5445      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5446                       and transfer_incidenceData_flip(linksData) = 1),
5447              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5448              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5449          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5450                          and transfer_incidenceData_flip(linksData) = -1),
5451              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5452              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5453      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5454              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5455   
5456  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5457      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5458      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5459                       and transfer_incidenceData_flip(linksData) = -1),
5460              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5461              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5462          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5463                          and transfer_incidenceData_flip(linksData) = 1),
5464              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5465              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5466      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5467              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5468   
5469  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5470      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5471      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5472                       and transfer_incidenceData_flip(linksData) = 1
5473                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5474              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5475          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5476                          and transfer_incidenceData_flip(linksData) = -1
5477                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5478              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5479      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5480                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5481              1);
5482   
5483  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5484      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5485      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5486                       and transfer_incidenceData_flip(linksData) = -1
5487                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5488              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5489          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5490                          and transfer_incidenceData_flip(linksData) = 1
5491                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5492              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5493      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5494                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5495              1);
5496   
5497  * Mapping for grid segments using DC optimal power flow
5498  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5499  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5500      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5503      = yes;
5506   
5507  * Ensure each grid segment uses exactly one commodity
5508  parameter checkGridSegmentCommodities(gridSegments);
5509  checkGridSegmentCommodities(gridSegments)
5510      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5511                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5512                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5513   
5514  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5515  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5516      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5517                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5518                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5519      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5520   
5521   
5525   
5526  scalar transfer_enableMIP;
5527  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5528   
5529   
5530  * ==== definition of variables ====
5531   
5532  * Initialise variables for linksBuild
5533  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5534      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5535      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5536  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5537      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5538      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5539  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5540      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5541      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5542   
5543  * Initialise variables for linksDecom
5544  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5545      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5546        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5547      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5548                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5549                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5550                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5551          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5552   
5553  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5554    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5555    = sum(years$
5556          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5557            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5558            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5559            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5560        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5561      + sum(yearsToCalc_a$
5562          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5563            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5564            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5565            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5566        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5567   
5568  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5569      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5570          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5571      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5572   
5573   
5575   
5576   
5577  * Calculate planned transfer links expansion
5578  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5579  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5580  loop(years,
5581    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5582      =
5583      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5584          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5585      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5586          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5587      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5588          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5589  );
5590   
5591  * Set initial state for planned units
5592  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5593    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5594   
5595  * // ## Load units from gdx file
5597   
5598  * Calculate if planned links expansion is bound by upper and lower limits
5599  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5600  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5601    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5602          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5603    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5604          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5605      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5606    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5607          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5608      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5609    = yes;
5610   
5611  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5612  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5613    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5614      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5615    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5616  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5617    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5618      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5619    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5620  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5621    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5622      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5623    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5624   
5625  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5626      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5627        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5628      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5629   
5630  * Add parameter for fixing capacities during myopic runs
5631  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5632  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5633  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5634   
5635  * ==== declaration of equations ====
5636   
5637  equations
5638    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5639      ) "Ensures the links balance over the planning period."
5640    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5641      ) "Ensures the links balance over the planning period."
5642    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5643      ) "Restricts the free decommissioning of links over the planning period."
5644    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5645      ) "Upper bound for the total number of links."
5646    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5647      ) "Lower bound for the total number of links."
5648    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5649      ) "Fixes the total number of links to the corresponding integer variable."
5650   
5651    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5652      ) "Upper bound for the flow along the transfer links."
5653    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5654      ) "Upper bound for the flow against the transfer links."
5655    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5656      )
5657    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5658      )
5659    ;
5660   
5661   
5662  * ==== equation definition ====
5663  * // ## Equations
5664  * // ### Transfer Links Balance
5665  * // Ensures that the transfer between nodes is balanced.
5666  * // {Eq_transfer_linksBalance}
5667   
5668  * Equation using build only
5669  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5670      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5671            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5672          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5673          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5674      ..
5675      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5676      =e=
5677      sum ((years_a)
5678              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5679                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5680                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5681                  and years_a.val <= yearsSel.val ),
5682            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5683   
5684      + sum ((yearsToCalc)
5685              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5686                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5687                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5688                  and yearsToCalc.val <= yearsSel.val ),
5689            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5690   
5691  * Equation using build and decom
5692  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5693      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5694            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5695          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5696          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5697      ..
5698      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5699      =e=
5700      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5701        sum(years$sameas(years, yearsToCalc),
5702          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5703            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5704      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5705        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5706          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5707      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5708          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5709      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5710          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5711      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5712          ;
5713   
5714  * // ### Transfer Links Free Decommissioning
5715  * // Balances free link decommissioning.
5716  * // {Eq_transfer_linksFreeDecom}
5717  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5718      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5719          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5720          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5721      ..
5722      sum(years$
5723            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5724              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5725              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5726          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5727      + sum(yearsToCalc$
5728            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5729              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5730              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5731              and yearsToCalc.val <= yearsSel.val),
5732          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5733      =g=
5734      sum(years$
5735            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5736              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5737              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5738          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5739      + sum(yearsToCalc$
5740            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5741              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5742              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5743          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5744   
5745  * // ### Transfer Links Lower Limit
5746  * // Ensures link capacity lower limits.
5747  * // {Eq_transfer_linksLowerLimit}
5748  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5749      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5750      ..
5751      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5752          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5753      =g=
5754      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5755   
5756  * // ### Transfer Links Upper Limit
5757  * // Ensures link capacity upper limits.
5758  * // {Eq_transfer_linksUpperLimit}
5759  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5760      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5761          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5762      ..
5763      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5764          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5765      =l=
5766      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5767   
5768  * // ### Transfer Links Total MIP
5769  * // Ensures number of MIP links.
5770  * // {Eq_transfer_linksTotalMIP}
5771  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5772      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5773          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5774      ..
5775      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5776      =e=
5777      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5778   
5779  * // ### Transfer Links Flow Along Upper Limit
5780  * // Ensures links flow along upper limit.
5781  * // {Eq_transfer_flowAlongUpperLimit}
5782  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5783      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5784      ..
5785      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5786      =l=
5787      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5788      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5789      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5790      ;
5791   
5792  * // ### Transfer Links Flow Against Upper Limit
5793  * // Ensures links flow against upper limit.
5794  * // {Eq_transfer_flowAgainstUpperLimit}
5795  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5796      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5797      ..
5798      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5799      =l=
5800      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
5801      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5802      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5803      ;
5804   
5805  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
5806  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
5807      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5808          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
5809      = yes;
5810   
5811  set transfer_usedOpfLinks(linksModel,years,gridSegments);
5812  option transfer_usedOpfLinks < transfer_usedOpf;
5813   
5814  set transfer_usedOpfSegments(years,gridSegments);
5815  option transfer_usedOpfSegments < transfer_usedOpf;
5816   
5820  * // ### Transfer DC optimal flow angle flows
5821  * // Angle flows.
5822  * // {Eq_transfer_dcopf_cycleFlows}
5823  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
5824      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
5825      ..
5826      sum ((transfer_techs,vintage)
5827              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
5828          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5829              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
5830          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
5831      =e=
5832      sum ( nodesModelSel,
5833          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
5834          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
5838   
5839   
5840  * ==== model definition ====
5841   
5842  Model M_transfer
5843  /
5844    Eq_transfer_linksBalance
5845    Eq_transfer_linksBalanceFreeDecom
5846    Eq_transfer_linksFreeDecom
5847    Eq_transfer_linksLowerLimit
5848    Eq_transfer_linksUpperLimit
5849    Eq_transfer_linksTotalMIP
5850    Eq_transfer_flowAlongUpperLimit
5851    Eq_transfer_flowAgainstUpperLimit
5855    Eq_transfer_dcopf_angleFlows
5859  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
5861  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5862  * SPDX-License-Identifier: BSD-3-Clause
5863   
5864  * // # core_sourcesink
5865  * // The equations in this file describe the sources and sinks in the model.
5866   
5867  * // ## Variables
5868  * // {special_table_sourcesink_variables}
6062   
6063  * // ## Aggregation of profiles
6064  * // Profiles are rescaled based on the annual sum.
6065   
6066  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6067  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6068      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6069  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6070      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6071  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6072      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6073   
6074  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6075  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6076      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6077      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6078   
6079  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6080  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6081      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6082      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6083   
6084  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6085  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6086      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6087          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6088          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6089      = yes;
6090   
6091  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6092              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6093   
6094  * calculate scaling factor for each type
6095  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6096  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6097      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6098          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6099      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6100          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6101              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6102   
6103  * rescale profiles
6104  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6105      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6106      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6107          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6108   
6109  * // ## Aggregation of profiles
6110  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6111   
6112  * ==== aggregation of profiles ====
6113  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6114  option sourcesink_usesProfileIn < sourcesink_profileIn
6115   
6116  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6117  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6118      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6119          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6120      = yes;
6121   
6122  * aagregate time dimension
6123  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6124  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6125    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6126    = sum(timeMapping_t(timeModelToCalc,timeData),
6127            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6128      / timeLength(timeModelToCalc);
6129  option clear = sourcesink_profileIn;
6130   
6131  * sum up absolute profiles
6132  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6133  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6134      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6135      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6136              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6137  option clear = sourcesink_profileIn_aggTime;
6138   
6139  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6140  option sourcesink_enabled < sourcesink_config;
6141   
6145   
6146  * ==== declaration of variables ====
6147  * // ## Bounding of variables
6148  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6149  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6150      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6151          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6152          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6153      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6154   
6155  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6156      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6157          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6158          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6159      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6160   
6161  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6162      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6163          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6164      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6165   
6166  option clear = sourcesink_profile;
6167   
6168   
6169  * ==== equation definition ====
6170  * // ## Equations
6171  equations
6172  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6173      ) "Fixes the annual sum from sources / to sinks"
6174  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6175      ) "Limits the lower sum from sources / to sinks"
6176  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6177      ) "Limits the upper sum from sources / to sinks"
6178    ;
6179   
6180  * // ### Fixed annual sums for sources and sinks
6181  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6182  * // {Eq_sourcesink_useFixedSum}
6183  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6184      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6185          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6186      ..
6187      sum(timeModelSel,
6188          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6189          * timeLength(timeModelSel))
6190      =e=
6191      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6192      * timefrac
6193      ;
6194   
6195  * // ### Lower annual sums for sources and sinks
6196  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6197  * // {Eq_sourcesink_useLowerSum}
6198  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6199      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6200          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6201          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6202      ..
6203      sum(timeModelSel,
6204          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6205          * timeLength(timeModelSel))
6206      =g=
6207      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6208      * timefrac
6209      ;
6210   
6211  * // ### Upper annual sums for sources and sinks
6212  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6213  * // {Eq_sourcesink_useUpperSum}
6214  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6215      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6216          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6217          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6218      ..
6219      sum(timeModelSel,
6220          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6221          * timeLength(timeModelSel))
6222      =l=
6223      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6224      * timefrac
6225      ;
6226   
6227   
6228  * ==== model definition ====
6229   
6230  Model M_sourcesink
6231  /
6232    Eq_sourcesink_useFixedSum
6233    Eq_sourcesink_useLowerSum
6234    Eq_sourcesink_useUpperSum
6235  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
6237  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6238  * SPDX-License-Identifier: BSD-3-Clause
6239   
6240  * // # balance
6241  * // The equations in this file describe the commodity balancing in the model.
6242   
6243  Equations
6244    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6245      ) "Balance for each commodity used in each time step, region, and year";
6246   
6247   
6248  * ==== calculation of mappings ====
6249   
6250  set balance_techComm(techs,commodity);
6251  balance_techComm(converter_techs(techs),commodity)
6252      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6253  balance_techComm(storage_techs(techs),commodity)
6254      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6255  balance_techComm(transfer_techs(techs),commodity)
6256      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6257  balance_techComm(sourcesink_techs(techs),commodity)
6258      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6259   
6260  set balance_usedConverter(nodesModel,years,commodity);
6261  set balance_usedStorage(nodesModel,years,commodity);
6262  set balance_usedTransfer(nodesModel,years,commodity);
6263  set balance_usedSourceSink(nodesModel,years,commodity);
6264  set balance_usedBalance(nodesModel,years,commodity);
6265   
6266  balance_usedConverter(nodesModel,years,commodity)
6267      = sum ((converter_techs,vintage,activity)
6268              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6269                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6270   
6271  balance_usedStorage(nodesModel,years,commodity)
6272      = sum ((storage_techs,vintage,activity)
6273              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6274                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6275   
6276  balance_usedTransfer(nodesModel,years,commodity)
6277      = sum ((linksModel,transfer_techs,vintage)
6278              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6279                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6280   
6281  option balance_usedSourceSink < sourcesink_enabled;
6282   
6283  balance_usedBalance(nodesModel,years,commodity)
6284      $(balance_usedConverter(nodesModel,years,commodity)
6285          or balance_usedStorage(nodesModel,years,commodity)
6286          or balance_usedTransfer(nodesModel,years,commodity)
6287          or balance_usedSourceSink(nodesModel,years,commodity) )
6288      = yes;
6289   
6290   
6291  * ==== equation definition ====
6292   
6293  * // ### Balance commodities
6294  * // Balancing of commodities for all model regions, time steps, and years
6295  * // {Eq_balance_commodities}
6296  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6297      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6298      ..
6299  * converter
6300      sum((converter_techs,vintage,activity)
6301              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6302                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6303          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6304              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6305              * timeLength(timeModelToCalc)
6306          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6307              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6308              * timeLength(timeModelToCalc))
6309   
6310  * storages
6311      + sum((storage_techs,vintage)
6312              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6313                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6314          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6315              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6316          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6317              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6318          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
6319              * storage_sizeParam(storage_techs,vintage,commodity,"size")
6320              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6321              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
6322                  and ord(timeModelToCalc)=1)
6323          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6326          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6327          * timeLength(timeModelSel)
6330          )
6331   
6332  * incoming transfer
6333      + sum((linksModel,transfer_techs,vintage)
6334              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6335                  and linksModelToCalc(linksModel)),
6336          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6337                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6338            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6339                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6340          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6341          * timeLength(timeModelToCalc))
6342   
6343  * outgoing transfer
6344      - sum((linksModel,transfer_techs,vintage)
6345              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6346                  and linksModelToCalc(linksModel)),
6347          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6348                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6349            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6350                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6351          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6352          * timeLength(timeModelSel))
6353   
6354  * transfer losses
6355      + 0.5 * sum((linksModel,transfer_techs,vintage)
6356              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6357                  AND linksModelToCalc(linksModel)),
6358          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6359                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6360            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6361                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6362          * timeLength(timeModelSel)
6363          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6364              + sum(link_types,
6365                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6366                  * transfer_lengthParam(linksModel,link_types,"length"))))
6367   
6368  * sourcesink
6369      + sum((sourcesink_techs)
6370              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6371          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6372          * timeLength(timeModelSel))
6373      =e=
6374      0;
6375   
6376   
6377  * ==== model definition ====
6378   
6379  Model M_balance
6380  /
6381    Eq_balance_commodities
6382  /;
6383   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
6385  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6386  * SPDX-License-Identifier: BSD-3-Clause
6387   
6388  * // # accounting_equations
6389   
6390  * ==== declaration of variables ====
6391   
6392  variables
6393  accounting_indicator(accNodesModel,accYears,indicator)
6394  accounting_indicator_links(linksModel,years,indicator)
6395  accounting_objective
6396  ;
6397   
6398   
6399  * ==== definition of variables ====
6400   
6401  accounting_indicator.lo(accNodesModel,accYears,indicator)
6402      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6403          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6404      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6405   
6406  accounting_indicator.up(accNodesModel,accYears,indicator)
6407      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6408          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6409      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6410   
6411  accounting_indicator.fx(accNodesModel,accYears,indicator)
6412      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
6413          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6414      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6415   
6416   
6417  * set the variable levels to be fixed for years before the optimization years
6418  accounting_indicator.l(accNodesModel,accYears,indicator)
6419      $activeIndicators(accNodesModel,accYears,indicator)
6420      = 0;
6421   
6422   
6423  * ==== declaration of equations ====
6424   
6425  equations
6426  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
6427      ) "Ensures the fixed value of an indicator per accounting region"
6428  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
6429      ) "Ensures the upper limit of an indicator per accounting region"
6430  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
6431      ) "Ensures the lower limit of an indicator per accounting region"
6432  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
6433      ) "Ensures the fixed value of an indicator per model link"
6434  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
6435      ) "Ensures the upper limit of an indicator per model link"
6436  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
6437      ) "Ensures the lower limit of an indicator per model link"
6438  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6439    ;
6440   
6441   
6442  * ==== equations definition ====
6443  * // ## Equations
6444  * // ### Accounting Indicator Calculation
6445  * // Calculates the fixed limit for accounting indicators.
6446  * // {Eq_accounting_indicatorCalc_fixed}
6447  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
6448      $(activeIndicators(accNodesModel,accYears,indicator)
6449          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6450      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6452  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6453  * SPDX-License-Identifier: BSD-3-Clause
6454   
6455  * == variable indicators ==
6456      sum((accNodesModel_a,accYears_a,indicator_a)
6457          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6458              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6459          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6460          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6461          )
6462   
6463  * == converters ==
6464      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6465              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6466                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6467          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6468          *
6469          ( sum ((converter_techs,vintage)
6470                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6471                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6472              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6473              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6474              )
6475   
6476          + sum ((years_a,converter_techs,vintage)
6477                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6478                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6479                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6480                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6481                          and years_a.val <= yearsSel.val ),
6482              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6483              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6484              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6485              )
6486   
6487          + sum ((yearsToCalc,converter_techs,vintage)
6488                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6489                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6490                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6491                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6492                          and yearsToCalc.val <= yearsSel.val ),
6493              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6494              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6495              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6496              )
6497   
6498          + sum ((converter_techs,vintage)
6499                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6500                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6501              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6502              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6503   
6504          + sum ((converter_techs,vintage)
6505                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6506              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6507              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6508   
6509          + sum ((timeModelSel,converter_techs,vintage,activity)
6510                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6511              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6512              * timeLength(timeModelSel)
6513              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6514          / timefrac
6515   
6516          + sum ((timeModelSel,converter_techs,vintage)
6517                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6518              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6519              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6520          / timefrac
6521   
6522          + sum ((timeModelSel,converter_techs,vintage)
6523                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6524              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6525              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6526                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6527   
6528              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6529              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6530                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6531          / timefrac
6532          )
6533      )
6534   
6535  * == storage ==
6536      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6537              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6538                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6539          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6540          *
6541          ( sum ((storage_techs,vintage)
6542                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6543                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6544              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6545              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6546              )
6547   
6548          + sum ((years_a,storage_techs,vintage)
6549                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6550                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6551                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6552                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6553                          and years_a.val <= yearsSel.val ),
6554              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6555              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6556              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6557              )
6558   
6559          + sum ((yearsToCalc,storage_techs,vintage)
6560                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6561                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6562                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6563                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6564                          and yearsToCalc.val <= yearsSel.val ),
6565              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6566              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6567              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6568              )
6569   
6570          + sum ((storage_techs,vintage)
6571                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6572                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6573              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6574              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6575   
6576          + sum ((storage_techs,vintage)
6577                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6578              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6579              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6580          )
6581      )
6582   
6583   
6584  * == transfer ==
6585      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6586              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6587                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6588          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6589          *
6590          ( sum ((linksModelToCalc,transfer_techs,vintage)
6591                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6592                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6593                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6594              0.5
6595              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6596              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6597   
6598          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6599                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6600                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6601                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6602                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6603                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6604                          and years_a.val <= yearsSel.val ),
6605              0.5
6606              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6607              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6608              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6609   
6610          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6611                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6612                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6613                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6614                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6615                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6616                          and yearsToCalc.val <= yearsSel.val ),
6617              0.5
6618              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6619              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6620              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6621   
6622          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6623                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6624                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6625                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6626              0.5
6627              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6628              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6629              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6630   
6631          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6632                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6633                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6634                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6635                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6636                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6637                          and years_a.val <= yearsSel.val ),
6638              0.5
6639              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6640              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6641              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6642              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6643   
6644          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6645                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6646                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6647                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6648                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6649                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6650                          and yearsToCalc.val <= yearsSel.val ),
6651              0.5
6652              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6653              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6654              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6655              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6656   
6657          + sum ((linksModelToCalc,transfer_techs,vintage)
6658                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6659                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6660                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6661              0.5
6662              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6663              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6664   
6665              + 0.5
6666              * sum (link_types,
6667                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6668                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6669                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6670              ) )
6671   
6672          + sum ((linksModelToCalc,transfer_techs,vintage)
6673                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6674                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6675              0.5
6676              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6677              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6678   
6679              + 0.5
6680              * sum (link_types,
6681                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6682                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6683                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6684   
6685              + 0.5
6686              * sum (timeModelSel,
6687                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6688                  * timeLength(timeModelSel)
6689                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6690                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6691   
6692                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6693                  * timeLength(timeModelSel)
6694                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6695                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6696                  / timefrac
6697   
6698              + 0.5
6699              * sum ((timeModelSel, link_types),
6700                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6701                  * timeLength(timeModelSel)
6702                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6703                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6704                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6705   
6706                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6707                  * timeLength(timeModelSel)
6708                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6709                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6710                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6711                  / timefrac
6712              )
6713          )
6714      )
6715   
6716   
6717  * == sources / sinks ==
6718      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6719              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6720                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6721          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6722          *
6723          sum ((timeModelSel,sourcesink_techs,commodity)
6724                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6725              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6726              * timeLength(timeModelSel)
6727              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6728          / timefrac
6729      )
6730      =e=
6731      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6732   
6733  * // ### Accounting Indicator Calculation
6734  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6735  * // {Eq_accounting_indicatorCalc_upper}
6736  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
6737      $(activeIndicators(accNodesModel,accYears,indicator)
6738          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6739          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6740      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6742  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6743  * SPDX-License-Identifier: BSD-3-Clause
6744   
6745  * == variable indicators ==
6746      sum((accNodesModel_a,accYears_a,indicator_a)
6747          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6748              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6749          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6750          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6751          )
6752   
6753  * == converters ==
6754      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6755              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6756                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6757          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6758          *
6759          ( sum ((converter_techs,vintage)
6760                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6761                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6762              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6763              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6764              )
6765   
6766          + sum ((years_a,converter_techs,vintage)
6767                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6768                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6769                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6770                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6771                          and years_a.val <= yearsSel.val ),
6772              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6773              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6774              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6775              )
6776   
6777          + sum ((yearsToCalc,converter_techs,vintage)
6778                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6779                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6780                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6781                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6782                          and yearsToCalc.val <= yearsSel.val ),
6783              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6784              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6785              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6786              )
6787   
6788          + sum ((converter_techs,vintage)
6789                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6790                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6791              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6792              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6793   
6794          + sum ((converter_techs,vintage)
6795                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6796              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6797              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6798   
6799          + sum ((timeModelSel,converter_techs,vintage,activity)
6800                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6801              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6802              * timeLength(timeModelSel)
6803              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6804          / timefrac
6805   
6806          + sum ((timeModelSel,converter_techs,vintage)
6807                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6808              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6809              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6810          / timefrac
6811   
6812          + sum ((timeModelSel,converter_techs,vintage)
6813                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6814              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6815              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6816                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6817   
6818              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6819              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6820                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6821          / timefrac
6822          )
6823      )
6824   
6825  * == storage ==
6826      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6827              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6828                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6829          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6830          *
6831          ( sum ((storage_techs,vintage)
6832                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6833                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6834              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6835              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6836              )
6837   
6838          + sum ((years_a,storage_techs,vintage)
6839                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6840                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6841                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6842                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6843                          and years_a.val <= yearsSel.val ),
6844              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6845              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6846              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6847              )
6848   
6849          + sum ((yearsToCalc,storage_techs,vintage)
6850                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6851                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6852                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6853                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6854                          and yearsToCalc.val <= yearsSel.val ),
6855              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6856              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6857              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6858              )
6859   
6860          + sum ((storage_techs,vintage)
6861                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6862                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6863              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6864              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6865   
6866          + sum ((storage_techs,vintage)
6867                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6868              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6869              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6870          )
6871      )
6872   
6873   
6874  * == transfer ==
6875      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6876              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6877                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6878          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6879          *
6880          ( sum ((linksModelToCalc,transfer_techs,vintage)
6881                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6882                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6883                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6884              0.5
6885              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6886              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6887   
6888          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6889                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6890                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6891                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6892                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6893                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6894                          and years_a.val <= yearsSel.val ),
6895              0.5
6896              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6897              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6898              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6899   
6900          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6901                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6902                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6903                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6904                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6905                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6906                          and yearsToCalc.val <= yearsSel.val ),
6907              0.5
6908              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6909              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6910              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6911   
6912          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6913                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6914                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6915                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6916              0.5
6917              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6918              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6919              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6920   
6921          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6922                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6923                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6924                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6925                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6926                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6927                          and years_a.val <= yearsSel.val ),
6928              0.5
6929              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6930              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6931              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6932              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6933   
6934          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6935                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6936                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6937                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6938                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6939                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6940                          and yearsToCalc.val <= yearsSel.val ),
6941              0.5
6942              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6943              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6944              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6945              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6946   
6947          + sum ((linksModelToCalc,transfer_techs,vintage)
6948                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6949                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6950                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6951              0.5
6952              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6953              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6954   
6955              + 0.5
6956              * sum (link_types,
6957                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6958                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6959                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6960              ) )
6961   
6962          + sum ((linksModelToCalc,transfer_techs,vintage)
6963                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6964                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6965              0.5
6966              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6967              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6968   
6969              + 0.5
6970              * sum (link_types,
6971                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6972                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6973                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6974   
6975              + 0.5
6976              * sum (timeModelSel,
6977                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6978                  * timeLength(timeModelSel)
6979                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6980                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6981   
6982                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6983                  * timeLength(timeModelSel)
6984                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6985                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6986                  / timefrac
6987   
6988              + 0.5
6989              * sum ((timeModelSel, link_types),
6990                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6991                  * timeLength(timeModelSel)
6992                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6993                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6994                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6995   
6996                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6997                  * timeLength(timeModelSel)
6998                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6999                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7000                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7001                  / timefrac
7002              )
7003          )
7004      )
7005   
7006   
7007  * == sources / sinks ==
7008      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7009              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7010                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7011          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7012          *
7013          sum ((timeModelSel,sourcesink_techs,commodity)
7014                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7015              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7016              * timeLength(timeModelSel)
7017              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7018          / timefrac
7019      )
7020      =l=
7021      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7022   
7023  * // ### Accounting Indicator Calculation
7024  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7025  * // {Eq_accounting_indicatorCalc_lower}
7026  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
7027      $(activeIndicators(accNodesModel,accYears,indicator)
7028          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7029          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7030      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7032  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7033  * SPDX-License-Identifier: BSD-3-Clause
7034   
7035  * == variable indicators ==
7036      sum((accNodesModel_a,accYears_a,indicator_a)
7037          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7038              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7039          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7040          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7041          )
7042   
7043  * == converters ==
7044      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7045              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7046                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7047          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7048          *
7049          ( sum ((converter_techs,vintage)
7050                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7051                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7052              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7053              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7054              )
7055   
7056          + sum ((years_a,converter_techs,vintage)
7057                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7058                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7059                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7060                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7061                          and years_a.val <= yearsSel.val ),
7062              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7063              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7064              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7065              )
7066   
7067          + sum ((yearsToCalc,converter_techs,vintage)
7068                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7069                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7070                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7071                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7072                          and yearsToCalc.val <= yearsSel.val ),
7073              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7074              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7075              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7076              )
7077   
7078          + sum ((converter_techs,vintage)
7079                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7080                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7081              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7082              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7083   
7084          + sum ((converter_techs,vintage)
7085                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7086              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7087              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7088   
7089          + sum ((timeModelSel,converter_techs,vintage,activity)
7090                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7091              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7092              * timeLength(timeModelSel)
7093              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7094          / timefrac
7095   
7096          + sum ((timeModelSel,converter_techs,vintage)
7097                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7098              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7099              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7100          / timefrac
7101   
7102          + sum ((timeModelSel,converter_techs,vintage)
7103                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7104              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7105              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7106                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7107   
7108              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7109              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7110                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7111          / timefrac
7112          )
7113      )
7114   
7115  * == storage ==
7116      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7117              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7118                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7119          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7120          *
7121          ( sum ((storage_techs,vintage)
7122                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7123                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7124              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7125              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7126              )
7127   
7128          + sum ((years_a,storage_techs,vintage)
7129                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7130                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7131                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7132                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7133                          and years_a.val <= yearsSel.val ),
7134              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7135              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7136              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7137              )
7138   
7139          + sum ((yearsToCalc,storage_techs,vintage)
7140                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7141                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7142                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7143                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7144                          and yearsToCalc.val <= yearsSel.val ),
7145              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7146              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7147              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7148              )
7149   
7150          + sum ((storage_techs,vintage)
7151                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7152                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7153              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7154              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7155   
7156          + sum ((storage_techs,vintage)
7157                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7158              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7159              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7160          )
7161      )
7162   
7163   
7164  * == transfer ==
7165      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7166              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7167                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7168          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7169          *
7170          ( sum ((linksModelToCalc,transfer_techs,vintage)
7171                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7172                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7173                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7174              0.5
7175              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7176              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7177   
7178          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7179                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7180                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7181                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7182                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7183                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7184                          and years_a.val <= yearsSel.val ),
7185              0.5
7186              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7187              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7188              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7189   
7190          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7191                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7192                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7193                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7194                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7195                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7196                          and yearsToCalc.val <= yearsSel.val ),
7197              0.5
7198              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7199              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7200              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7201   
7202          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7203                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7204                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7205                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7206              0.5
7207              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7208              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7209              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7210   
7211          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7212                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7213                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7214                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7215                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7216                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7217                          and years_a.val <= yearsSel.val ),
7218              0.5
7219              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7220              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7221              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7222              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7223   
7224          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7225                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7226                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7227                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7228                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7229                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7230                          and yearsToCalc.val <= yearsSel.val ),
7231              0.5
7232              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7233              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7234              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7235              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7236   
7237          + sum ((linksModelToCalc,transfer_techs,vintage)
7238                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7239                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7240                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7241              0.5
7242              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7243              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7244   
7245              + 0.5
7246              * sum (link_types,
7247                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7248                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7249                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7250              ) )
7251   
7252          + sum ((linksModelToCalc,transfer_techs,vintage)
7253                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7254                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7255              0.5
7256              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7257              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7258   
7259              + 0.5
7260              * sum (link_types,
7261                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7262                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7263                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7264   
7265              + 0.5
7266              * sum (timeModelSel,
7267                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7268                  * timeLength(timeModelSel)
7269                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7270                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7271   
7272                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7273                  * timeLength(timeModelSel)
7274                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7275                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7276                  / timefrac
7277   
7278              + 0.5
7279              * sum ((timeModelSel, link_types),
7280                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7281                  * timeLength(timeModelSel)
7282                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7283                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7284                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7285   
7286                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7287                  * timeLength(timeModelSel)
7288                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7289                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7290                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7291                  / timefrac
7292              )
7293          )
7294      )
7295   
7296   
7297  * == sources / sinks ==
7298      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7299              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7300                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7301          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7302          *
7303          sum ((timeModelSel,sourcesink_techs,commodity)
7304                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7305              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7306              * timeLength(timeModelSel)
7307              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7308          / timefrac
7309      )
7310      =g=
7311      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7312   
7313   
7314  * // ### Accounting Indicator Calculation Links
7315  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7316  * // {Eq_accounting_indicatorCalc_links_fixed}
7317  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
7318      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7319          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7320      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7322  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7323  * SPDX-License-Identifier: BSD-3-Clause
7324   
7325      sum ((transfer_techs,vintage)
7326                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7327                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7328          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7329          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7330   
7331      + sum ((years_a,transfer_techs,vintage)
7332                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7333                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7334                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7335                      and years_a.val <= yearsSel.val ),
7336          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7337          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7338          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7339   
7340      + sum ((transfer_techs,vintage,link_types)
7341                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7342                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7343          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7344          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7345          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7346   
7347      + sum ((years_a,transfer_techs,vintage,link_types)
7348                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7349                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7350                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7351                      and years_a.val <= yearsSel.val ),
7352          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7353          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7354          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7355          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7356   
7357      + sum ((transfer_techs,vintage)
7358                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7359                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7360          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7361          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7362   
7363          + sum (link_types,
7364              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7365              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7366              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7367          ) )
7368   
7369      + sum ((transfer_techs,vintage)
7370                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7371          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7372          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7373   
7374          + sum (link_types,
7375              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7376              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7377              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7378   
7379          + sum (timeModelSel,
7380              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7381              * timeLength(timeModelSel)
7382              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7383                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7384   
7385              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7386              * timeLength(timeModelSel)
7387              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7388                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7389              / timefrac
7390   
7391          + sum ((timeModelSel, link_types),
7392              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7393              * timeLength(timeModelSel)
7394              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7395              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7396                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7397   
7398              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7399              * timeLength(timeModelSel)
7400              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7401              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7402                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7403              / timefrac
7404          )
7405      =e=
7406  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
7407   
7408  * // ### Accounting Indicator Calculation Links
7409  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7410  * // {Eq_accounting_indicatorCalc_links_upper}
7411  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
7412      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7413          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
7414          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7415      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7417  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7418  * SPDX-License-Identifier: BSD-3-Clause
7419   
7420      sum ((transfer_techs,vintage)
7421                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7422                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7423          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7424          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7425   
7426      + sum ((years_a,transfer_techs,vintage)
7427                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7428                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7429                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7430                      and years_a.val <= yearsSel.val ),
7431          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7432          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7433          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7434   
7435      + sum ((transfer_techs,vintage,link_types)
7436                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7437                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7438          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7439          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7440          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7441   
7442      + sum ((years_a,transfer_techs,vintage,link_types)
7443                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7444                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7445                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7446                      and years_a.val <= yearsSel.val ),
7447          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7448          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7449          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7450          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7451   
7452      + sum ((transfer_techs,vintage)
7453                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7454                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7455          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7456          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7457   
7458          + sum (link_types,
7459              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7460              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7461              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7462          ) )
7463   
7464      + sum ((transfer_techs,vintage)
7465                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7466          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7467          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7468   
7469          + sum (link_types,
7470              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7471              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7472              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7473   
7474          + sum (timeModelSel,
7475              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7476              * timeLength(timeModelSel)
7477              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7478                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7479   
7480              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7481              * timeLength(timeModelSel)
7482              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7483                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7484              / timefrac
7485   
7486          + sum ((timeModelSel, link_types),
7487              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7488              * timeLength(timeModelSel)
7489              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7490              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7491                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7492   
7493              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7494              * timeLength(timeModelSel)
7495              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7496              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7497                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7498              / timefrac
7499          )
7500      =l=
7501  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
7502   
7503  * // ### Accounting Indicator Calculation Links
7504  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7505  * // {Eq_accounting_indicatorCalc_links_lower}
7506  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
7507      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7508          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
7509          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7510      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7512  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7513  * SPDX-License-Identifier: BSD-3-Clause
7514   
7515      sum ((transfer_techs,vintage)
7516                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7517                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7518          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7519          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7520   
7521      + sum ((years_a,transfer_techs,vintage)
7522                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7523                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7524                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7525                      and years_a.val <= yearsSel.val ),
7526          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7527          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7528          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7529   
7530      + sum ((transfer_techs,vintage,link_types)
7531                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7532                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7533          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7534          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7535          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7536   
7537      + sum ((years_a,transfer_techs,vintage,link_types)
7538                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7539                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7540                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7541                      and years_a.val <= yearsSel.val ),
7542          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7543          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7544          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7545          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7546   
7547      + sum ((transfer_techs,vintage)
7548                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7549                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7550          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7551          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7552   
7553          + sum (link_types,
7554              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7555              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7556              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7557          ) )
7558   
7559      + sum ((transfer_techs,vintage)
7560                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7561          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7562          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7563   
7564          + sum (link_types,
7565              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7566              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7567              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7568   
7569          + sum (timeModelSel,
7570              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7571              * timeLength(timeModelSel)
7572              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7573                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7574   
7575              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7576              * timeLength(timeModelSel)
7577              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7578                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7579              / timefrac
7580   
7581          + sum ((timeModelSel, link_types),
7582              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7583              * timeLength(timeModelSel)
7584              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7585              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7586                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7587   
7588              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7589              * timeLength(timeModelSel)
7590              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7591              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7592                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7593              / timefrac
7594          )
7595      =g=
7596  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
7597   
7598   
7599  * // ### Accounting Objective
7600  * // Calculates the indicators for the objective.
7601  * // {Eq_accounting_objective}
7602  Eq_accounting_objective
7603      ..
7604      accounting_objective
7605      =e=
7606      sum ((accNodesModel,accYears,indicator)
7607              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7608          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
7609          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7611  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7612  * SPDX-License-Identifier: BSD-3-Clause
7613   
7614  * == variable indicators ==
7615      sum((accNodesModel_a,accYears_a,indicator_a)
7616          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7617              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7618          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7619          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7620          )
7621   
7622  * == converters ==
7623      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7624              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7625                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7626          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7627          *
7628          ( sum ((converter_techs,vintage)
7629                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7630                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7631              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7632              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7633              )
7634   
7635          + sum ((years_a,converter_techs,vintage)
7636                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7637                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7638                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7639                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7640                          and years_a.val <= yearsSel.val ),
7641              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7642              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7643              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7644              )
7645   
7646          + sum ((yearsToCalc,converter_techs,vintage)
7647                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7648                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7649                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7650                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7651                          and yearsToCalc.val <= yearsSel.val ),
7652              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7653              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7654              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7655              )
7656   
7657          + sum ((converter_techs,vintage)
7658                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7659                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7660              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7661              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7662   
7663          + sum ((converter_techs,vintage)
7664                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7665              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7666              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7667   
7668          + sum ((timeModelSel,converter_techs,vintage,activity)
7669                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7670              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7671              * timeLength(timeModelSel)
7672              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7673          / timefrac
7674   
7675          + sum ((timeModelSel,converter_techs,vintage)
7676                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7677              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7678              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7679          / timefrac
7680   
7681          + sum ((timeModelSel,converter_techs,vintage)
7682                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7683              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7684              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7685                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7686   
7687              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7688              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7689                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7690          / timefrac
7691          )
7692      )
7693   
7694  * == storage ==
7695      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7696              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7697                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7698          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7699          *
7700          ( sum ((storage_techs,vintage)
7701                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7702                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7703              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7704              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7705              )
7706   
7707          + sum ((years_a,storage_techs,vintage)
7708                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7709                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7710                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7711                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7712                          and years_a.val <= yearsSel.val ),
7713              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7714              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7715              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7716              )
7717   
7718          + sum ((yearsToCalc,storage_techs,vintage)
7719                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7720                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7721                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7722                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7723                          and yearsToCalc.val <= yearsSel.val ),
7724              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7725              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7726              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7727              )
7728   
7729          + sum ((storage_techs,vintage)
7730                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7731                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7732              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7733              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7734   
7735          + sum ((storage_techs,vintage)
7736                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7737              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7738              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7739          )
7740      )
7741   
7742   
7743  * == transfer ==
7744      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7745              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7746                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7747          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7748          *
7749          ( sum ((linksModelToCalc,transfer_techs,vintage)
7750                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7751                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7752                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7753              0.5
7754              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7755              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7756   
7757          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7758                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7759                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7760                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7761                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7762                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7763                          and years_a.val <= yearsSel.val ),
7764              0.5
7765              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7766              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7767              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7768   
7769          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7770                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7771                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7772                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7773                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7774                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7775                          and yearsToCalc.val <= yearsSel.val ),
7776              0.5
7777              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7778              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7779              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7780   
7781          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7782                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7783                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7784                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7785              0.5
7786              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7787              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7788              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7789   
7790          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7791                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7792                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7793                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7794                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7795                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7796                          and years_a.val <= yearsSel.val ),
7797              0.5
7798              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7799              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7800              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7801              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7802   
7803          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7804                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7805                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7806                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7807                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7808                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7809                          and yearsToCalc.val <= yearsSel.val ),
7810              0.5
7811              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7812              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7813              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7814              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7815   
7816          + sum ((linksModelToCalc,transfer_techs,vintage)
7817                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7818                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7819                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7820              0.5
7821              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7822              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7823   
7824              + 0.5
7825              * sum (link_types,
7826                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7827                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7828                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7829              ) )
7830   
7831          + sum ((linksModelToCalc,transfer_techs,vintage)
7832                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7833                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7834              0.5
7835              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7836              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7837   
7838              + 0.5
7839              * sum (link_types,
7840                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7841                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7842                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7843   
7844              + 0.5
7845              * sum (timeModelSel,
7846                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7847                  * timeLength(timeModelSel)
7848                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7849                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7850   
7851                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7852                  * timeLength(timeModelSel)
7853                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7854                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7855                  / timefrac
7856   
7857              + 0.5
7858              * sum ((timeModelSel, link_types),
7859                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7860                  * timeLength(timeModelSel)
7861                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7862                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7863                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7864   
7865                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7866                  * timeLength(timeModelSel)
7867                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7868                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7869                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7870                  / timefrac
7871              )
7872          )
7873      )
7874   
7875   
7876  * == sources / sinks ==
7877      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7878              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7879                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7880          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7881          *
7882          sum ((timeModelSel,sourcesink_techs,commodity)
7883                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7884              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7885              * timeLength(timeModelSel)
7886              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7887          / timefrac
7888      )
7889      )
7890   
7891   
7892  * ==== model definition ====
7893   
7894  Model M_accounting
7895  /
7896  Eq_accounting_indicatorCalc_fixed
7897  Eq_accounting_indicatorCalc_upper
7898  Eq_accounting_indicatorCalc_lower
7899  Eq_accounting_indicatorCalc_links_fixed
7900  Eq_accounting_indicatorCalc_links_upper
7901  Eq_accounting_indicatorCalc_links_lower
7902  Eq_accounting_objective
7903  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
7905  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7906  * SPDX-License-Identifier: BSD-3-Clause
7907   
7908  * ==== optimization frames ====
7910   
7911  * mapping from optimization frame to years
7913  set optiframe / of1 * of1 /;
7914  set optiframeToCalc(optiframe);
7915   
7917  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7919   
7921   
7922  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
7924  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7925  * SPDX-License-Identifier: BSD-3-Clause
7926   
7927  * ==== Overview of model dimensions ====
7928  parameters  acts(converter_techs) "active technologies"
7929              asts(storage_techs) "active storage technologies"
7930              atts(transfer_techs) "active transfer technologies"
7931   
7932  scalars nd "number of dispatch time steps per year"
7933          nn "number of network nodes"
7934          nl "number of network links"
7935          nt "number of converter, storage and transfer technologies"
7936          nc "number of commodities"
7937          ny "number of years of the capacity planning horizon";
7938   
7939  option acts < converter_availTech;
7940  option asts < storage_availTech;
7941  option atts < transfer_availTech;
7942   
7943  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
7944  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
7945  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
7946  nt = sum (storage_techs $asts(storage_techs), 1)
7947      + sum (converter_techs $acts(converter_techs), 1)
7948      + sum (transfer_techs $atts(transfer_techs), 1);
7949  nc = card(commodity);
7950  ny = sum (years $yearsToCalc(years), 1);
7951   
7952  file props / '' /;
7953  put props;
7954  put "### Model properties  ###" /;
7955  put "Number of active dispatch time steps per year: " nd:0:0  /;
7956  put "Number of active network nodes: " nn:0:0  /;
7957  put "Number of active network links: " nl:0:0  /;
7958  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
7959  put "Number of commodities: " nc:0:0  /;
7960  put "Number of years considered for capacity expansion: " ny:0:0  /;
7961  putclose;
7962   
7963  Model remix /
7964    M_converter
7965    M_storage
7966    M_transfer
7967    M_sourcesink
7968    M_balance
7969    M_accounting
7970  /;
7971   
7975   
7976  * ==== include methods  ====
7979   
7980  * check if the method is valid
7985   
7986   
7987  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
7989  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7990  * SPDX-License-Identifier: BSD-3-Clause
7991   
7994   
7997   
7998  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
8000  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8001  * SPDX-License-Identifier: BSD-3-Clause
8002   
8006   
8007  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
8009  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8010  * SPDX-License-Identifier: BSD-3-Clause
8011   
8015   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
8017  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8018  * SPDX-License-Identifier: BSD-3-Clause
8019   
8021   
8023   
8024  * ==== GAMS solver options ====
8030   
8031  * ==== REMix debug options ====
8035   
8036  * ==== REMix solver defaults ====
8044   
8052   
8062   
8070   
8079   
8080   
8081  * ==== setup optimization ====
8082  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8083     option limRow=0, limCol=0, solPrint=off;
8084  else
8085     option limRow=100000, limCol=100000, solPrint=on;
8086  );
8087   
8088   
8089  * ==== Solver specific default values ====
8090   
8110   
8111   
8113   
8114   
8116   
8117  option mip = cplex;
8118  option reslim = 1209600;
8119  option optcr = 1e-3;
8120  remix.threads = 8;
8121  remix.optFile = 1;
8122  remix.solveLink = 0;
8123  remix.holdFixed = 1;
8124   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8127  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8128  * SPDX-License-Identifier: BSD-3-Clause
8129   
8131   
8133  file opt / "cplex.opt" /;
8134  put opt;
8135  put "names no" /;
8136  put "rerun no" /;
8137   
8138  put "lpmethod 4" /;
8139  put "threads 8" /;
8140  put "barorder 3" /;
8141   
8143  put "scaind 0" /;
8144  put "predual -1" /;
8145   
8148  put "barepcomp 1e-6" /;
8150  put "solutiontype 2" /;
8151  put "epgap 1e-3" /;
8152   
8154  put "iis 0" /;
8155  put "quality 1" /;
8156   
8159  putclose;
8161   
8162   
8164   
8165   
8167   
8168   
8170   
8171   
8173   
8174   
8176   
8177   
8179   
8180   
8182   
8184   
8185   
8186  * ==== solve the problem ====
8187   
8188  loop ( optiframeToCalc,
8189      yearsSel(years) = no;
8190      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8191      yearsToFix(years) = no;
8192      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8193      accYearsSel(accYears) = no;
8194      accYearsSel("horizon") = yes;
8195      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8196      accYearsToFix(accYears) = no;
8197      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8198      timeModelSel(timeModel) = no;
8199      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8200      nodesModelSel(nodesModel) = no;
8201      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8202   
8203  * Fix decision for years previously optimized in case of myopic or foresight
8204      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8205          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8206          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8207              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8208      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8209          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8210   
8211      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8212          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8213          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8214              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8215      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8216          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8217   
8218      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8219          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8220              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8221                  sum(years$sameas(years, yearsToCalc),
8222                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8223                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8224              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8225                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
8226                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
8227      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8228          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
8229   
8230      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8231          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8232          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8233              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8234   
8235      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8236          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8237          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8238              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
8239   
8240      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8241          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8242      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8243          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8244      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8245          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8246      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8247          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8248      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8249          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8250   
8251   
8252      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8253          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8254          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8255              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8256      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8257          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8258   
8259      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8260          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8261          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8262              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8263      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8264          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8265   
8266      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8267          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
8268              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8269                  sum(years$sameas(years, yearsToCalc),
8270                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
8271                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
8272              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8273                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
8274                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
8275      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8276          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
8277   
8278      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8279          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8280          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8281              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
8282   
8283      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8284          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8285          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8286              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
8287   
8288      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8289          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8290      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8291          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8292      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8293          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8294      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8295          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8296      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8297          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8298   
8299   
8300      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8301          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8302          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8303              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8304      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8305          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8306   
8307      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8308          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8309          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
8310              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
8311      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8312          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8313   
8314      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8315          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
8316              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8317                  sum(years$sameas(years, yearsToCalc),
8318                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
8319                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
8320              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8321                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
8322                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
8323      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8324          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
8325   
8326      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8327          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8328          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8329              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8330   
8331      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8332          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8333          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8334              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8335   
8336      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8337          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8338      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8339          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8340      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8341          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8342      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8343          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8344      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8345          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8346   
8347      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8348          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8349   
8350  * Optimize and log values
8351      solve remix minimizing accounting_objective using mip;
8352      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8353      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8354   
8355  );
8356   
8360   
8361  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
8363  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8364  * SPDX-License-Identifier: BSD-3-Clause
8365   
8369   
8370  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
8372  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8373  * SPDX-License-Identifier: BSD-3-Clause
8374   
8378   
8379  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
8381  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8382  * SPDX-License-Identifier: BSD-3-Clause
8383   
8387   
8388  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
8390  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8391  * SPDX-License-Identifier: BSD-3-Clause
8392   
8395   
8396  * ==== indicator accounting ====
8397   
8398  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8399      =
8400  * == converters ==
8401      sum ((converter_techs(techs),vintage)
8402                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8403                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
8404          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8405          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
8406   
8407      + sum ((years_a,converter_techs(techs),vintage)
8408                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8409                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
8410                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
8411                      and years_a.val <= yearsToCalc.val ),
8412          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8413          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
8414          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
8415   
8416      + sum ((converter_techs(techs),vintage)
8417                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8418                      and converter_techParam(converter_techs,vintage,"freeDecom")),
8419          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8420          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
8421   
8422      + sum ((converter_techs(techs),vintage)
8423                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8424          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8425          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
8426   
8427      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8428                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8429          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8430          * timeLength(timeModelToCalc)
8431          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
8432          / timefrac
8433   
8434      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8435                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8436          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8437          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
8438          / timefrac
8439   
8440      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8441                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8442          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8443          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8444              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
8445   
8446          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8447          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8448              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
8449          / timefrac
8450   
8451  * == storage ==
8452      + sum ((storage_techs(techs),vintage)
8453                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8454                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
8455          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8456          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
8457   
8458      + sum ((years_a,storage_techs(techs),vintage)
8459                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8460                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
8461                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
8462                      and years_a.val <= yearsToCalc.val ),
8463          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8464          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
8465          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
8466   
8467      + sum ((storage_techs(techs),vintage)
8468                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8469                      and storage_techParam(storage_techs,vintage,"freeDecom")),
8470          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8471          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
8472   
8473      + sum ((storage_techs(techs),vintage)
8474                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8475          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8476          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
8477   
8478  * == transfer ==
8479      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8480                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8481                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8482                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8483          0.5
8484          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8485          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8486   
8487      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
8488                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8489                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8490                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
8491                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8492                      and years_a.val <= yearsToCalc.val ),
8493          0.5
8494          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8495          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
8496          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
8497   
8498      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
8499                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8500                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8501                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8502          0.5
8503          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8504          * transfer_lengthParam(linksModel,link_types,"length")
8505          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8506   
8507      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
8508                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8509                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8510                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8511                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8512                      and years_a.val <= yearsToCalc.val ),
8513          0.5
8514          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8515          * transfer_lengthParam(linksModel,link_types,"length")
8516          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8517          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
8518   
8519      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8520                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
8521                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8522                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8523          0.5
8524          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8525          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8526   
8527          + 0.5
8528          * sum (link_types,
8529              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8530              * transfer_lengthParam(linksModel,link_types,"length")
8531              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8532          ) )
8533   
8534   
8535      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8536                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8537                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8538          + 0.5
8539          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8540          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8541   
8542          + 0.5
8543          * sum (link_types,
8544              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8545              * transfer_lengthParam(linksModel,link_types,"length")
8546              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8547   
8548          + 0.5
8549          * sum (timeModelToCalc,
8550              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8551              * timeLength(timeModelToCalc)
8552              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8553                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8554   
8555              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8556              * timeLength(timeModelToCalc)
8557              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8558                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8559              / timefrac
8560   
8561          + 0.5
8562          * sum ((timeModelToCalc, link_types),
8563              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8564              * timeLength(timeModelToCalc)
8565              * transfer_lengthParam(linksModel,link_types,"length")
8566              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8567                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8568   
8569              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8570              * timeLength(timeModelToCalc)
8571              * transfer_lengthParam(linksModel,link_types,"length")
8572              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8573                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8574              / timefrac
8575          )
8576   
8577   
8578  * == sources / sinks ==
8579      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8580              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8581          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8582          * timeLength(timeModelToCalc)
8583          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8584      / timefrac
8585      ;
8586   
8587   
8588  * ==== full set of main indicators ====
8589   
8590  indicator_accounting(accNodesModel,accYears,indicator)
8591      $sum((accNodesModel_a,accYears_a,indicator_a)
8592              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8593      =
8594      + sum((accNodesModel_a,accYears_a,indicator_a)
8595              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8596                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8597          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8598          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8599   
8600      + sum((accNodesModel_a,accYears_a,indicator_a)
8601              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8602          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8603          * (sum((nodesModelToCalc,yearsToCalc,techs)
8604                  $(sameas(accNodesModel_a, nodesModelToCalc)
8605                      and sameas(accYears_a, yearsToCalc)),
8606                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8607      ;
8608   
8609  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8610      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8611      =
8612          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8613          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8614              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8615   
8616          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8617          * (sum((nodesModelToCalc,yearsToCalc,techs)
8618                  $(sameas(accNodesModel_a, nodesModelToCalc)
8619                      and sameas(accYears_a, yearsToCalc)),
8620                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8621      ;
8622   
8623  indicator_accounting_var(accNodesModel,accYears,indicator)
8624      $accounting_indicator.l(accNodesModel,accYears,indicator)
8625      = accounting_indicator.l(accNodesModel,accYears,indicator);
8626   
8627  indicator_accounting_ref(accNodesModel,accYears,indicator)
8628      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8631  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8632  * SPDX-License-Identifier: BSD-3-Clause
8633   
8634  * == variable indicators ==
8635      sum((accNodesModel_a,accYears_a,indicator_a)
8636          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8637              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8638          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8639          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8640          )
8641   
8642  * == converters ==
8643      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8644              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8645                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8646          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8647          *
8648          ( sum ((converter_techs,vintage)
8649                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8650                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8651              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8652              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8653              )
8654   
8655          + sum ((years_a,converter_techs,vintage)
8656                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8657                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8658                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8659                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8660                          and years_a.val <= yearsSel.val ),
8661              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8662              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8663              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8664              )
8665   
8666          + sum ((yearsToCalc,converter_techs,vintage)
8667                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8668                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8669                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8670                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8671                          and yearsToCalc.val <= yearsSel.val ),
8672              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8673              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8674              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8675              )
8676   
8677          + sum ((converter_techs,vintage)
8678                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8679                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8680              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8681              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8682   
8683          + sum ((converter_techs,vintage)
8684                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8685              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8686              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8687   
8688          + sum ((timeModelSel,converter_techs,vintage,activity)
8689                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8690              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8691              * timeLength(timeModelSel)
8692              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8693          / timefrac
8694   
8695          + sum ((timeModelSel,converter_techs,vintage)
8696                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8697              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8698              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8699          / timefrac
8700   
8701          + sum ((timeModelSel,converter_techs,vintage)
8702                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8703              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8704              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8705                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8706   
8707              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8708              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8709                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8710          / timefrac
8711          )
8712      )
8713   
8714  * == storage ==
8715      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8716              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8717                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8718          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8719          *
8720          ( sum ((storage_techs,vintage)
8721                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8722                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8723              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8724              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8725              )
8726   
8727          + sum ((years_a,storage_techs,vintage)
8728                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8729                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8730                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8731                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8732                          and years_a.val <= yearsSel.val ),
8733              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8734              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8735              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8736              )
8737   
8738          + sum ((yearsToCalc,storage_techs,vintage)
8739                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8740                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8741                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8742                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8743                          and yearsToCalc.val <= yearsSel.val ),
8744              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8745              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8746              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8747              )
8748   
8749          + sum ((storage_techs,vintage)
8750                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8751                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8752              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8753              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8754   
8755          + sum ((storage_techs,vintage)
8756                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8757              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8758              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8759          )
8760      )
8761   
8762   
8763  * == transfer ==
8764      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8765              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8766                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8767          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8768          *
8769          ( sum ((linksModelToCalc,transfer_techs,vintage)
8770                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8771                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8772                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8773              0.5
8774              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8775              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8776   
8777          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8778                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8779                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8780                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8781                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8782                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8783                          and years_a.val <= yearsSel.val ),
8784              0.5
8785              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8786              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8787              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8788   
8789          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8790                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8791                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8792                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8793                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8794                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8795                          and yearsToCalc.val <= yearsSel.val ),
8796              0.5
8797              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8798              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8799              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8800   
8801          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8802                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8803                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8804                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8805              0.5
8806              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8807              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8808              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8809   
8810          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8811                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8812                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8813                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8814                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8815                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8816                          and years_a.val <= yearsSel.val ),
8817              0.5
8818              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8819              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8820              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8821              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8822   
8823          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8824                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8825                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8826                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8827                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8828                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8829                          and yearsToCalc.val <= yearsSel.val ),
8830              0.5
8831              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8832              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8833              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8834              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8835   
8836          + sum ((linksModelToCalc,transfer_techs,vintage)
8837                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8838                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8839                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8840              0.5
8841              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8842              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8843   
8844              + 0.5
8845              * sum (link_types,
8846                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8847                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8848                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8849              ) )
8850   
8851          + sum ((linksModelToCalc,transfer_techs,vintage)
8852                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8853                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8854              0.5
8855              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8856              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8857   
8858              + 0.5
8859              * sum (link_types,
8860                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8861                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8862                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8863   
8864              + 0.5
8865              * sum (timeModelSel,
8866                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8867                  * timeLength(timeModelSel)
8868                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8869                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8870   
8871                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8872                  * timeLength(timeModelSel)
8873                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8874                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8875                  / timefrac
8876   
8877              + 0.5
8878              * sum ((timeModelSel, link_types),
8879                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8880                  * timeLength(timeModelSel)
8881                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8882                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8883                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8884   
8885                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8886                  * timeLength(timeModelSel)
8887                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8888                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8889                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8890                  / timefrac
8891              )
8892          )
8893      )
8894   
8895   
8896  * == sources / sinks ==
8897      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8898              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8899                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8900          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8901          *
8902          sum ((timeModelSel,sourcesink_techs,commodity)
8903                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8904              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8905              * timeLength(timeModelSel)
8906              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8907          / timefrac
8908      )
8910  ;
8911   
8912   
8913  * ==== link-specific indicator accounting ====
8914   
8915  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8916      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8917          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8918      =
8919      sum ((transfer_techs(techs),vintage)
8920                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8921                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8922          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8923          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8924   
8925      + sum ((years_a,transfer_techs(techs),vintage)
8926                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8927                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8928                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8929                      and years_a.val <= yearsToCalc.val ),
8930          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8931          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8932          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8933   
8934      + sum ((transfer_techs(techs),vintage,link_types)
8935                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8936                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8937          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8938          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8939          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8940   
8941      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8942                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8943                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8944                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8945                      and years_a.val <= yearsToCalc.val ),
8946          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8947          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8948          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8949          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8950   
8951      + sum ((transfer_techs(techs),vintage)
8952                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8953          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8954          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8955   
8956          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8957          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8958   
8959          + sum (link_types,
8960              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8961              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8962              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8963   
8964              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8965              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8966              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8967   
8968          + sum (timeModelToCalc,
8969              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8970              * timeLength(timeModelToCalc)
8971              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8972                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8973   
8974              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8975              * timeLength(timeModelToCalc)
8976              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8977                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8978              / timefrac
8979   
8980          + sum ((timeModelToCalc, link_types),
8981              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8982              * timeLength(timeModelToCalc)
8983              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8984              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8985                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8986   
8987              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8988              * timeLength(timeModelToCalc)
8989              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8990              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8991                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8992              / timefrac
8993      );
8994   
8995   
8996  * == converter capacities ==
8997   
8998  converter_ratedInput(converter_techs,vintage,commodity)
8999      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9000      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9001              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9002  converter_ratedInput(converter_techs,vintage,commodity)
9003      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9004      = 0;
9005   
9006  converter_ratedOutput(converter_techs,vintage,commodity)
9007      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9008      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9009              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9010  converter_ratedOutput(converter_techs,vintage,commodity)
9011      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9012      = 0;
9013   
9014  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9015      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9016          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9017      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9018              and converter_ratedOutput(converter_techs,vintage,commodity)),
9019          converter_ratedOutput(converter_techs,vintage,commodity));
9020   
9021  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9022      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9023          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9024      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9025              and converter_ratedOutput(converter_techs,vintage,commodity)),
9026          converter_ratedOutput(converter_techs,vintage,commodity));
9027   
9028  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9029      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9030   
9031  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9032      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9033   
9034  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9035  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9036      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9037       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9038      = sum(years_a$
9039            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9040             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9041             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9042        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9043   
9044  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9045      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9046   
9047  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9048      $(converter_ratedOutput(converter_techs,vintage,commodity))
9049      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9050          * converter_ratedOutput(converter_techs,vintage,commodity);
9051   
9052  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9053      = sum(vintage,
9054          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9055  option clear = converter_caps_ext;
9056   
9057  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9058      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9059          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9060          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9061      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9062          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9063   
9064  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9065      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9066          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9067          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9068      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9069          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9070   
9071  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9072      = sum((nodesModelToCalc,years)
9073              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9074                  and map_accYearsPostCalc(accYears,years)),
9075          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9076  option clear = converter_caps_novintage_ext;
9077   
9078  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9079      = sum((nodesModelToCalc,years)
9080              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9081                  and map_accYearsPostCalc(accYears,years)),
9082          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9083  option clear = converter_units_ext;
9084   
9085  * ==== transfer capacities ====
9086   
9087  max_transfer_coefficient(transfer_techs(techs),commodity)
9088          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9089          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9090   
9091  min_transfer_coefficient(transfer_techs(techs),commodity)
9092          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9093          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9094   
9095  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9096      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9097          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9098          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9099      = yes;
9100   
9101  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9102      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9103   
9104  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9105      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9106   
9107  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9108  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9109      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9110       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9111      = sum(years_a$
9112            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9113             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9114             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9115        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9116   
9117  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9118      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9119   
9120  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9121      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9122          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9123                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9124      = sum(vintage,
9125          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9126          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9127   
9128  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9129      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9130          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9131          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9132                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9133      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9134          * min_transfer_coefficient(transfer_techs,commodity);
9135   
9136  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9137      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9138          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9139          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9140                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9141      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9142          * max_transfer_coefficient(transfer_techs,commodity);
9143   
9144   
9145  * ==== transfer flows ====
9146   
9147  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9148      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9149      = sum(vintage,
9150          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9151              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9152          * timeLength(timeModelToCalc)
9153          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9154   
9155  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9156      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9157      = sum(timeModelToCalc,
9158          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9159   
9160  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9161      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9162      = sum(timeModelToCalc
9163              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9164          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9165   
9166  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9167      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9168      = sum(timeModelToCalc
9169              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9170          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9171   
9172  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9173      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9174      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9175          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9176   
9177  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9178      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9179          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9180          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9181      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9182          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9183   
9184  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9185      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9186          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9187              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9188      = -1 * abs(sum(vintage,
9189          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9190              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9191          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9192              + sum(link_types,
9193                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9194                  * transfer_lengthParam(linksModel,link_types,"length")))))
9195          * timeLength(timeModelToCalc);
9196   
9197  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9198      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9199          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9200              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9201      = sum(timeModelToCalc,
9202          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9203   
9204   
9205  * ==== storage capacities ====
9206   
9207  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9208      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9209              and storage_usedCom(storage_techs,vintage,commodity)
9210              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9211      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9212              and storage_usedCom(storage_techs,vintage,commodity)
9213              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9214          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9215   
9216  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9217      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9218              and storage_usedCom(storage_techs,vintage,commodity)
9219              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9220      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9221              and storage_usedCom(storage_techs,vintage,commodity)
9222              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9223          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9224   
9225  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9226      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9227      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9228   
9229  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9230      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9231      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9232   
9233  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
9234  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9235      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
9236       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9237      = sum(years_a$
9238            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9239             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9240             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9241        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
9242   
9243  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9244      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9245   
9246  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9247      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9248      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9249          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9250   
9251  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
9252      = sum(vintage,
9253          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9254   
9255  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9256      $(storage_usedCom(storage_techs,vintage,commodity)
9257          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9258               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9259      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9260                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9261                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9262                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9263  option clear = storage_caps_ext;
9264   
9265  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
9266      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9267          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9268      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9269          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9270   
9271  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
9272      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9273          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9274      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9275          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9276   
9277  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9278      = sum((nodesModelToCalc,years)
9279              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9280                  and map_accYearsPostCalc(accYears,years)),
9281          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
9282  option clear = storage_caps_novintage_ext;
9283   
9284  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9285      = sum((nodesModelToCalc,years)
9286              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9287                  and map_accYearsPostCalc(accYears,years)),
9288          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9289  option clear = storage_units_ext;
9290   
9291   
9292  * ==== storage levels and flows ====
9293   
9294  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9295      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9296      =
9297      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9298      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9299          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9300      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9301          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9302      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9303          * storage_sizeParam(storage_techs,vintage,commodity,"size")
9304          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9305          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9306              and ord(timeModelToCalc)=1)
9308      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9309          * timeLength(timeModelToCalc)
9311      ;
9312   
9313  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9314      = sum((nodesModelToCalc,yearsToCalc,vintage)
9315              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9316          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9317  option clear = storage_flows_ext;
9318   
9319  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9320      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9321      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9322   
9323  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9324      = sum((nodesModelToCalc,yearsToCalc,vintage)
9325              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9326          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9327  option clear = storage_level_out_ext;
9328   
9329  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9330      = sum(timeModelToCalc,
9331          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9332   
9333  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9334      = sum(timeModelToCalc
9335              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9336          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9337   
9338  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9339      = sum(timeModelToCalc
9340              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9341          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9342   
9343  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
9344      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9345          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9346   
9347  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9348      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
9349          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9350      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
9351          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9352   
9353  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9354      = sum((nodesModelToCalc,yearsToCalc,vintage)
9355              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9356                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9357                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9358          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9359          * timeLength(timeModelToCalc));
9360   
9361  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9362      = sum(timeModelToCalc,
9363          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9364   
9365   
9366  * == commodity balance ==
9367   
9368  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9369      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9370          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9371      = sum((activity)
9372              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9373          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9374              * timeLength(timeModelToCalc)
9375              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9376          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9377              * timeLength(timeModelToCalc)
9378              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9379   
9380  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9381      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9382          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9383      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9384          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9385              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9386          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9387              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9388          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9389              * storage_sizeParam(storage_techs,vintage,commodity,"size")
9390              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9391              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9392                  and ord(timeModelToCalc)=1)
9393          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9394      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9395      * timeLength(timeModelToCalc);
9396   
9397  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9398      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9399          and sameas(yearsToCalc,vintage))
9400      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9401      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9402      * timeLength(timeModelToCalc);
9403   
9404  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9405      $sum((linksModel)
9406          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9407                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9408                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9409      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9410      + sum((linksModel)
9411              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9412                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9413                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9414   
9415  * incoming transfer flows
9416              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9417                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9418                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9419                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9420              * timeLength(timeModelToCalc)
9421              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9422   
9423  * outgoing transfer flows
9424              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9425                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9426                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9427                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9428              * timeLength(timeModelToCalc)
9429              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9430   
9431              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9432                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9433                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9434                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9435                      * timeLength(timeModelToCalc)
9436                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9437                          + sum(link_types,
9438                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9439                              * transfer_lengthParam(linksModel,link_types,"length")))))
9440      ;
9441   
9442  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9443      = sum((nodesModelToCalc,yearsToCalc,vintage)
9444              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9445                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9446                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9447          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9448  option clear = commodity_balance_ext;
9449   
9450   
9451  * ==== annual commodity sums ====
9452   
9453  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
9454      = sum(timeModelToCalc,
9455          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9456   
9457  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9458      = sum(timeModelToCalc
9459              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9460          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9461   
9462  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9463      = sum(timeModelToCalc
9464              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9465          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9466   
9467  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9468      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9469          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9470   
9471  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9472      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
9473          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9474      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9475          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9476   
9477   
9478  * ==== marginal information ====
9479   
9480  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9481    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9482    =
9483    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9484   
9485  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9486      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9487      =
9488      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9489   
9490  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9491      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9492          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9493          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9494      =
9495      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9496      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9497      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9498   
9499  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
9500  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9501      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
9502      =
9503      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9504          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
9505  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9506      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
9507      =
9508      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9509          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
9510  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9511      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
9512      =
9513      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9514          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
9517   
9518  * ==== R2A postcalc information ====
9519   
9521   
9522   
9523  * ==== round profiles to reduce size of gdx ====
9524   
9526  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9527      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9528      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9529   
9530  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9531      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9532      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9533   
9534  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9535      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9536      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9537   
9538  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9539      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9540      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9541   
9542  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9543      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9544      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9545   
9546  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9547      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9548      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9549   
9550  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9551      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9552      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9554   
9555  * ==== Dump diagnostics ====
9556   
9557  diagnostics("variables") = remix.numVar;
9558  diagnostics("equations") = remix.numEqu;
9559  diagnostics("iterations") = remix.iterUsd;
9560   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
9564  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9565  * SPDX-License-Identifier: BSD-3-Clause
9566   
9569   
9570  execute_unload "./results\PIC_trial_3.gdx"
9572      metadata
9574      timeModel
9575      timeModelToCalc
9576      nodesModel
9577      linksModel
9578      indicator
9579      commodity
9580      techs
9581      accNodesModel
9582      accYears
9583   
9584      map_nodesModel
9585      map_linksModel
9586      map_nodesAccounting
9587   
9588      indicator_accounting
9589      indicator_accounting_var
9590      indicator_accounting_ref
9591      indicator_accounting_comp
9592      indicator_accounting_detailed
9593      indicator_accounting_links
9594   
9595      converter_caps
9596      converter_units
9598   
9599      transfer_caps
9600      transfer_links
9601      transfer_flows
9602      transfer_flows_annual
9603      transfer_losses
9604      transfer_losses_annual
9605   
9606      storage_caps
9607      storage_units
9608      storage_flows
9609      storage_level_out
9610      storage_flows_annual
9611      storage_losses_out
9612      storage_losses_annual
9614   
9615      commodity_balance
9616      commodity_balance_annual
9617   
9618      marginals_balance
9619      marginals_sourcesink_profile
9620      marginals_sourcesink_sum
9621      marginals_indicator_bounds
9622   
9624      diagnostics
9625      ;
9628   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/20/25 11:28:14 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/20/25 11:28:14\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    55      412 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    56      420 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    57      422 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    58      430 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    59      432 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    60      450 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    61      452 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    62      461 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    63      461 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    64      467 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    65      476 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    66      476 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    67      482 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    68      491 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    69      491 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    70      506 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    71      506 INCLUDE       29     303  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    72      510 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    73      513 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    74      513 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    75      521 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    76      521 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    77      534 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    78      538 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    79      538 INCLUDE       29     319  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    80      540 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    81      545 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    82      546 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    83      550 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    84      550 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    85      554 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    86      564 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    87      566 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    88      575 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    89      577 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    90      593 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    91      595 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    92      609 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    93      720 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    94      722 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    95      787 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    96      789 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    97      842 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    98      874 IF EXIST      97      32  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
    99      874 INCLUDE       97      32  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   100      899 IF EXIST      97      34  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   101      913 IF EXIST      97      48  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   102      915 IF EXIST      97      50  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   103      932 IF EXIST      97      67  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   104      934 IF EXIST      97      69  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   105      953 IF EXIST      97      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   106      953 INCLUDE       97      88  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   107      958 IF EXIST      97      90  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   108      980 IF EXIST      97     112  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   109      982 IF EXIST      97     114  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   110     1004 IF EXIST      97     136  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   111     1006 IF EXIST      97     138  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   112     1021 IF EXIST      97     153  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   113     1021 INCLUDE       97     153  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   114     1038 IF EXIST      97     155  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   115     1052 IF EXIST      97     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   116     1052 INCLUDE       97     169  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   117     1058 IF EXIST      97     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   118     1084 IF EXIST      97     197  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   119     1084 INCLUDE       97     197  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   120     1088 IF EXIST      97     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   121     1107 IF EXIST      97     218  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   122     1109 IF EXIST      97     220  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   123     1115 BATINCLUDE    97     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1183 BATINCLUDE    97     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1235 BATINCLUDE    97     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1287 BATINCLUDE    97     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1355 BATINCLUDE    97     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   128     1423 BATINCLUDE    97     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   129     1491 BATINCLUDE    97     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   130     1951 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   131     2026 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   132     2033 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   133     2040 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   134     2057 IF DEXIST    133      17  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\results\
   135     2275 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   136     2288 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   137     2391 IF EXIST     136     103  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   138     2391 INCLUDE      136     103  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   139     2497 IF EXIST     136     105  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   140     2505 BATINCLUDE   136     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   141     2516 BATINCLUDE   136     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   142     2549 IF EXIST     136     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   143     2549 INCLUDE      136     137  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   144     2563 IF EXIST     136     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   145     2585 IF EXIST     136     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   146     2585 INCLUDE      136     161  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   147     2727 IF EXIST     136     162  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   148     2729 IF EXIST     136     164  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   149     2750 IF EXIST     136     185  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   150     2750 INCLUDE      136     185  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   151     2770 IF EXIST     136     186  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   152     2771 IF EXIST     136     187  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   153     2773 IF EXIST     136     189  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   154     2786 IF EXIST     136     202  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   155     2787 IF EXIST     136     203  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   156     2789 IF EXIST     136     205  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   157     3790 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   158     3883 IF EXIST     157      93  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   159     3883 INCLUDE      157      93  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   160     3900 IF EXIST     157      95  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   161     3904 BATINCLUDE   157      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   162     3915 BATINCLUDE   157     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   163     3926 BATINCLUDE   157     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   164     3962 IF EXIST     157     127  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   165     3962 INCLUDE      157     127  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   166     3966 IF EXIST     157     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   167     3987 IF EXIST     157     150  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   168     3987 INCLUDE      157     150  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   169     3991 IF EXIST     157     152  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   170     4008 IF EXIST     157     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   171     4010 IF EXIST     157     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   172     4029 IF EXIST     157     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   173     4031 IF EXIST     157     192  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   174     4060 IF EXIST     157     221  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   175     4061 IF EXIST     157     222  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   176     4063 IF EXIST     157     224  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   177     5000 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   178     5065 IF EXIST     177      71  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   179     5067 IF EXIST     177      73  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   180     5083 IF EXIST     177      89  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   181     5085 IF EXIST     177      91  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   182     5105 IF EXIST     177     111  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   183     5107 IF EXIST     177     113  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   184     5122 IF EXIST     177     128  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   185     5124 IF EXIST     177     130  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   186     5138 IF EXIST     177     144  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   187     5140 IF EXIST     177     146  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   188     5155 IF EXIST     177     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   189     5157 IF EXIST     177     163  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   190     5171 IF EXIST     177     177  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   191     5173 IF EXIST     177     179  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   192     5187 IF EXIST     177     193  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   193     5189 IF EXIST     177     195  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   194     5203 IF EXIST     177     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   195     5205 IF EXIST     177     211  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   196     5860 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   197     5898 IF EXIST     196      38  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   198     5898 INCLUDE      196      38  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   199     5943 IF EXIST     196      40  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   200     5947 BATINCLUDE   196      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   201     5975 IF EXIST     196      62  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   202     5975 INCLUDE      196      62  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   203     5991 IF EXIST     196      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   204     5992 IF EXIST     196      64  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   205     5994 IF EXIST     196      66  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   206     6014 IF EXIST     196      86  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   207     6014 INCLUDE      196      86  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   208     6045 IF EXIST     196      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   209     6048 BATINCLUDE   196      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   210     6236 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   211     6384 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   212     6451 INCLUDE      211      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     6741 INCLUDE      211      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   214     7031 INCLUDE      211      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   215     7321 INCLUDE      211     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   216     7416 INCLUDE      211     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   217     7511 INCLUDE      211     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   218     7610 INCLUDE      211     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   219     7904 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   220     7923 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   221     7988 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   222     7999 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   223     8008 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   224     8016 INCLUDE      223       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   225     8126 INCLUDE      223       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   226     8362 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   227     8371 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   228     8380 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   229     8389 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   230     8630 INCLUDE      229     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   231     9563 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       12.625 SECONDS     36 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/20/25 11:28:14 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8351


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.800E-04, 1.133E+04] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 5.357E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/20/25 11:28:14 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8351


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    2,369,629
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    2,246,973
NON ZERO ELEMENTS     6,039,974


GENERATION TIME      =       11.140 SECONDS  1,416 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       22.609 SECONDS  1,416 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/20/25 11:28:14 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8351


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8351

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              527.1574

 RESOURCE USAGE, LIMIT         86.609   1209600.000
 ITERATION COUNT, LIMIT       139    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 804.86 Mb (peak 822.00 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 69.98 Mb (peak 182.81 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 85.56sec (det. 78856.53 ticks)


Optimal solution found
Objective:          527.157426

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.087e-06   1.579e-06   1.087e-06   1.579e-06
dual infeasibility          1.428e-08   9.304e-04   1.428e-08   9.304e-04
primal residual             3.450e-11   4.073e-11   3.450e-11   4.073e-11
dual residual               9.469e-07   1.146e-02   9.469e-07   1.146e-02
primal solution vector      6.371e+00   1.071e+05   6.371e+00   1.071e+05
dual solution vector        4.909e+02   1.007e+05   4.909e+02   1.007e+05
slacks                      9.740e+03   8.360e+04   9.740e+03   8.360e+04
reduced costs               1.176e+01   3.511e+04   1.176e+01   3.511e+04
comp. slackness viol.       4.341e-07   5.619e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/20/25 11:28:14 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt


EXECUTION TIME       =       15.156 SECONDS  1,234 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\run_remix.lst
