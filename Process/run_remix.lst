GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 09/02/25 11:26:14 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "09/02/25 11:26:14"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "45b15142ca8cdff49b1f05ad170f23850c7090e6"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 823   
 824  map_accNodes(accNodesModel,accNodesModel_aggregation)
 825      $sum((nodesData, nodesModelToCalc)
 826              $( sameas(nodesModelToCalc,accNodesModel)
 827                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 828                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 829   
 830  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 831  map_accNodes(accNodesModel,accNodesModel) = yes;
 832  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 833  map_accLinks(accLinksModel,accLinksModel) = yes;
 834  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 835  map_accYears(accYears,accYears) = yes;
 836   
 837  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 838      $sum((nodesData)
 839              $( map_accNodesLoad(nodesData,accNodesModel)
 840                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 841   
 842  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 843  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 844  map_accLinksToCalc("global",linksModelToCalc) = yes;
 845  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 846  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 847  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 848   
 849  * Duplicate sets for postcalc reporting without horizon and accYears
 850  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 851  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 852  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 853  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 854   
 855  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 856  option map_nodesAccounting < map_accNodes;
 857   
 858  * ==== Generic sets  ====
 859  * These set names are repeated across different profile parameters.
 860  * they are not strictly related to each other and are not input data but
 861  * are needed for validation.
 862  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 863   
 864  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 865  * "Scenario indexes help to differentiate scenarios." /
 866   
 867  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 868  * "Capacity types differentiate investment decisions." /
 869   
 870  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 871  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 873  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 874  * SPDX-License-Identifier: BSD-3-Clause
 875   
 876  * // # accounting_input
 877  * // The parameters in this file describe the accounting of indicators in the model.
 878   
 879  * // ## Variables
 880  * // {special_table_input_variables}
1256   
1257  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1259  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1260  * SPDX-License-Identifier: BSD-3-Clause
1261   
1263   
1265   
1266  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1267  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1268      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1269      = yes;
1270   
1272  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1273  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1274      $sum((nodesData,accnodesData)
1275              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1276                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1277      = smax((nodesData,accnodesData)
1278              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1279                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1280          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1281      - smin((nodesData,accnodesData)
1282              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1283                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1284          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1285   
1286  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1288   
1289  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1290  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1291      $sum((nodesData,accnodesData)
1292              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1293                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1294      = sum((nodesData,accnodesData)
1295              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1296                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1297          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1298      / sum((nodesData,accnodesData)
1299              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1300                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1301          1);
1302   
1303  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1304  loop(accnodes,
1305  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1306      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1307                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1308      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1309              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1310  );
1311   
1312  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1313      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1314      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1315   
1316  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1317  loop(accYears,
1318  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1319      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1320              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1321      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1322              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1323  );
1324   
1325  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1327  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1328  * SPDX-License-Identifier: BSD-3-Clause
1329   
1331   
1333   
1334  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1335  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1336      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1337      = yes;
1338   
1340   
1341  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1342  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1343      $sum((nodesData,accnodesData)
1344              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1345                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1346      = sum((nodesData,accnodesData)
1347              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1348                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1349          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1350      / sum((nodesData,accnodesData)
1351              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1352                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1353          1);
1354   
1355  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1356  loop(accnodes,
1357  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1358      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1359                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1360      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1361              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1362  );
1363   
1364  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1365      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1366      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1367   
1368  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1369  loop(accYears,
1370  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1371      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1372              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1373      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1374              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1375  );
1376   
1377  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1379  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1380  * SPDX-License-Identifier: BSD-3-Clause
1381   
1383   
1385   
1386  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1387  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1388      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1389      = yes;
1390   
1392   
1393  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1394  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1395      $sum((nodesData,accnodesData)
1396              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1397                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1398      = sum((nodesData,accnodesData)
1399              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1400                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1401          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1402      / sum((nodesData,accnodesData)
1403              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1404                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1405          1);
1406   
1407  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1408  loop(accnodes,
1409  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1410      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1411                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1412      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1413              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1414  );
1415   
1416  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1417      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1418      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1419   
1420  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1421  loop(accYears,
1422  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1423      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1424              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1425      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1426              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1427  );
1428   
1429  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1431  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1432  * SPDX-License-Identifier: BSD-3-Clause
1433   
1435   
1437   
1438  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1439  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1440      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1441      = yes;
1442   
1444  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1445  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1446      $sum((nodesData,accnodesData)
1447              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1448                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1449      = smax((nodesData,accnodesData)
1450              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1451                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1452          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1453      - smin((nodesData,accnodesData)
1454              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1455                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1456          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1457   
1458  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1460   
1461  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1462  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1463      $sum((nodesData,accnodesData)
1464              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1465                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1466      = sum((nodesData,accnodesData)
1467              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1468                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1469          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1470      / sum((nodesData,accnodesData)
1471              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1472                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1473          1);
1474   
1475  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1476  loop(accnodes,
1477  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1478      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1479                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1480      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1481              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1482  );
1483   
1484  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1485      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1486      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1487   
1488  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1489  loop(accYears,
1490  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1491      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1492              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1493      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1494              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1495  );
1496   
1497  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1499  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1500  * SPDX-License-Identifier: BSD-3-Clause
1501   
1503   
1505   
1506  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1507  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1508      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1509      = yes;
1510   
1512  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1513  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1514      $sum((linksData,acclinksData)
1515              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1516                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1517      = smax((linksData,acclinksData)
1518              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1519                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1520          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1521      - smin((linksData,acclinksData)
1522              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1523                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1524          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1525   
1526  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1528   
1529  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1530  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1531      $sum((linksData,acclinksData)
1532              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1533                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1534      = sum((linksData,acclinksData)
1535              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1536                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1537          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1538      / sum((linksData,acclinksData)
1539              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1540                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1541          1);
1542   
1543  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1544  loop(acclinks,
1545  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1546      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1547                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1548      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1549              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1550  );
1551   
1552  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1553      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1554      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1555   
1556  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1557  loop(accYears,
1558  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1559      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1560              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1561      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1562              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1563  );
1564   
1565  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1567  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1568  * SPDX-License-Identifier: BSD-3-Clause
1569   
1571   
1573   
1574  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1575  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1576      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1577      = yes;
1578   
1580  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1581  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1582      $sum((linksData,acclinksData)
1583              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1584                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1585      = smax((linksData,acclinksData)
1586              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1587                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1588          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1589      - smin((linksData,acclinksData)
1590              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1591                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1592          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1593   
1594  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1596   
1597  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1598  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1599      $sum((linksData,acclinksData)
1600              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1601                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1602      = sum((linksData,acclinksData)
1603              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1604                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1605          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1606      / sum((linksData,acclinksData)
1607              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1608                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1609          1);
1610   
1611  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1612  loop(acclinks,
1613  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1614      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1615                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1616      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1617              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1618  );
1619   
1620  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1621      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1622      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1623   
1624  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1625  loop(accYears,
1626  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1627      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1628              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1629      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1630              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1631  );
1632   
1633  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1635  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1636  * SPDX-License-Identifier: BSD-3-Clause
1637   
1639   
1641   
1642  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1643  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1644      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1645      = yes;
1646   
1648   
1649  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1650  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1651      $sum((nodesData,accnodesData)
1652              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1653                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1654      = sum((nodesData,accnodesData)
1655              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1656                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1657          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1658      / sum((nodesData,accnodesData)
1659              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1660                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1661          1);
1662   
1663  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1664  loop(accnodes,
1665  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1666      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1667                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1668      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1669              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1670  );
1671   
1672  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1673      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1674      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1675   
1676  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1677  loop(accYears,
1678  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1679      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1680              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1681      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1682              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1683  );
1684   
1685  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1686   
1687  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1688  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1689      = sum((linksData)$sameas(linksModelToCalc,linksData),
1690              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1691   
1692  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1693      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1694              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1695   
1696  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1697  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1698      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1699          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1700   
1701  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1702      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1703      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1704              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1705          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1706   
1707  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1708  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1709      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1710      = yes;
1711   
1712  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1713  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1714      $sum((nodesDataToCalc,accnodesData)
1715              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1716                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1717      = sum((nodesDataToCalc,accnodesData)
1718              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1719                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1720          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1721      / sum((nodesDataToCalc,accnodesData)
1722              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1723                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1724          1);
1725   
1726  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1727   
1728  loop(accNodes,
1729  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1730      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1731              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1732          and map_accNodes(accNodesModel,accNodes)
1733              )
1734      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1735              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1736   
1737  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1738      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1739              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1740          and map_accNodes(accNodesModel,accNodes)
1741          and not sameas(accYears, "horizon"))
1742      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1743              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1744  );
1745   
1746  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1747      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1748          and sameas(accNodesModel,nodesModelToCalc)), 1)
1749      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1750          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1751   
1752  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1753      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1754          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1755      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1756          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1757   
1758   
1759  * Make sure all required indicators end up in the model
1760  set variableIndicators(accNodesModel,accYears,indicator);
1761  variableIndicators(accNodesModel,accYears,indicator)
1762     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1763        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1764     = yes;
1765   
1766  set activeIndicators(accNodesModel,accYears,indicator);
1767  activeIndicators(accNodesModel,accYears,indicator)
1768     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1773        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1774        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1775        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1776          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1777     = yes;
1778   
1779  set activeIndicators_links(linksModel,years,indicator);
1780  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1781     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1782        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1783        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1784     = yes;
1785   
1786  * Clear other dependencies and only add self mapping for variable and qp indicators
1787  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1788      $(variableIndicators(accNodesModel,accYears,indicator))
1789      = 0;
1790  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1791      $(variableIndicators(accNodesModel,accYears,indicator))
1792      = 1;
1793   
1794  * Calculate length of years and discount rates per indicator
1795  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1796  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1797      $(map_accYears(accYears_a,accYears)
1798          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1799      = 1;
1800   
1801  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1802      $(map_accYears(accYears_a,accYears)
1803          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1804          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1805      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1806   
1807  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1808      $(map_accYears(accYears_a,accYears)
1809          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1810          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1811          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1812          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1813      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1814   
1815  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1816      $(map_accYears(accYears_a,accYears)
1817          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1818          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1819          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1820      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1821          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1822                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1823   
1824  * Add self mapping for variable and qp indicators
1825  yearFactor(accNodesModel,accYears,indicator,accYears)
1826      $(variableIndicators(accNodesModel,accYears,indicator))
1827      = 1;
1828   
1829   
1830  * ==== calculate compound indicators for the optimization ====
1831  scalar compIndicators_pre;
1832  scalar compIndicators_post;
1833   
1834  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1835  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1836      $(activeIndicators(accNodesModel,accYears,indicator))
1837      = 1;
1838   
1839  set compoundIndicators_act(accNodesModel,accYears,indicator);
1840  option compoundIndicators_act < compoundIndicators;
1841   
1842  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1843  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1844  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1845      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1846   
1847  compIndicators_pre = 0;
1848  compIndicators_post = 1;
1849   
1850  option sparseval = 1;
1851  while(compIndicators_pre < compIndicators_post,
1852      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1853          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1854   
1855      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1856          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1857              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1858              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1859              and map_accYears(accYears_aa,accYears_a))
1860          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1861              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1862   
1863      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1864   
1865      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1866          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1867              and sum((accNodesModel_a,accYears_a,indicator_a)
1868                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1869          = sum((accNodesModel_a,accYears_a,indicator_a)
1870                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1871              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1872   
1873      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1874          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1875              and sum((accNodesModel_a,accYears_a,indicator_a)
1876                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1877          = sum((accNodesModel_a,accYears_a,indicator_a)
1878                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1879                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1880              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1881          / sum((accNodesModel_a,accYears_a,indicator_a)
1882                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1883                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1884   
1885      option compoundIndicators_act < compoundIndicators;
1886      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1887          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1888  );
1889  option sparseval = 0;
1890   
1891  * map to sub-years and sub-nodes
1892  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1893      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1894          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1895          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1896          and map_accYears(accYears_aa,accYears_a)
1897          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1898      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1899          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1900   
1901  * Remove all accounting regions and accounting years
1902  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1903      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1904          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1905          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1906              or sameas("horizon",accYears_aa)))
1907      = 0;
1908   
1909  * Remove all slack indicators except the ones declared in indicatorBounds
1910  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1911      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1912          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1913                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1914          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1915      = 0;
1916   
1917   
1918  * Map from extended parameter to final parameter
1919  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1920  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1921      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1922          and sum((accNodesModel_a,accYears_a,indicator_a)
1923                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1924      = sum((accNodesModel_a,accYears_a,indicator_a)
1925              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1926          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1927   
1928  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1929      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1930          and sum((accNodesModel_a,accYears_a,indicator_a)
1931                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1932      = sum((accNodesModel_a,accYears_a,indicator_a)
1933              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1934                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1935          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1936      / sum((accNodesModel_a,accYears_a,indicator_a)
1937              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1938                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1939   
1940  * Remove all accounting regions and accounting years
1941  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1942      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1943          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1944          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1945              or sameas("horizon",accYears_aa)))
1946      = 0;
1947   
1948  * Remove all slack indicators except the ones declared in indicatorBounds
1949  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1950      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1951          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1952          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1953      = 0;
1954   
1955   
1956  * ==== compound indicators for the post calculation ====
1957  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1958  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1959      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1960          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1961   
1962  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1963      $(activeIndicators(accNodesModel,accYears,indicator)
1964          or variableIndicators(accNodesModel,accYears,indicator))
1965      = 1;
1966   
1967  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1968  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1969   
1970  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1971  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1972  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1973   
1974  compIndicators_pre = 0;
1975  compIndicators_post = 1;
1976   
1977  option sparseval = 1;
1978  while(compIndicators_pre < compIndicators_post,
1979      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1980          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1981   
1982      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1983          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1984              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1985              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1986              and map_accYears(accYears_aa,accYears_a))
1987          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1988              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1989   
1990      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1991   
1992      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1993          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1994              and sum((accNodesModel_a,accYears_a,indicator_a)
1995                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1996          = sum((accNodesModel_a,accYears_a,indicator_a)
1997                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1998              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1999   
2000      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2001          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2002              and sum((accNodesModel_a,accYears_a,indicator_a)
2003                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2004          = sum((accNodesModel_a,accYears_a,indicator_a)
2005                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2006                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2007              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2008          / sum((accNodesModel_a,accYears_a,indicator_a)
2009                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2010                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2011   
2012      option compoundIndicatorsFull_act < compoundIndicatorsFull;
2013      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2014          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
2015  );
2016  option sparseval = 0;
2017   
2018  * map to sub-years and sub-nodes
2019  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
2020      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2021          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2022          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
2023          and map_accYears(accYears_aa,accYears_a)
2024          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2025      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2026          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2027   
2028  * Remove all accounting regions and accounting years
2029  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2030      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2031          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2032          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2033              or sameas("horizon",accYears_aa)))
2034      = 0;
2035   
2036  * Remove all slack indicators except the ones declared in indicatorBounds
2037  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2038      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2039          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
2040                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
2041          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2042      = 0;
2043   
2044   
2045  * Map from extended parameter to final parameter
2046  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2047  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2048      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2049          and sum((accNodesModel_a,accYears_a,indicator_a)
2050                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2051      = sum((accNodesModel_a,accYears_a,indicator_a)
2052              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2053          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2054   
2055  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2056      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2057          and sum((accNodesModel_a,accYears_a,indicator_a)
2058                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2059      = sum((accNodesModel_a,accYears_a,indicator_a)
2060              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2061                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2062          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2063      / sum((accNodesModel_a,accYears_a,indicator_a)
2064              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2065                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2066   
2067  * Remove all accounting regions and accounting years
2068  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2069      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2070          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2071   
2072          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2073              or sameas("horizon",accYears_aa)))
2074      = 0;
2075   
2076  * Remove all slack indicators except the ones declared in indicatorBounds
2077  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2078      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2079          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
2080          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2081      = 0;
2082   
2083   
2084  * Check if the objective value and optimization sense is set correctly
2085  scalar opti_values, opti_sense;
2086  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2087  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2088  abort$(opti_values < 1)
2089      "Accounting: No indicator specified as objective value"
2090  abort$(opti_values > 1)
2091      "Accounting: Too many indicators specified as objective value"
2092  abort$(opti_sense <> -1 and opti_sense <> 1)
2093      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
2095  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2096  * SPDX-License-Identifier: BSD-3-Clause
2097   
2098  * Calculation of annuities
2099  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2100          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
2101          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2102      "Accounting: Some converter technologies use annuities but have no amortization time"
2103   
2104  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
2105  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2106      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
2107      =
2108      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
2109          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2110          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
2111      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2112          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
2113   
2114   
2115  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2116          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
2117          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2118      "Accounting: Some storage technologies use annuities but have no amortization time"
2119   
2120  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
2121  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2122      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
2123      =
2124      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
2125          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2126          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
2127      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2128          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
2129   
2130   
2131  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2132          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
2133          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2134      "Accounting: Some transfer technologies use annuities but have no amortization time"
2135   
2136  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
2137  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2138      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
2139      =
2140      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
2141          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2142          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
2143      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2144          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
2145   
2146   
2147   
2148  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2149          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2150          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2151      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2152   
2153  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2154  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2155   
2156  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2157      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2158      =
2159      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2160          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2161          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2162      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2163          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2164   
2168   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2170  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2171  * SPDX-License-Identifier: BSD-3-Clause
2172   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2177  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2178  * SPDX-License-Identifier: BSD-3-Clause
2179   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2184  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2185  * SPDX-License-Identifier: BSD-3-Clause
2186  * // # Output data
2187  * // This is the reference data model of the REMix output.
2188  * //
2189  * // ## Standard output
2192   
2199   
2201   
2202  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2203  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2204  set profileType / "upper", "fixed", "lower" /;
2205  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2206   
2207  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2208  * // ### indicator_accounting
2209  * // Title: Accounting indicators Post-calculation
2210  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2211  * //
2212  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2213  * // ### indicator_accounting_ref
2214  * // Title: Accounting indicators reference
2215  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2216  * //
2217  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2218  * // ### indicator_accounting_var
2219  * // Title: Accounting indicators variable states
2220  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2221  * //
2222  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2223  * // ### indicator_accounting_comp
2224  * // Title: Accounting indicators composition
2225  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2226  * //
2227  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2228  * // ### indicator_accounting_detailed
2229  * // Title: Accounting indicators detail
2230  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2231  * //
2232  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2233  * // ### indicator_accounting_links
2234  * // Title: Accounting indicators per transfer link
2235  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2236  * //
2237  parameter converter_ratedInput(techs,vintage,commodity);
2238  parameter converter_ratedOutput(techs,vintage,commodity);
2239  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2240  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2241   
2242  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2243  * // ### converter_caps
2244  * // Title: Coverter capacities post-calculation
2245  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2246  * //
2247  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2248  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2249   
2250  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2251  * // ### converter_units
2252  * // Title: Coverter units post-calculation
2253  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2254  * //
2255  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2256   
2257  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2258  parameter max_transfer_coefficient(techs,commodity);
2259  parameter min_transfer_coefficient(techs,commodity);
2260  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2261  * // ### transfer_links
2262  * // Title: Transfer post-calculation
2263  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2264  * //
2265  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2266  * // ### transfer_caps
2267  * // Title: Transfer capacities post-calculation
2268  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2269  * //
2270  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2271  * // ### transfer_flows
2272  * // Title: Transfer hourly flows
2273  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2274  * //
2275  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2276  * // ### transfer_flows_annual
2277  * // Title: Transfer annual flows
2278  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2279  * //
2280  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2281  * // ### transfer_losses
2282  * // Title: Transfer hourly losses
2283  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2284  * //
2285  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2286  * // ### transfer_losses_annual
2287  * // Title: Transfer annual losses
2288  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2289  * //
2290  parameter storage_size_max(nodesModel,years,techs,commodity);
2291  parameter storage_size_min(nodesModel,years,techs,commodity);
2292  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2293  * // ### storage_units
2294  * // Title: Storage units post-calculation
2295  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2296  * //
2297  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2298  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2299  * // ### storage_caps
2300  * // Title: Storage capacities post-calculation
2301  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2302  * //
2303  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2304  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2305  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2306  * // ### storage_level_out
2307  * // Title: Storage level
2308  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2309  * //
2310  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2311  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2312  * // ### storage_flows
2313  * // Title: Storage hourly flows
2314  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2315  * //
2316  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2317  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2318  * // ### storage_flows_annual
2319  * // Title: Storage annual flows
2320  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2321  * //
2322  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2323  * // ### storage_losses_out
2324  * // Title: Storage hourly losses
2325  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2326  * //
2327  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2328  * // ### storage_losses_annual
2329  * // Title: Storage annual losses
2330  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2331  * //
2332  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2333  * // ### commodity_balance
2334  * // Title: Hourly commodity balance
2335  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2336  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2337  * //
2338  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2339  * // ### commodity_balance_annual
2340  * // Title: Annual commodity balance
2341  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2342  * //
2343  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2344  * // ### marginals_sourcesink_profile
2345  * // Title: Source-sink marginals
2346  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2347  * //
2348  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2349  * // ### marginals_balance
2350  * // Title: Nodel balance marginals
2351  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2352  * //
2353  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2354  * // ### marginals_sourcesink_sum
2355  * // Title: Source-sink annual marginals
2356  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2357  * //
2358  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2359  * // ### marginals_indicator_bounds
2360  * // Title: Indicator bounds marginals
2361  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2362  * //
2363  * // ## REMix-AMIRIS interface output
2364  * //
2365  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2366  * // ### r2a_annuity_cost_converter
2367  * // Title: Converter annuity cost
2368  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2369  * //
2370  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2371  * // ### r2a_spec_cost_converter
2372  * // Title: Converter specific cost
2373  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2374  * //
2375  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2376  * // ### r2a_spec_cost_fuel
2377  * // Title: Commodity specific cost
2378  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2379  * //
2380  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2381  * // ### r2a_spec_cost_indicator
2382  * // Title: Indicator specific cost
2383  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2384  * //
2385  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2386  * // ### r2a_converter_efficiencies
2387  * // Title: Indicator specific cost
2388  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2389  * //
2390  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2391  * // ### r2a_converter_avail_factor
2392  * // Title: Converter availability factor
2393  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2394  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2395  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2396  * //
2397  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2398  * // ### r2a_storage_e2p
2399  * // Title: E2P Storage
2400  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2401  * //
2402  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2403  * // ### r2a_storage_selfdischarge
2404  * // Title: Storage self discharge rates
2405  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2406   
2407  set attribute(*)
2408       /
2409      "variables"
2410      "equations"
2411      "iterations"
2412      /;
2413   
2414  parameter diagnostics(attribute);
2415   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2419  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2420  * SPDX-License-Identifier: BSD-3-Clause
2421   
2422  * ==== global settings ====
2424   
2426   
2428   
2430   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2432  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2433  * SPDX-License-Identifier: BSD-3-Clause
2434   
2435  * // # core_converter
2436  * // The equations in this file describe the converters in the model.
2437   
2438  * // ## Advanced features
2439  * //
2440  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2441  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2442  * //
2443  * // In the following table you can see which modifications you have to make to your data to use the different features.
2444  * //
2445  * // | Feature | Modification |
2446  * // | ------ | ------ |
2447  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2448  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2449  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2450  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2451  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2452  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2453   
2454  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2455  * //
2456  * // ### set_converter_techs.dat
2457  * // In this file all converter technologies are listed that can be used within your model.
2458  * //
2459  * // ### set_activities.dat
2460  * // All modes with which the converter technologies can be operated need to be added here.
2461  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2462  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2463  * //
2464  * // ### set_commodities.dat
2465  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2466  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2467   
2468  * // ## Variables
2469  * // {special_table_converter_variables}
3017   
3018  * // ## Load units from gdx file
3020   
3021   
3022  * ==== calculation of mappings ====
3023   
3024  * Technologies with a lifeTime > 0 are available
3025  set converter_availTech(nodesModel,years,converter_techs,vintage);
3026  converter_availTech(nodesModel,years,converter_techs,vintage)
3027      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3028          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3029   
3030  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3031  converter_availTech(nodesModel,years,converter_techs,vintage)
3032      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
3033   
3034  * Technologies already built become unavailable if they have an unitsBuild of 0
3035  converter_availTech(nodesModel,years,converter_techs,vintage)
3036      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
3037   
3038  * Used technologies are available technologies over their technical lifeTime
3039  set converter_usedTech(nodesModel,years,converter_techs,vintage);
3040  converter_usedTech(nodesModel,years,converter_techs,vintage)
3041      $(vintage.val <= years.val
3042          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3043                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3044          ) = yes;
3045   
3046  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
3047  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3048  converter_decomTech(nodesModel,years,converter_techs,vintage)
3049    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3050                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3051      and sum(yearsToCalc
3052        $(sameas(years, yearsToCalc)
3053          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3054          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3055    = yes;
3056   
3057  converter_decomTech(nodesModel,years,converter_techs,vintage)
3058    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3059                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3060      and sum(yearsToCalc
3061        $(sameas(years, yearsToCalc)
3062          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3063          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3064    = yes;
3065   
3066  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
3067  converter_decomTech(nodesModel,years,converter_techs,vintage)
3068    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
3069      and sum(yearsToCalc
3070        $(sameas(years, yearsToCalc)
3071          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
3072    = yes;
3073   
3074  * Extend the decom frame to the model year after the last model year of usedTech
3075  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3076    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3077      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3078    = yes;
3079   
3080  * Mapping for used activities and commodities
3081  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3082  option converter_usedActCom < converter_coefficient;
3083   
3084  set converter_usedAct(converter_techs,vintage,activity);
3085  option converter_usedAct < converter_usedActCom;
3086   
3087  set converter_usedCom(converter_techs,vintage,commodity);
3088  option converter_usedCom < converter_usedActCom;
3089   
3090  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3091  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3092      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3093          and converter_usedAct(converter_techs,vintage,activity))
3094      = yes;
3095   
3096  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3097  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3098    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3099      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
3100    = 1;
3101   
3102  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3103  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3104    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3105      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
3106    = 1;
3107   
3108   
3109  * ==== aggregation of profiles ====
3110   
3111  * derive upper and lower profiles then aggregate
3112  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3113  option converter_activity_hasProfileIn < converter_activityProfileIn;
3114   
3115  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3116  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3117      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3118              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
3119   
3120  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3121  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3122   
3123  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3124  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3125      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3126              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
3127   
3128  * aagregate time dimension
3129  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3130  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3131    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3132    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
3133            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3134            / timeLength(timeModelToCalc));
3135  option clear = converter_activityProfileIn;
3136   
3137  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3138  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3139  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3140      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3141  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3142      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3143   
3144   
3145  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3146  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3147      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3148          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3149   
3150  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3151  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3152      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3153   
3154  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3155      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3156          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3157      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3158                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3159                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3160                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
3161      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3162              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3163   
3164  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3165      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3166          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3167      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3168                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3169                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
3170      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3171                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3172              1);
3173  option clear = converter_activityProfileIn_aggTime;
3174   
3175  * for fixed profiles overwrite upper and lower profile
3176  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3177      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3178      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3179   
3180  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3181      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3182      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3183   
3187   
3188  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3189  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3190  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3191      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3192   
3193  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3194      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3195          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3196      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3197            sum(timeData$timeMapping(timeData,timeModelToCalc),
3198                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3199                / timeLength(timeModelToCalc)
3200              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
3201      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3202              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3203   
3204  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3205      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3206          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3207      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3208                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3209            sum(timeData$timeMapping(timeData,timeModelToCalc),
3210                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3211                / timeLength(timeModelToCalc))
3212      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3213                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3214   
3217   
3218  * reduce coefficient delay based on time resolution
3219  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
3220    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
3221    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
3223   
3224  * ==== prepare partial load behavior parameters ====
3225   
3226  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3227  alias(commodity, com);
3228  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3229      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3230        and converter_usedAct(converter_techs,vintage,activity))
3231      = 1;
3232   
3233  * indicate that at least one activity of a technology makes use of partial load behavior
3234  set converter_hasMaxLoad(converter_techs,vintage);
3235  converter_hasMaxLoad(converter_techs,vintage)
3236    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3237              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3238   
3239  set converter_hasMinLoad(converter_techs,vintage);
3240  converter_hasMinLoad(converter_techs,vintage)
3241    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3242              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3243   
3244  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3245  converter_hasConstantFluxInActivity(converter_techs,vintage)
3246    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3247                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3248   
3249  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3250  set pc_converter_activityRequirements
3251      /
3252      minLoad             "Lower profile for converter activity"
3253      maxLoad             "Upper profile for converter activity"
3254      /;
3255  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3256  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3257    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3258  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3259    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3260   
3261  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3262   
3263  set converter_hasMinUptime(converter_techs,vintage);
3264  converter_hasMinUptime(converter_techs,vintage)
3265    $(converter_techParam(converter_techs,vintage,"minUptime")
3266      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3267    = yes;
3268   
3269  set converter_hasMinDowntime(converter_techs,vintage);
3270  converter_hasMinDowntime(converter_techs,vintage)
3271    $(converter_techParam(converter_techs,vintage,"minDowntime")
3272      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3273    = yes;
3274   
3275  * require integer unit counts if online state is to be tracked
3276  converter_techParam(converter_techs,vintage,"mipUnits")
3277      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3278        or converter_hasMinLoad(converter_techs, vintage)
3279        or converter_hasMaxLoad(converter_techs, vintage)
3280        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3281      = 1;
3282   
3283  * ==== floor mip converter units to integer values ====
3284  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3285      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3286      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3287  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3288      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3289      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3290   
3291  * ==== scalars and sets for minUptime and minDowntime ====
3292   
3293  scalar converter_maxUptimeReq;
3294  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3295  set uptimeSearchRange(timeModelToCalc);
3296  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3297   
3298  scalar converter_maxDowntimeReq;
3299  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3300  set downtimeSearchRange(timeModelToCalc);
3301  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3302   
3303  * ==== definition of variables ====
3304   
3305  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3306      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3307        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3308      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3309  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3310      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3311        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3312      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3313  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3314      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3315        and (converter_hasMinLoad(converter_techs, vintage)
3316              or converter_hasMaxLoad(converter_techs, vintage)))
3317      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3318   
3319   
3320  * Initialise variables for unitsBuild
3321  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3322      $converter_availTech(nodesModel,years,converter_techs,vintage)
3323      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3324  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3325      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3326      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3327  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3328      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3329      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3330   
3331  * Initialise variables for unitsDecom
3332  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3333    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3334      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3335    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3336                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3337                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3338                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3339          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3340   
3341  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3342    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3343    = sum(years$
3344          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3345            and converter_availTech(nodesModel,years,converter_techs,vintage)
3346            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3347            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3348        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3349      + sum(yearsToCalc_a$
3350          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3351            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3352            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3353            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3354        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3355        ;
3356   
3357  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3358      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3359          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3360      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3361   
3362   
3364   
3365   
3366  * Calculate planned unit expansion
3367  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3368  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3369  loop(years,
3370    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3371      =
3372      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3373          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3374      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3375          $converter_availTech(nodesModel,years,converter_techs,vintage)
3376      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3377          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3378  );
3379   
3380  * Set initial state for planned units
3381  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3382    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3383   
3384   
3385  * // ## Load units from gdx file
3387   
3388  * Calculate if planned unit expansion is bounded by upper and lower limits
3389  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3390  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3391    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3392          converter_techParam(converter_techs,vintage,"freeDecom"))
3393    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3394          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3395      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3396    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3397          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3398      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3399    = yes;
3400   
3401  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3402  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3403    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3404      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3405    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3406  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3407    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3408      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3409    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3410  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3411    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3412      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3413    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3414   
3415   
3416  * Add parameter for fixing capacities during myopic runs
3417  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3418  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3419  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3420   
3421  * Fix activities of upper limit if upper limit is zero
3422  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3423    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3424      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3425      = 0;
3426   
3427   
3428  * ==== declaration of equations ====
3429   
3430  equations
3431    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3432      ) "Ensures the units balance over the planning period."
3433    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3434      ) "Ensures the units balance over the planning period."
3435    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3436      ) "Restricts the free decommissioning of units over the planning period."
3437    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3438      ) "Upper bound for the total number of units."
3439    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3440      ) "Lower bound for the total number of units."
3441    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3442      ) "Fixed bound for the total number of units."
3443    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3444      ) "Fixes the total number of units to the corresponding integer variable."
3445    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3446      ) "Fixes the number of online units to the corresponding integer variable."
3447   
3448    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3449      ) "Lower limit on the activity."
3450    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3451      ) "Upper limit on the activity."
3452   
3453    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3454      ) "Fixed limit on the activity."
3455    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3456      ) "Positive ramping of unit activity."
3457    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3458      ) "Negative ramping of unit activity."
3459    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3460      ) "Restrict ramping up of unit activity."
3461   
3462    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3463      ) "Set online units to total number of operational units."
3464    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3465      ) "Allow shutting down units."
3466    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3467      ) "Variable counting the number of unit startups."
3468    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3469      ) "Variable tracking the number of unit shutdowns."
3470    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3471      ) "Limit the number of startup cycles a unit can perform."
3472    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3473      ) "Require recently started units to remain online for their respective minimum uptime."
3474    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3475      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3476    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3477      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3478    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3479      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3480    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3481      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3482    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3483      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3484    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3485      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3486    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3487      ) "Limit usage of an activity to corresponding units."
3488    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3489      ) "Limit usage of an activity to corresponding units."
3490    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3491      ) "Limit the number of units in one particular mode to the number of operational units."
3492    ;
3493   
3494  * ==== equation definition ====
3495  * // ## Equations
3496  * // ### Converter Units Balance
3497  * // Ensures that the total units are consistent with the built and decommissioned units.
3498  * // {Eq_converter_unitsBalance}
3499   
3500  * Equation using build only
3501  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3502      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3503            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3504          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3505          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3506      ..
3507      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3508      =e=
3509      sum ((years_a)
3510              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3511                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3512                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3513                  and years_a.val <= yearsSel.val ),
3514            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3515   
3516      + sum ((yearsToCalc)
3517              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3518                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3519                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3520                  and yearsToCalc.val <= yearsSel.val ),
3521            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3522   
3523  * Equation using build and decom
3524  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3525      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3526            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3527          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3528          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3529      ..
3530      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3531      =e=
3532      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3533        sum(years$sameas(years, yearsToCalc),
3534          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3535            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3536      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3537        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3538          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3539      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3540          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3541      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3542          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3543      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3544          ;
3545   
3546  * // ### Converter Units Free Decommission
3547  * // Restricts the free decommissioning of units over the planning period.
3548  * // {Eq_converter_unitsFreeDecom}
3549  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3550      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3551          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3552      ..
3553      sum(years$
3554            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3555              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3556          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3557      + sum(yearsToCalc$
3558            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3559              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3560              and yearsToCalc.val <= yearsSel.val),
3561          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3562      =g=
3563      sum(years$
3564            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3565              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3566              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3567          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3568      + sum(yearsToCalc$
3569            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3570              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3571              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3572          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3573   
3574  * // ### Converter Units Upper Limit
3575  * // Upper bound for the total number of units.
3576  * // {Eq_converter_unitsUpperLimit}
3577  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3578      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3579          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3580          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3581              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3582      ..
3583      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3584          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3585      =l=
3586      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3587   
3588  * // ### Converter Units Lower Limit
3589  * // Lower bound for the total number of units.
3590  * // {Eq_converter_unitsLowerLimit}
3591  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3592      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3593          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3594              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3595      ..
3596      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3597          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3598      =g=
3599      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3600   
3601  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3602      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3603          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3604      ..
3605      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3606          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3607      =e=
3608      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3609   
3610  * // ### Converter Units Total MIP
3611  * // Fixes the total number of units to the corresponding integer variable.
3612  * // {Eq_converter_unitsTotalMIP}
3613  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3614      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3615          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3616      ..
3617      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3618      =e=
3619      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3620   
3621  * // ### Converter Units Online MIP
3622  * // Fixes the number of online units to the corresponding integer variable.
3623  * // {Eq_converter_unitsOnlineMIP}
3624  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3625      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3626          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3627      ..
3628      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3629      =e=
3630      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3631   
3632  * // ### Converter Activity Lower Limit
3633  * // Lower limit on the activity.
3634  * // {Eq_converter_activityLowerLimit}
3635  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3636      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3637          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3638          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3639              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3640          and not converter_hasMinLoad(converter_techs, vintage))
3641      ..
3642      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3643          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3644      )
3645      =g=
3646      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3649      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3652   
3653  * // ### Converter Activity Upper Limit
3654  * // Upper limit on the activity.
3655  * // {Eq_converter_activityUpperLimit}
3656  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3657      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3658          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3659          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3660               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3661      ..
3662      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3663          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3664      )
3665      =l=
3666      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3669      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3672   
3673  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3674      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3675          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3676               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3677      ..
3678      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3679          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3680      )
3681      =e=
3682      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3685      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3688   
3689  * // ### Converter Positive Ramping
3690  * // Positive ramping of unit activity.
3691  * // {Eq_converter_rampPos}
3692  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3693    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3694        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3695      ..
3696      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3697      =g=
3698      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3699              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3700              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3701   
3702  * // ### Converter Negative Ramping
3703  * // Negative ramping of unit activity.
3704  * // {Eq_converter_rampNeg}
3705  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3706    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3707        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3708      ..
3709      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3710      =g=
3711      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3712              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3713              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3714   
3715  * // ### Converter Ramping Limit
3716  * // Restrict ramping up of unit activity.
3717  * // {Eq_converter_rampLimit}
3718  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3719    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3720          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3721      ..
3722      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3723              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3724              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3725    =l=
3726    converter_techParam(converter_techs,vintage,"activityRampLimit")
3729      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3732   
3735   
3736  * // ### Converter Units Online
3737  * // Set converter units online to total converter units for non-MIP case.
3738  * // {Eq_converter_unitsOnline}
3739  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3740      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3741          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3742    ..
3743    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3744    =e=
3745    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3746      ;
3747   
3748  * // ### Converter MIP Units Shutting Down
3749  * // Allow shutting down units.
3750  * // {Eq_converter_unitsOnlineUC}
3751  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3752      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3753          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3754    ..
3755    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3756    =l=
3757    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3758      ;
3761   
3762  * // ### Converter Activity Startups
3763  * // Variable counting the number of unit startups.
3764  * // {Eq_converter_activityStartups}
3765  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3766    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3767          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3768      ..
3769      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3770      =g=
3771          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3772      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3773   
3774  * // ### Converter Activity Shutdowns
3775  * // Variable tracking the number of unit shutdowns.
3776  * // {Eq_converter_activityShutdowns}
3777  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3778    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3779          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3780          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3781      ..
3782      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3783      =g=
3784          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3785      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3786   
3787  * // ### Converter Activity Startup Limit
3788  * // Limit the number of startup cycles a unit can perform.
3789  * // {Eq_converter_limitStartups}
3790  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3791    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3792          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3793      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3794      ..
3795      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3796    =l=
3797    converter_techParam(converter_techs,vintage,"startupLimit")
3798    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3799   
3800  alias(timeModelToCalc,ttc);
3801   
3802  * // ### Converter Units Minimum Uptime
3803  * // Require recently started units to remain online for their respective minimum uptime.
3804  * // {Eq_converter_minUptime}
3805  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3806    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3807          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3808      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3809      ..
3810      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3811          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3812              nodesModelSel,yearsSel,converter_techs,vintage))
3813          =l=
3814          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3815   
3816  * // ### Converter Units Minimum Downtime
3817  * // Require recently shut down units to remain offline for their respective minimum downtime.
3818  * // {Eq_converter_minDowntime}
3819  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3820    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3821          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3822      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3823      ..
3824      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3825          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3826              nodesModelSel,yearsSel,converter_techs,vintage))
3827          =l=
3828          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3829      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3830   
3831  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3832  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3833  alias(activity, act);
3834   
3835  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3836  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3837  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3838  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3839    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3840          and converter_hasMinLoad(converter_techs, vintage)
3841          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3842      ..
3843      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3844                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3845               and converter_usedAct(converter_techs,vintage,act)),
3846      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3847    =l=
3848    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3849      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3850                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3851                 and converter_usedAct(converter_techs,vintage,act)),
3852      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3853   
3854  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3855  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3856  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3857  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3858    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3859          and converter_hasMaxLoad(converter_techs,vintage)
3860          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3861      ..
3862      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3863                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3864               and converter_usedAct(converter_techs,vintage,act)),
3865      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3866    =l=
3867      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3868                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3869               and converter_usedAct(converter_techs,vintage,act)),
3870      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3871            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3872            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3873   
3874  * This equation is meant to enforce the lower limit requirements of activities in use.
3875  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3876  * because these activities can only run on units in the respectively strict activation state.
3877   
3878  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3879  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3880  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3881  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3882    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3883          and converter_hasMinLoad(converter_techs, vintage)
3884          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3885      ..
3886      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3887                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3888               and converter_usedAct(converter_techs,vintage,act)),
3889      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3890    =g=
3891      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3892                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3893               and converter_usedAct(converter_techs,vintage,act)),
3894      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3895            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3896            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3897   
3898   
3899  * Simple one-activity-per-unit partial load equations
3900  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3901  * // Enforce MIP units partial load upper limit.
3902  * // {Eq_converter_activityUpperLimitPartLoad}
3903  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3904    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3905          and (converter_hasMinLoad(converter_techs, vintage)
3906                or converter_hasMaxLoad(converter_techs, vintage)
3907                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3908          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3909      ..
3910      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3911    =l=
3912    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3913          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3914          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3915   
3916  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3917  * // Enforce MIP units partial load lower limit.
3918  * // {Eq_converter_activityLowerLimitPartLoad}
3919  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3920    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3921          and (converter_hasMinLoad(converter_techs, vintage)
3922                or converter_hasMaxLoad(converter_techs, vintage))
3923          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3924      ..
3925      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3926    =g=
3927    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3928          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3929          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3930   
3931  * // ### Converter MIP Units Idle Online Units
3932  * // Counts idle online units at every time step
3933  * // {Eq_converter_noOnlineIdle}
3934  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3935    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3936          and (converter_hasMinLoad(converter_techs, vintage)
3937              or converter_hasMaxLoad(converter_techs, vintage)
3938              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3939          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3940      ..
3941      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3942      =e=
3943      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3944            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3945   
3946  * // ### Converter MIP Units Idle Online Units Partial load
3947  * // Counts idle online units at every time step
3948  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3949  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3950    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3951          and (converter_hasMinLoad(converter_techs, vintage)
3952                  or converter_hasMaxLoad(converter_techs, vintage))
3953          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3954      ..
3955      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3956      =l=
3957      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3958            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3959   
3960  * // ### Converter MIP activity model limit
3961  * // Converter activity model limit
3962  * // {Eq_converter_activityModeLimit}
3963  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3964    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3965          and (converter_hasMinLoad(converter_techs, vintage)
3966                or converter_hasMaxLoad(converter_techs, vintage))
3967          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3968      ..
3969      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3970      =g=
3971      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3972   
3973  * ==== model definition ====
3974   
3975  Model M_converter
3976  /
3977    Eq_converter_unitsBalance
3978    Eq_converter_unitsBalanceFreeDecom
3979    Eq_converter_unitsFreeDecom
3980    Eq_converter_unitsUpperLimit
3981    Eq_converter_unitsLowerLimit
3982    Eq_converter_unitsFixedLimit
3983    Eq_converter_unitsTotalMIP
3984    Eq_converter_unitsOnlineMIP
3985    Eq_converter_activityUpperLimit
3986    Eq_converter_activityLowerLimit
3987    Eq_converter_activityFixedLimit
3988    Eq_converter_rampPos
3989    Eq_converter_rampNeg
3990    Eq_converter_rampLimit
3993    Eq_converter_unitsOnline
3994    Eq_converter_unitsOnlineUC
3997    Eq_converter_activityStartups
3998    Eq_converter_activityShutdowns
3999    Eq_converter_limitStartups
4000    Eq_converter_minUptime
4001    Eq_converter_minDowntime
4002    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
4003    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
4004    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
4005    Eq_converter_activityUpperLimitPartLoad
4006    Eq_converter_activityLowerLimitPartLoad
4007    Eq_converter_noOnlineIdle
4008    Eq_converter_noOnlineIdleDetailedPartLoad
4009    Eq_converter_activityModeLimit
4010  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
4012  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4013  * SPDX-License-Identifier: BSD-3-Clause
4014   
4015  * // # core_storage
4016  * // The equations in this file describe the storages in the model.
4017   
4018  * // ## Variables
4019  * // {special_table_storage_variables}
4273   
4274   
4275  * === SoC mappings ===
4276  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4277  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4278      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4279        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4280      = yes;
4281   
4282  set storage_validSoCRange(storage_techs,vintage);
4283  storage_validSoCRange(storage_techs,vintage)
4284      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4285        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4286   
4287  * === Translate SoC parameters to ordered SoC-set ===
4288  * set ordered_socs / soc1*soc20 /;
4289  * alias(soc_states, soc_states_c);
4290  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4291  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4292  *     $storage_validSoCRange(storage_techs,vintage)
4293  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4294  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4295  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4296  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4297  *
4298  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4299  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4300  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4301  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4302  *     = yes;
4303   
4304  parameter storage_bigM(storage_techs,vintage);
4305  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4306  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4307  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4308   
4309  * === calculate the number of years represented by single year to calc ===
4310  alias(yearsToCalc, yearsToCalc_a)
4311  parameter representedYears(years);
4312  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4313                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4314   
4315  * ==== calculation of mappings ====
4316   
4317  * Technologies with a lifeTime > 0 are available
4318  set storage_availTech(nodesModel,years,storage_techs,vintage);
4319  storage_availTech(nodesModel,years,storage_techs,vintage)
4320      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4321          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4322   
4323  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4324  storage_availTech(nodesModel,years,storage_techs,vintage)
4325      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4326   
4327  * Technologies already built become unavailable if they have an unitsBuild of 0
4328  storage_availTech(nodesModel,years,storage_techs,vintage)
4329      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4330   
4331  * Used technologies are available technologies over their technical lifeTime
4332  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4333  storage_usedTech(nodesModel,years,storage_techs,vintage)
4334      $(vintage.val <= years.val
4335          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4336                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4337          ) = yes;
4338   
4339  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4340  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4341  storage_decomTech(nodesModel,years,storage_techs,vintage)
4342    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4343                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4344      and sum(yearsToCalc
4345        $(sameas(years, yearsToCalc)
4346          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4347          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4348    = yes;
4349   
4350  storage_decomTech(nodesModel,years,storage_techs,vintage)
4351    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4352                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4353      and sum(yearsToCalc
4354        $(sameas(years, yearsToCalc)
4355          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4356          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4357    = yes;
4358   
4359  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4360  storage_decomTech(nodesModel,years,storage_techs,vintage)
4361    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4362      and sum(yearsToCalc
4363        $(sameas(years, yearsToCalc)
4364          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4365    = yes;
4366   
4367  * Extend the decom frame to the year after the last year of usedTech
4368  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4369    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4370      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4371    = yes;
4372   
4373  * Mapping for used commodities
4374  set storage_usedCom(storage_techs,vintage,commodity);
4375  option storage_usedCom < storage_sizeParam;
4376   
4377  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4378  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4379      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4380          and storage_usedCom(storage_techs,vintage,commodity))
4381      = yes;
4382   
4383   
4384  * // ## Load units from gdx file
4386   
4387   
4388  * ==== aggregation of profiles ====
4389  * derive upper and lower profiles then aggregate
4390  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4391  option storage_level_hasProfileIn < storage_levelProfileIn;
4392   
4393  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4394  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4395      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4396              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4397   
4398  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4399  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4400  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4401      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4402  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4403      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4404   
4405  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4406  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4407                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4408   
4409  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4410      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4411          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4412      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4413              sum(timeData$timeMapping(timeData,timeModelToCalc),
4414                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4415                / timeLength(timeModelToCalc)
4416              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4417      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4418              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4419   
4420  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4421      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4422          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4423                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4424      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4425                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4426              sum(timeData$timeMapping(timeData,timeModelToCalc),
4427                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4428                / timeLength(timeModelToCalc))
4429      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4430                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4431   
4432  * for fixed profiles overwrite upper and lower profile
4433  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4434      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4435      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4436   
4437  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4438      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4439      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4440   
4441  * storage initial level
4442   
4443  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4444      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4445          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4446      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4447            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4448              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4449      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4450              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4451   
4452  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4453      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4454          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4455                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4456      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4457                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4458            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4459      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4460                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4461   
4462  * ==== parameter modifications ====
4463  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4464          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4465      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4466  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4467          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4468      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4469   
4470   
4471  * ==== definition of variables ====
4472   
4473  * Initialise variables for unitsBuild
4474  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4475      $storage_availTech(nodesModel,years,storage_techs,vintage)
4476      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4477  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4478      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4479      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4480  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4481      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4482      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4483   
4484  * Initialise variables for unitsDecom
4485  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4486      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4487        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4488      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4489                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4490                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4491                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4492          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4493   
4494  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4495    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4496    = sum(years$
4497          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4498            and storage_availTech(nodesModel,years,storage_techs,vintage)
4499            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4500            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4501        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4502      + sum(yearsToCalc_a$
4503          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4504            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4505            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4506            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4507        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4508        ;
4509   
4510  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4511      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4512        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4513      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4514   
4515   
4517   
4518   
4519  * Calculate planned unit expansion
4520  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4521  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4522  loop(years,
4523    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4524      =
4525      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4526          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4527      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4528          $storage_availTech(nodesModel,years,storage_techs,vintage)
4529      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4530          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4531  );
4532   
4533  * Set initial state for planned units
4534  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4535    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4536   
4537  * // ## Load units from gdx file
4539   
4540  * Calculate if planned unit expansion is bounded by upper and lower limits
4541  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4542  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4543    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4544          storage_techParam(storage_techs,vintage,"freeDecom"))
4545    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4546          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4547      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4548    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4549          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4550      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4551    = yes;
4552   
4553  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4554  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4555    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4556      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4557    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4558  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4559    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4560      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4561    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4562  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4563    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4564      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4565    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4566   
4567  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4568      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4569        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4570      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4571   
4572  * Add parameter for fixing capacities during myopic runs
4573  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4574  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4575  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4576   
4577  * ==== declaration of equations ====
4578   
4579  equations
4580    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4581      ) "Ensures the units balance over the planning period."
4582    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4583      ) "Ensures the units balance over the planning period."
4584    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4585      ) "Restricts the free decommissioning of units over the planning period."
4586    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4587      ) "Upper bound for the total number of units."
4588    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4589      ) "Lower bound for the total number of units."
4590    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4591      ) "Fixes the total number of units to the corresponding integer variable."
4592   
4593    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4594      ) "Upper bound for the total number of units."
4595    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4596      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4597    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4598      ) "Lower bound for the total number of units."
4599    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4600      ) "Stored commodities lost due to self discharge."
4601    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4602      ) "Currently available units must have been built at some point in time and have some state of degradation."
4603    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4604      ) "There cannot be more units from a certain year than the amount built in that year."
4605    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4606      ) "There is no recovery."
4607    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4608      ) "Limit charging rate based on unit capacity."
4609    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4610      ) "Limit discharging rate based on unit capacity."
4611    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4612      ) "Positive change in state of charge is influx."
4613    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4614      ) "Negative change in state of charge is outflux."
4615   
4616    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4617      ) "Sum of degradation class storage levels is the global level."
4618    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4619      ) "Upper bound for units of a certain state."
4620    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4621      ) "Positive change in state of charge is influx for each degradation class."
4622    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4623      ) "Determine degradation states of storage units."
4624    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4625      ) "All decomminsioned units must have a degradation state."
4626    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4627      ) "Only allow one range of degradation states per year and age group."
4628    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4629      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4630   
4631    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4632      ) "Every unit has a state of charge."
4633    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4634      ) "Every unit has a state of charge."
4635    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4636      ) "Number of units in particular SoC."
4637    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4638      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4639   
4640    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4641      ) "Limit charging rate based on unit capacity."
4642    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4643      ) "Limit discharging rate based on unit capacity."
4644    ;
4645   
4646  * ==== equation definition ====
4647  * // ## Equations
4648  * // ### Storage Units Balance
4649  * // Ensures that the total units are consistent with the built and decommissioned units.
4650  * // {Eq_storage_unitsBalance}
4651   
4652  * Equation using build only
4653  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4654      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4655            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4656          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4657          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4658      ..
4659      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4660      =e=
4661      sum ((years_a)
4662                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4663                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4664                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4665                          and years_a.val <= yearsSel.val ),
4666              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4667   
4668      + sum ((yearsToCalc)
4669                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4670                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4671                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4672                          and yearsToCalc.val <= yearsSel.val ),
4673              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4674   
4675  * Equation using build and decom
4676  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4677      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4678            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4679          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4680          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4681      ..
4682      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4683      =e=
4684          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4685        sum(years$sameas(years, yearsToCalc),
4686          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4687            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4688      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4689        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4690          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4691      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4692          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4693      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4694          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4695      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4696          ;
4697   
4698  * // ### Storage Units Free Decommission
4699  * // Restricts the free decommissioning of storage units over the planning period.
4700  * // {Eq_storage_unitsFreeDecom}
4701  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4702      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4703          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4704      ..
4705      sum(years$
4706            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4707              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4708          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4709      + sum(yearsToCalc$
4710            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4711              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4712              and yearsToCalc.val <= yearsSel.val),
4713          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4714      =g=
4715      sum(years$
4716            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4717              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4718              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4719          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4720      + sum(yearsToCalc$
4721            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4722              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4723              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4724          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4725   
4726  * // ### Storage Units Lower Limit
4727  * // Lower bound for the total number of storage units.
4728  * // {Eq_storage_unitsLowerLimit}
4729  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4730      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4731      ..
4732      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4733          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4734      =g=
4735      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4736   
4737  * // ### Storage Units Upper Limit
4738  * // Upper bound for the total number of storage units.
4739  * // {Eq_storage_unitsUpperLimit}
4740  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4741      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4742          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4743      ..
4744      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4745          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4746      =l=
4747      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4748   
4749  * // ### Storage Units Total MIP
4750  * // Fixes the total number of storage units to the corresponding integer variable.
4751  * // {Eq_storage_unitsTotalMIP}
4752  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4753      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4754          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4755      ..
4756      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4757      =e=
4758      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4759   
4760  * // ### Storage Level Lower Limit
4761  * // Lower limit on the storage level.
4762  * // {Eq_storage_levelLowerLimit}
4763  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4764      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4765          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4766      ..
4767      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4768      =g=
4769      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4770      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4771      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4772   
4773  * // ### Storage Level Upper Limit
4774  * // Upper limit on the storage level.
4775  * // {Eq_storage_levelUpperLimit}
4776  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4777      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4778          and not storage_hasDegradation(storage_techs,vintage)
4779          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4780      ..
4781      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4782      =l=
4783      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4784      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4785      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4786   
4787  * // ### Storage Level Upper Limit (degradation)
4788  * // Upper limit on the storage level if the storage technology accounts for degradation.
4789  * // {Eq_storage_levelUpperLimit_degradation}
4790  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4791      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4792          and storage_hasDegradation(storage_techs,vintage)
4793          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4794      ..
4795      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4796      =l=
4797      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4798      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4799      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4800              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4801                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4802                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4803   
4804  * // ### Storage Unit States Sum (degradation)
4805  * // The number of units in all degradation state must match the total unit number.
4806  * // {Eq_storage_unitsBalanceStates}
4807  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4808      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4809        and storage_hasDegradation(storage_techs,vintage))
4810      ..
4811      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4812      =e=
4813      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4814            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4815   
4816  * // ### Storage Unit States Upper Limit(degradation)
4817  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4818  * // {Eq_storage_unitsUpperLimitPerState}
4819  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4820      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4821          and storage_hasDegradation(storage_techs,vintage))
4822      ..
4823      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4824            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4825            + sum(years$(years.val <= yearsSel.val),
4826                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4827      =e=
4828      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4829   
4830  * // ### Storage Unit States Progression (degradation)
4831  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4832  * // {Eq_storage_unitsStatesNoRecovery}
4833  alias(degradation_states, dc_states);
4834  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4835      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4836        and yearsToCalc.val > yearsCom.val
4837        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4838      ..
4839      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4840                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4841              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4842              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4843      =l=
4844      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4845                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4846              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4847              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4848   
4849  * // ### Storage Losses
4850  * // Accumulation of storage losses.
4851  * // {Eq_storage_losses}
4852  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4853      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4854      ..
4855      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4856      =e=
4857      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4858          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4859        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4860            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4861        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4862            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4863            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4864            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4865                and ord(timeModelToCalc)=1))
4866      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4867      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4868      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4869          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4870        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4871          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4872      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4873        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4874          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4875      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4876        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4877                          and storage_validSoCRange(storage_techs,vintage)),
4878              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4879              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4880              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4881   
4882  * // ### C-Rate Limit
4883  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4884  * // {Eq_storage_cRateLimit}
4885  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4886      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4887        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4888      ..
4889      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4890      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4891          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4892      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4893          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4894      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4895          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4896          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4897          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4898              and ord(timeModelToCalc)=1)
4899      =l=
4900      storage_techParam(storage_techs,vintage,"maxCRate")
4901      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4902      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4903   
4904  * // ### E-Rate Limit
4905  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4906  * // {Eq_storage_eRateLimit}
4907  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4908      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4909        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4910      ..
4911      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4912      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4913          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4914      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4915          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4916      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4917          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4918          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4919          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4920              and ord(timeModelToCalc)=1)
4921      =g=
4922      - storage_techParam(storage_techs,vintage,"maxERate")
4923      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4924      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4925   
4926  * // ### Storage Charging
4927  * // Increases in storage levels are accounted as charging amounts.
4928  * // {Eq_storage_charge}
4929  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4930      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4931        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4932      ..
4933      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4934      =g=
4935      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4936      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4937          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4938      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4939          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4940      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4941          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4942          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4943          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4944              and ord(timeModelToCalc)=1);
4945   
4946  * // ### Storage Discharging
4947  * // Decreases in storage levels are accounted as discharging amounts.
4948  * // {Eq_storage_discharge}
4949  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4950      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4951        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4952      ..
4953      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4954      =g=
4955      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4956          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4957      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4958          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4959      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4960          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4961          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4962          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4963              and ord(timeModelToCalc)=1)
4964      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4965   
4966  * // ### Storage Level Sum (degradation)
4967  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4968  * // {Eq_storage_levelStateSum}
4969  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4970      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4971        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4972      ..
4973      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4974      =e=
4975      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4976   
4977  * // ### Storage Level Upper Limit per Age Group (degradation)
4978  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4979  * // {Eq_storage_levelUpperLimitPerAge}
4980  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4981      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4982        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4983      ..
4984      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4985      =l=
4986      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4987      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4988      * sum(degradation_states,
4989              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4990                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4991                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4992   
4993  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4994  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4995  * // {Eq_storage_chargeBasedDegradationDistribution}
4996  alias(years, prev_years);
4997  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4998      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4999        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5000      ..
5001      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
5002          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
5003      =l=
5004      storage_sizeParam(storage_techs,vintage,commodity,"size")
5005      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
5006          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
5007          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
5008             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
5009   
5010  * // ### Storage Charging per Commissioning Year (degradation)
5011  * // Increases in storage levels are accounted as charging amounts.
5012  * // {Eq_storage_chargingPerAge}
5013  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5014      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5015        and storage_techParam(storage_techs,vintage,"usageDegradation"))
5016      ..
5017      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5018      =g=
5019      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
5020      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
5021   
5022  * // ### Storage Unit Decommissioning States Sum (degradation)
5023  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
5024  * // {Eq_storage_unitsDecomStateSum}
5025  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
5026      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
5027      ..
5028      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
5029      =e=
5030      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
5031          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
5032   
5033  * // ### Storage Unit Sequential Degradation (degradation)
5034  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
5035  * // {Eq_storage_unitsDegradation}
5036  alias(degradation_states, degradation_states_a, degradation_states_b);
5037  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
5038      $(storage_techParam(storage_techs,vintage,"usageDegradation")
5039        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5040      ..
5041      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5042                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5043                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5044                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5045                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5046                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5047          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5048      * storage_bigM(storage_techs,vintage)
5049      =g=
5050      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5051   
5052  * // ### Storage Unit Sequential Degradation Range (degradation)
5053  * // Only one degradation range can be active.
5054  * // {Eq_storage_unitsDegradation_onlyOneRange}
5055  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5056      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5057      ..
5058      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5059            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5060      =e= 1;
5061   
5062  * // ### Storage Unit Sequential State of Charge (SoC)
5063  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5064  * // {Eq_storage_unitsSoC}
5065  alias(soc_states, soc_states_a, soc_states_b);
5066  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5067      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5068      ..
5069      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5070                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5071                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5072                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5073                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5074                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5075          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5076      * storage_bigM(storage_techs,vintage)
5077      =g=
5078      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5079   
5080  * // ### Storage Unit Sequential State of Charge Range (SoC)
5081  * // Only one state of charge range can be active.
5082  * // {Eq_storage_unitsSoC_onlyOneRange}
5083  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5084      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5085      ..
5086      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5087            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5088   
5089  * // ### Storage Unit State of Charge Sum (SoC)
5090  * // Each storage unit must have one state of charge.
5091  * // {Eq_storage_unitsSoC_sum}
5092  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5093      $storage_validSoCRange(storage_techs,vintage)
5094      ..
5095      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5096      =e=
5097      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5098            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5099   
5100  * // ### Storage Level State of Charge Sum (SoC)
5101  * // The total storage level must be represented by units in their specific states of charge.
5102  * // {Eq_storage_levelSoC}
5103  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5104      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5105      ..
5106      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5107      =e=
5108      storage_sizeParam(storage_techs,vintage,commodity,"size")
5109      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5110              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5111              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5112   
5113  * // ### C-Rate Limit (SoC)
5114  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5115  * // {Eq_storage_cRateLimit_SoC}
5116  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5117      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5118        and storage_validSoCRange(storage_techs,vintage)
5119        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5120      ..
5121      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5122      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5123          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5124      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5125          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5126      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5127          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5128          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5129          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5130              and ord(timeModelToCalc)=1)
5131      =l=
5132      storage_sizeParam(storage_techs,vintage,commodity,"size")
5133      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5134                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5135                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5136   
5137  * // ### E-Rate Limit (SoC)
5138  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5139  * // {Eq_storage_cRateLimit_SoC}
5140  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5141      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5142        and storage_validSoCRange(storage_techs,vintage)
5143        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5144      ..
5145      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5146      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5147          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5148      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5149          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5150      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5151          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5152          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5153          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5154              and ord(timeModelToCalc)=1)
5155      =g=
5156      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5157      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5158                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5159                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5160   
5161   
5162  * ==== model definition ====
5163   
5164  Model M_storage
5165  /
5166    Eq_storage_unitsBalance
5167    Eq_storage_unitsBalanceFreeDecom
5168    Eq_storage_unitsFreeDecom
5169    Eq_storage_unitsLowerLimit
5170    Eq_storage_unitsUpperLimit
5171    Eq_storage_levelUpperLimit_degradation
5172    Eq_storage_unitsTotalMIP
5173    Eq_storage_levelLowerLimit
5174    Eq_storage_levelUpperLimit
5177    Eq_storage_losses
5180    Eq_storage_unitsBalanceStates
5181    Eq_storage_unitsUpperLimitPerState
5182    Eq_storage_unitsStatesNoRecovery
5183    Eq_storage_cRateLimit
5184    Eq_storage_eRateLimit
5185    Eq_storage_charge
5186    Eq_storage_discharge
5187    Eq_storage_levelStateSum
5188    Eq_storage_levelUpperLimitPerAge
5189    Eq_storage_chargeBasedDegradationDistribution
5190    Eq_storage_chargingPerAge
5191    Eq_storage_unitsDecomStateSum
5192    Eq_storage_unitsDegradation
5193    Eq_storage_unitsDegradation_onlyOneRange
5194   
5195    Eq_storage_unitsSoC
5196    Eq_storage_unitsSoC_sum
5197    Eq_storage_unitsSoC_onlyOneRange
5198    Eq_storage_levelSoC
5199    Eq_storage_cRateLimit_SoC
5200    Eq_storage_eRateLimit_SoC
5201  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
5203  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5204  * SPDX-License-Identifier: BSD-3-Clause
5205   
5206  * // # core_transfer
5207  * // The equations in this file describe the commodity transfer in the model.
5208   
5209  * // ## Variables
5210  * // {special_table_transfer_variables}
5213   
5218   
5414   
5415  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5416  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5417      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5418   
5419   
5420  * ==== calculation of mappings ====
5421   
5422  * Technologies with a lifeTime > 0 are available
5423  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5424  transfer_availTech(linksModel,years,transfer_techs,vintage)
5425      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5426          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5427   
5428  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5429  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5430      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5431   
5432  * Technologies already built become unavailable if they have a linksBuild of 0
5433  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5434      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5435   
5436  * Used technologies are available technologies over their technical lifeTime
5437  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5438  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5439      $(vintage.val <= years.val
5440          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5441                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5442          ) = yes;
5443   
5444  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5445  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5446  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5447    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5448                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5449      and sum(yearsToCalc
5450        $(sameas(years, yearsToCalc)
5451          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5452          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5453    = yes;
5454   
5455  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5456    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5457                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5458      and sum(yearsToCalc
5459        $(sameas(years, yearsToCalc)
5460          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5461          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5462    = yes;
5463   
5464  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5465  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5466    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5467      and sum(yearsToCalc
5468        $(sameas(years, yearsToCalc)
5469          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5470    = yes;
5471   
5472  * Extend the decom frame to the year after the last year of usedTech
5473  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5474    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5475      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5476    = yes;
5477   
5478   
5479  * // ## Load links from gdx file
5481   
5482   
5483  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5484  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5485   
5486  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5487  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5488      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5489      = 1;
5490   
5491  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5492      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5493      = 1;
5494   
5495  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5496      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5497      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5498   
5499  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5500      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5501      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5502   
5503  * aggregate time dimension
5504  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5505  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5506      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5507      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5508            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5509            / timeLength(timeModelToCalc));
5510  option clear = transfer_flowProfileIn;
5511   
5512  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5513      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5514        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5515      = 1;
5516   
5517  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5518      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5519        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5520      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5521   
5522  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5523      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5524        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5525      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5526   
5527  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5528  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5529      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5530          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5531   
5532  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5533  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5534      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5536   
5537  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5538  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5539      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5540          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5541   
5542  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5543  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5544      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5545   
5546  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5547  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5548      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5549          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5550          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5551      = (1 / sum(linksData
5552                  $links_aggregate(linksModelToCalc,linksData),
5553              1 / ( sum(link_types,
5554                          transfer_lengthParamIn(linksData,link_types,"length")
5555                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5556                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5557   
5558  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5559  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5560      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5561              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5562   
5563  * aggregate coefficient delays per link and reduce based on time resolution
5564  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5566  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5567    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5568      or sum(link_types,
5569          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5570    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5571            + sum(link_types,
5572                transfer_lengthParam(linksModel,link_types,"length")
5573                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5574            / 1);
5576   
5577  * ==== parameter modifications ====
5578  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5579      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5580      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5581  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5582      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5583      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5584   
5585   
5586  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5587   
5588  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5589      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5590      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5591                       and transfer_incidenceData_flip(linksData) = 1),
5592              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5593              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5594          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5595                          and transfer_incidenceData_flip(linksData) = -1),
5596              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5597              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5598      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5599              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5600   
5601  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5602      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5603      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5604                       and transfer_incidenceData_flip(linksData) = 1),
5605              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5606              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5607          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5608                          and transfer_incidenceData_flip(linksData) = -1),
5609              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5610              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5611      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5612              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5613   
5614  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5615      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5616      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5617                       and transfer_incidenceData_flip(linksData) = 1
5618                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5619              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5620          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5621                          and transfer_incidenceData_flip(linksData) = -1
5622                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5623              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5624      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5625                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5626              1);
5627   
5628  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5629      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5630      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5631                       and transfer_incidenceData_flip(linksData) = 1
5632                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5633              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5634          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5635                          and transfer_incidenceData_flip(linksData) = -1
5636                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5637              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5638      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5639                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5640              1);
5641  option clear = transfer_flowProfileIn_aggTime;
5642   
5643  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5644   
5645  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5646      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5647      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5648                       and transfer_incidenceData_flip(linksData) = 1),
5649              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5650              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5651          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5652                          and transfer_incidenceData_flip(linksData) = -1),
5653              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5654              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5655      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5656              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5657   
5658  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5659      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5660      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5661                       and transfer_incidenceData_flip(linksData) = -1),
5662              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5663              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5664          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5665                          and transfer_incidenceData_flip(linksData) = 1),
5666              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5667              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5668      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5669              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5670   
5671  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5672      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5673      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5674                       and transfer_incidenceData_flip(linksData) = 1
5675                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5676              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5677          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5678                          and transfer_incidenceData_flip(linksData) = -1
5679                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5680              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5681      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5682                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5683              1);
5684   
5685  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5686      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5687      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5688                       and transfer_incidenceData_flip(linksData) = -1
5689                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5690              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5691          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5692                          and transfer_incidenceData_flip(linksData) = 1
5693                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5694              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5695      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5696                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5697              1);
5698   
5699  * Mapping for grid segments using DC optimal power flow
5700  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5701  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5702      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5705      = yes;
5708   
5709  * Ensure each grid segment uses exactly one commodity
5710  parameter checkGridSegmentCommodities(gridSegments);
5711  checkGridSegmentCommodities(gridSegments)
5712      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5713                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5714                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5715   
5716  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5717  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5718      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5719                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5720                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5721      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5722   
5723   
5727   
5728  scalar transfer_enableMIP;
5729  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5730   
5731   
5732  * ==== definition of variables ====
5733   
5734  * Initialise variables for linksBuild
5735  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5736      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5737      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5738  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5739      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5740      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5741  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5742      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5743      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5744   
5745  * Initialise variables for linksDecom
5746  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5747      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5748        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5749      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5750                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5751                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5752                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5753          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5754   
5755  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5756    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5757    = sum(years$
5758          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5759            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5760            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5761            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5762        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5763      + sum(yearsToCalc_a$
5764          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5765            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5766            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5767            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5768        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5769   
5770  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5771      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5772          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5773      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5774   
5775   
5777   
5778   
5779  * Calculate planned transfer links expansion
5780  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5781  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5782  loop(years,
5783    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5784      =
5785      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5786          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5787      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5788          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5789      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5790          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5791  );
5792   
5793  * Set initial state for planned units
5794  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5795    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5796   
5797  * // ## Load units from gdx file
5799   
5800  * Calculate if planned links expansion is bound by upper and lower limits
5801  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5802  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5803    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5804          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5805    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5806          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5807      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5808    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5809          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5810      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5811    = yes;
5812   
5813  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5814  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5815    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5816      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5817    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5818  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5819    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5820      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5821    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5822  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5823    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5824      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5825    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5826   
5827  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5828      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5829        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5830      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5831   
5832  * Add parameter for fixing capacities during myopic runs
5833  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5834  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5835  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5836   
5837  * ==== declaration of equations ====
5838   
5839  equations
5840    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5841      ) "Ensures the links balance over the planning period."
5842    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5843      ) "Ensures the links balance over the planning period."
5844    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5845      ) "Restricts the free decommissioning of links over the planning period."
5846    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5847      ) "Upper bound for the total number of links."
5848    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5849      ) "Lower bound for the total number of links."
5850    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5851      ) "Fixes the total number of links to the corresponding integer variable."
5852   
5853    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5854      ) "Upper bound for the flow along the transfer links."
5855    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5856      ) "Upper bound for the flow against the transfer links."
5857    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5858      )
5859    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5860      )
5861    ;
5862   
5863   
5864  * ==== equation definition ====
5865  * // ## Equations
5866  * // ### Transfer Links Balance
5867  * // Ensures that the transfer between nodes is balanced.
5868  * // {Eq_transfer_linksBalance}
5869   
5870  * Equation using build only
5871  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5872      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5873            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5874          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5875          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5876      ..
5877      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5878      =e=
5879      sum ((years_a)
5880              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5881                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5882                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5883                  and years_a.val <= yearsSel.val ),
5884            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5885   
5886      + sum ((yearsToCalc)
5887              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5888                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5889                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5890                  and yearsToCalc.val <= yearsSel.val ),
5891            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5892   
5893  * Equation using build and decom
5894  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5895      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5896            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5897          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5898          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5899      ..
5900      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5901      =e=
5902      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5903        sum(years$sameas(years, yearsToCalc),
5904          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5905            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5906      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5907        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5908          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5909      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5910          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5911      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5912          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5913      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5914          ;
5915   
5916  * // ### Transfer Links Free Decommissioning
5917  * // Balances free link decommissioning.
5918  * // {Eq_transfer_linksFreeDecom}
5919  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5920      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5921          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5922          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5923      ..
5924      sum(years$
5925            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5926              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5927              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5928          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5929      + sum(yearsToCalc$
5930            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5931              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5932              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5933              and yearsToCalc.val <= yearsSel.val),
5934          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5935      =g=
5936      sum(years$
5937            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5938              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5939              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5940          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5941      + sum(yearsToCalc$
5942            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5943              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5944              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5945          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5946   
5947  * // ### Transfer Links Lower Limit
5948  * // Ensures link capacity lower limits.
5949  * // {Eq_transfer_linksLowerLimit}
5950  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5951      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5952      ..
5953      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5954          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5955      =g=
5956      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5957   
5958  * // ### Transfer Links Upper Limit
5959  * // Ensures link capacity upper limits.
5960  * // {Eq_transfer_linksUpperLimit}
5961  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5962      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5963          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5964      ..
5965      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5966          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5967      =l=
5968      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5969   
5970  * // ### Transfer Links Total MIP
5971  * // Ensures number of MIP links.
5972  * // {Eq_transfer_linksTotalMIP}
5973  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5974      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5975          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5976      ..
5977      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5978      =e=
5979      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5980   
5981  * // ### Transfer Links Flow Along Upper Limit
5982  * // Ensures links flow along upper limit.
5983  * // {Eq_transfer_flowAlongUpperLimit}
5984  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5985      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5986      ..
5987      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5988      =l=
5989      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5990      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5991      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5992      ;
5993   
5994  * // ### Transfer Links Flow Against Upper Limit
5995  * // Ensures links flow against upper limit.
5996  * // {Eq_transfer_flowAgainstUpperLimit}
5997  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5998      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5999      ..
6000      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6001      =l=
6002      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
6003      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6004      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
6005      ;
6006   
6007  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
6008  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
6009      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
6010          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
6011      = yes;
6012   
6013  set transfer_usedOpfLinks(linksModel,years,gridSegments);
6014  option transfer_usedOpfLinks < transfer_usedOpf;
6015   
6016  set transfer_usedOpfSegments(years,gridSegments);
6017  option transfer_usedOpfSegments < transfer_usedOpf;
6018   
6022  * // ### Transfer DC optimal flow angle flows
6023  * // Angle flows.
6024  * // {Eq_transfer_dcopf_cycleFlows}
6025  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
6026      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
6027      ..
6028      sum ((transfer_techs,vintage)
6029              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
6030          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6031              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
6032          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
6033      =e=
6034      sum ( nodesModelSel,
6035          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
6036          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
6040   
6041   
6042  * ==== model definition ====
6043   
6044  Model M_transfer
6045  /
6046    Eq_transfer_linksBalance
6047    Eq_transfer_linksBalanceFreeDecom
6048    Eq_transfer_linksFreeDecom
6049    Eq_transfer_linksLowerLimit
6050    Eq_transfer_linksUpperLimit
6051    Eq_transfer_linksTotalMIP
6052    Eq_transfer_flowAlongUpperLimit
6053    Eq_transfer_flowAgainstUpperLimit
6057    Eq_transfer_dcopf_angleFlows
6061  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
6063  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6064  * SPDX-License-Identifier: BSD-3-Clause
6065   
6066  * // # core_sourcesink
6067  * // The equations in this file describe the sources and sinks in the model.
6068   
6069  * // ## Variables
6070  * // {special_table_sourcesink_variables}
6796   
6797  * // ## Aggregation of profiles
6798  * // Profiles are rescaled based on the annual sum.
6799   
6800  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6801  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6802      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6803  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6804      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6805  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6806      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6807   
6808  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6809  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6810      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6811      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6812   
6813  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6814  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6815      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6816      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6817   
6818  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6819  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6820      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6821          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6822          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6823      = yes;
6824   
6825  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6826              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6827   
6828  * calculate scaling factor for each type
6829  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6830  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6831      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6832          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6833      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6834          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6835              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6836   
6837  * rescale profiles
6838  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6839      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6840      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6841          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6842   
6843  * // ## Aggregation of profiles
6844  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6845   
6846  * ==== aggregation of profiles ====
6847  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6848  option sourcesink_usesProfileIn < sourcesink_profileIn
6849   
6850  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6851  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6852      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6853          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6854      = yes;
6855   
6856  * aagregate time dimension
6857  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6858  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6859    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6860    = sum(timeMapping_t(timeModelToCalc,timeData),
6861            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6862      / timeLength(timeModelToCalc);
6863  option clear = sourcesink_profileIn;
6864   
6865  * sum up absolute profiles
6866  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6867  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6868      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6869      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6870              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6871  option clear = sourcesink_profileIn_aggTime;
6872   
6873  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6874  option sourcesink_enabled < sourcesink_config;
6875   
6879   
6880  * ==== declaration of variables ====
6881  * // ## Bounding of variables
6882  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6883  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6884      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6885          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6886          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6887      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6888   
6889  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6890      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6891          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6892          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6893      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6894   
6895  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6896      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6897          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6898      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6899   
6900  option clear = sourcesink_profile;
6901   
6902   
6903  * ==== equation definition ====
6904  * // ## Equations
6905  equations
6906  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6907      ) "Fixes the annual sum from sources / to sinks"
6908  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6909      ) "Limits the lower sum from sources / to sinks"
6910  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6911      ) "Limits the upper sum from sources / to sinks"
6912    ;
6913   
6914  * // ### Fixed annual sums for sources and sinks
6915  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6916  * // {Eq_sourcesink_useFixedSum}
6917  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6918      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6919          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6920      ..
6921      sum(timeModelSel,
6922          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6923          * timeLength(timeModelSel))
6924      =e=
6925      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6926      * timefrac
6927      ;
6928   
6929  * // ### Lower annual sums for sources and sinks
6930  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6931  * // {Eq_sourcesink_useLowerSum}
6932  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6933      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6934          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6935          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6936      ..
6937      sum(timeModelSel,
6938          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6939          * timeLength(timeModelSel))
6940      =g=
6941      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6942      * timefrac
6943      ;
6944   
6945  * // ### Upper annual sums for sources and sinks
6946  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6947  * // {Eq_sourcesink_useUpperSum}
6948  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6949      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6950          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6951          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6952      ..
6953      sum(timeModelSel,
6954          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6955          * timeLength(timeModelSel))
6956      =l=
6957      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6958      * timefrac
6959      ;
6960   
6961   
6962  * ==== model definition ====
6963   
6964  Model M_sourcesink
6965  /
6966    Eq_sourcesink_useFixedSum
6967    Eq_sourcesink_useLowerSum
6968    Eq_sourcesink_useUpperSum
6969  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
6971  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6972  * SPDX-License-Identifier: BSD-3-Clause
6973   
6974  * // # balance
6975  * // The equations in this file describe the commodity balancing in the model.
6976   
6977  Equations
6978    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6979      ) "Balance for each commodity used in each time step, region, and year";
6980   
6981   
6982  * ==== calculation of mappings ====
6983   
6984  set balance_techComm(techs,commodity);
6985  balance_techComm(converter_techs(techs),commodity)
6986      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6987  balance_techComm(storage_techs(techs),commodity)
6988      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6989  balance_techComm(transfer_techs(techs),commodity)
6990      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6991  balance_techComm(sourcesink_techs(techs),commodity)
6992      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6993   
6994  set balance_usedConverter(nodesModel,years,commodity);
6995  set balance_usedStorage(nodesModel,years,commodity);
6996  set balance_usedTransfer(nodesModel,years,commodity);
6997  set balance_usedSourceSink(nodesModel,years,commodity);
6998  set balance_usedBalance(nodesModel,years,commodity);
6999   
7000  balance_usedConverter(nodesModel,years,commodity)
7001      = sum ((converter_techs,vintage,activity)
7002              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
7003                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
7004   
7005  balance_usedStorage(nodesModel,years,commodity)
7006      = sum ((storage_techs,vintage,activity)
7007              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7008                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
7009   
7010  balance_usedTransfer(nodesModel,years,commodity)
7011      = sum ((linksModel,transfer_techs,vintage)
7012              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
7013                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
7014   
7015  option balance_usedSourceSink < sourcesink_enabled;
7016   
7017  balance_usedBalance(nodesModel,years,commodity)
7018      $(balance_usedConverter(nodesModel,years,commodity)
7019          or balance_usedStorage(nodesModel,years,commodity)
7020          or balance_usedTransfer(nodesModel,years,commodity)
7021          or balance_usedSourceSink(nodesModel,years,commodity) )
7022      = yes;
7023   
7024   
7025  * ==== equation definition ====
7026   
7027  * // ### Balance commodities
7028  * // Balancing of commodities for all model regions, time steps, and years
7029  * // {Eq_balance_commodities}
7030  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
7031      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
7032      ..
7033  * converter
7034      sum((converter_techs,vintage,activity)
7035              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
7036                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
7037          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
7038              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
7039              * timeLength(timeModelToCalc)
7040          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
7041              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
7042              * timeLength(timeModelToCalc))
7043   
7044  * storages
7045      + sum((storage_techs,vintage)
7046              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
7047                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
7048          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7049              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
7050          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7051              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
7052          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
7053              * storage_sizeParam(storage_techs,vintage,commodity,"size")
7054              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
7055              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
7056                  and ord(timeModelToCalc)=1)
7057          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7060          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
7061          * timeLength(timeModelSel)
7064          )
7065   
7066  * incoming transfer
7067      + sum((linksModel,transfer_techs,vintage)
7068              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7069                  and linksModelToCalc(linksModel)),
7070          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
7071                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
7072            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
7073                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
7074          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7075          * timeLength(timeModelToCalc))
7076   
7077  * outgoing transfer
7078      - sum((linksModel,transfer_techs,vintage)
7079              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7080                  and linksModelToCalc(linksModel)),
7081          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7082                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
7083            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7084                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
7085          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
7086          * timeLength(timeModelSel))
7087   
7088  * transfer losses
7089      + 0.5 * sum((linksModel,transfer_techs,vintage)
7090              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
7091                  AND linksModelToCalc(linksModel)),
7092          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7093                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
7094            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
7095                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
7096          * timeLength(timeModelSel)
7097          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7098              + sum(link_types,
7099                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7100                  * transfer_lengthParam(linksModel,link_types,"length"))))
7101   
7102  * sourcesink
7103      + sum((sourcesink_techs)
7104              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7105          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7106          * timeLength(timeModelSel))
7107      =e=
7108      0;
7109   
7110   
7111  * ==== model definition ====
7112   
7113  Model M_balance
7114  /
7115    Eq_balance_commodities
7116  /;
7117   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
7119  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7120  * SPDX-License-Identifier: BSD-3-Clause
7121   
7122  * // # accounting_equations
7123   
7124  * ==== declaration of variables ====
7125   
7126  variables
7127  accounting_indicator(accNodesModel,accYears,indicator)
7128  accounting_indicator_links(linksModel,years,indicator)
7129  accounting_objective
7130  ;
7131   
7132   
7133  * ==== definition of variables ====
7134   
7135  accounting_indicator.lo(accNodesModel,accYears,indicator)
7136      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7137          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7138      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7139   
7140  accounting_indicator.up(accNodesModel,accYears,indicator)
7141      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7142          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7143      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7144   
7145  accounting_indicator.fx(accNodesModel,accYears,indicator)
7146      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
7147          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7148      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7149   
7150   
7151  * set the variable levels to be fixed for years before the optimization years
7152  accounting_indicator.l(accNodesModel,accYears,indicator)
7153      $activeIndicators(accNodesModel,accYears,indicator)
7154      = 0;
7155   
7156   
7157  * ==== declaration of equations ====
7158   
7159  equations
7160  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
7161      ) "Ensures the fixed value of an indicator per accounting region"
7162  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
7163      ) "Ensures the upper limit of an indicator per accounting region"
7164  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
7165      ) "Ensures the lower limit of an indicator per accounting region"
7166  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
7167      ) "Ensures the fixed value of an indicator per model link"
7168  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
7169      ) "Ensures the upper limit of an indicator per model link"
7170  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
7171      ) "Ensures the lower limit of an indicator per model link"
7172  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7173    ;
7174   
7175   
7176  * ==== equations definition ====
7177  * // ## Equations
7178  * // ### Accounting Indicator Calculation
7179  * // Calculates the fixed limit for accounting indicators.
7180  * // {Eq_accounting_indicatorCalc_fixed}
7181  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
7182      $(activeIndicators(accNodesModel,accYears,indicator)
7183          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7184      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7186  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7187  * SPDX-License-Identifier: BSD-3-Clause
7188   
7189  * == variable indicators ==
7190      sum((accNodesModel_a,accYears_a,indicator_a)
7191          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7192              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7193          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7194          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7195          )
7196   
7197  * == converters ==
7198      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7199              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7200                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7201          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7202          *
7203          ( sum ((converter_techs,vintage)
7204                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7205                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7206              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7207              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7208              )
7209   
7210          + sum ((years_a,converter_techs,vintage)
7211                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7212                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7213                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7214                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7215                          and years_a.val <= yearsSel.val ),
7216              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7217              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7218              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7219              )
7220   
7221          + sum ((yearsToCalc,converter_techs,vintage)
7222                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7223                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7224                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7225                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7226                          and yearsToCalc.val <= yearsSel.val ),
7227              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7228              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7229              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7230              )
7231   
7232          + sum ((converter_techs,vintage)
7233                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7234                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7235              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7236              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7237   
7238          + sum ((converter_techs,vintage)
7239                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7240              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7241              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7242   
7243          + sum ((timeModelSel,converter_techs,vintage,activity)
7244                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7245              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7246              * timeLength(timeModelSel)
7247              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7248          / timefrac
7249   
7250          + sum ((timeModelSel,converter_techs,vintage)
7251                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7252              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7253              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7254          / timefrac
7255   
7256          + sum ((timeModelSel,converter_techs,vintage)
7257                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7258              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7259              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7260                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7261   
7262              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7263              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7264                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7265          / timefrac
7266          )
7267      )
7268   
7269  * == storage ==
7270      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7271              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7272                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7273          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7274          *
7275          ( sum ((storage_techs,vintage)
7276                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7277                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7278              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7279              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7280              )
7281   
7282          + sum ((years_a,storage_techs,vintage)
7283                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7284                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7285                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7286                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7287                          and years_a.val <= yearsSel.val ),
7288              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7289              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7290              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7291              )
7292   
7293          + sum ((yearsToCalc,storage_techs,vintage)
7294                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7295                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7296                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7297                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7298                          and yearsToCalc.val <= yearsSel.val ),
7299              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7300              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7301              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7302              )
7303   
7304          + sum ((storage_techs,vintage)
7305                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7306                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7307              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7308              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7309   
7310          + sum ((storage_techs,vintage)
7311                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7312              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7313              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7314          )
7315      )
7316   
7317   
7318  * == transfer ==
7319      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7320              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7321                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7322          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7323          *
7324          ( sum ((linksModelToCalc,transfer_techs,vintage)
7325                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7326                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7327                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7328              0.5
7329              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7330              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7331   
7332          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7333                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7334                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7335                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7336                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7337                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7338                          and years_a.val <= yearsSel.val ),
7339              0.5
7340              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7341              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7342              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7343   
7344          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7345                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7346                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7347                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7348                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7349                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7350                          and yearsToCalc.val <= yearsSel.val ),
7351              0.5
7352              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7353              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7354              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7355   
7356          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7357                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7358                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7359                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7360              0.5
7361              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7362              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7363              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7364   
7365          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7366                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7367                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7368                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7369                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7370                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7371                          and years_a.val <= yearsSel.val ),
7372              0.5
7373              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7374              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7375              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7376              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7377   
7378          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7379                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7380                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7381                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7382                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7383                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7384                          and yearsToCalc.val <= yearsSel.val ),
7385              0.5
7386              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7387              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7388              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7389              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7390   
7391          + sum ((linksModelToCalc,transfer_techs,vintage)
7392                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7393                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7394                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7395              0.5
7396              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7397              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7398   
7399              + 0.5
7400              * sum (link_types,
7401                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7402                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7403                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7404              ) )
7405   
7406          + sum ((linksModelToCalc,transfer_techs,vintage)
7407                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7408                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7409              0.5
7410              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7411              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7412   
7413              + 0.5
7414              * sum (link_types,
7415                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7416                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7417                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7418   
7419              + 0.5
7420              * sum (timeModelSel,
7421                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7422                  * timeLength(timeModelSel)
7423                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7424                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7425   
7426                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7427                  * timeLength(timeModelSel)
7428                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7429                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7430                  / timefrac
7431   
7432              + 0.5
7433              * sum ((timeModelSel, link_types),
7434                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7435                  * timeLength(timeModelSel)
7436                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7437                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7438                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7439   
7440                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7441                  * timeLength(timeModelSel)
7442                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7443                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7444                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7445                  / timefrac
7446              )
7447          )
7448      )
7449   
7450   
7451  * == sources / sinks ==
7452      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7453              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7454                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7455          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7456          *
7457          sum ((timeModelSel,sourcesink_techs,commodity)
7458                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7459              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7460              * timeLength(timeModelSel)
7461              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7462          / timefrac
7463      )
7464      =e=
7465      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7466   
7467  * // ### Accounting Indicator Calculation
7468  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7469  * // {Eq_accounting_indicatorCalc_upper}
7470  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
7471      $(activeIndicators(accNodesModel,accYears,indicator)
7472          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7473          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7474      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7476  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7477  * SPDX-License-Identifier: BSD-3-Clause
7478   
7479  * == variable indicators ==
7480      sum((accNodesModel_a,accYears_a,indicator_a)
7481          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7482              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7483          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7484          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7485          )
7486   
7487  * == converters ==
7488      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7489              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7490                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7491          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7492          *
7493          ( sum ((converter_techs,vintage)
7494                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7495                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7496              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7497              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7498              )
7499   
7500          + sum ((years_a,converter_techs,vintage)
7501                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7502                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7503                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7504                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7505                          and years_a.val <= yearsSel.val ),
7506              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7507              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7508              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7509              )
7510   
7511          + sum ((yearsToCalc,converter_techs,vintage)
7512                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7513                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7514                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7515                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7516                          and yearsToCalc.val <= yearsSel.val ),
7517              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7518              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7519              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7520              )
7521   
7522          + sum ((converter_techs,vintage)
7523                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7524                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7525              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7526              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7527   
7528          + sum ((converter_techs,vintage)
7529                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7530              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7531              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7532   
7533          + sum ((timeModelSel,converter_techs,vintage,activity)
7534                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7535              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7536              * timeLength(timeModelSel)
7537              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7538          / timefrac
7539   
7540          + sum ((timeModelSel,converter_techs,vintage)
7541                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7542              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7543              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7544          / timefrac
7545   
7546          + sum ((timeModelSel,converter_techs,vintage)
7547                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7548              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7549              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7550                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7551   
7552              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7553              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7554                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7555          / timefrac
7556          )
7557      )
7558   
7559  * == storage ==
7560      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7561              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7562                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7563          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7564          *
7565          ( sum ((storage_techs,vintage)
7566                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7567                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7568              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7569              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7570              )
7571   
7572          + sum ((years_a,storage_techs,vintage)
7573                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7574                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7575                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7576                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7577                          and years_a.val <= yearsSel.val ),
7578              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7579              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7580              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7581              )
7582   
7583          + sum ((yearsToCalc,storage_techs,vintage)
7584                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7585                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7586                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7587                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7588                          and yearsToCalc.val <= yearsSel.val ),
7589              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7590              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7591              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7592              )
7593   
7594          + sum ((storage_techs,vintage)
7595                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7596                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7597              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7598              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7599   
7600          + sum ((storage_techs,vintage)
7601                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7602              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7603              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7604          )
7605      )
7606   
7607   
7608  * == transfer ==
7609      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7610              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7611                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7612          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7613          *
7614          ( sum ((linksModelToCalc,transfer_techs,vintage)
7615                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7616                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7617                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7618              0.5
7619              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7620              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7621   
7622          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7623                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7624                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7625                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7626                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7627                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7628                          and years_a.val <= yearsSel.val ),
7629              0.5
7630              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7631              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7632              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7633   
7634          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7635                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7636                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7637                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7638                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7639                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7640                          and yearsToCalc.val <= yearsSel.val ),
7641              0.5
7642              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7643              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7644              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7645   
7646          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7647                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7648                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7649                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7650              0.5
7651              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7652              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7653              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7654   
7655          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7656                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7657                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7658                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7659                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7660                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7661                          and years_a.val <= yearsSel.val ),
7662              0.5
7663              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7664              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7665              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7666              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7667   
7668          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7669                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7670                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7671                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7672                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7673                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7674                          and yearsToCalc.val <= yearsSel.val ),
7675              0.5
7676              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7677              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7678              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7679              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7680   
7681          + sum ((linksModelToCalc,transfer_techs,vintage)
7682                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7683                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7684                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7685              0.5
7686              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7687              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7688   
7689              + 0.5
7690              * sum (link_types,
7691                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7692                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7693                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7694              ) )
7695   
7696          + sum ((linksModelToCalc,transfer_techs,vintage)
7697                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7698                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7699              0.5
7700              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7701              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7702   
7703              + 0.5
7704              * sum (link_types,
7705                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7706                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7707                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7708   
7709              + 0.5
7710              * sum (timeModelSel,
7711                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7712                  * timeLength(timeModelSel)
7713                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7714                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7715   
7716                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7717                  * timeLength(timeModelSel)
7718                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7719                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7720                  / timefrac
7721   
7722              + 0.5
7723              * sum ((timeModelSel, link_types),
7724                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7725                  * timeLength(timeModelSel)
7726                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7727                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7728                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7729   
7730                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7731                  * timeLength(timeModelSel)
7732                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7733                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7734                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7735                  / timefrac
7736              )
7737          )
7738      )
7739   
7740   
7741  * == sources / sinks ==
7742      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7743              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7744                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7745          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7746          *
7747          sum ((timeModelSel,sourcesink_techs,commodity)
7748                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7749              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7750              * timeLength(timeModelSel)
7751              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7752          / timefrac
7753      )
7754      =l=
7755      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7756   
7757  * // ### Accounting Indicator Calculation
7758  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7759  * // {Eq_accounting_indicatorCalc_lower}
7760  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
7761      $(activeIndicators(accNodesModel,accYears,indicator)
7762          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7763          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7764      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7766  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7767  * SPDX-License-Identifier: BSD-3-Clause
7768   
7769  * == variable indicators ==
7770      sum((accNodesModel_a,accYears_a,indicator_a)
7771          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7772              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7773          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7774          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7775          )
7776   
7777  * == converters ==
7778      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7779              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7780                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7781          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7782          *
7783          ( sum ((converter_techs,vintage)
7784                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7785                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7786              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7787              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7788              )
7789   
7790          + sum ((years_a,converter_techs,vintage)
7791                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7792                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7793                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7794                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7795                          and years_a.val <= yearsSel.val ),
7796              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7797              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7798              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7799              )
7800   
7801          + sum ((yearsToCalc,converter_techs,vintage)
7802                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7803                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7804                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7805                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7806                          and yearsToCalc.val <= yearsSel.val ),
7807              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7808              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7809              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7810              )
7811   
7812          + sum ((converter_techs,vintage)
7813                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7814                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7815              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7816              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7817   
7818          + sum ((converter_techs,vintage)
7819                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7820              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7821              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7822   
7823          + sum ((timeModelSel,converter_techs,vintage,activity)
7824                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7825              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7826              * timeLength(timeModelSel)
7827              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7828          / timefrac
7829   
7830          + sum ((timeModelSel,converter_techs,vintage)
7831                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7832              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7833              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7834          / timefrac
7835   
7836          + sum ((timeModelSel,converter_techs,vintage)
7837                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7838              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7839              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7840                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7841   
7842              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7843              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7844                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7845          / timefrac
7846          )
7847      )
7848   
7849  * == storage ==
7850      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7851              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7852                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7853          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7854          *
7855          ( sum ((storage_techs,vintage)
7856                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7857                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7858              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7859              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7860              )
7861   
7862          + sum ((years_a,storage_techs,vintage)
7863                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7864                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7865                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7866                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7867                          and years_a.val <= yearsSel.val ),
7868              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7869              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7870              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7871              )
7872   
7873          + sum ((yearsToCalc,storage_techs,vintage)
7874                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7875                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7876                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7877                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7878                          and yearsToCalc.val <= yearsSel.val ),
7879              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7880              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7881              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7882              )
7883   
7884          + sum ((storage_techs,vintage)
7885                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7886                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7887              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7888              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7889   
7890          + sum ((storage_techs,vintage)
7891                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7892              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7893              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7894          )
7895      )
7896   
7897   
7898  * == transfer ==
7899      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7900              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7901                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7902          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7903          *
7904          ( sum ((linksModelToCalc,transfer_techs,vintage)
7905                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7906                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7907                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7908              0.5
7909              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7910              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7911   
7912          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7913                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7914                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7915                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7916                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7917                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7918                          and years_a.val <= yearsSel.val ),
7919              0.5
7920              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7921              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7922              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7923   
7924          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7925                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7926                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7927                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7928                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7929                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7930                          and yearsToCalc.val <= yearsSel.val ),
7931              0.5
7932              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7933              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7934              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7935   
7936          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7937                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7938                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7939                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7940              0.5
7941              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7942              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7943              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7944   
7945          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7946                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7947                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7948                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7949                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7950                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7951                          and years_a.val <= yearsSel.val ),
7952              0.5
7953              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7954              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7955              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7956              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7957   
7958          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7959                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7960                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7961                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7962                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7963                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7964                          and yearsToCalc.val <= yearsSel.val ),
7965              0.5
7966              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7967              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7968              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7969              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7970   
7971          + sum ((linksModelToCalc,transfer_techs,vintage)
7972                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7973                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7974                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7975              0.5
7976              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7977              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7978   
7979              + 0.5
7980              * sum (link_types,
7981                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7982                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7983                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7984              ) )
7985   
7986          + sum ((linksModelToCalc,transfer_techs,vintage)
7987                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7988                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7989              0.5
7990              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7991              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7992   
7993              + 0.5
7994              * sum (link_types,
7995                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7996                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7997                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7998   
7999              + 0.5
8000              * sum (timeModelSel,
8001                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8002                  * timeLength(timeModelSel)
8003                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8004                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8005   
8006                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8007                  * timeLength(timeModelSel)
8008                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8009                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8010                  / timefrac
8011   
8012              + 0.5
8013              * sum ((timeModelSel, link_types),
8014                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8015                  * timeLength(timeModelSel)
8016                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8017                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8018                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8019   
8020                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8021                  * timeLength(timeModelSel)
8022                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8023                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8024                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8025                  / timefrac
8026              )
8027          )
8028      )
8029   
8030   
8031  * == sources / sinks ==
8032      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8033              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8034                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8035          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8036          *
8037          sum ((timeModelSel,sourcesink_techs,commodity)
8038                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8039              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8040              * timeLength(timeModelSel)
8041              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8042          / timefrac
8043      )
8044      =g=
8045      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
8046   
8047   
8048  * // ### Accounting Indicator Calculation Links
8049  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8050  * // {Eq_accounting_indicatorCalc_links_fixed}
8051  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
8052      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8053          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8054      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8056  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8057  * SPDX-License-Identifier: BSD-3-Clause
8058   
8059      sum ((transfer_techs,vintage)
8060                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8061                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8062          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8063          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8064   
8065      + sum ((years_a,transfer_techs,vintage)
8066                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8067                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8068                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8069                      and years_a.val <= yearsSel.val ),
8070          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8071          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8072          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8073   
8074      + sum ((transfer_techs,vintage,link_types)
8075                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8076                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8077          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8078          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8079          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8080   
8081      + sum ((years_a,transfer_techs,vintage,link_types)
8082                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8083                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8084                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8085                      and years_a.val <= yearsSel.val ),
8086          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8087          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8088          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8089          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8090   
8091      + sum ((transfer_techs,vintage)
8092                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8093                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8094          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8095          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8096   
8097          + sum (link_types,
8098              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8099              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8100              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8101          ) )
8102   
8103      + sum ((transfer_techs,vintage)
8104                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8105          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8106          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8107   
8108          + sum (link_types,
8109              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8110              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8111              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8112   
8113          + sum (timeModelSel,
8114              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8115              * timeLength(timeModelSel)
8116              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8117                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8118   
8119              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8120              * timeLength(timeModelSel)
8121              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8122                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8123              / timefrac
8124   
8125          + sum ((timeModelSel, link_types),
8126              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8127              * timeLength(timeModelSel)
8128              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8129              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8130                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8131   
8132              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8133              * timeLength(timeModelSel)
8134              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8135              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8136                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8137              / timefrac
8138          )
8139      =e=
8140  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
8141   
8142  * // ### Accounting Indicator Calculation Links
8143  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8144  * // {Eq_accounting_indicatorCalc_links_upper}
8145  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
8146      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8147          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
8148          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8149      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8151  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8152  * SPDX-License-Identifier: BSD-3-Clause
8153   
8154      sum ((transfer_techs,vintage)
8155                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8156                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8157          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8158          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8159   
8160      + sum ((years_a,transfer_techs,vintage)
8161                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8162                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8163                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8164                      and years_a.val <= yearsSel.val ),
8165          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8166          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8167          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8168   
8169      + sum ((transfer_techs,vintage,link_types)
8170                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8171                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8172          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8173          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8174          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8175   
8176      + sum ((years_a,transfer_techs,vintage,link_types)
8177                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8178                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8179                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8180                      and years_a.val <= yearsSel.val ),
8181          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8182          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8183          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8184          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8185   
8186      + sum ((transfer_techs,vintage)
8187                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8188                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8189          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8190          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8191   
8192          + sum (link_types,
8193              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8194              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8195              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8196          ) )
8197   
8198      + sum ((transfer_techs,vintage)
8199                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8200          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8201          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8202   
8203          + sum (link_types,
8204              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8205              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8206              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8207   
8208          + sum (timeModelSel,
8209              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8210              * timeLength(timeModelSel)
8211              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8212                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8213   
8214              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8215              * timeLength(timeModelSel)
8216              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8217                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8218              / timefrac
8219   
8220          + sum ((timeModelSel, link_types),
8221              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8222              * timeLength(timeModelSel)
8223              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8224              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8225                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8226   
8227              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8228              * timeLength(timeModelSel)
8229              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8230              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8231                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8232              / timefrac
8233          )
8234      =l=
8235  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
8236   
8237  * // ### Accounting Indicator Calculation Links
8238  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8239  * // {Eq_accounting_indicatorCalc_links_lower}
8240  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
8241      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8242          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
8243          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8244      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8246  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8247  * SPDX-License-Identifier: BSD-3-Clause
8248   
8249      sum ((transfer_techs,vintage)
8250                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8251                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8252          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8253          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8254   
8255      + sum ((years_a,transfer_techs,vintage)
8256                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8257                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8258                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8259                      and years_a.val <= yearsSel.val ),
8260          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8261          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8262          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8263   
8264      + sum ((transfer_techs,vintage,link_types)
8265                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8266                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8267          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8268          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8269          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8270   
8271      + sum ((years_a,transfer_techs,vintage,link_types)
8272                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8273                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8274                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8275                      and years_a.val <= yearsSel.val ),
8276          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8277          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8278          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8279          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8280   
8281      + sum ((transfer_techs,vintage)
8282                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8283                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8284          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8285          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8286   
8287          + sum (link_types,
8288              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8289              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8290              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8291          ) )
8292   
8293      + sum ((transfer_techs,vintage)
8294                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8295          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8296          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8297   
8298          + sum (link_types,
8299              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8300              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8301              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8302   
8303          + sum (timeModelSel,
8304              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8305              * timeLength(timeModelSel)
8306              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8307                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8308   
8309              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8310              * timeLength(timeModelSel)
8311              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8312                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8313              / timefrac
8314   
8315          + sum ((timeModelSel, link_types),
8316              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8317              * timeLength(timeModelSel)
8318              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8319              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8320                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8321   
8322              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8323              * timeLength(timeModelSel)
8324              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8325              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8326                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8327              / timefrac
8328          )
8329      =g=
8330  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
8331   
8332   
8333  * // ### Accounting Objective
8334  * // Calculates the indicators for the objective.
8335  * // {Eq_accounting_objective}
8336  Eq_accounting_objective
8337      ..
8338      accounting_objective
8339      =e=
8340      sum ((accNodesModel,accYears,indicator)
8341              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8342          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
8343          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8345  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8346  * SPDX-License-Identifier: BSD-3-Clause
8347   
8348  * == variable indicators ==
8349      sum((accNodesModel_a,accYears_a,indicator_a)
8350          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8351              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8352          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8353          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8354          )
8355   
8356  * == converters ==
8357      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8358              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8359                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8360          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8361          *
8362          ( sum ((converter_techs,vintage)
8363                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8364                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8365              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8366              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8367              )
8368   
8369          + sum ((years_a,converter_techs,vintage)
8370                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8371                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8372                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8373                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8374                          and years_a.val <= yearsSel.val ),
8375              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8376              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8377              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8378              )
8379   
8380          + sum ((yearsToCalc,converter_techs,vintage)
8381                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8382                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8383                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8384                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8385                          and yearsToCalc.val <= yearsSel.val ),
8386              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8387              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8388              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8389              )
8390   
8391          + sum ((converter_techs,vintage)
8392                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8393                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8394              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8395              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8396   
8397          + sum ((converter_techs,vintage)
8398                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8399              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8400              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8401   
8402          + sum ((timeModelSel,converter_techs,vintage,activity)
8403                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8404              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8405              * timeLength(timeModelSel)
8406              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8407          / timefrac
8408   
8409          + sum ((timeModelSel,converter_techs,vintage)
8410                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8411              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8412              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8413          / timefrac
8414   
8415          + sum ((timeModelSel,converter_techs,vintage)
8416                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8417              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8418              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8419                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8420   
8421              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8422              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8423                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8424          / timefrac
8425          )
8426      )
8427   
8428  * == storage ==
8429      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8430              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8431                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8432          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8433          *
8434          ( sum ((storage_techs,vintage)
8435                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8436                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8437              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8438              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8439              )
8440   
8441          + sum ((years_a,storage_techs,vintage)
8442                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8443                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8444                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8445                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8446                          and years_a.val <= yearsSel.val ),
8447              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8448              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8449              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8450              )
8451   
8452          + sum ((yearsToCalc,storage_techs,vintage)
8453                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8454                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8455                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8456                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8457                          and yearsToCalc.val <= yearsSel.val ),
8458              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8459              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8460              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8461              )
8462   
8463          + sum ((storage_techs,vintage)
8464                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8465                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8466              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8467              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8468   
8469          + sum ((storage_techs,vintage)
8470                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8471              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8472              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8473          )
8474      )
8475   
8476   
8477  * == transfer ==
8478      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8479              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8480                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8481          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8482          *
8483          ( sum ((linksModelToCalc,transfer_techs,vintage)
8484                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8485                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8486                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8487              0.5
8488              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8489              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8490   
8491          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8492                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8493                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8494                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8495                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8496                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8497                          and years_a.val <= yearsSel.val ),
8498              0.5
8499              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8500              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8501              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8502   
8503          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8504                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8505                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8506                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8507                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8508                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8509                          and yearsToCalc.val <= yearsSel.val ),
8510              0.5
8511              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8512              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8513              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8514   
8515          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8516                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8517                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8518                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8519              0.5
8520              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8521              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8522              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8523   
8524          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8525                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8526                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8527                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8528                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8529                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8530                          and years_a.val <= yearsSel.val ),
8531              0.5
8532              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8533              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8534              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8535              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8536   
8537          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8538                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8539                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8540                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8541                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8542                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8543                          and yearsToCalc.val <= yearsSel.val ),
8544              0.5
8545              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8546              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8547              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8548              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8549   
8550          + sum ((linksModelToCalc,transfer_techs,vintage)
8551                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8552                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8553                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8554              0.5
8555              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8556              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8557   
8558              + 0.5
8559              * sum (link_types,
8560                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8561                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8562                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8563              ) )
8564   
8565          + sum ((linksModelToCalc,transfer_techs,vintage)
8566                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8567                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8568              0.5
8569              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8570              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8571   
8572              + 0.5
8573              * sum (link_types,
8574                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8575                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8576                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8577   
8578              + 0.5
8579              * sum (timeModelSel,
8580                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8581                  * timeLength(timeModelSel)
8582                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8583                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8584   
8585                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8586                  * timeLength(timeModelSel)
8587                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8588                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8589                  / timefrac
8590   
8591              + 0.5
8592              * sum ((timeModelSel, link_types),
8593                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8594                  * timeLength(timeModelSel)
8595                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8596                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8597                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8598   
8599                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8600                  * timeLength(timeModelSel)
8601                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8602                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8603                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8604                  / timefrac
8605              )
8606          )
8607      )
8608   
8609   
8610  * == sources / sinks ==
8611      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8612              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8613                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8614          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8615          *
8616          sum ((timeModelSel,sourcesink_techs,commodity)
8617                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8618              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8619              * timeLength(timeModelSel)
8620              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8621          / timefrac
8622      )
8623      )
8624   
8625   
8626  * ==== model definition ====
8627   
8628  Model M_accounting
8629  /
8630  Eq_accounting_indicatorCalc_fixed
8631  Eq_accounting_indicatorCalc_upper
8632  Eq_accounting_indicatorCalc_lower
8633  Eq_accounting_indicatorCalc_links_fixed
8634  Eq_accounting_indicatorCalc_links_upper
8635  Eq_accounting_indicatorCalc_links_lower
8636  Eq_accounting_objective
8637  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
8639  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8640  * SPDX-License-Identifier: BSD-3-Clause
8641   
8642  * ==== optimization frames ====
8644   
8645  * mapping from optimization frame to years
8647  set optiframe / of1 * of1 /;
8648  set optiframeToCalc(optiframe);
8649   
8651  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
8653   
8655   
8656  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
8658  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8659  * SPDX-License-Identifier: BSD-3-Clause
8660   
8661  * ==== Overview of model dimensions ====
8662  parameters  acts(converter_techs) "active technologies"
8663              asts(storage_techs) "active storage technologies"
8664              atts(transfer_techs) "active transfer technologies"
8665   
8666  scalars nd "number of dispatch time steps per year"
8667          nn "number of network nodes"
8668          nl "number of network links"
8669          nt "number of converter, storage and transfer technologies"
8670          nc "number of commodities"
8671          ny "number of years of the capacity planning horizon";
8672   
8673  option acts < converter_availTech;
8674  option asts < storage_availTech;
8675  option atts < transfer_availTech;
8676   
8677  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
8678  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
8679  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
8680  nt = sum (storage_techs $asts(storage_techs), 1)
8681      + sum (converter_techs $acts(converter_techs), 1)
8682      + sum (transfer_techs $atts(transfer_techs), 1);
8683  nc = card(commodity);
8684  ny = sum (years $yearsToCalc(years), 1);
8685   
8686  file props / '' /;
8687  put props;
8688  put "### Model properties  ###" /;
8689  put "Number of active dispatch time steps per year: " nd:0:0  /;
8690  put "Number of active network nodes: " nn:0:0  /;
8691  put "Number of active network links: " nl:0:0  /;
8692  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
8693  put "Number of commodities: " nc:0:0  /;
8694  put "Number of years considered for capacity expansion: " ny:0:0  /;
8695  putclose;
8696   
8697  Model remix /
8698    M_converter
8699    M_storage
8700    M_transfer
8701    M_sourcesink
8702    M_balance
8703    M_accounting
8704  /;
8705   
8709   
8710  * ==== include methods  ====
8713   
8714  * check if the method is valid
8719   
8720   
8721  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
8723  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8724  * SPDX-License-Identifier: BSD-3-Clause
8725   
8728   
8731   
8732  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
8734  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8735  * SPDX-License-Identifier: BSD-3-Clause
8736   
8740   
8741  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
8743  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8744  * SPDX-License-Identifier: BSD-3-Clause
8745   
8749   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
8751  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8752  * SPDX-License-Identifier: BSD-3-Clause
8753   
8755   
8757   
8758  * ==== GAMS solver options ====
8764   
8765  * ==== REMix debug options ====
8769   
8770  * ==== REMix solver defaults ====
8778   
8786   
8796   
8804   
8813   
8814   
8815  * ==== setup optimization ====
8816  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8817     option limRow=0, limCol=0, solPrint=off;
8818  else
8819     option limRow=100000, limCol=100000, solPrint=on;
8820  );
8821   
8822   
8823  * ==== Solver specific default values ====
8824   
8844   
8845   
8847   
8848   
8850   
8851  option mip = cplex;
8852  option reslim = 1209600;
8853  option optcr = 1e-3;
8854  remix.threads = 8;
8855  remix.optFile = 1;
8856  remix.solveLink = 0;
8857  remix.holdFixed = 1;
8858   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8861  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8862  * SPDX-License-Identifier: BSD-3-Clause
8863   
8865   
8867  file opt / "cplex.opt" /;
8868  put opt;
8869  put "names no" /;
8870  put "rerun no" /;
8871   
8872  put "lpmethod 4" /;
8873  put "threads 8" /;
8874  put "barorder 3" /;
8875   
8877  put "scaind 0" /;
8878  put "predual -1" /;
8879   
8882  put "barepcomp 1e-6" /;
8884  put "solutiontype 2" /;
8885  put "epgap 1e-3" /;
8886   
8888  put "iis 0" /;
8889  put "quality 1" /;
8890   
8893  putclose;
8895   
8896   
8898   
8899   
8901   
8902   
8904   
8905   
8907   
8908   
8910   
8911   
8913   
8914   
8916   
8918   
8919   
8920  * ==== solve the problem ====
8921   
8922  loop ( optiframeToCalc,
8923      yearsSel(years) = no;
8924      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8925      yearsToFix(years) = no;
8926      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8927      accYearsSel(accYears) = no;
8928      accYearsSel("horizon") = yes;
8929      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8930      accYearsToFix(accYears) = no;
8931      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8932      timeModelSel(timeModel) = no;
8933      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8934      nodesModelSel(nodesModel) = no;
8935      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8936   
8937  * Fix decision for years previously optimized in case of myopic or foresight
8938      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8939          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8940          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8941              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8942      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8943          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8944   
8945      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8946          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8947          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8948              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8949      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8950          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8951   
8952      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8953          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8954              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8955                  sum(years$sameas(years, yearsToCalc),
8956                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8957                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8958              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8959                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
8960                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
8961      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8962          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
8963   
8964      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8965          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8966          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8967              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8968   
8969      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8970          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8971          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8972              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
8973   
8974      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8975          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8976      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8977          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8978      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8979          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8980      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8981          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8982      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8983          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8984   
8985   
8986      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8987          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8988          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8989              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8990      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8991          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8992   
8993      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8994          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8995          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8996              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8997      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8998          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8999   
9000      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
9001          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
9002              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9003                  sum(years$sameas(years, yearsToCalc),
9004                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
9005                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
9006              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9007                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
9008                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
9009      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
9010          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
9011   
9012      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9013          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9014          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9015              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
9016   
9017      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9018          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9019          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9020              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
9021   
9022      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9023          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
9024      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9025          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
9026      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9027          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
9028      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9029          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
9030      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
9031          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
9032   
9033   
9034      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
9035          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
9036          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
9037              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
9038      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
9039          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
9040   
9041      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
9042          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
9043          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
9044              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
9045      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
9046          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
9047   
9048      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9049          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
9050              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
9051                  sum(years$sameas(years, yearsToCalc),
9052                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
9053                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
9054              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
9055                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
9056                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
9057      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9058          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
9059   
9060      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9061          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9062          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9063              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
9064   
9065      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9066          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9067          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9068              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
9069   
9070      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9071          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
9072      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9073          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
9074      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9075          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
9076      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9077          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
9078      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
9079          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
9080   
9081      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
9082          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
9083   
9084  * Optimize and log values
9085      solve remix minimizing accounting_objective using mip;
9086      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
9087      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
9088   
9089  );
9090   
9094   
9095  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
9097  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9098  * SPDX-License-Identifier: BSD-3-Clause
9099   
9103   
9104  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
9106  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9107  * SPDX-License-Identifier: BSD-3-Clause
9108   
9112   
9113  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
9115  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9116  * SPDX-License-Identifier: BSD-3-Clause
9117   
9121   
9122  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
9124  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9125  * SPDX-License-Identifier: BSD-3-Clause
9126   
9129   
9130  * ==== indicator accounting ====
9131   
9132  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
9133      =
9134  * == converters ==
9135      sum ((converter_techs(techs),vintage)
9136                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9137                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
9138          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9139          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
9140   
9141      + sum ((years_a,converter_techs(techs),vintage)
9142                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9143                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
9144                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
9145                      and years_a.val <= yearsToCalc.val ),
9146          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
9147          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
9148          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
9149   
9150      + sum ((converter_techs(techs),vintage)
9151                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9152                      and converter_techParam(converter_techs,vintage,"freeDecom")),
9153          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9154          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
9155   
9156      + sum ((converter_techs(techs),vintage)
9157                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9158          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9159          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
9160   
9161      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
9162                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
9163          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9164          * timeLength(timeModelToCalc)
9165          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
9166          / timefrac
9167   
9168      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9169                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9170          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9171          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
9172          / timefrac
9173   
9174      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9175                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9176          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9177          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
9178              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
9179   
9180          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9181          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
9182              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
9183          / timefrac
9184   
9185  * == storage ==
9186      + sum ((storage_techs(techs),vintage)
9187                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9188                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
9189          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9190          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
9191   
9192      + sum ((years_a,storage_techs(techs),vintage)
9193                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9194                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
9195                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
9196                      and years_a.val <= yearsToCalc.val ),
9197          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
9198          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
9199          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
9200   
9201      + sum ((storage_techs(techs),vintage)
9202                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9203                      and storage_techParam(storage_techs,vintage,"freeDecom")),
9204          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9205          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
9206   
9207      + sum ((storage_techs(techs),vintage)
9208                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
9209          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9210          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
9211   
9212  * == transfer ==
9213      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9214                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9215                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9216                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9217          0.5
9218          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9219          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9220   
9221      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
9222                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9223                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9224                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
9225                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9226                      and years_a.val <= yearsToCalc.val ),
9227          0.5
9228          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9229          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
9230          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
9231   
9232      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
9233                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9234                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9235                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9236          0.5
9237          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9238          * transfer_lengthParam(linksModel,link_types,"length")
9239          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9240   
9241      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
9242                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9243                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9244                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9245                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9246                      and years_a.val <= yearsToCalc.val ),
9247          0.5
9248          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9249          * transfer_lengthParam(linksModel,link_types,"length")
9250          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9251          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
9252   
9253      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9254                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
9255                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9256                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9257          0.5
9258          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9259          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9260   
9261          + 0.5
9262          * sum (link_types,
9263              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9264              * transfer_lengthParam(linksModel,link_types,"length")
9265              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9266          ) )
9267   
9268   
9269      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9270                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9271                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
9272          + 0.5
9273          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9274          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9275   
9276          + 0.5
9277          * sum (link_types,
9278              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9279              * transfer_lengthParam(linksModel,link_types,"length")
9280              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9281   
9282          + 0.5
9283          * sum (timeModelToCalc,
9284              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9285              * timeLength(timeModelToCalc)
9286              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9287                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9288   
9289              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9290              * timeLength(timeModelToCalc)
9291              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9292                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9293              / timefrac
9294   
9295          + 0.5
9296          * sum ((timeModelToCalc, link_types),
9297              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9298              * timeLength(timeModelToCalc)
9299              * transfer_lengthParam(linksModel,link_types,"length")
9300              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9301                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9302   
9303              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9304              * timeLength(timeModelToCalc)
9305              * transfer_lengthParam(linksModel,link_types,"length")
9306              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9307                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9308              / timefrac
9309          )
9310   
9311   
9312  * == sources / sinks ==
9313      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
9314              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
9315          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9316          * timeLength(timeModelToCalc)
9317          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
9318      / timefrac
9319      ;
9320   
9321   
9322  * ==== full set of main indicators ====
9323   
9324  indicator_accounting(accNodesModel,accYears,indicator)
9325      $sum((accNodesModel_a,accYears_a,indicator_a)
9326              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
9327      =
9328      + sum((accNodesModel_a,accYears_a,indicator_a)
9329              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9330                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9331          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9332          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
9333   
9334      + sum((accNodesModel_a,accYears_a,indicator_a)
9335              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
9336          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9337          * (sum((nodesModelToCalc,yearsToCalc,techs)
9338                  $(sameas(accNodesModel_a, nodesModelToCalc)
9339                      and sameas(accYears_a, yearsToCalc)),
9340                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
9341      ;
9342   
9343  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9344      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9345      =
9346          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9347          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
9348              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
9349   
9350          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9351          * (sum((nodesModelToCalc,yearsToCalc,techs)
9352                  $(sameas(accNodesModel_a, nodesModelToCalc)
9353                      and sameas(accYears_a, yearsToCalc)),
9354                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
9355      ;
9356   
9357  indicator_accounting_var(accNodesModel,accYears,indicator)
9358      $accounting_indicator.l(accNodesModel,accYears,indicator)
9359      = accounting_indicator.l(accNodesModel,accYears,indicator);
9360   
9361  indicator_accounting_ref(accNodesModel,accYears,indicator)
9362      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
9365  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9366  * SPDX-License-Identifier: BSD-3-Clause
9367   
9368  * == variable indicators ==
9369      sum((accNodesModel_a,accYears_a,indicator_a)
9370          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9371              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9372          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9373          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
9374          )
9375   
9376  * == converters ==
9377      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9378              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9379                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9380          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9381          *
9382          ( sum ((converter_techs,vintage)
9383                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9384                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
9385              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9386              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
9387              )
9388   
9389          + sum ((years_a,converter_techs,vintage)
9390                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
9391                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9392                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
9393                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
9394                          and years_a.val <= yearsSel.val ),
9395              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
9396              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
9397              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
9398              )
9399   
9400          + sum ((yearsToCalc,converter_techs,vintage)
9401                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9402                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9403                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
9404                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
9405                          and yearsToCalc.val <= yearsSel.val ),
9406              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
9407              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
9408              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
9409              )
9410   
9411          + sum ((converter_techs,vintage)
9412                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9413                          and converter_techParam(converter_techs,vintage,"freeDecom")),
9414              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9415              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
9416   
9417          + sum ((converter_techs,vintage)
9418                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9419              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9420              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
9421   
9422          + sum ((timeModelSel,converter_techs,vintage,activity)
9423                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
9424              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9425              * timeLength(timeModelSel)
9426              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
9427          / timefrac
9428   
9429          + sum ((timeModelSel,converter_techs,vintage)
9430                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9431              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9432              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
9433          / timefrac
9434   
9435          + sum ((timeModelSel,converter_techs,vintage)
9436                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9437              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9438              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9439                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
9440   
9441              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9442              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9443                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
9444          / timefrac
9445          )
9446      )
9447   
9448  * == storage ==
9449      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9450              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9451                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9452          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9453          *
9454          ( sum ((storage_techs,vintage)
9455                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
9456                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
9457              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
9458              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
9459              )
9460   
9461          + sum ((years_a,storage_techs,vintage)
9462                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
9463                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9464                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
9465                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
9466                          and years_a.val <= yearsSel.val ),
9467              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
9468              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
9469              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
9470              )
9471   
9472          + sum ((yearsToCalc,storage_techs,vintage)
9473                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
9474                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9475                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
9476                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
9477                          and yearsToCalc.val <= yearsSel.val ),
9478              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
9479              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
9480              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
9481              )
9482   
9483          + sum ((storage_techs,vintage)
9484                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9485                          and storage_techParam(storage_techs,vintage,"freeDecom")),
9486              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9487              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
9488   
9489          + sum ((storage_techs,vintage)
9490                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
9491              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9492              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
9493          )
9494      )
9495   
9496   
9497  * == transfer ==
9498      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9499              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9500                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9501          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9502          *
9503          ( sum ((linksModelToCalc,transfer_techs,vintage)
9504                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9505                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9506                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
9507              0.5
9508              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9509              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
9510   
9511          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
9512                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9513                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9514                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9515                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9516                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
9517                          and years_a.val <= yearsSel.val ),
9518              0.5
9519              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9520              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9521              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
9522   
9523          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9524                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9525                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9526                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9527                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
9528                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
9529                          and yearsToCalc.val <= yearsSel.val ),
9530              0.5
9531              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9532              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
9533              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
9534   
9535          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
9536                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9537                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9538                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9539              0.5
9540              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9541              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9542              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
9543   
9544          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
9545                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9546                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9547                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9548                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9549                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9550                          and years_a.val <= yearsSel.val ),
9551              0.5
9552              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9553              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9554              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9555              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9556   
9557          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
9558                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9559                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9560                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9561                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
9562                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9563                          and yearsToCalc.val <= yearsSel.val ),
9564              0.5
9565              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9566              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9567              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
9568              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
9569   
9570          + sum ((linksModelToCalc,transfer_techs,vintage)
9571                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9572                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9573                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9574              0.5
9575              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9576              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
9577   
9578              + 0.5
9579              * sum (link_types,
9580                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9581                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9582                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
9583              ) )
9584   
9585          + sum ((linksModelToCalc,transfer_techs,vintage)
9586                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9587                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
9588              0.5
9589              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9590              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
9591   
9592              + 0.5
9593              * sum (link_types,
9594                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9595                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9596                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
9597   
9598              + 0.5
9599              * sum (timeModelSel,
9600                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9601                  * timeLength(timeModelSel)
9602                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9603                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
9604   
9605                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9606                  * timeLength(timeModelSel)
9607                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9608                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
9609                  / timefrac
9610   
9611              + 0.5
9612              * sum ((timeModelSel, link_types),
9613                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9614                  * timeLength(timeModelSel)
9615                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9616                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9617                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
9618   
9619                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9620                  * timeLength(timeModelSel)
9621                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9622                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9623                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
9624                  / timefrac
9625              )
9626          )
9627      )
9628   
9629   
9630  * == sources / sinks ==
9631      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9632              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9633                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9634          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9635          *
9636          sum ((timeModelSel,sourcesink_techs,commodity)
9637                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
9638              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
9639              * timeLength(timeModelSel)
9640              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
9641          / timefrac
9642      )
9644  ;
9645   
9646   
9647  * ==== link-specific indicator accounting ====
9648   
9649  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
9650      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
9651          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
9652      =
9653      sum ((transfer_techs(techs),vintage)
9654                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9655                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9656          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9657          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9658   
9659      + sum ((years_a,transfer_techs(techs),vintage)
9660                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9661                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9662                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9663                      and years_a.val <= yearsToCalc.val ),
9664          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9665          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9666          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
9667   
9668      + sum ((transfer_techs(techs),vintage,link_types)
9669                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9670                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9671          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9672          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9673          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9674   
9675      + sum ((years_a,transfer_techs(techs),vintage,link_types)
9676                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9677                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9678                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9679                      and years_a.val <= yearsToCalc.val ),
9680          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9681          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9682          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9683          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9684   
9685      + sum ((transfer_techs(techs),vintage)
9686                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
9687          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9688          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9689   
9690          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9691          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9692   
9693          + sum (link_types,
9694              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9695              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9696              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9697   
9698              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9699              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9700              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9701   
9702          + sum (timeModelToCalc,
9703              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9704              * timeLength(timeModelToCalc)
9705              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9706                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9707   
9708              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9709              * timeLength(timeModelToCalc)
9710              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9711                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9712              / timefrac
9713   
9714          + sum ((timeModelToCalc, link_types),
9715              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9716              * timeLength(timeModelToCalc)
9717              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9718              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9719                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9720   
9721              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9722              * timeLength(timeModelToCalc)
9723              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9724              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9725                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9726              / timefrac
9727      );
9728   
9729   
9730  * == converter capacities ==
9731   
9732  converter_ratedInput(converter_techs,vintage,commodity)
9733      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9734      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9735              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9736  converter_ratedInput(converter_techs,vintage,commodity)
9737      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9738      = 0;
9739   
9740  converter_ratedOutput(converter_techs,vintage,commodity)
9741      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9742      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9743              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9744  converter_ratedOutput(converter_techs,vintage,commodity)
9745      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9746      = 0;
9747   
9748  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9749      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9750          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9751      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9752              and converter_ratedOutput(converter_techs,vintage,commodity)),
9753          converter_ratedOutput(converter_techs,vintage,commodity));
9754   
9755  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9756      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9757          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9758      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9759              and converter_ratedOutput(converter_techs,vintage,commodity)),
9760          converter_ratedOutput(converter_techs,vintage,commodity));
9761   
9762  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9763      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9764   
9765  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9766      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9767   
9768  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9769  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9770      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9771       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9772      = sum(years_a$
9773            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9774             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9775             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9776        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9777   
9778  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9779      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9780   
9781  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9782      $(converter_ratedOutput(converter_techs,vintage,commodity))
9783      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9784          * converter_ratedOutput(converter_techs,vintage,commodity);
9785   
9786  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9787      = sum(vintage,
9788          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9789  option clear = converter_caps_ext;
9790   
9791  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9792      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9793          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9794          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9795      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9796          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9797   
9798  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9799      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9800          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9801          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9802      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9803          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9804   
9805  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9806      = sum((nodesModelToCalc,years)
9807              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9808                  and map_accYearsPostCalc(accYears,years)),
9809          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9810  option clear = converter_caps_novintage_ext;
9811   
9812  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9813      = sum((nodesModelToCalc,years)
9814              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9815                  and map_accYearsPostCalc(accYears,years)),
9816          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9817  option clear = converter_units_ext;
9818   
9819  * ==== transfer capacities ====
9820   
9821  max_transfer_coefficient(transfer_techs(techs),commodity)
9822          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9823          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9824   
9825  min_transfer_coefficient(transfer_techs(techs),commodity)
9826          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9827          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9828   
9829  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9830      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9831          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9832          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9833      = yes;
9834   
9835  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9836      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9837   
9838  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9839      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9840   
9841  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9842  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9843      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9844       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9845      = sum(years_a$
9846            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9847             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9848             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9849        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9850   
9851  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9852      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9853   
9854  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9855      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9856          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9857                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9858      = sum(vintage,
9859          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9860          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9861   
9862  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9863      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9864          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9865          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9866                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9867      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9868          * min_transfer_coefficient(transfer_techs,commodity);
9869   
9870  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9871      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9872          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9873          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9874                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9875      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9876          * max_transfer_coefficient(transfer_techs,commodity);
9877   
9878   
9879  * ==== transfer flows ====
9880   
9881  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9882      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9883      = sum(vintage,
9884          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9885              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9886          * timeLength(timeModelToCalc)
9887          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9888   
9889  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9890      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9891      = sum(timeModelToCalc,
9892          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9893   
9894  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9895      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9896      = sum(timeModelToCalc
9897              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9898          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9899   
9900  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9901      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9902      = sum(timeModelToCalc
9903              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9904          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9905   
9906  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9907      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9908      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9909          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9910   
9911  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9912      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9913          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9914          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9915      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9916          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9917   
9918  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9919      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9920          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9921              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9922      = -1 * abs(sum(vintage,
9923          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9924              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9925          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9926              + sum(link_types,
9927                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9928                  * transfer_lengthParam(linksModel,link_types,"length")))))
9929          * timeLength(timeModelToCalc);
9930   
9931  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9932      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9933          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9934              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9935      = sum(timeModelToCalc,
9936          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9937   
9938   
9939  * ==== storage capacities ====
9940   
9941  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9942      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9943              and storage_usedCom(storage_techs,vintage,commodity)
9944              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9945      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9946              and storage_usedCom(storage_techs,vintage,commodity)
9947              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9948          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9949   
9950  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9951      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9952              and storage_usedCom(storage_techs,vintage,commodity)
9953              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9954      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9955              and storage_usedCom(storage_techs,vintage,commodity)
9956              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9957          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9958   
9959  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9960      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9961      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9962   
9963  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9964      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9965      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9966   
9967  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
9968  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9969      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
9970       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9971      = sum(years_a$
9972            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9973             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9974             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9975        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
9976   
9977  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9978      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9979   
9980  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9981      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9982      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9983          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9984   
9985  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
9986      = sum(vintage,
9987          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9988   
9989  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9990      $(storage_usedCom(storage_techs,vintage,commodity)
9991          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9992               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9993      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9994                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9995                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9996                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9997  option clear = storage_caps_ext;
9998   
9999  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
10000      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
10001          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
10002      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
10003          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
10004   
10005  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
10006      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
10007          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
10008      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
10009          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
10010   
10011  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
10012      = sum((nodesModelToCalc,years)
10013              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10014                  and map_accYearsPostCalc(accYears,years)),
10015          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
10016  option clear = storage_caps_novintage_ext;
10017   
10018  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
10019      = sum((nodesModelToCalc,years)
10020              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10021                  and map_accYearsPostCalc(accYears,years)),
10022          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
10023  option clear = storage_units_ext;
10024   
10025   
10026  * ==== storage levels and flows ====
10027   
10028  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10029      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
10030      =
10031      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10032      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10033          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10034      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10035          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10036      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
10037          * storage_sizeParam(storage_techs,vintage,commodity,"size")
10038          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
10039          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
10040              and ord(timeModelToCalc)=1)
10042      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10043          * timeLength(timeModelToCalc)
10045      ;
10046   
10047  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
10048      = sum((nodesModelToCalc,yearsToCalc,vintage)
10049              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
10050          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
10051  option clear = storage_flows_ext;
10052   
10053  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10054      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
10055      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
10056   
10057  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
10058      = sum((nodesModelToCalc,yearsToCalc,vintage)
10059              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
10060          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
10061  option clear = storage_level_out_ext;
10062   
10063  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
10064      = sum(timeModelToCalc,
10065          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10066   
10067  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
10068      = sum(timeModelToCalc
10069              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
10070          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10071   
10072  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
10073      = sum(timeModelToCalc
10074              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
10075          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10076   
10077  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
10078      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
10079          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
10080   
10081  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
10082      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
10083          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
10084      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
10085          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
10086   
10087  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
10088      = sum((nodesModelToCalc,yearsToCalc,vintage)
10089              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10090                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10091                  and map_accYearsPostCalc(accYears,yearsToCalc)),
10092          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10093          * timeLength(timeModelToCalc));
10094   
10095  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
10096      = sum(timeModelToCalc,
10097          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10098   
10099   
10100  * == commodity balance ==
10101   
10102  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
10103      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
10104          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
10105      = sum((activity)
10106              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
10107          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
10108              * timeLength(timeModelToCalc)
10109              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
10110          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
10111              * timeLength(timeModelToCalc)
10112              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
10113   
10114  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10115      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
10116          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
10117      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
10118          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10119              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10120          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10121              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10122          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
10123              * storage_sizeParam(storage_techs,vintage,commodity,"size")
10124              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
10125              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
10126                  and ord(timeModelToCalc)=1)
10127          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10128      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10129      * timeLength(timeModelToCalc);
10130   
10131  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
10132      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10133          and sameas(yearsToCalc,vintage))
10134      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
10135      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10136      * timeLength(timeModelToCalc);
10137   
10138  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
10139      $sum((linksModel)
10140          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
10141                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10142                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
10143      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
10144      + sum((linksModel)
10145              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
10146                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10147                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
10148   
10149  * incoming transfer flows
10150              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
10151                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
10152                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
10153                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
10154              * timeLength(timeModelToCalc)
10155              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
10156   
10157  * outgoing transfer flows
10158              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10159                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
10160                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10161                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
10162              * timeLength(timeModelToCalc)
10163              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
10164   
10165              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10166                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
10167                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10168                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
10169                      * timeLength(timeModelToCalc)
10170                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
10171                          + sum(link_types,
10172                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
10173                              * transfer_lengthParam(linksModel,link_types,"length")))))
10174      ;
10175   
10176  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
10177      = sum((nodesModelToCalc,yearsToCalc,vintage)
10178              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
10179                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10180                  and map_accYearsPostCalc(accYears,yearsToCalc)),
10181          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
10182  option clear = commodity_balance_ext;
10183   
10184   
10185  * ==== annual commodity sums ====
10186   
10187  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
10188      = sum(timeModelToCalc,
10189          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10190   
10191  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
10192      = sum(timeModelToCalc
10193              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
10194          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10195   
10196  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
10197      = sum(timeModelToCalc
10198              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
10199          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10200   
10201  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10202      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
10203          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
10204   
10205  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
10206      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
10207          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
10208      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10209          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
10210   
10211   
10212  * ==== marginal information ====
10213   
10214  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10215    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
10216    =
10217    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
10218   
10219  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10220      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
10221      =
10222      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
10223   
10224  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10225      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10226          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10227          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
10228      =
10229      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10230      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10231      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
10232   
10233  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
10234  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10235      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
10236      =
10237      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10238          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
10239  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10240      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
10241      =
10242      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10243          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
10244  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10245      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
10246      =
10247      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10248          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
10251   
10252  * ==== R2A postcalc information ====
10253   
10255   
10256   
10257  * ==== round profiles to reduce size of gdx ====
10258   
10260  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10261      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10262      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
10263   
10264  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10265      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10266      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10267   
10268  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10269      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10270      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10271   
10272  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10273      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10274      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10275   
10276  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10277      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10278      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10279   
10280  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10281      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10282      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
10283   
10284  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10285      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10286      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
10288   
10289  * ==== Dump diagnostics ====
10290   
10291  diagnostics("variables") = remix.numVar;
10292  diagnostics("equations") = remix.numEqu;
10293  diagnostics("iterations") = remix.iterUsd;
10294   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
10298  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10299  * SPDX-License-Identifier: BSD-3-Clause
10300   
10303   
10304  execute_unload "./results\PIC_Basecase_2020.gdx"
10306      metadata
10308      timeModel
10309      timeModelToCalc
10310      nodesModel
10311      linksModel
10312      indicator
10313      commodity
10314      techs
10315      accNodesModel
10316      accYears
10317   
10318      map_nodesModel
10319      map_linksModel
10320      map_nodesAccounting
10321   
10322      indicator_accounting
10323      indicator_accounting_var
10324      indicator_accounting_ref
10325      indicator_accounting_comp
10326      indicator_accounting_detailed
10327      indicator_accounting_links
10328   
10329      converter_caps
10330      converter_units
10332   
10333      transfer_caps
10334      transfer_links
10335      transfer_flows
10336      transfer_flows_annual
10337      transfer_losses
10338      transfer_losses_annual
10339   
10340      storage_caps
10341      storage_units
10342      storage_flows
10343      storage_level_out
10344      storage_flows_annual
10345      storage_losses_out
10346      storage_losses_annual
10348   
10349      commodity_balance
10350      commodity_balance_annual
10351   
10352      marginals_balance
10353      marginals_sourcesink_profile
10354      marginals_sourcesink_sum
10355      marginals_indicator_bounds
10356   
10358      diagnostics
10359      ;
10362   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 09/02/25 11:26:14 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"09/02/25 11:26:14\"\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_activities.csv
    55      410 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_activities.csv
    56      418 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_gridsegments.csv
    57      420 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_gridsegments.csv
    58      428 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_linksdata.csv
    59      430 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_linksdata.csv
    60      448 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_link_types.csv
    61      450 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_link_types.csv
    62      459 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_commodities.csv
    63      459 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_commodities.csv
    64      483 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_commodities.csv
    65      492 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_indicators.csv
    66      492 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_indicators.csv
    67      498 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_indicators.csv
    68      507 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    69      507 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    70      530 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_storage_techs.csv
    71      533 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_transfer_techs.csv
    72      536 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    73      536 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    74      544 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    75      544 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    76      565 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    77      569 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_storage_techs.csv
    78      570 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_storage_techs.csv
    79      575 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_transfer_techs.csv
    80      576 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_transfer_techs.csv
    81      580 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    82      580 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    83      584 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    84      594 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_degradation_states.csv
    85      596 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_degradation_states.csv
    86      605 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_soc.csv
    87      607 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_soc.csv
    88      623 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linkstartend.csv
    89      625 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linkstartend.csv
    90      639 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    91      750 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_accnodes.csv
    92      752 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_accnodes.csv
    93      817 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_accnodes.csv
    94      819 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_accnodes.csv
    95      872 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    96      904 IF EXIST      95      32  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterunits.csv
    97      904 INCLUDE       95      32  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterunits.csv
    98      947 IF EXIST      95      34  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterunits.csv
    99      961 IF EXIST      95      48  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converteractivity.csv
   100      963 IF EXIST      95      50  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converteractivity.csv
   101      980 IF EXIST      95      67  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterstartup.csv
   102      982 IF EXIST      95      69  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterstartup.csv
   103     1001 IF EXIST      95      88  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_storageunits.csv
   104     1003 IF EXIST      95      90  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_storageunits.csv
   105     1025 IF EXIST      95     112  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferlinks.csv
   106     1027 IF EXIST      95     114  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferlinks.csv
   107     1049 IF EXIST      95     136  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferperlength.csv
   108     1051 IF EXIST      95     138  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferperlength.csv
   109     1066 IF EXIST      95     153  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_sourcesinkflow.csv
   110     1066 INCLUDE       95     153  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_sourcesinkflow.csv
   111     1181 IF EXIST      95     155  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_sourcesinkflow.csv
   112     1195 IF EXIST      95     169  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_perindicator.csv
   113     1195 INCLUDE       95     169  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_perindicator.csv
   114     1201 IF EXIST      95     171  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_perindicator.csv
   115     1227 IF EXIST      95     197  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds.csv
   116     1227 INCLUDE       95     197  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds.csv
   117     1231 IF EXIST      95     199  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds.csv
   118     1250 IF EXIST      95     218  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   119     1252 IF EXIST      95     220  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   120     1258 BATINCLUDE    95     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   121     1326 BATINCLUDE    95     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   122     1378 BATINCLUDE    95     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   123     1430 BATINCLUDE    95     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1498 BATINCLUDE    95     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1566 BATINCLUDE    95     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1634 BATINCLUDE    95     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     2094 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   128     2169 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   129     2176 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   130     2183 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   131     2200 IF DEXIST    130      17  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\results\
   132     2418 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   133     2431 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   134     2534 IF EXIST     133     103  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_capacityparam.csv
   135     2534 INCLUDE      133     103  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_capacityparam.csv
   136     2749 IF EXIST     133     105  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_capacityparam.csv
   137     2757 BATINCLUDE   133     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   138     2768 BATINCLUDE   133     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   139     2801 IF EXIST     133     137  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_techparam.csv
   140     2801 INCLUDE      133     137  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_techparam.csv
   141     2823 IF EXIST     133     139  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_techparam.csv
   142     2845 IF EXIST     133     161  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   143     2845 INCLUDE      133     161  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   144     2917 IF EXIST     133     162  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   145     2919 IF EXIST     133     164  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   146     2940 IF EXIST     133     185  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   147     2940 INCLUDE      133     185  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   148     2991 IF EXIST     133     186  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   149     2992 IF EXIST     133     187  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   150     2994 IF EXIST     133     189  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   151     3007 IF EXIST     133     202  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficientprofile.csv
   152     3008 IF EXIST     133     203  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficientprofile.csv
   153     3010 IF EXIST     133     205  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficientprofile.csv
   154     4011 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   155     4104 IF EXIST     154      93  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_reservoirparam.csv
   156     4106 IF EXIST     154      95  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_reservoirparam.csv
   157     4110 BATINCLUDE   154      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   158     4121 BATINCLUDE   154     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   159     4132 BATINCLUDE   154     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   160     4168 IF EXIST     154     127  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_techparam.csv
   161     4170 IF EXIST     154     129  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_techparam.csv
   162     4191 IF EXIST     154     150  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_sizeparam.csv
   163     4193 IF EXIST     154     152  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_sizeparam.csv
   164     4210 IF EXIST     154     169  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_socparam.csv
   165     4212 IF EXIST     154     171  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_socparam.csv
   166     4231 IF EXIST     154     190  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_degradationparam.csv
   167     4233 IF EXIST     154     192  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_degradationparam.csv
   168     4262 IF EXIST     154     221  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_levelprofile.csv
   169     4263 IF EXIST     154     222  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_levelprofile.csv
   170     4265 IF EXIST     154     224  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_levelprofile.csv
   171     5202 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   172     5267 IF EXIST     171      71  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linksparam.csv
   173     5269 IF EXIST     171      73  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linksparam.csv
   174     5285 IF EXIST     171      89  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_flowprofile.csv
   175     5287 IF EXIST     171      91  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_flowprofile.csv
   176     5307 IF EXIST     171     111  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_techparam.csv
   177     5309 IF EXIST     171     113  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_techparam.csv
   178     5324 IF EXIST     171     128  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefficient.csv
   179     5326 IF EXIST     171     130  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefficient.csv
   180     5340 IF EXIST     171     144  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperflow.csv
   181     5342 IF EXIST     171     146  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperflow.csv
   182     5357 IF EXIST     171     161  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperlength.csv
   183     5359 IF EXIST     171     163  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperlength.csv
   184     5373 IF EXIST     171     177  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_reactperlength.csv
   185     5375 IF EXIST     171     179  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_reactperlength.csv
   186     5389 IF EXIST     171     193  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_lengthparam.csv
   187     5391 IF EXIST     171     195  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_lengthparam.csv
   188     5405 IF EXIST     171     209  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_gridsegments.csv
   189     5407 IF EXIST     171     211  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_gridsegments.csv
   190     6062 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   191     6100 IF EXIST     190      38  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_config.csv
   192     6100 INCLUDE      190      38  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_config.csv
   193     6411 IF EXIST     190      40  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_config.csv
   194     6415 BATINCLUDE   190      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   195     6443 IF EXIST     190      62  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   196     6443 INCLUDE      190      62  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   197     6627 IF EXIST     190      63  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   198     6628 IF EXIST     190      64  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   199     6630 IF EXIST     190      66  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   200     6650 IF EXIST     190      86  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_annualsum.csv
   201     6650 INCLUDE      190      86  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_annualsum.csv
   202     6779 IF EXIST     190      88  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_annualsum.csv
   203     6782 BATINCLUDE   190      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   204     6970 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   205     7118 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   206     7185 INCLUDE      205      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   207     7475 INCLUDE      205      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   208     7765 INCLUDE      205      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   209     8055 INCLUDE      205     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   210     8150 INCLUDE      205     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   211     8245 INCLUDE      205     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   212     8344 INCLUDE      205     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     8638 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   214     8657 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   215     8722 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   216     8733 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   217     8742 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   218     8750 INCLUDE      217       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   219     8860 INCLUDE      217       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   220     9096 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   221     9105 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   222     9114 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   223     9123 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   224     9364 INCLUDE      223     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   225    10297 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       14.156 SECONDS     66 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 09/02/25 11:26:14 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 9085


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.000E-04, 1.000E+06] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 5.357E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 09/02/25 11:26:14 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 9085


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    6,347,892
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    4,753,456
NON ZERO ELEMENTS    15,153,298


GENERATION TIME      =       24.297 SECONDS  3,532 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       33.453 SECONDS  3,532 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 09/02/25 11:26:14 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 9085


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  9085

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE             3599.2071

 RESOURCE USAGE, LIMIT          8.047   1209600.000
 ITERATION COUNT, LIMIT        11    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 1958.37 Mb (peak 1994.63 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 163.31 Mb (peak 422.22 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 6.08sec (det. 7425.23 ticks)


Optimal solution found
Objective:         3599.207056

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        1.509e-03   1.342e-02   1.509e-03   1.342e-02
dual infeasibility          0.000e+00   0.000e+00   0.000e+00   0.000e+00
primal residual             6.306e-11   2.284e-09   6.306e-11   2.284e-09
dual residual               3.620e-09   1.744e-05   3.620e-09   1.744e-05
primal solution vector      2.098e+00   1.460e+05   2.098e+00   1.460e+05
dual solution vector        2.159e+03   3.691e+05   2.159e+03   3.691e+05
slacks                      1.000e+06   9.184e+07   1.000e+06   9.184e+07
reduced costs               1.000e+00   1.247e+04   1.000e+00   1.247e+04
comp. slackness viol.       5.825e-05   2.340e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 09/02/25 11:26:14 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\cplex.opt


EXECUTION TIME       =       43.610 SECONDS  3,064 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\run_remix.lst
