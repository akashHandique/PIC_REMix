GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/15/25 13:38:01 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/15/25 13:38:01"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "54f00bcdf612769a468f4d96f635c2c0678bfac3"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 793   
 794  map_accNodes(accNodesModel,accNodesModel_aggregation)
 795      $sum((nodesData, nodesModelToCalc)
 796              $( sameas(nodesModelToCalc,accNodesModel)
 797                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 798                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 799   
 800  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 801  map_accNodes(accNodesModel,accNodesModel) = yes;
 802  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 803  map_accLinks(accLinksModel,accLinksModel) = yes;
 804  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 805  map_accYears(accYears,accYears) = yes;
 806   
 807  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 808      $sum((nodesData)
 809              $( map_accNodesLoad(nodesData,accNodesModel)
 810                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 811   
 812  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 813  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 814  map_accLinksToCalc("global",linksModelToCalc) = yes;
 815  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 816  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 817  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 818   
 819  * Duplicate sets for postcalc reporting without horizon and accYears
 820  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 821  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 822  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 823  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 824   
 825  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 826  option map_nodesAccounting < map_accNodes;
 827   
 828  * ==== Generic sets  ====
 829  * These set names are repeated across different profile parameters.
 830  * they are not strictly related to each other and are not input data but
 831  * are needed for validation.
 832  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 833   
 834  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 835  * "Scenario indexes help to differentiate scenarios." /
 836   
 837  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 838  * "Capacity types differentiate investment decisions." /
 839   
 840  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 841  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 843  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 844  * SPDX-License-Identifier: BSD-3-Clause
 845   
 846  * // # accounting_input
 847  * // The parameters in this file describe the accounting of indicators in the model.
 848   
 849  * // ## Variables
 850  * // {special_table_input_variables}
1113   
1114  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1116  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1117  * SPDX-License-Identifier: BSD-3-Clause
1118   
1120   
1122   
1123  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1124  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1125      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1126      = yes;
1127   
1129  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1130  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1131      $sum((nodesData,accnodesData)
1132              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1133                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1134      = smax((nodesData,accnodesData)
1135              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1136                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1137          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1138      - smin((nodesData,accnodesData)
1139              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1140                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1141          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1142   
1143  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1145   
1146  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1147  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1148      $sum((nodesData,accnodesData)
1149              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1150                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1151      = sum((nodesData,accnodesData)
1152              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1153                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1154          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1155      / sum((nodesData,accnodesData)
1156              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1157                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1158          1);
1159   
1160  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1161  loop(accnodes,
1162  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1163      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1164                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1165      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1166              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1167  );
1168   
1169  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1170      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1171      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1172   
1173  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1174  loop(accYears,
1175  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1176      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1177              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1178      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1179              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1180  );
1181   
1182  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1184  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1185  * SPDX-License-Identifier: BSD-3-Clause
1186   
1188   
1190   
1191  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1192  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1193      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1194      = yes;
1195   
1197   
1198  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1199  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1200      $sum((nodesData,accnodesData)
1201              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1202                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1203      = sum((nodesData,accnodesData)
1204              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1205                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1206          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1207      / sum((nodesData,accnodesData)
1208              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1209                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1210          1);
1211   
1212  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1213  loop(accnodes,
1214  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1215      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1216                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1217      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1218              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1219  );
1220   
1221  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1222      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1223      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1224   
1225  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1226  loop(accYears,
1227  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1228      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1229              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1230      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1231              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1232  );
1233   
1234  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1236  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1237  * SPDX-License-Identifier: BSD-3-Clause
1238   
1240   
1242   
1243  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1244  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1245      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1246      = yes;
1247   
1249   
1250  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1251  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1252      $sum((nodesData,accnodesData)
1253              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1254                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1255      = sum((nodesData,accnodesData)
1256              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1257                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1258          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1259      / sum((nodesData,accnodesData)
1260              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1261                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1262          1);
1263   
1264  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1265  loop(accnodes,
1266  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1267      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1268                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1269      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1270              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1271  );
1272   
1273  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1274      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1275      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1276   
1277  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1278  loop(accYears,
1279  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1280      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1281              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1282      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1283              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1284  );
1285   
1286  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1288  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1289  * SPDX-License-Identifier: BSD-3-Clause
1290   
1292   
1294   
1295  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1296  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1297      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1298      = yes;
1299   
1301  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1302  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1303      $sum((nodesData,accnodesData)
1304              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1305                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1306      = smax((nodesData,accnodesData)
1307              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1308                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1309          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1310      - smin((nodesData,accnodesData)
1311              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1312                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1313          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1314   
1315  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1317   
1318  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1319  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1320      $sum((nodesData,accnodesData)
1321              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1322                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1323      = sum((nodesData,accnodesData)
1324              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1325                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1326          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1327      / sum((nodesData,accnodesData)
1328              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1329                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1330          1);
1331   
1332  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1333  loop(accnodes,
1334  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1335      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1336                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1337      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1338              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1339  );
1340   
1341  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1342      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1343      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1344   
1345  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1346  loop(accYears,
1347  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1348      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1349              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1350      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1351              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1352  );
1353   
1354  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1356  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1357  * SPDX-License-Identifier: BSD-3-Clause
1358   
1360   
1362   
1363  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1364  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1365      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1366      = yes;
1367   
1369  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1370  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1371      $sum((linksData,acclinksData)
1372              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1373                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1374      = smax((linksData,acclinksData)
1375              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1376                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1377          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1378      - smin((linksData,acclinksData)
1379              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1380                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1381          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1382   
1383  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1385   
1386  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1387  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1388      $sum((linksData,acclinksData)
1389              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1390                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1391      = sum((linksData,acclinksData)
1392              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1393                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1394          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1395      / sum((linksData,acclinksData)
1396              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1397                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1398          1);
1399   
1400  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1401  loop(acclinks,
1402  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1403      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1404                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1405      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1406              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1407  );
1408   
1409  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1410      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1411      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1412   
1413  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1414  loop(accYears,
1415  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1416      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1417              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1418      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1419              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1420  );
1421   
1422  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1424  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1425  * SPDX-License-Identifier: BSD-3-Clause
1426   
1428   
1430   
1431  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1432  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1433      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1434      = yes;
1435   
1437  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1438  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1439      $sum((linksData,acclinksData)
1440              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1441                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1442      = smax((linksData,acclinksData)
1443              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1444                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1445          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1446      - smin((linksData,acclinksData)
1447              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1448                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1449          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1450   
1451  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1453   
1454  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1455  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1456      $sum((linksData,acclinksData)
1457              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1458                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1459      = sum((linksData,acclinksData)
1460              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1461                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1462          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1463      / sum((linksData,acclinksData)
1464              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1465                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1466          1);
1467   
1468  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1469  loop(acclinks,
1470  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1471      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1472                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1473      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1474              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1475  );
1476   
1477  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1478      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1479      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1480   
1481  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1482  loop(accYears,
1483  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1484      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1485              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1486      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1487              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1488  );
1489   
1490  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1492  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1493  * SPDX-License-Identifier: BSD-3-Clause
1494   
1496   
1498   
1499  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1500  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1501      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1502      = yes;
1503   
1505   
1506  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1507  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1508      $sum((nodesData,accnodesData)
1509              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1510                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1511      = sum((nodesData,accnodesData)
1512              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1513                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1514          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1515      / sum((nodesData,accnodesData)
1516              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1517                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1518          1);
1519   
1520  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1521  loop(accnodes,
1522  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1523      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1524                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1525      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1526              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1527  );
1528   
1529  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1530      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1531      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1532   
1533  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1534  loop(accYears,
1535  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1536      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1537              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1538      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1539              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1540  );
1541   
1542  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1543   
1544  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1545  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1546      = sum((linksData)$sameas(linksModelToCalc,linksData),
1547              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1548   
1549  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1550      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1551              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1552   
1553  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1554  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1555      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1556          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1557   
1558  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1559      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1560      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1561              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1562          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1563   
1564  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1565  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1566      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1567      = yes;
1568   
1569  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1570  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1571      $sum((nodesDataToCalc,accnodesData)
1572              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1573                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1574      = sum((nodesDataToCalc,accnodesData)
1575              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1576                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1577          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1578      / sum((nodesDataToCalc,accnodesData)
1579              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1580                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1581          1);
1582   
1583  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1584   
1585  loop(accNodes,
1586  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1587      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1588              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1589          and map_accNodes(accNodesModel,accNodes)
1590              )
1591      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1592              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1593   
1594  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1595      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1596              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1597          and map_accNodes(accNodesModel,accNodes)
1598          and not sameas(accYears, "horizon"))
1599      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1600              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1601  );
1602   
1603  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1604      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1605          and sameas(accNodesModel,nodesModelToCalc)), 1)
1606      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1607          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1608   
1609  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1610      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1611          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1612      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1613          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1614   
1615   
1616  * Make sure all required indicators end up in the model
1617  set variableIndicators(accNodesModel,accYears,indicator);
1618  variableIndicators(accNodesModel,accYears,indicator)
1619     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1620        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1621     = yes;
1622   
1623  set activeIndicators(accNodesModel,accYears,indicator);
1624  activeIndicators(accNodesModel,accYears,indicator)
1625     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1630        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1631        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1632        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1633          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1634     = yes;
1635   
1636  set activeIndicators_links(linksModel,years,indicator);
1637  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1638     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1639        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1640        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1641     = yes;
1642   
1643  * Clear other dependencies and only add self mapping for variable and qp indicators
1644  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1645      $(variableIndicators(accNodesModel,accYears,indicator))
1646      = 0;
1647  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1648      $(variableIndicators(accNodesModel,accYears,indicator))
1649      = 1;
1650   
1651  * Calculate length of years and discount rates per indicator
1652  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1653  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1654      $(map_accYears(accYears_a,accYears)
1655          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1656      = 1;
1657   
1658  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1659      $(map_accYears(accYears_a,accYears)
1660          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1661          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1662      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1663   
1664  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1665      $(map_accYears(accYears_a,accYears)
1666          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1667          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1668          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1669          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1670      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1671   
1672  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1673      $(map_accYears(accYears_a,accYears)
1674          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1675          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1676          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1677      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1678          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1679                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1680   
1681  * Add self mapping for variable and qp indicators
1682  yearFactor(accNodesModel,accYears,indicator,accYears)
1683      $(variableIndicators(accNodesModel,accYears,indicator))
1684      = 1;
1685   
1686   
1687  * ==== calculate compound indicators for the optimization ====
1688  scalar compIndicators_pre;
1689  scalar compIndicators_post;
1690   
1691  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1692  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1693      $(activeIndicators(accNodesModel,accYears,indicator))
1694      = 1;
1695   
1696  set compoundIndicators_act(accNodesModel,accYears,indicator);
1697  option compoundIndicators_act < compoundIndicators;
1698   
1699  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1700  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1701  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1702      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1703   
1704  compIndicators_pre = 0;
1705  compIndicators_post = 1;
1706   
1707  option sparseval = 1;
1708  while(compIndicators_pre < compIndicators_post,
1709      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1710          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1711   
1712      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1713          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1714              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1715              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1716              and map_accYears(accYears_aa,accYears_a))
1717          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1718              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1719   
1720      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1721   
1722      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1723          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1724              and sum((accNodesModel_a,accYears_a,indicator_a)
1725                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1726          = sum((accNodesModel_a,accYears_a,indicator_a)
1727                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1728              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1729   
1730      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1731          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1732              and sum((accNodesModel_a,accYears_a,indicator_a)
1733                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1734          = sum((accNodesModel_a,accYears_a,indicator_a)
1735                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1736                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1737              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1738          / sum((accNodesModel_a,accYears_a,indicator_a)
1739                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1740                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1741   
1742      option compoundIndicators_act < compoundIndicators;
1743      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1744          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1745  );
1746  option sparseval = 0;
1747   
1748  * map to sub-years and sub-nodes
1749  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1750      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1751          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1752          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1753          and map_accYears(accYears_aa,accYears_a)
1754          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1755      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1756          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1757   
1758  * Remove all accounting regions and accounting years
1759  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1760      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1761          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1762          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1763              or sameas("horizon",accYears_aa)))
1764      = 0;
1765   
1766  * Remove all slack indicators except the ones declared in indicatorBounds
1767  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1768      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1769          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1770                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1771          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1772      = 0;
1773   
1774   
1775  * Map from extended parameter to final parameter
1776  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1777  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1778      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1779          and sum((accNodesModel_a,accYears_a,indicator_a)
1780                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1781      = sum((accNodesModel_a,accYears_a,indicator_a)
1782              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1783          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1784   
1785  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1786      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1787          and sum((accNodesModel_a,accYears_a,indicator_a)
1788                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1789      = sum((accNodesModel_a,accYears_a,indicator_a)
1790              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1791                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1792          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1793      / sum((accNodesModel_a,accYears_a,indicator_a)
1794              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1795                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1796   
1797  * Remove all accounting regions and accounting years
1798  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1799      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1800          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1801          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1802              or sameas("horizon",accYears_aa)))
1803      = 0;
1804   
1805  * Remove all slack indicators except the ones declared in indicatorBounds
1806  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1807      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1808          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1809          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1810      = 0;
1811   
1812   
1813  * ==== compound indicators for the post calculation ====
1814  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1815  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1816      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1817          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1818   
1819  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1820      $(activeIndicators(accNodesModel,accYears,indicator)
1821          or variableIndicators(accNodesModel,accYears,indicator))
1822      = 1;
1823   
1824  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1825  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1826   
1827  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1828  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1829  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1830   
1831  compIndicators_pre = 0;
1832  compIndicators_post = 1;
1833   
1834  option sparseval = 1;
1835  while(compIndicators_pre < compIndicators_post,
1836      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1837          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1838   
1839      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1840          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1841              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1842              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1843              and map_accYears(accYears_aa,accYears_a))
1844          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1845              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1846   
1847      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1848   
1849      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1850          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1851              and sum((accNodesModel_a,accYears_a,indicator_a)
1852                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1853          = sum((accNodesModel_a,accYears_a,indicator_a)
1854                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1855              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1856   
1857      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1858          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1859              and sum((accNodesModel_a,accYears_a,indicator_a)
1860                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1861          = sum((accNodesModel_a,accYears_a,indicator_a)
1862                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1863                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1864              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1865          / sum((accNodesModel_a,accYears_a,indicator_a)
1866                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1867                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1868   
1869      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1870      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1871          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1872  );
1873  option sparseval = 0;
1874   
1875  * map to sub-years and sub-nodes
1876  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1877      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1878          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1879          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1880          and map_accYears(accYears_aa,accYears_a)
1881          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1882      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1883          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1884   
1885  * Remove all accounting regions and accounting years
1886  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1887      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1888          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1889          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1890              or sameas("horizon",accYears_aa)))
1891      = 0;
1892   
1893  * Remove all slack indicators except the ones declared in indicatorBounds
1894  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1895      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1896          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1897                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1898          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1899      = 0;
1900   
1901   
1902  * Map from extended parameter to final parameter
1903  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1904  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1905      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1906          and sum((accNodesModel_a,accYears_a,indicator_a)
1907                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1908      = sum((accNodesModel_a,accYears_a,indicator_a)
1909              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1910          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1911   
1912  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1913      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1914          and sum((accNodesModel_a,accYears_a,indicator_a)
1915                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1916      = sum((accNodesModel_a,accYears_a,indicator_a)
1917              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1918                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1919          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1920      / sum((accNodesModel_a,accYears_a,indicator_a)
1921              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1922                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1923   
1924  * Remove all accounting regions and accounting years
1925  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1926      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1927          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1928   
1929          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1930              or sameas("horizon",accYears_aa)))
1931      = 0;
1932   
1933  * Remove all slack indicators except the ones declared in indicatorBounds
1934  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1935      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1936          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1937          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1938      = 0;
1939   
1940   
1941  * Check if the objective value and optimization sense is set correctly
1942  scalar opti_values, opti_sense;
1943  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1944  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1945  abort$(opti_values < 1)
1946      "Accounting: No indicator specified as objective value"
1947  abort$(opti_values > 1)
1948      "Accounting: Too many indicators specified as objective value"
1949  abort$(opti_sense <> -1 and opti_sense <> 1)
1950      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
1952  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1953  * SPDX-License-Identifier: BSD-3-Clause
1954   
1955  * Calculation of annuities
1956  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1957          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
1958          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1959      "Accounting: Some converter technologies use annuities but have no amortization time"
1960   
1961  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
1962  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1963      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
1964      =
1965      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
1966          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1967          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
1968      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1969          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
1970   
1971   
1972  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1973          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
1974          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1975      "Accounting: Some storage technologies use annuities but have no amortization time"
1976   
1977  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
1978  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1979      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
1980      =
1981      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
1982          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1983          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
1984      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1985          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
1986   
1987   
1988  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1989          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
1990          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1991      "Accounting: Some transfer technologies use annuities but have no amortization time"
1992   
1993  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
1994  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1995      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
1996      =
1997      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
1998          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1999          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
2000      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2001          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
2002   
2003   
2004   
2005  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2006          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2007          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2008      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2009   
2010  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2011  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2012   
2013  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2014      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2015      =
2016      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2017          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2018          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2019      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2020          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2021   
2025   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2027  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2028  * SPDX-License-Identifier: BSD-3-Clause
2029   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2034  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2035  * SPDX-License-Identifier: BSD-3-Clause
2036   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2041  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2042  * SPDX-License-Identifier: BSD-3-Clause
2043  * // # Output data
2044  * // This is the reference data model of the REMix output.
2045  * //
2046  * // ## Standard output
2049   
2056   
2058   
2059  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2060  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2061  set profileType / "upper", "fixed", "lower" /;
2062  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2063   
2064  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2065  * // ### indicator_accounting
2066  * // Title: Accounting indicators Post-calculation
2067  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2068  * //
2069  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2070  * // ### indicator_accounting_ref
2071  * // Title: Accounting indicators reference
2072  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2073  * //
2074  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2075  * // ### indicator_accounting_var
2076  * // Title: Accounting indicators variable states
2077  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2078  * //
2079  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2080  * // ### indicator_accounting_comp
2081  * // Title: Accounting indicators composition
2082  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2083  * //
2084  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2085  * // ### indicator_accounting_detailed
2086  * // Title: Accounting indicators detail
2087  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2088  * //
2089  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2090  * // ### indicator_accounting_links
2091  * // Title: Accounting indicators per transfer link
2092  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2093  * //
2094  parameter converter_ratedInput(techs,vintage,commodity);
2095  parameter converter_ratedOutput(techs,vintage,commodity);
2096  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2097  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2098   
2099  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2100  * // ### converter_caps
2101  * // Title: Coverter capacities post-calculation
2102  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2103  * //
2104  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2105  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2106   
2107  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2108  * // ### converter_units
2109  * // Title: Coverter units post-calculation
2110  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2111  * //
2112  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2113   
2114  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2115  parameter max_transfer_coefficient(techs,commodity);
2116  parameter min_transfer_coefficient(techs,commodity);
2117  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2118  * // ### transfer_links
2119  * // Title: Transfer post-calculation
2120  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2121  * //
2122  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2123  * // ### transfer_caps
2124  * // Title: Transfer capacities post-calculation
2125  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2126  * //
2127  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2128  * // ### transfer_flows
2129  * // Title: Transfer hourly flows
2130  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2131  * //
2132  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2133  * // ### transfer_flows_annual
2134  * // Title: Transfer annual flows
2135  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2136  * //
2137  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2138  * // ### transfer_losses
2139  * // Title: Transfer hourly losses
2140  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2141  * //
2142  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2143  * // ### transfer_losses_annual
2144  * // Title: Transfer annual losses
2145  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2146  * //
2147  parameter storage_size_max(nodesModel,years,techs,commodity);
2148  parameter storage_size_min(nodesModel,years,techs,commodity);
2149  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2150  * // ### storage_units
2151  * // Title: Storage units post-calculation
2152  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2153  * //
2154  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2155  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2156  * // ### storage_caps
2157  * // Title: Storage capacities post-calculation
2158  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2159  * //
2160  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2161  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2162  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2163  * // ### storage_level_out
2164  * // Title: Storage level
2165  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2166  * //
2167  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2168  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2169  * // ### storage_flows
2170  * // Title: Storage hourly flows
2171  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2172  * //
2173  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2174  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2175  * // ### storage_flows_annual
2176  * // Title: Storage annual flows
2177  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2178  * //
2179  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2180  * // ### storage_losses_out
2181  * // Title: Storage hourly losses
2182  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2183  * //
2184  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2185  * // ### storage_losses_annual
2186  * // Title: Storage annual losses
2187  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2188  * //
2189  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2190  * // ### commodity_balance
2191  * // Title: Hourly commodity balance
2192  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2193  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2194  * //
2195  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2196  * // ### commodity_balance_annual
2197  * // Title: Annual commodity balance
2198  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2199  * //
2200  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2201  * // ### marginals_sourcesink_profile
2202  * // Title: Source-sink marginals
2203  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2204  * //
2205  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2206  * // ### marginals_balance
2207  * // Title: Nodel balance marginals
2208  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2209  * //
2210  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2211  * // ### marginals_sourcesink_sum
2212  * // Title: Source-sink annual marginals
2213  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2214  * //
2215  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2216  * // ### marginals_indicator_bounds
2217  * // Title: Indicator bounds marginals
2218  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2219  * //
2220  * // ## REMix-AMIRIS interface output
2221  * //
2222  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2223  * // ### r2a_annuity_cost_converter
2224  * // Title: Converter annuity cost
2225  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2226  * //
2227  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2228  * // ### r2a_spec_cost_converter
2229  * // Title: Converter specific cost
2230  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2231  * //
2232  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2233  * // ### r2a_spec_cost_fuel
2234  * // Title: Commodity specific cost
2235  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2236  * //
2237  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2238  * // ### r2a_spec_cost_indicator
2239  * // Title: Indicator specific cost
2240  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2241  * //
2242  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2243  * // ### r2a_converter_efficiencies
2244  * // Title: Indicator specific cost
2245  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2246  * //
2247  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2248  * // ### r2a_converter_avail_factor
2249  * // Title: Converter availability factor
2250  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2251  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2252  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2253  * //
2254  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2255  * // ### r2a_storage_e2p
2256  * // Title: E2P Storage
2257  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2258  * //
2259  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2260  * // ### r2a_storage_selfdischarge
2261  * // Title: Storage self discharge rates
2262  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2263   
2264  set attribute(*)
2265       /
2266      "variables"
2267      "equations"
2268      "iterations"
2269      /;
2270   
2271  parameter diagnostics(attribute);
2272   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2276  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2277  * SPDX-License-Identifier: BSD-3-Clause
2278   
2279  * ==== global settings ====
2281   
2283   
2285   
2287   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2289  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2290  * SPDX-License-Identifier: BSD-3-Clause
2291   
2292  * // # core_converter
2293  * // The equations in this file describe the converters in the model.
2294   
2295  * // ## Advanced features
2296  * //
2297  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2298  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2299  * //
2300  * // In the following table you can see which modifications you have to make to your data to use the different features.
2301  * //
2302  * // | Feature | Modification |
2303  * // | ------ | ------ |
2304  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2305  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2306  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2307  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2308  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2309  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2310   
2311  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2312  * //
2313  * // ### set_converter_techs.dat
2314  * // In this file all converter technologies are listed that can be used within your model.
2315  * //
2316  * // ### set_activities.dat
2317  * // All modes with which the converter technologies can be operated need to be added here.
2318  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2319  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2320  * //
2321  * // ### set_commodities.dat
2322  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2323  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2324   
2325  * // ## Variables
2326  * // {special_table_converter_variables}
2768   
2769  * // ## Load units from gdx file
2771   
2772   
2773  * ==== calculation of mappings ====
2774   
2775  * Technologies with a lifeTime > 0 are available
2776  set converter_availTech(nodesModel,years,converter_techs,vintage);
2777  converter_availTech(nodesModel,years,converter_techs,vintage)
2778      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
2779          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
2780   
2781  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
2782  converter_availTech(nodesModel,years,converter_techs,vintage)
2783      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
2784   
2785  * Technologies already built become unavailable if they have an unitsBuild of 0
2786  converter_availTech(nodesModel,years,converter_techs,vintage)
2787      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
2788   
2789  * Used technologies are available technologies over their technical lifeTime
2790  set converter_usedTech(nodesModel,years,converter_techs,vintage);
2791  converter_usedTech(nodesModel,years,converter_techs,vintage)
2792      $(vintage.val <= years.val
2793          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
2794                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
2795          ) = yes;
2796   
2797  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
2798  set converter_decomTech(nodesModel,years,converter_techs,vintage);
2799  converter_decomTech(nodesModel,years,converter_techs,vintage)
2800    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2801                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2802      and sum(yearsToCalc
2803        $(sameas(years, yearsToCalc)
2804          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2805          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2806    = yes;
2807   
2808  converter_decomTech(nodesModel,years,converter_techs,vintage)
2809    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2810                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2811      and sum(yearsToCalc
2812        $(sameas(years, yearsToCalc)
2813          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2814          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2815    = yes;
2816   
2817  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
2818  converter_decomTech(nodesModel,years,converter_techs,vintage)
2819    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
2820      and sum(yearsToCalc
2821        $(sameas(years, yearsToCalc)
2822          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
2823    = yes;
2824   
2825  * Extend the decom frame to the model year after the last model year of usedTech
2826  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2827    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
2828      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
2829    = yes;
2830   
2831  * Mapping for used activities and commodities
2832  set converter_usedActCom(converter_techs,vintage,activity,commodity);
2833  option converter_usedActCom < converter_coefficient;
2834   
2835  set converter_usedAct(converter_techs,vintage,activity);
2836  option converter_usedAct < converter_usedActCom;
2837   
2838  set converter_usedCom(converter_techs,vintage,commodity);
2839  option converter_usedCom < converter_usedActCom;
2840   
2841  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
2842  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
2843      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2844          and converter_usedAct(converter_techs,vintage,activity))
2845      = yes;
2846   
2847  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
2848  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2849    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2850      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
2851    = 1;
2852   
2853  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
2854  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2855    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2856      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
2857    = 1;
2858   
2859   
2860  * ==== aggregation of profiles ====
2861   
2862  * derive upper and lower profiles then aggregate
2863  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
2864  option converter_activity_hasProfileIn < converter_activityProfileIn;
2865   
2866  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
2867  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2868      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2869              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
2870   
2871  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
2872  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
2873   
2874  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
2875  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2876      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2877              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
2878   
2879  * aagregate time dimension
2880  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
2881  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2882    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2883    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
2884            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2885            / timeLength(timeModelToCalc));
2886  option clear = converter_activityProfileIn;
2887   
2888  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2889  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
2890  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
2891      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
2892  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
2893      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
2894   
2895   
2896  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2897  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2898      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
2899          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
2900   
2901  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2902  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2903      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
2904   
2905  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2906      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2907          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2908      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2909                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
2910                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2911                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
2912      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2913              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2914   
2915  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2916      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2917          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2918      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2919                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
2920                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
2921      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2922                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2923              1);
2924  option clear = converter_activityProfileIn_aggTime;
2925   
2926  * for fixed profiles overwrite upper and lower profile
2927  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
2928      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2929      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2930   
2931  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
2932      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2933      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2934   
2938   
2939  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2940  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
2941  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2942      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
2943   
2944  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2945      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2946          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
2947      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2948            sum(timeData$timeMapping(timeData,timeModelToCalc),
2949                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2950                / timeLength(timeModelToCalc)
2951              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
2952      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2953              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2954   
2955  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2956      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2957          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2958      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2959                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2960            sum(timeData$timeMapping(timeData,timeModelToCalc),
2961                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2962                / timeLength(timeModelToCalc))
2963      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2964                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
2965   
2968   
2969  * reduce coefficient delay based on time resolution
2970  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
2971    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
2972    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
2974   
2975  * ==== prepare partial load behavior parameters ====
2976   
2977  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
2978  alias(commodity, com);
2979  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
2980      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
2981        and converter_usedAct(converter_techs,vintage,activity))
2982      = 1;
2983   
2984  * indicate that at least one activity of a technology makes use of partial load behavior
2985  set converter_hasMaxLoad(converter_techs,vintage);
2986  converter_hasMaxLoad(converter_techs,vintage)
2987    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2988              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
2989   
2990  set converter_hasMinLoad(converter_techs,vintage);
2991  converter_hasMinLoad(converter_techs,vintage)
2992    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2993              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
2994   
2995  set converter_hasConstantFluxInActivity(converter_techs,vintage);
2996  converter_hasConstantFluxInActivity(converter_techs,vintage)
2997    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2998                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
2999   
3000  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3001  set pc_converter_activityRequirements
3002      /
3003      minLoad             "Lower profile for converter activity"
3004      maxLoad             "Upper profile for converter activity"
3005      /;
3006  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3007  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3008    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3009  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3010    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3011   
3012  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3013   
3014  set converter_hasMinUptime(converter_techs,vintage);
3015  converter_hasMinUptime(converter_techs,vintage)
3016    $(converter_techParam(converter_techs,vintage,"minUptime")
3017      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3018    = yes;
3019   
3020  set converter_hasMinDowntime(converter_techs,vintage);
3021  converter_hasMinDowntime(converter_techs,vintage)
3022    $(converter_techParam(converter_techs,vintage,"minDowntime")
3023      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3024    = yes;
3025   
3026  * require integer unit counts if online state is to be tracked
3027  converter_techParam(converter_techs,vintage,"mipUnits")
3028      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3029        or converter_hasMinLoad(converter_techs, vintage)
3030        or converter_hasMaxLoad(converter_techs, vintage)
3031        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3032      = 1;
3033   
3034  * ==== floor mip converter units to integer values ====
3035  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3036      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3037      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3038  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3039      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3040      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3041   
3042  * ==== scalars and sets for minUptime and minDowntime ====
3043   
3044  scalar converter_maxUptimeReq;
3045  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3046  set uptimeSearchRange(timeModelToCalc);
3047  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3048   
3049  scalar converter_maxDowntimeReq;
3050  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3051  set downtimeSearchRange(timeModelToCalc);
3052  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3053   
3054  * ==== definition of variables ====
3055   
3056  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3057      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3058        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3059      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3060  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3061      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3062        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3063      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3064  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3065      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3066        and (converter_hasMinLoad(converter_techs, vintage)
3067              or converter_hasMaxLoad(converter_techs, vintage)))
3068      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3069   
3070   
3071  * Initialise variables for unitsBuild
3072  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3073      $converter_availTech(nodesModel,years,converter_techs,vintage)
3074      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3075  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3076      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3077      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3078  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3079      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3080      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3081   
3082  * Initialise variables for unitsDecom
3083  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3084    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3085      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3086    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3087                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3088                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3089                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3090          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3091   
3092  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3093    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3094    = sum(years$
3095          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3096            and converter_availTech(nodesModel,years,converter_techs,vintage)
3097            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3098            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3099        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3100      + sum(yearsToCalc_a$
3101          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3102            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3103            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3104            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3105        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3106        ;
3107   
3108  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3109      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3110          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3111      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3112   
3113   
3115   
3116   
3117  * Calculate planned unit expansion
3118  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3119  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3120  loop(years,
3121    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3122      =
3123      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3124          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3125      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3126          $converter_availTech(nodesModel,years,converter_techs,vintage)
3127      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3128          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3129  );
3130   
3131  * Set initial state for planned units
3132  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3133    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3134   
3135   
3136  * // ## Load units from gdx file
3138   
3139  * Calculate if planned unit expansion is bounded by upper and lower limits
3140  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3141  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3142    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3143          converter_techParam(converter_techs,vintage,"freeDecom"))
3144    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3145          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3146      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3147    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3148          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3149      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3150    = yes;
3151   
3152  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3153  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3154    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3155      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3156    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3157  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3158    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3159      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3160    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3161  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3162    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3163      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3164    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3165   
3166   
3167  * Add parameter for fixing capacities during myopic runs
3168  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3169  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3170  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3171   
3172  * Fix activities of upper limit if upper limit is zero
3173  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3174    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3175      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3176      = 0;
3177   
3178   
3179  * ==== declaration of equations ====
3180   
3181  equations
3182    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3183      ) "Ensures the units balance over the planning period."
3184    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3185      ) "Ensures the units balance over the planning period."
3186    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3187      ) "Restricts the free decommissioning of units over the planning period."
3188    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3189      ) "Upper bound for the total number of units."
3190    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3191      ) "Lower bound for the total number of units."
3192    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3193      ) "Fixed bound for the total number of units."
3194    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3195      ) "Fixes the total number of units to the corresponding integer variable."
3196    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3197      ) "Fixes the number of online units to the corresponding integer variable."
3198   
3199    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3200      ) "Lower limit on the activity."
3201    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3202      ) "Upper limit on the activity."
3203   
3204    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3205      ) "Fixed limit on the activity."
3206    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3207      ) "Positive ramping of unit activity."
3208    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3209      ) "Negative ramping of unit activity."
3210    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3211      ) "Restrict ramping up of unit activity."
3212   
3213    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3214      ) "Set online units to total number of operational units."
3215    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3216      ) "Allow shutting down units."
3217    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3218      ) "Variable counting the number of unit startups."
3219    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3220      ) "Variable tracking the number of unit shutdowns."
3221    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3222      ) "Limit the number of startup cycles a unit can perform."
3223    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3224      ) "Require recently started units to remain online for their respective minimum uptime."
3225    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3226      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3227    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3228      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3229    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3230      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3231    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3232      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3233    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3234      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3235    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3236      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3237    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3238      ) "Limit usage of an activity to corresponding units."
3239    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3240      ) "Limit usage of an activity to corresponding units."
3241    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3242      ) "Limit the number of units in one particular mode to the number of operational units."
3243    ;
3244   
3245  * ==== equation definition ====
3246  * // ## Equations
3247  * // ### Converter Units Balance
3248  * // Ensures that the total units are consistent with the built and decommissioned units.
3249  * // {Eq_converter_unitsBalance}
3250   
3251  * Equation using build only
3252  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3253      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3254            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3255          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3256          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3257      ..
3258      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3259      =e=
3260      sum ((years_a)
3261              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3262                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3263                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3264                  and years_a.val <= yearsSel.val ),
3265            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3266   
3267      + sum ((yearsToCalc)
3268              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3269                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3270                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3271                  and yearsToCalc.val <= yearsSel.val ),
3272            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3273   
3274  * Equation using build and decom
3275  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3276      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3277            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3278          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3279          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3280      ..
3281      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3282      =e=
3283      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3284        sum(years$sameas(years, yearsToCalc),
3285          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3286            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3287      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3288        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3289          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3290      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3291          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3292      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3293          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3294      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3295          ;
3296   
3297  * // ### Converter Units Free Decommission
3298  * // Restricts the free decommissioning of units over the planning period.
3299  * // {Eq_converter_unitsFreeDecom}
3300  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3301      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3302          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3303      ..
3304      sum(years$
3305            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3306              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3307          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3308      + sum(yearsToCalc$
3309            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3310              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3311              and yearsToCalc.val <= yearsSel.val),
3312          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3313      =g=
3314      sum(years$
3315            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3316              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3317              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3318          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3319      + sum(yearsToCalc$
3320            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3321              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3322              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3323          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3324   
3325  * // ### Converter Units Upper Limit
3326  * // Upper bound for the total number of units.
3327  * // {Eq_converter_unitsUpperLimit}
3328  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3329      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3330          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3331          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3332              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3333      ..
3334      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3335          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3336      =l=
3337      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3338   
3339  * // ### Converter Units Lower Limit
3340  * // Lower bound for the total number of units.
3341  * // {Eq_converter_unitsLowerLimit}
3342  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3343      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3344          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3345              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3346      ..
3347      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3348          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3349      =g=
3350      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3351   
3352  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3353      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3354          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3355      ..
3356      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3357          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3358      =e=
3359      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3360   
3361  * // ### Converter Units Total MIP
3362  * // Fixes the total number of units to the corresponding integer variable.
3363  * // {Eq_converter_unitsTotalMIP}
3364  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3365      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3366          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3367      ..
3368      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3369      =e=
3370      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3371   
3372  * // ### Converter Units Online MIP
3373  * // Fixes the number of online units to the corresponding integer variable.
3374  * // {Eq_converter_unitsOnlineMIP}
3375  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3376      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3377          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3378      ..
3379      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3380      =e=
3381      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3382   
3383  * // ### Converter Activity Lower Limit
3384  * // Lower limit on the activity.
3385  * // {Eq_converter_activityLowerLimit}
3386  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3387      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3388          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3389          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3390              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3391          and not converter_hasMinLoad(converter_techs, vintage))
3392      ..
3393      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3394          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3395      )
3396      =g=
3397      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3400      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3403   
3404  * // ### Converter Activity Upper Limit
3405  * // Upper limit on the activity.
3406  * // {Eq_converter_activityUpperLimit}
3407  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3408      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3409          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3410          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3411               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3412      ..
3413      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3414          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3415      )
3416      =l=
3417      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3420      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3423   
3424  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3425      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3426          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3427               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3428      ..
3429      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3430          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3431      )
3432      =e=
3433      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3436      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3439   
3440  * // ### Converter Positive Ramping
3441  * // Positive ramping of unit activity.
3442  * // {Eq_converter_rampPos}
3443  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3444    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3445        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3446      ..
3447      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3448      =g=
3449      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3450              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3451              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3452   
3453  * // ### Converter Negative Ramping
3454  * // Negative ramping of unit activity.
3455  * // {Eq_converter_rampNeg}
3456  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3457    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3458        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3459      ..
3460      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3461      =g=
3462      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3463              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3464              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3465   
3466  * // ### Converter Ramping Limit
3467  * // Restrict ramping up of unit activity.
3468  * // {Eq_converter_rampLimit}
3469  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3470    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3471          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3472      ..
3473      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3474              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3475              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3476    =l=
3477    converter_techParam(converter_techs,vintage,"activityRampLimit")
3480      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3483   
3486   
3487  * // ### Converter Units Online
3488  * // Set converter units online to total converter units for non-MIP case.
3489  * // {Eq_converter_unitsOnline}
3490  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3491      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3492          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3493    ..
3494    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3495    =e=
3496    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3497      ;
3498   
3499  * // ### Converter MIP Units Shutting Down
3500  * // Allow shutting down units.
3501  * // {Eq_converter_unitsOnlineUC}
3502  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3503      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3504          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3505    ..
3506    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3507    =l=
3508    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3509      ;
3512   
3513  * // ### Converter Activity Startups
3514  * // Variable counting the number of unit startups.
3515  * // {Eq_converter_activityStartups}
3516  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3517    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3518          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3519      ..
3520      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3521      =g=
3522          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3523      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3524   
3525  * // ### Converter Activity Shutdowns
3526  * // Variable tracking the number of unit shutdowns.
3527  * // {Eq_converter_activityShutdowns}
3528  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3529    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3530          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3531          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3532      ..
3533      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3534      =g=
3535          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3536      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3537   
3538  * // ### Converter Activity Startup Limit
3539  * // Limit the number of startup cycles a unit can perform.
3540  * // {Eq_converter_limitStartups}
3541  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3542    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3543          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3544      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3545      ..
3546      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3547    =l=
3548    converter_techParam(converter_techs,vintage,"startupLimit")
3549    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3550   
3551  alias(timeModelToCalc,ttc);
3552   
3553  * // ### Converter Units Minimum Uptime
3554  * // Require recently started units to remain online for their respective minimum uptime.
3555  * // {Eq_converter_minUptime}
3556  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3557    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3558          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3559      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3560      ..
3561      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3562          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3563              nodesModelSel,yearsSel,converter_techs,vintage))
3564          =l=
3565          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3566   
3567  * // ### Converter Units Minimum Downtime
3568  * // Require recently shut down units to remain offline for their respective minimum downtime.
3569  * // {Eq_converter_minDowntime}
3570  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3571    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3572          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3573      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3574      ..
3575      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3576          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3577              nodesModelSel,yearsSel,converter_techs,vintage))
3578          =l=
3579          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3580      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3581   
3582  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3583  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3584  alias(activity, act);
3585   
3586  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3587  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3588  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3589  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3590    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3591          and converter_hasMinLoad(converter_techs, vintage)
3592          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3593      ..
3594      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3595                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3596               and converter_usedAct(converter_techs,vintage,act)),
3597      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3598    =l=
3599    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3600      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3601                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3602                 and converter_usedAct(converter_techs,vintage,act)),
3603      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3604   
3605  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3606  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3607  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3608  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3609    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3610          and converter_hasMaxLoad(converter_techs,vintage)
3611          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3612      ..
3613      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3614                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3615               and converter_usedAct(converter_techs,vintage,act)),
3616      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3617    =l=
3618      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3619                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3620               and converter_usedAct(converter_techs,vintage,act)),
3621      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3622            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3623            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3624   
3625  * This equation is meant to enforce the lower limit requirements of activities in use.
3626  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3627  * because these activities can only run on units in the respectively strict activation state.
3628   
3629  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3630  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3631  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3632  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3633    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3634          and converter_hasMinLoad(converter_techs, vintage)
3635          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3636      ..
3637      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3638                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3639               and converter_usedAct(converter_techs,vintage,act)),
3640      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3641    =g=
3642      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3643                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3644               and converter_usedAct(converter_techs,vintage,act)),
3645      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3646            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3647            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3648   
3649   
3650  * Simple one-activity-per-unit partial load equations
3651  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3652  * // Enforce MIP units partial load upper limit.
3653  * // {Eq_converter_activityUpperLimitPartLoad}
3654  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3655    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3656          and (converter_hasMinLoad(converter_techs, vintage)
3657                or converter_hasMaxLoad(converter_techs, vintage)
3658                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3659          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3660      ..
3661      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3662    =l=
3663    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3664          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3665          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3666   
3667  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3668  * // Enforce MIP units partial load lower limit.
3669  * // {Eq_converter_activityLowerLimitPartLoad}
3670  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3671    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3672          and (converter_hasMinLoad(converter_techs, vintage)
3673                or converter_hasMaxLoad(converter_techs, vintage))
3674          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3675      ..
3676      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3677    =g=
3678    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3679          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3680          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3681   
3682  * // ### Converter MIP Units Idle Online Units
3683  * // Counts idle online units at every time step
3684  * // {Eq_converter_noOnlineIdle}
3685  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3686    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3687          and (converter_hasMinLoad(converter_techs, vintage)
3688              or converter_hasMaxLoad(converter_techs, vintage)
3689              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3690          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3691      ..
3692      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3693      =e=
3694      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3695            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3696   
3697  * // ### Converter MIP Units Idle Online Units Partial load
3698  * // Counts idle online units at every time step
3699  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3700  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3701    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3702          and (converter_hasMinLoad(converter_techs, vintage)
3703                  or converter_hasMaxLoad(converter_techs, vintage))
3704          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3705      ..
3706      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3707      =l=
3708      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3709            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3710   
3711  * // ### Converter MIP activity model limit
3712  * // Converter activity model limit
3713  * // {Eq_converter_activityModeLimit}
3714  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3715    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3716          and (converter_hasMinLoad(converter_techs, vintage)
3717                or converter_hasMaxLoad(converter_techs, vintage))
3718          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3719      ..
3720      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3721      =g=
3722      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3723   
3724  * ==== model definition ====
3725   
3726  Model M_converter
3727  /
3728    Eq_converter_unitsBalance
3729    Eq_converter_unitsBalanceFreeDecom
3730    Eq_converter_unitsFreeDecom
3731    Eq_converter_unitsUpperLimit
3732    Eq_converter_unitsLowerLimit
3733    Eq_converter_unitsFixedLimit
3734    Eq_converter_unitsTotalMIP
3735    Eq_converter_unitsOnlineMIP
3736    Eq_converter_activityUpperLimit
3737    Eq_converter_activityLowerLimit
3738    Eq_converter_activityFixedLimit
3739    Eq_converter_rampPos
3740    Eq_converter_rampNeg
3741    Eq_converter_rampLimit
3744    Eq_converter_unitsOnline
3745    Eq_converter_unitsOnlineUC
3748    Eq_converter_activityStartups
3749    Eq_converter_activityShutdowns
3750    Eq_converter_limitStartups
3751    Eq_converter_minUptime
3752    Eq_converter_minDowntime
3753    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
3754    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
3755    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
3756    Eq_converter_activityUpperLimitPartLoad
3757    Eq_converter_activityLowerLimitPartLoad
3758    Eq_converter_noOnlineIdle
3759    Eq_converter_noOnlineIdleDetailedPartLoad
3760    Eq_converter_activityModeLimit
3761  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
3763  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
3764  * SPDX-License-Identifier: BSD-3-Clause
3765   
3766  * // # core_storage
3767  * // The equations in this file describe the storages in the model.
3768   
3769  * // ## Variables
3770  * // {special_table_storage_variables}
4043   
4044   
4045  * === SoC mappings ===
4046  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4047  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4048      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4049        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4050      = yes;
4051   
4052  set storage_validSoCRange(storage_techs,vintage);
4053  storage_validSoCRange(storage_techs,vintage)
4054      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4055        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4056   
4057  * === Translate SoC parameters to ordered SoC-set ===
4058  * set ordered_socs / soc1*soc20 /;
4059  * alias(soc_states, soc_states_c);
4060  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4061  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4062  *     $storage_validSoCRange(storage_techs,vintage)
4063  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4064  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4065  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4066  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4067  *
4068  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4069  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4070  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4071  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4072  *     = yes;
4073   
4074  parameter storage_bigM(storage_techs,vintage);
4075  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4076  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4077  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4078   
4079  * === calculate the number of years represented by single year to calc ===
4080  alias(yearsToCalc, yearsToCalc_a)
4081  parameter representedYears(years);
4082  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4083                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4084   
4085  * ==== calculation of mappings ====
4086   
4087  * Technologies with a lifeTime > 0 are available
4088  set storage_availTech(nodesModel,years,storage_techs,vintage);
4089  storage_availTech(nodesModel,years,storage_techs,vintage)
4090      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4091          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4092   
4093  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4094  storage_availTech(nodesModel,years,storage_techs,vintage)
4095      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4096   
4097  * Technologies already built become unavailable if they have an unitsBuild of 0
4098  storage_availTech(nodesModel,years,storage_techs,vintage)
4099      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4100   
4101  * Used technologies are available technologies over their technical lifeTime
4102  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4103  storage_usedTech(nodesModel,years,storage_techs,vintage)
4104      $(vintage.val <= years.val
4105          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4106                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4107          ) = yes;
4108   
4109  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4110  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4111  storage_decomTech(nodesModel,years,storage_techs,vintage)
4112    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4113                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4114      and sum(yearsToCalc
4115        $(sameas(years, yearsToCalc)
4116          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4117          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4118    = yes;
4119   
4120  storage_decomTech(nodesModel,years,storage_techs,vintage)
4121    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4122                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4123      and sum(yearsToCalc
4124        $(sameas(years, yearsToCalc)
4125          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4126          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4127    = yes;
4128   
4129  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4130  storage_decomTech(nodesModel,years,storage_techs,vintage)
4131    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4132      and sum(yearsToCalc
4133        $(sameas(years, yearsToCalc)
4134          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4135    = yes;
4136   
4137  * Extend the decom frame to the year after the last year of usedTech
4138  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4139    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4140      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4141    = yes;
4142   
4143  * Mapping for used commodities
4144  set storage_usedCom(storage_techs,vintage,commodity);
4145  option storage_usedCom < storage_sizeParam;
4146   
4147  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4148  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4149      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4150          and storage_usedCom(storage_techs,vintage,commodity))
4151      = yes;
4152   
4153   
4154  * // ## Load units from gdx file
4156   
4157   
4158  * ==== aggregation of profiles ====
4159  * derive upper and lower profiles then aggregate
4160  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4161  option storage_level_hasProfileIn < storage_levelProfileIn;
4162   
4163  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4164  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4165      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4166              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4167   
4168  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4169  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4170  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4171      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4172  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4173      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4174   
4175  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4176  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4177                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4178   
4179  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4180      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4181          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4182      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4183              sum(timeData$timeMapping(timeData,timeModelToCalc),
4184                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4185                / timeLength(timeModelToCalc)
4186              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4187      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4188              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4189   
4190  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4191      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4192          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4193                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4194      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4195                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4196              sum(timeData$timeMapping(timeData,timeModelToCalc),
4197                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4198                / timeLength(timeModelToCalc))
4199      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4200                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4201   
4202  * for fixed profiles overwrite upper and lower profile
4203  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4204      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4205      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4206   
4207  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4208      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4209      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4210   
4211  * storage initial level
4212   
4213  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4214      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4215          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4216      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4217            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4218              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4219      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4220              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4221   
4222  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4223      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4224          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4225                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4226      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4227                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4228            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4229      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4230                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4231   
4232  * ==== parameter modifications ====
4233  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4234          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4235      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4236  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4237          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4238      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4239   
4240   
4241  * ==== definition of variables ====
4242   
4243  * Initialise variables for unitsBuild
4244  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4245      $storage_availTech(nodesModel,years,storage_techs,vintage)
4246      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4247  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4248      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4249      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4250  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4251      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4252      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4253   
4254  * Initialise variables for unitsDecom
4255  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4256      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4257        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4258      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4259                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4260                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4261                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4262          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4263   
4264  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4265    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4266    = sum(years$
4267          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4268            and storage_availTech(nodesModel,years,storage_techs,vintage)
4269            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4270            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4271        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4272      + sum(yearsToCalc_a$
4273          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4274            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4275            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4276            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4277        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4278        ;
4279   
4280  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4281      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4282        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4283      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4284   
4285   
4287   
4288   
4289  * Calculate planned unit expansion
4290  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4291  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4292  loop(years,
4293    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4294      =
4295      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4296          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4297      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4298          $storage_availTech(nodesModel,years,storage_techs,vintage)
4299      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4300          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4301  );
4302   
4303  * Set initial state for planned units
4304  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4305    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4306   
4307  * // ## Load units from gdx file
4309   
4310  * Calculate if planned unit expansion is bounded by upper and lower limits
4311  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4312  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4313    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4314          storage_techParam(storage_techs,vintage,"freeDecom"))
4315    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4316          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4317      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4318    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4319          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4320      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4321    = yes;
4322   
4323  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4324  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4325    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4326      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4327    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4328  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4329    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4330      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4331    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4332  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4333    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4334      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4335    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4336   
4337  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4338      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4339        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4340      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4341   
4342  * Add parameter for fixing capacities during myopic runs
4343  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4344  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4345  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4346   
4347  * ==== declaration of equations ====
4348   
4349  equations
4350    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4351      ) "Ensures the units balance over the planning period."
4352    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4353      ) "Ensures the units balance over the planning period."
4354    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4355      ) "Restricts the free decommissioning of units over the planning period."
4356    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4357      ) "Upper bound for the total number of units."
4358    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4359      ) "Lower bound for the total number of units."
4360    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4361      ) "Fixes the total number of units to the corresponding integer variable."
4362   
4363    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4364      ) "Upper bound for the total number of units."
4365    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4366      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4367    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4368      ) "Lower bound for the total number of units."
4369    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4370      ) "Stored commodities lost due to self discharge."
4371    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4372      ) "Currently available units must have been built at some point in time and have some state of degradation."
4373    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4374      ) "There cannot be more units from a certain year than the amount built in that year."
4375    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4376      ) "There is no recovery."
4377    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4378      ) "Limit charging rate based on unit capacity."
4379    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4380      ) "Limit discharging rate based on unit capacity."
4381    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4382      ) "Positive change in state of charge is influx."
4383    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4384      ) "Negative change in state of charge is outflux."
4385   
4386    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4387      ) "Sum of degradation class storage levels is the global level."
4388    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4389      ) "Upper bound for units of a certain state."
4390    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4391      ) "Positive change in state of charge is influx for each degradation class."
4392    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4393      ) "Determine degradation states of storage units."
4394    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4395      ) "All decomminsioned units must have a degradation state."
4396    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4397      ) "Only allow one range of degradation states per year and age group."
4398    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4399      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4400   
4401    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4402      ) "Every unit has a state of charge."
4403    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4404      ) "Every unit has a state of charge."
4405    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4406      ) "Number of units in particular SoC."
4407    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4408      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4409   
4410    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4411      ) "Limit charging rate based on unit capacity."
4412    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4413      ) "Limit discharging rate based on unit capacity."
4414    ;
4415   
4416  * ==== equation definition ====
4417  * // ## Equations
4418  * // ### Storage Units Balance
4419  * // Ensures that the total units are consistent with the built and decommissioned units.
4420  * // {Eq_storage_unitsBalance}
4421   
4422  * Equation using build only
4423  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4424      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4425            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4426          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4427          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4428      ..
4429      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4430      =e=
4431      sum ((years_a)
4432                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4433                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4434                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4435                          and years_a.val <= yearsSel.val ),
4436              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4437   
4438      + sum ((yearsToCalc)
4439                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4440                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4441                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4442                          and yearsToCalc.val <= yearsSel.val ),
4443              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4444   
4445  * Equation using build and decom
4446  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4447      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4448            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4449          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4450          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4451      ..
4452      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4453      =e=
4454          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4455        sum(years$sameas(years, yearsToCalc),
4456          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4457            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4458      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4459        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4460          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4461      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4462          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4463      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4464          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4465      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4466          ;
4467   
4468  * // ### Storage Units Free Decommission
4469  * // Restricts the free decommissioning of storage units over the planning period.
4470  * // {Eq_storage_unitsFreeDecom}
4471  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4472      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4473          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4474      ..
4475      sum(years$
4476            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4477              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4478          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4479      + sum(yearsToCalc$
4480            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4481              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4482              and yearsToCalc.val <= yearsSel.val),
4483          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4484      =g=
4485      sum(years$
4486            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4487              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4488              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4489          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4490      + sum(yearsToCalc$
4491            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4492              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4493              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4494          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4495   
4496  * // ### Storage Units Lower Limit
4497  * // Lower bound for the total number of storage units.
4498  * // {Eq_storage_unitsLowerLimit}
4499  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4500      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4501      ..
4502      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4503          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4504      =g=
4505      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4506   
4507  * // ### Storage Units Upper Limit
4508  * // Upper bound for the total number of storage units.
4509  * // {Eq_storage_unitsUpperLimit}
4510  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4511      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4512          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4513      ..
4514      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4515          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4516      =l=
4517      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4518   
4519  * // ### Storage Units Total MIP
4520  * // Fixes the total number of storage units to the corresponding integer variable.
4521  * // {Eq_storage_unitsTotalMIP}
4522  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4523      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4524          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4525      ..
4526      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4527      =e=
4528      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4529   
4530  * // ### Storage Level Lower Limit
4531  * // Lower limit on the storage level.
4532  * // {Eq_storage_levelLowerLimit}
4533  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4534      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4535          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4536      ..
4537      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4538      =g=
4539      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4540      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4541      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4542   
4543  * // ### Storage Level Upper Limit
4544  * // Upper limit on the storage level.
4545  * // {Eq_storage_levelUpperLimit}
4546  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4547      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4548          and not storage_hasDegradation(storage_techs,vintage)
4549          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4550      ..
4551      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4552      =l=
4553      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4554      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4555      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4556   
4557  * // ### Storage Level Upper Limit (degradation)
4558  * // Upper limit on the storage level if the storage technology accounts for degradation.
4559  * // {Eq_storage_levelUpperLimit_degradation}
4560  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4561      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4562          and storage_hasDegradation(storage_techs,vintage)
4563          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4564      ..
4565      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4566      =l=
4567      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4568      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4569      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4570              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4571                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4572                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4573   
4574  * // ### Storage Unit States Sum (degradation)
4575  * // The number of units in all degradation state must match the total unit number.
4576  * // {Eq_storage_unitsBalanceStates}
4577  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4578      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4579        and storage_hasDegradation(storage_techs,vintage))
4580      ..
4581      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4582      =e=
4583      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4584            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4585   
4586  * // ### Storage Unit States Upper Limit(degradation)
4587  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4588  * // {Eq_storage_unitsUpperLimitPerState}
4589  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4590      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4591          and storage_hasDegradation(storage_techs,vintage))
4592      ..
4593      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4594            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4595            + sum(years$(years.val <= yearsSel.val),
4596                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4597      =e=
4598      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4599   
4600  * // ### Storage Unit States Progression (degradation)
4601  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4602  * // {Eq_storage_unitsStatesNoRecovery}
4603  alias(degradation_states, dc_states);
4604  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4605      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4606        and yearsToCalc.val > yearsCom.val
4607        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4608      ..
4609      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4610                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4611              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4612              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4613      =l=
4614      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4615                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4616              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4617              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4618   
4619  * // ### Storage Losses
4620  * // Accumulation of storage losses.
4621  * // {Eq_storage_losses}
4622  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4623      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4624      ..
4625      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4626      =e=
4627      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4628          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4629        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4630            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4631        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4632            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4633            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4634            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4635                and ord(timeModelToCalc)=1))
4636      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4637      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4638      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4639          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4640        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4641          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4642      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4643        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4644          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4645      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4646        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4647                          and storage_validSoCRange(storage_techs,vintage)),
4648              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4649              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4650              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4651   
4652  * // ### C-Rate Limit
4653  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4654  * // {Eq_storage_cRateLimit}
4655  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4656      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4657        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4658      ..
4659      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4660      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4661          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4662      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4663          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4664      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4665          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4666          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4667          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4668              and ord(timeModelToCalc)=1)
4669      =l=
4670      storage_techParam(storage_techs,vintage,"maxCRate")
4671      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4672      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4673   
4674  * // ### E-Rate Limit
4675  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4676  * // {Eq_storage_eRateLimit}
4677  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4678      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4679        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4680      ..
4681      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4682      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4683          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4684      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4685          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4686      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4687          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4688          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4689          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4690              and ord(timeModelToCalc)=1)
4691      =g=
4692      - storage_techParam(storage_techs,vintage,"maxERate")
4693      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4694      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4695   
4696  * // ### Storage Charging
4697  * // Increases in storage levels are accounted as charging amounts.
4698  * // {Eq_storage_charge}
4699  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4700      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4701        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4702      ..
4703      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4704      =g=
4705      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4706      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4707          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4708      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4709          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4710      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4711          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4712          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4713          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4714              and ord(timeModelToCalc)=1);
4715   
4716  * // ### Storage Discharging
4717  * // Decreases in storage levels are accounted as discharging amounts.
4718  * // {Eq_storage_discharge}
4719  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4720      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4721        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4722      ..
4723      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4724      =g=
4725      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4726          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4727      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4728          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4729      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4730          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4731          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4732          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4733              and ord(timeModelToCalc)=1)
4734      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4735   
4736  * // ### Storage Level Sum (degradation)
4737  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4738  * // {Eq_storage_levelStateSum}
4739  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4740      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4741        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4742      ..
4743      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4744      =e=
4745      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4746   
4747  * // ### Storage Level Upper Limit per Age Group (degradation)
4748  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4749  * // {Eq_storage_levelUpperLimitPerAge}
4750  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4751      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4752        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4753      ..
4754      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4755      =l=
4756      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4757      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4758      * sum(degradation_states,
4759              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4760                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4761                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4762   
4763  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4764  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4765  * // {Eq_storage_chargeBasedDegradationDistribution}
4766  alias(years, prev_years);
4767  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4768      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4769        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4770      ..
4771      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
4772          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
4773      =l=
4774      storage_sizeParam(storage_techs,vintage,commodity,"size")
4775      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
4776          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
4777          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
4778             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
4779   
4780  * // ### Storage Charging per Commissioning Year (degradation)
4781  * // Increases in storage levels are accounted as charging amounts.
4782  * // {Eq_storage_chargingPerAge}
4783  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4784      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4785        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4786      ..
4787      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4788      =g=
4789      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4790      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
4791   
4792  * // ### Storage Unit Decommissioning States Sum (degradation)
4793  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
4794  * // {Eq_storage_unitsDecomStateSum}
4795  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
4796      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
4797      ..
4798      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4799      =e=
4800      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4801          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4802   
4803  * // ### Storage Unit Sequential Degradation (degradation)
4804  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
4805  * // {Eq_storage_unitsDegradation}
4806  alias(degradation_states, degradation_states_a, degradation_states_b);
4807  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4808      $(storage_techParam(storage_techs,vintage,"usageDegradation")
4809        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4810      ..
4811      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4812                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
4813                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4814                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
4815                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
4816                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
4817          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
4818      * storage_bigM(storage_techs,vintage)
4819      =g=
4820      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
4821   
4822  * // ### Storage Unit Sequential Degradation Range (degradation)
4823  * // Only one degradation range can be active.
4824  * // {Eq_storage_unitsDegradation_onlyOneRange}
4825  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4826      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4827      ..
4828      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4829            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
4830      =e= 1;
4831   
4832  * // ### Storage Unit Sequential State of Charge (SoC)
4833  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
4834  * // {Eq_storage_unitsSoC}
4835  alias(soc_states, soc_states_a, soc_states_b);
4836  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4837      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4838      ..
4839      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4840                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
4841                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4842                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
4843                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
4844                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
4845          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
4846      * storage_bigM(storage_techs,vintage)
4847      =g=
4848      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
4849   
4850  * // ### Storage Unit Sequential State of Charge Range (SoC)
4851  * // Only one state of charge range can be active.
4852  * // {Eq_storage_unitsSoC_onlyOneRange}
4853  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4854      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4855      ..
4856      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4857            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
4858   
4859  * // ### Storage Unit State of Charge Sum (SoC)
4860  * // Each storage unit must have one state of charge.
4861  * // {Eq_storage_unitsSoC_sum}
4862  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4863      $storage_validSoCRange(storage_techs,vintage)
4864      ..
4865      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4866      =e=
4867      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4868            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4869   
4870  * // ### Storage Level State of Charge Sum (SoC)
4871  * // The total storage level must be represented by units in their specific states of charge.
4872  * // {Eq_storage_levelSoC}
4873  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4874      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
4875      ..
4876      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4877      =e=
4878      storage_sizeParam(storage_techs,vintage,commodity,"size")
4879      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4880              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4881              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
4882   
4883  * // ### C-Rate Limit (SoC)
4884  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4885  * // {Eq_storage_cRateLimit_SoC}
4886  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4887      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4888        and storage_validSoCRange(storage_techs,vintage)
4889        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
4890      ..
4891      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4892      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4893          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4894      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4895          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4896      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4897          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4898          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4899          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4900              and ord(timeModelToCalc)=1)
4901      =l=
4902      storage_sizeParam(storage_techs,vintage,commodity,"size")
4903      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4904                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
4905                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4906   
4907  * // ### E-Rate Limit (SoC)
4908  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4909  * // {Eq_storage_cRateLimit_SoC}
4910  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4911      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4912        and storage_validSoCRange(storage_techs,vintage)
4913        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
4914      ..
4915      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4916      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4917          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4918      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4919          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4920      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4921          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4922          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4923          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4924              and ord(timeModelToCalc)=1)
4925      =g=
4926      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4927      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4928                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
4929                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4930   
4931   
4932  * ==== model definition ====
4933   
4934  Model M_storage
4935  /
4936    Eq_storage_unitsBalance
4937    Eq_storage_unitsBalanceFreeDecom
4938    Eq_storage_unitsFreeDecom
4939    Eq_storage_unitsLowerLimit
4940    Eq_storage_unitsUpperLimit
4941    Eq_storage_levelUpperLimit_degradation
4942    Eq_storage_unitsTotalMIP
4943    Eq_storage_levelLowerLimit
4944    Eq_storage_levelUpperLimit
4947    Eq_storage_losses
4950    Eq_storage_unitsBalanceStates
4951    Eq_storage_unitsUpperLimitPerState
4952    Eq_storage_unitsStatesNoRecovery
4953    Eq_storage_cRateLimit
4954    Eq_storage_eRateLimit
4955    Eq_storage_charge
4956    Eq_storage_discharge
4957    Eq_storage_levelStateSum
4958    Eq_storage_levelUpperLimitPerAge
4959    Eq_storage_chargeBasedDegradationDistribution
4960    Eq_storage_chargingPerAge
4961    Eq_storage_unitsDecomStateSum
4962    Eq_storage_unitsDegradation
4963    Eq_storage_unitsDegradation_onlyOneRange
4964   
4965    Eq_storage_unitsSoC
4966    Eq_storage_unitsSoC_sum
4967    Eq_storage_unitsSoC_onlyOneRange
4968    Eq_storage_levelSoC
4969    Eq_storage_cRateLimit_SoC
4970    Eq_storage_eRateLimit_SoC
4971  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
4973  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4974  * SPDX-License-Identifier: BSD-3-Clause
4975   
4976  * // # core_transfer
4977  * // The equations in this file describe the commodity transfer in the model.
4978   
4979  * // ## Variables
4980  * // {special_table_transfer_variables}
4983   
4988   
5184   
5185  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5186  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5187      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5188   
5189   
5190  * ==== calculation of mappings ====
5191   
5192  * Technologies with a lifeTime > 0 are available
5193  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5194  transfer_availTech(linksModel,years,transfer_techs,vintage)
5195      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5196          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5197   
5198  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5199  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5200      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5201   
5202  * Technologies already built become unavailable if they have a linksBuild of 0
5203  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5204      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5205   
5206  * Used technologies are available technologies over their technical lifeTime
5207  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5208  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5209      $(vintage.val <= years.val
5210          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5211                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5212          ) = yes;
5213   
5214  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5215  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5216  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5217    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5218                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5219      and sum(yearsToCalc
5220        $(sameas(years, yearsToCalc)
5221          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5222          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5223    = yes;
5224   
5225  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5226    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5227                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5228      and sum(yearsToCalc
5229        $(sameas(years, yearsToCalc)
5230          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5231          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5232    = yes;
5233   
5234  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5235  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5236    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5237      and sum(yearsToCalc
5238        $(sameas(years, yearsToCalc)
5239          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5240    = yes;
5241   
5242  * Extend the decom frame to the year after the last year of usedTech
5243  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5244    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5245      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5246    = yes;
5247   
5248   
5249  * // ## Load links from gdx file
5251   
5252   
5253  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5254  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5255   
5256  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5257  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5258      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5259      = 1;
5260   
5261  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5262      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5263      = 1;
5264   
5265  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5266      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5267      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5268   
5269  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5270      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5271      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5272   
5273  * aggregate time dimension
5274  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5275  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5276      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5277      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5278            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5279            / timeLength(timeModelToCalc));
5280  option clear = transfer_flowProfileIn;
5281   
5282  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5283      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5284        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5285      = 1;
5286   
5287  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5288      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5289        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5290      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5291   
5292  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5293      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5294        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5295      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5296   
5297  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5298  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5299      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5300          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5301   
5302  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5303  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5304      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5306   
5307  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5308  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5309      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5310          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5311   
5312  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5313  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5314      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5315   
5316  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5317  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5318      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5319          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5320          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5321      = (1 / sum(linksData
5322                  $links_aggregate(linksModelToCalc,linksData),
5323              1 / ( sum(link_types,
5324                          transfer_lengthParamIn(linksData,link_types,"length")
5325                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5326                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5327   
5328  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5329  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5330      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5331              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5332   
5333  * aggregate coefficient delays per link and reduce based on time resolution
5334  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5336  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5337    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5338      or sum(link_types,
5339          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5340    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5341            + sum(link_types,
5342                transfer_lengthParam(linksModel,link_types,"length")
5343                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5344            / 1);
5346   
5347  * ==== parameter modifications ====
5348  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5349      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5350      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5351  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5352      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5353      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5354   
5355   
5356  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5357   
5358  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5359      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5360      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5361                       and transfer_incidenceData_flip(linksData) = 1),
5362              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5363              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5364          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5365                          and transfer_incidenceData_flip(linksData) = -1),
5366              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5367              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5368      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5369              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5370   
5371  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5372      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5373      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5374                       and transfer_incidenceData_flip(linksData) = 1),
5375              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5376              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5377          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5378                          and transfer_incidenceData_flip(linksData) = -1),
5379              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5380              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5381      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5382              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5383   
5384  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5385      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5386      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5387                       and transfer_incidenceData_flip(linksData) = 1
5388                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5389              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5390          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5391                          and transfer_incidenceData_flip(linksData) = -1
5392                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5393              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5394      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5395                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5396              1);
5397   
5398  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5399      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5400      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5401                       and transfer_incidenceData_flip(linksData) = 1
5402                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5403              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5404          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5405                          and transfer_incidenceData_flip(linksData) = -1
5406                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5407              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5408      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5409                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5410              1);
5411  option clear = transfer_flowProfileIn_aggTime;
5412   
5413  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5414   
5415  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5416      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5417      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5418                       and transfer_incidenceData_flip(linksData) = 1),
5419              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5420              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5421          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5422                          and transfer_incidenceData_flip(linksData) = -1),
5423              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5424              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5425      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5426              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5427   
5428  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5429      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5430      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5431                       and transfer_incidenceData_flip(linksData) = -1),
5432              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5433              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5434          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5435                          and transfer_incidenceData_flip(linksData) = 1),
5436              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5437              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5438      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5439              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5440   
5441  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5442      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5443      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5444                       and transfer_incidenceData_flip(linksData) = 1
5445                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5446              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5447          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5448                          and transfer_incidenceData_flip(linksData) = -1
5449                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5450              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5451      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5452                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5453              1);
5454   
5455  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5456      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5457      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5458                       and transfer_incidenceData_flip(linksData) = -1
5459                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5460              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5461          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5462                          and transfer_incidenceData_flip(linksData) = 1
5463                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5464              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5465      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5466                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5467              1);
5468   
5469  * Mapping for grid segments using DC optimal power flow
5470  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5471  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5472      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5475      = yes;
5478   
5479  * Ensure each grid segment uses exactly one commodity
5480  parameter checkGridSegmentCommodities(gridSegments);
5481  checkGridSegmentCommodities(gridSegments)
5482      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5483                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5484                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5485   
5486  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5487  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5488      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5489                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5490                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5491      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5492   
5493   
5497   
5498  scalar transfer_enableMIP;
5499  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5500   
5501   
5502  * ==== definition of variables ====
5503   
5504  * Initialise variables for linksBuild
5505  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5506      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5507      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5508  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5509      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5510      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5511  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5512      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5513      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5514   
5515  * Initialise variables for linksDecom
5516  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5517      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5518        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5519      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5520                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5521                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5522                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5523          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5524   
5525  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5526    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5527    = sum(years$
5528          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5529            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5530            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5531            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5532        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5533      + sum(yearsToCalc_a$
5534          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5535            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5536            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5537            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5538        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5539   
5540  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5541      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5542          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5543      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5544   
5545   
5547   
5548   
5549  * Calculate planned transfer links expansion
5550  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5551  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5552  loop(years,
5553    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5554      =
5555      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5556          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5557      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5558          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5559      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5560          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5561  );
5562   
5563  * Set initial state for planned units
5564  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5565    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5566   
5567  * // ## Load units from gdx file
5569   
5570  * Calculate if planned links expansion is bound by upper and lower limits
5571  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5572  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5573    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5574          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5575    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5576          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5577      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5578    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5579          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5580      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5581    = yes;
5582   
5583  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5584  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5585    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5586      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5587    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5588  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5589    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5590      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5591    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5592  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5593    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5594      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5595    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5596   
5597  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5598      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5599        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5600      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5601   
5602  * Add parameter for fixing capacities during myopic runs
5603  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5604  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5605  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5606   
5607  * ==== declaration of equations ====
5608   
5609  equations
5610    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5611      ) "Ensures the links balance over the planning period."
5612    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5613      ) "Ensures the links balance over the planning period."
5614    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5615      ) "Restricts the free decommissioning of links over the planning period."
5616    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5617      ) "Upper bound for the total number of links."
5618    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5619      ) "Lower bound for the total number of links."
5620    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5621      ) "Fixes the total number of links to the corresponding integer variable."
5622   
5623    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5624      ) "Upper bound for the flow along the transfer links."
5625    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5626      ) "Upper bound for the flow against the transfer links."
5627    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5628      )
5629    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5630      )
5631    ;
5632   
5633   
5634  * ==== equation definition ====
5635  * // ## Equations
5636  * // ### Transfer Links Balance
5637  * // Ensures that the transfer between nodes is balanced.
5638  * // {Eq_transfer_linksBalance}
5639   
5640  * Equation using build only
5641  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5642      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5643            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5644          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5645          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5646      ..
5647      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5648      =e=
5649      sum ((years_a)
5650              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5651                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5652                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5653                  and years_a.val <= yearsSel.val ),
5654            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5655   
5656      + sum ((yearsToCalc)
5657              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5658                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5659                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5660                  and yearsToCalc.val <= yearsSel.val ),
5661            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5662   
5663  * Equation using build and decom
5664  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5665      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5666            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5667          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5668          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5669      ..
5670      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5671      =e=
5672      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5673        sum(years$sameas(years, yearsToCalc),
5674          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5675            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5676      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5677        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5678          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5679      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5680          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5681      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5682          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5683      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5684          ;
5685   
5686  * // ### Transfer Links Free Decommissioning
5687  * // Balances free link decommissioning.
5688  * // {Eq_transfer_linksFreeDecom}
5689  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5690      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5691          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5692          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5693      ..
5694      sum(years$
5695            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5696              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5697              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5698          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5699      + sum(yearsToCalc$
5700            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5701              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5702              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5703              and yearsToCalc.val <= yearsSel.val),
5704          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5705      =g=
5706      sum(years$
5707            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5708              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5709              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5710          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5711      + sum(yearsToCalc$
5712            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5713              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5714              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5715          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5716   
5717  * // ### Transfer Links Lower Limit
5718  * // Ensures link capacity lower limits.
5719  * // {Eq_transfer_linksLowerLimit}
5720  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5721      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5722      ..
5723      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5724          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5725      =g=
5726      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5727   
5728  * // ### Transfer Links Upper Limit
5729  * // Ensures link capacity upper limits.
5730  * // {Eq_transfer_linksUpperLimit}
5731  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5732      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5733          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5734      ..
5735      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5736          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5737      =l=
5738      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5739   
5740  * // ### Transfer Links Total MIP
5741  * // Ensures number of MIP links.
5742  * // {Eq_transfer_linksTotalMIP}
5743  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5744      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5745          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5746      ..
5747      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5748      =e=
5749      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5750   
5751  * // ### Transfer Links Flow Along Upper Limit
5752  * // Ensures links flow along upper limit.
5753  * // {Eq_transfer_flowAlongUpperLimit}
5754  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5755      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5756      ..
5757      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5758      =l=
5759      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5760      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5761      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5762      ;
5763   
5764  * // ### Transfer Links Flow Against Upper Limit
5765  * // Ensures links flow against upper limit.
5766  * // {Eq_transfer_flowAgainstUpperLimit}
5767  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5768      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5769      ..
5770      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5771      =l=
5772      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
5773      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5774      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5775      ;
5776   
5777  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
5778  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
5779      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5780          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
5781      = yes;
5782   
5783  set transfer_usedOpfLinks(linksModel,years,gridSegments);
5784  option transfer_usedOpfLinks < transfer_usedOpf;
5785   
5786  set transfer_usedOpfSegments(years,gridSegments);
5787  option transfer_usedOpfSegments < transfer_usedOpf;
5788   
5792  * // ### Transfer DC optimal flow angle flows
5793  * // Angle flows.
5794  * // {Eq_transfer_dcopf_cycleFlows}
5795  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
5796      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
5797      ..
5798      sum ((transfer_techs,vintage)
5799              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
5800          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5801              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
5802          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
5803      =e=
5804      sum ( nodesModelSel,
5805          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
5806          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
5810   
5811   
5812  * ==== model definition ====
5813   
5814  Model M_transfer
5815  /
5816    Eq_transfer_linksBalance
5817    Eq_transfer_linksBalanceFreeDecom
5818    Eq_transfer_linksFreeDecom
5819    Eq_transfer_linksLowerLimit
5820    Eq_transfer_linksUpperLimit
5821    Eq_transfer_linksTotalMIP
5822    Eq_transfer_flowAlongUpperLimit
5823    Eq_transfer_flowAgainstUpperLimit
5827    Eq_transfer_dcopf_angleFlows
5831  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
5833  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5834  * SPDX-License-Identifier: BSD-3-Clause
5835   
5836  * // # core_sourcesink
5837  * // The equations in this file describe the sources and sinks in the model.
5838   
5839  * // ## Variables
5840  * // {special_table_sourcesink_variables}
6034   
6035  * // ## Aggregation of profiles
6036  * // Profiles are rescaled based on the annual sum.
6037   
6038  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6039  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6040      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6041  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6042      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6043  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6044      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6045   
6046  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6047  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6048      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6049      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6050   
6051  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6052  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6053      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6054      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6055   
6056  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6057  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6058      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6059          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6060          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6061      = yes;
6062   
6063  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6064              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6065   
6066  * calculate scaling factor for each type
6067  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6068  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6069      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6070          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6071      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6072          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6073              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6074   
6075  * rescale profiles
6076  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6077      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6078      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6079          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6080   
6081  * // ## Aggregation of profiles
6082  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6083   
6084  * ==== aggregation of profiles ====
6085  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6086  option sourcesink_usesProfileIn < sourcesink_profileIn
6087   
6088  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6089  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6090      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6091          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6092      = yes;
6093   
6094  * aagregate time dimension
6095  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6096  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6097    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6098    = sum(timeMapping_t(timeModelToCalc,timeData),
6099            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6100      / timeLength(timeModelToCalc);
6101  option clear = sourcesink_profileIn;
6102   
6103  * sum up absolute profiles
6104  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6105  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6106      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6107      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6108              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6109  option clear = sourcesink_profileIn_aggTime;
6110   
6111  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6112  option sourcesink_enabled < sourcesink_config;
6113   
6117   
6118  * ==== declaration of variables ====
6119  * // ## Bounding of variables
6120  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6121  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6122      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6123          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6124          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6125      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6126   
6127  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6128      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6129          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6130          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6131      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6132   
6133  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6134      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6135          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6136      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6137   
6138  option clear = sourcesink_profile;
6139   
6140   
6141  * ==== equation definition ====
6142  * // ## Equations
6143  equations
6144  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6145      ) "Fixes the annual sum from sources / to sinks"
6146  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6147      ) "Limits the lower sum from sources / to sinks"
6148  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6149      ) "Limits the upper sum from sources / to sinks"
6150    ;
6151   
6152  * // ### Fixed annual sums for sources and sinks
6153  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6154  * // {Eq_sourcesink_useFixedSum}
6155  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6156      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6157          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6158      ..
6159      sum(timeModelSel,
6160          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6161          * timeLength(timeModelSel))
6162      =e=
6163      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6164      * timefrac
6165      ;
6166   
6167  * // ### Lower annual sums for sources and sinks
6168  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6169  * // {Eq_sourcesink_useLowerSum}
6170  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6171      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6172          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6173          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6174      ..
6175      sum(timeModelSel,
6176          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6177          * timeLength(timeModelSel))
6178      =g=
6179      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6180      * timefrac
6181      ;
6182   
6183  * // ### Upper annual sums for sources and sinks
6184  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6185  * // {Eq_sourcesink_useUpperSum}
6186  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6187      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6188          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6189          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6190      ..
6191      sum(timeModelSel,
6192          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6193          * timeLength(timeModelSel))
6194      =l=
6195      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6196      * timefrac
6197      ;
6198   
6199   
6200  * ==== model definition ====
6201   
6202  Model M_sourcesink
6203  /
6204    Eq_sourcesink_useFixedSum
6205    Eq_sourcesink_useLowerSum
6206    Eq_sourcesink_useUpperSum
6207  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
6209  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6210  * SPDX-License-Identifier: BSD-3-Clause
6211   
6212  * // # balance
6213  * // The equations in this file describe the commodity balancing in the model.
6214   
6215  Equations
6216    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6217      ) "Balance for each commodity used in each time step, region, and year";
6218   
6219   
6220  * ==== calculation of mappings ====
6221   
6222  set balance_techComm(techs,commodity);
6223  balance_techComm(converter_techs(techs),commodity)
6224      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6225  balance_techComm(storage_techs(techs),commodity)
6226      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6227  balance_techComm(transfer_techs(techs),commodity)
6228      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6229  balance_techComm(sourcesink_techs(techs),commodity)
6230      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6231   
6232  set balance_usedConverter(nodesModel,years,commodity);
6233  set balance_usedStorage(nodesModel,years,commodity);
6234  set balance_usedTransfer(nodesModel,years,commodity);
6235  set balance_usedSourceSink(nodesModel,years,commodity);
6236  set balance_usedBalance(nodesModel,years,commodity);
6237   
6238  balance_usedConverter(nodesModel,years,commodity)
6239      = sum ((converter_techs,vintage,activity)
6240              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6241                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6242   
6243  balance_usedStorage(nodesModel,years,commodity)
6244      = sum ((storage_techs,vintage,activity)
6245              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6246                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6247   
6248  balance_usedTransfer(nodesModel,years,commodity)
6249      = sum ((linksModel,transfer_techs,vintage)
6250              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6251                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6252   
6253  option balance_usedSourceSink < sourcesink_enabled;
6254   
6255  balance_usedBalance(nodesModel,years,commodity)
6256      $(balance_usedConverter(nodesModel,years,commodity)
6257          or balance_usedStorage(nodesModel,years,commodity)
6258          or balance_usedTransfer(nodesModel,years,commodity)
6259          or balance_usedSourceSink(nodesModel,years,commodity) )
6260      = yes;
6261   
6262   
6263  * ==== equation definition ====
6264   
6265  * // ### Balance commodities
6266  * // Balancing of commodities for all model regions, time steps, and years
6267  * // {Eq_balance_commodities}
6268  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6269      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6270      ..
6271  * converter
6272      sum((converter_techs,vintage,activity)
6273              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6274                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6275          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6276              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6277              * timeLength(timeModelToCalc)
6278          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6279              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6280              * timeLength(timeModelToCalc))
6281   
6282  * storages
6283      + sum((storage_techs,vintage)
6284              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6285                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6286          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6287              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6288          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6289              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6290          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
6291              * storage_sizeParam(storage_techs,vintage,commodity,"size")
6292              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6293              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
6294                  and ord(timeModelToCalc)=1)
6295          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6298          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6299          * timeLength(timeModelSel)
6302          )
6303   
6304  * incoming transfer
6305      + sum((linksModel,transfer_techs,vintage)
6306              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6307                  and linksModelToCalc(linksModel)),
6308          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6309                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6310            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6311                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6312          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6313          * timeLength(timeModelToCalc))
6314   
6315  * outgoing transfer
6316      - sum((linksModel,transfer_techs,vintage)
6317              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6318                  and linksModelToCalc(linksModel)),
6319          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6320                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6321            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6322                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6323          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6324          * timeLength(timeModelSel))
6325   
6326  * transfer losses
6327      + 0.5 * sum((linksModel,transfer_techs,vintage)
6328              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6329                  AND linksModelToCalc(linksModel)),
6330          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6331                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6332            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6333                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6334          * timeLength(timeModelSel)
6335          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6336              + sum(link_types,
6337                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6338                  * transfer_lengthParam(linksModel,link_types,"length"))))
6339   
6340  * sourcesink
6341      + sum((sourcesink_techs)
6342              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6343          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6344          * timeLength(timeModelSel))
6345      =e=
6346      0;
6347   
6348   
6349  * ==== model definition ====
6350   
6351  Model M_balance
6352  /
6353    Eq_balance_commodities
6354  /;
6355   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
6357  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6358  * SPDX-License-Identifier: BSD-3-Clause
6359   
6360  * // # accounting_equations
6361   
6362  * ==== declaration of variables ====
6363   
6364  variables
6365  accounting_indicator(accNodesModel,accYears,indicator)
6366  accounting_indicator_links(linksModel,years,indicator)
6367  accounting_objective
6368  ;
6369   
6370   
6371  * ==== definition of variables ====
6372   
6373  accounting_indicator.lo(accNodesModel,accYears,indicator)
6374      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6375          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6376      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6377   
6378  accounting_indicator.up(accNodesModel,accYears,indicator)
6379      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6380          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6381      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6382   
6383  accounting_indicator.fx(accNodesModel,accYears,indicator)
6384      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
6385          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6386      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6387   
6388   
6389  * set the variable levels to be fixed for years before the optimization years
6390  accounting_indicator.l(accNodesModel,accYears,indicator)
6391      $activeIndicators(accNodesModel,accYears,indicator)
6392      = 0;
6393   
6394   
6395  * ==== declaration of equations ====
6396   
6397  equations
6398  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
6399      ) "Ensures the fixed value of an indicator per accounting region"
6400  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
6401      ) "Ensures the upper limit of an indicator per accounting region"
6402  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
6403      ) "Ensures the lower limit of an indicator per accounting region"
6404  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
6405      ) "Ensures the fixed value of an indicator per model link"
6406  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
6407      ) "Ensures the upper limit of an indicator per model link"
6408  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
6409      ) "Ensures the lower limit of an indicator per model link"
6410  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6411    ;
6412   
6413   
6414  * ==== equations definition ====
6415  * // ## Equations
6416  * // ### Accounting Indicator Calculation
6417  * // Calculates the fixed limit for accounting indicators.
6418  * // {Eq_accounting_indicatorCalc_fixed}
6419  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
6420      $(activeIndicators(accNodesModel,accYears,indicator)
6421          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6422      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6424  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6425  * SPDX-License-Identifier: BSD-3-Clause
6426   
6427  * == variable indicators ==
6428      sum((accNodesModel_a,accYears_a,indicator_a)
6429          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6430              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6431          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6432          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6433          )
6434   
6435  * == converters ==
6436      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6437              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6438                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6439          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6440          *
6441          ( sum ((converter_techs,vintage)
6442                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6443                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6444              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6445              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6446              )
6447   
6448          + sum ((years_a,converter_techs,vintage)
6449                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6450                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6451                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6452                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6453                          and years_a.val <= yearsSel.val ),
6454              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6455              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6456              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6457              )
6458   
6459          + sum ((yearsToCalc,converter_techs,vintage)
6460                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6461                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6462                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6463                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6464                          and yearsToCalc.val <= yearsSel.val ),
6465              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6466              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6467              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6468              )
6469   
6470          + sum ((converter_techs,vintage)
6471                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6472                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6473              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6474              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6475   
6476          + sum ((converter_techs,vintage)
6477                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6478              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6479              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6480   
6481          + sum ((timeModelSel,converter_techs,vintage,activity)
6482                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6483              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6484              * timeLength(timeModelSel)
6485              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6486          / timefrac
6487   
6488          + sum ((timeModelSel,converter_techs,vintage)
6489                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6490              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6491              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6492          / timefrac
6493   
6494          + sum ((timeModelSel,converter_techs,vintage)
6495                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6496              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6497              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6498                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6499   
6500              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6501              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6502                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6503          / timefrac
6504          )
6505      )
6506   
6507  * == storage ==
6508      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6509              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6510                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6511          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6512          *
6513          ( sum ((storage_techs,vintage)
6514                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6515                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6516              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6517              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6518              )
6519   
6520          + sum ((years_a,storage_techs,vintage)
6521                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6522                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6523                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6524                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6525                          and years_a.val <= yearsSel.val ),
6526              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6527              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6528              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6529              )
6530   
6531          + sum ((yearsToCalc,storage_techs,vintage)
6532                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6533                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6534                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6535                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6536                          and yearsToCalc.val <= yearsSel.val ),
6537              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6538              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6539              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6540              )
6541   
6542          + sum ((storage_techs,vintage)
6543                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6544                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6545              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6546              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6547   
6548          + sum ((storage_techs,vintage)
6549                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6550              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6551              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6552          )
6553      )
6554   
6555   
6556  * == transfer ==
6557      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6558              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6559                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6560          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6561          *
6562          ( sum ((linksModelToCalc,transfer_techs,vintage)
6563                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6564                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6565                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6566              0.5
6567              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6568              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6569   
6570          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6571                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6572                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6573                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6574                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6575                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6576                          and years_a.val <= yearsSel.val ),
6577              0.5
6578              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6579              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6580              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6581   
6582          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6583                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6584                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6585                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6586                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6587                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6588                          and yearsToCalc.val <= yearsSel.val ),
6589              0.5
6590              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6591              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6592              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6593   
6594          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6595                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6596                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6597                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6598              0.5
6599              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6600              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6601              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6602   
6603          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6604                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6605                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6606                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6607                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6608                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6609                          and years_a.val <= yearsSel.val ),
6610              0.5
6611              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6612              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6613              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6614              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6615   
6616          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6617                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6618                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6619                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6620                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6621                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6622                          and yearsToCalc.val <= yearsSel.val ),
6623              0.5
6624              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6625              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6626              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6627              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6628   
6629          + sum ((linksModelToCalc,transfer_techs,vintage)
6630                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6631                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6632                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6633              0.5
6634              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6635              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6636   
6637              + 0.5
6638              * sum (link_types,
6639                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6640                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6641                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6642              ) )
6643   
6644          + sum ((linksModelToCalc,transfer_techs,vintage)
6645                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6646                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6647              0.5
6648              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6649              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6650   
6651              + 0.5
6652              * sum (link_types,
6653                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6654                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6655                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6656   
6657              + 0.5
6658              * sum (timeModelSel,
6659                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6660                  * timeLength(timeModelSel)
6661                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6662                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6663   
6664                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6665                  * timeLength(timeModelSel)
6666                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6667                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6668                  / timefrac
6669   
6670              + 0.5
6671              * sum ((timeModelSel, link_types),
6672                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6673                  * timeLength(timeModelSel)
6674                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6675                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6676                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6677   
6678                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6679                  * timeLength(timeModelSel)
6680                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6681                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6682                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6683                  / timefrac
6684              )
6685          )
6686      )
6687   
6688   
6689  * == sources / sinks ==
6690      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6691              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6692                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6693          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6694          *
6695          sum ((timeModelSel,sourcesink_techs,commodity)
6696                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6697              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6698              * timeLength(timeModelSel)
6699              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6700          / timefrac
6701      )
6702      =e=
6703      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6704   
6705  * // ### Accounting Indicator Calculation
6706  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6707  * // {Eq_accounting_indicatorCalc_upper}
6708  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
6709      $(activeIndicators(accNodesModel,accYears,indicator)
6710          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6711          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6712      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6714  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6715  * SPDX-License-Identifier: BSD-3-Clause
6716   
6717  * == variable indicators ==
6718      sum((accNodesModel_a,accYears_a,indicator_a)
6719          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6720              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6721          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6722          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6723          )
6724   
6725  * == converters ==
6726      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6727              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6728                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6729          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6730          *
6731          ( sum ((converter_techs,vintage)
6732                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6733                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6734              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6735              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6736              )
6737   
6738          + sum ((years_a,converter_techs,vintage)
6739                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6740                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6741                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6742                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6743                          and years_a.val <= yearsSel.val ),
6744              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6745              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6746              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6747              )
6748   
6749          + sum ((yearsToCalc,converter_techs,vintage)
6750                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6751                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6752                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6753                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6754                          and yearsToCalc.val <= yearsSel.val ),
6755              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6756              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6757              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6758              )
6759   
6760          + sum ((converter_techs,vintage)
6761                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6762                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6763              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6764              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6765   
6766          + sum ((converter_techs,vintage)
6767                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6768              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6769              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6770   
6771          + sum ((timeModelSel,converter_techs,vintage,activity)
6772                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6773              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6774              * timeLength(timeModelSel)
6775              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6776          / timefrac
6777   
6778          + sum ((timeModelSel,converter_techs,vintage)
6779                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6780              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6781              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6782          / timefrac
6783   
6784          + sum ((timeModelSel,converter_techs,vintage)
6785                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6786              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6787              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6788                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6789   
6790              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6791              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6792                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6793          / timefrac
6794          )
6795      )
6796   
6797  * == storage ==
6798      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6799              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6800                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6801          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6802          *
6803          ( sum ((storage_techs,vintage)
6804                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6805                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6806              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6807              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6808              )
6809   
6810          + sum ((years_a,storage_techs,vintage)
6811                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6812                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6813                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6814                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6815                          and years_a.val <= yearsSel.val ),
6816              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6817              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6818              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6819              )
6820   
6821          + sum ((yearsToCalc,storage_techs,vintage)
6822                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6823                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6824                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6825                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6826                          and yearsToCalc.val <= yearsSel.val ),
6827              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6828              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6829              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6830              )
6831   
6832          + sum ((storage_techs,vintage)
6833                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6834                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6835              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6836              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6837   
6838          + sum ((storage_techs,vintage)
6839                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6840              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6841              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6842          )
6843      )
6844   
6845   
6846  * == transfer ==
6847      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6848              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6849                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6850          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6851          *
6852          ( sum ((linksModelToCalc,transfer_techs,vintage)
6853                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6854                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6855                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6856              0.5
6857              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6858              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6859   
6860          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6861                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6862                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6863                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6864                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6865                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6866                          and years_a.val <= yearsSel.val ),
6867              0.5
6868              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6869              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6870              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6871   
6872          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6873                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6874                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6875                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6876                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6877                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6878                          and yearsToCalc.val <= yearsSel.val ),
6879              0.5
6880              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6881              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6882              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6883   
6884          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6885                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6886                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6887                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6888              0.5
6889              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6890              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6891              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6892   
6893          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6894                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6895                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6896                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6897                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6898                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6899                          and years_a.val <= yearsSel.val ),
6900              0.5
6901              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6902              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6903              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6904              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6905   
6906          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6907                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6908                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6909                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6910                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6911                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6912                          and yearsToCalc.val <= yearsSel.val ),
6913              0.5
6914              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6915              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6916              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6917              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6918   
6919          + sum ((linksModelToCalc,transfer_techs,vintage)
6920                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6921                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6922                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6923              0.5
6924              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6925              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6926   
6927              + 0.5
6928              * sum (link_types,
6929                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6930                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6931                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6932              ) )
6933   
6934          + sum ((linksModelToCalc,transfer_techs,vintage)
6935                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6936                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6937              0.5
6938              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6939              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6940   
6941              + 0.5
6942              * sum (link_types,
6943                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6944                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6945                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6946   
6947              + 0.5
6948              * sum (timeModelSel,
6949                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6950                  * timeLength(timeModelSel)
6951                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6952                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6953   
6954                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6955                  * timeLength(timeModelSel)
6956                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6957                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6958                  / timefrac
6959   
6960              + 0.5
6961              * sum ((timeModelSel, link_types),
6962                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6963                  * timeLength(timeModelSel)
6964                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6965                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6966                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6967   
6968                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6969                  * timeLength(timeModelSel)
6970                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6971                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6972                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6973                  / timefrac
6974              )
6975          )
6976      )
6977   
6978   
6979  * == sources / sinks ==
6980      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6981              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6982                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6983          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6984          *
6985          sum ((timeModelSel,sourcesink_techs,commodity)
6986                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6987              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6988              * timeLength(timeModelSel)
6989              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6990          / timefrac
6991      )
6992      =l=
6993      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6994   
6995  * // ### Accounting Indicator Calculation
6996  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6997  * // {Eq_accounting_indicatorCalc_lower}
6998  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
6999      $(activeIndicators(accNodesModel,accYears,indicator)
7000          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7001          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7002      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7004  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7005  * SPDX-License-Identifier: BSD-3-Clause
7006   
7007  * == variable indicators ==
7008      sum((accNodesModel_a,accYears_a,indicator_a)
7009          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7010              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7011          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7012          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7013          )
7014   
7015  * == converters ==
7016      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7017              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7018                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7019          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7020          *
7021          ( sum ((converter_techs,vintage)
7022                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7023                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7024              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7025              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7026              )
7027   
7028          + sum ((years_a,converter_techs,vintage)
7029                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7030                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7031                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7032                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7033                          and years_a.val <= yearsSel.val ),
7034              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7035              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7036              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7037              )
7038   
7039          + sum ((yearsToCalc,converter_techs,vintage)
7040                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7041                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7042                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7043                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7044                          and yearsToCalc.val <= yearsSel.val ),
7045              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7046              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7047              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7048              )
7049   
7050          + sum ((converter_techs,vintage)
7051                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7052                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7053              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7054              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7055   
7056          + sum ((converter_techs,vintage)
7057                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7058              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7059              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7060   
7061          + sum ((timeModelSel,converter_techs,vintage,activity)
7062                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7063              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7064              * timeLength(timeModelSel)
7065              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7066          / timefrac
7067   
7068          + sum ((timeModelSel,converter_techs,vintage)
7069                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7070              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7071              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7072          / timefrac
7073   
7074          + sum ((timeModelSel,converter_techs,vintage)
7075                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7076              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7077              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7078                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7079   
7080              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7081              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7082                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7083          / timefrac
7084          )
7085      )
7086   
7087  * == storage ==
7088      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7089              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7090                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7091          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7092          *
7093          ( sum ((storage_techs,vintage)
7094                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7095                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7096              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7097              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7098              )
7099   
7100          + sum ((years_a,storage_techs,vintage)
7101                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7102                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7103                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7104                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7105                          and years_a.val <= yearsSel.val ),
7106              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7107              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7108              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7109              )
7110   
7111          + sum ((yearsToCalc,storage_techs,vintage)
7112                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7113                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7114                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7115                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7116                          and yearsToCalc.val <= yearsSel.val ),
7117              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7118              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7119              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7120              )
7121   
7122          + sum ((storage_techs,vintage)
7123                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7124                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7125              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7126              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7127   
7128          + sum ((storage_techs,vintage)
7129                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7130              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7131              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7132          )
7133      )
7134   
7135   
7136  * == transfer ==
7137      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7138              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7139                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7140          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7141          *
7142          ( sum ((linksModelToCalc,transfer_techs,vintage)
7143                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7144                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7145                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7146              0.5
7147              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7148              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7149   
7150          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7151                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7152                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7153                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7154                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7155                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7156                          and years_a.val <= yearsSel.val ),
7157              0.5
7158              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7159              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7160              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7161   
7162          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7163                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7164                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7165                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7166                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7167                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7168                          and yearsToCalc.val <= yearsSel.val ),
7169              0.5
7170              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7171              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7172              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7173   
7174          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7175                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7176                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7177                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7178              0.5
7179              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7180              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7181              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7182   
7183          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7184                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7185                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7186                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7187                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7188                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7189                          and years_a.val <= yearsSel.val ),
7190              0.5
7191              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7192              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7193              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7194              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7195   
7196          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7197                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7198                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7199                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7200                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7201                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7202                          and yearsToCalc.val <= yearsSel.val ),
7203              0.5
7204              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7205              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7206              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7207              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7208   
7209          + sum ((linksModelToCalc,transfer_techs,vintage)
7210                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7211                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7212                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7213              0.5
7214              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7215              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7216   
7217              + 0.5
7218              * sum (link_types,
7219                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7220                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7221                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7222              ) )
7223   
7224          + sum ((linksModelToCalc,transfer_techs,vintage)
7225                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7226                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7227              0.5
7228              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7229              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7230   
7231              + 0.5
7232              * sum (link_types,
7233                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7234                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7235                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7236   
7237              + 0.5
7238              * sum (timeModelSel,
7239                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7240                  * timeLength(timeModelSel)
7241                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7242                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7243   
7244                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7245                  * timeLength(timeModelSel)
7246                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7247                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7248                  / timefrac
7249   
7250              + 0.5
7251              * sum ((timeModelSel, link_types),
7252                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7253                  * timeLength(timeModelSel)
7254                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7255                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7256                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7257   
7258                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7259                  * timeLength(timeModelSel)
7260                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7261                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7262                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7263                  / timefrac
7264              )
7265          )
7266      )
7267   
7268   
7269  * == sources / sinks ==
7270      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7271              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7272                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7273          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7274          *
7275          sum ((timeModelSel,sourcesink_techs,commodity)
7276                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7277              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7278              * timeLength(timeModelSel)
7279              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7280          / timefrac
7281      )
7282      =g=
7283      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7284   
7285   
7286  * // ### Accounting Indicator Calculation Links
7287  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7288  * // {Eq_accounting_indicatorCalc_links_fixed}
7289  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
7290      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7291          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7292      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7294  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7295  * SPDX-License-Identifier: BSD-3-Clause
7296   
7297      sum ((transfer_techs,vintage)
7298                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7299                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7300          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7301          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7302   
7303      + sum ((years_a,transfer_techs,vintage)
7304                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7305                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7306                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7307                      and years_a.val <= yearsSel.val ),
7308          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7309          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7310          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7311   
7312      + sum ((transfer_techs,vintage,link_types)
7313                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7314                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7315          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7316          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7317          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7318   
7319      + sum ((years_a,transfer_techs,vintage,link_types)
7320                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7321                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7322                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7323                      and years_a.val <= yearsSel.val ),
7324          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7325          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7326          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7327          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7328   
7329      + sum ((transfer_techs,vintage)
7330                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7331                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7332          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7333          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7334   
7335          + sum (link_types,
7336              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7337              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7338              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7339          ) )
7340   
7341      + sum ((transfer_techs,vintage)
7342                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7343          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7344          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7345   
7346          + sum (link_types,
7347              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7348              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7349              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7350   
7351          + sum (timeModelSel,
7352              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7353              * timeLength(timeModelSel)
7354              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7355                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7356   
7357              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7358              * timeLength(timeModelSel)
7359              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7360                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7361              / timefrac
7362   
7363          + sum ((timeModelSel, link_types),
7364              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7365              * timeLength(timeModelSel)
7366              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7367              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7368                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7369   
7370              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7371              * timeLength(timeModelSel)
7372              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7373              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7374                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7375              / timefrac
7376          )
7377      =e=
7378  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
7379   
7380  * // ### Accounting Indicator Calculation Links
7381  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7382  * // {Eq_accounting_indicatorCalc_links_upper}
7383  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
7384      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7385          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
7386          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7387      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7389  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7390  * SPDX-License-Identifier: BSD-3-Clause
7391   
7392      sum ((transfer_techs,vintage)
7393                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7394                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7395          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7396          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7397   
7398      + sum ((years_a,transfer_techs,vintage)
7399                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7400                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7401                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7402                      and years_a.val <= yearsSel.val ),
7403          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7404          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7405          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7406   
7407      + sum ((transfer_techs,vintage,link_types)
7408                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7409                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7410          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7411          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7412          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7413   
7414      + sum ((years_a,transfer_techs,vintage,link_types)
7415                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7416                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7417                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7418                      and years_a.val <= yearsSel.val ),
7419          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7420          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7421          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7422          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7423   
7424      + sum ((transfer_techs,vintage)
7425                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7426                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7427          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7428          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7429   
7430          + sum (link_types,
7431              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7432              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7433              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7434          ) )
7435   
7436      + sum ((transfer_techs,vintage)
7437                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7438          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7439          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7440   
7441          + sum (link_types,
7442              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7443              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7444              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7445   
7446          + sum (timeModelSel,
7447              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7448              * timeLength(timeModelSel)
7449              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7450                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7451   
7452              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7453              * timeLength(timeModelSel)
7454              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7455                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7456              / timefrac
7457   
7458          + sum ((timeModelSel, link_types),
7459              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7460              * timeLength(timeModelSel)
7461              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7462              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7463                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7464   
7465              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7466              * timeLength(timeModelSel)
7467              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7468              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7469                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7470              / timefrac
7471          )
7472      =l=
7473  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
7474   
7475  * // ### Accounting Indicator Calculation Links
7476  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7477  * // {Eq_accounting_indicatorCalc_links_lower}
7478  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
7479      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7480          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
7481          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7482      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7484  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7485  * SPDX-License-Identifier: BSD-3-Clause
7486   
7487      sum ((transfer_techs,vintage)
7488                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7489                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7490          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7491          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7492   
7493      + sum ((years_a,transfer_techs,vintage)
7494                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7495                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7496                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7497                      and years_a.val <= yearsSel.val ),
7498          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7499          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7500          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7501   
7502      + sum ((transfer_techs,vintage,link_types)
7503                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7504                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7505          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7506          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7507          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7508   
7509      + sum ((years_a,transfer_techs,vintage,link_types)
7510                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7511                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7512                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7513                      and years_a.val <= yearsSel.val ),
7514          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7515          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7516          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7517          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7518   
7519      + sum ((transfer_techs,vintage)
7520                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7521                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7522          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7523          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7524   
7525          + sum (link_types,
7526              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7527              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7528              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7529          ) )
7530   
7531      + sum ((transfer_techs,vintage)
7532                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7533          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7534          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7535   
7536          + sum (link_types,
7537              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7538              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7539              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7540   
7541          + sum (timeModelSel,
7542              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7543              * timeLength(timeModelSel)
7544              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7545                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7546   
7547              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7548              * timeLength(timeModelSel)
7549              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7550                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7551              / timefrac
7552   
7553          + sum ((timeModelSel, link_types),
7554              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7555              * timeLength(timeModelSel)
7556              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7557              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7558                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7559   
7560              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7561              * timeLength(timeModelSel)
7562              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7563              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7564                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7565              / timefrac
7566          )
7567      =g=
7568  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
7569   
7570   
7571  * // ### Accounting Objective
7572  * // Calculates the indicators for the objective.
7573  * // {Eq_accounting_objective}
7574  Eq_accounting_objective
7575      ..
7576      accounting_objective
7577      =e=
7578      sum ((accNodesModel,accYears,indicator)
7579              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7580          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
7581          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7583  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7584  * SPDX-License-Identifier: BSD-3-Clause
7585   
7586  * == variable indicators ==
7587      sum((accNodesModel_a,accYears_a,indicator_a)
7588          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7589              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7590          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7591          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7592          )
7593   
7594  * == converters ==
7595      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7596              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7597                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7598          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7599          *
7600          ( sum ((converter_techs,vintage)
7601                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7602                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7603              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7604              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7605              )
7606   
7607          + sum ((years_a,converter_techs,vintage)
7608                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7609                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7610                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7611                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7612                          and years_a.val <= yearsSel.val ),
7613              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7614              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7615              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7616              )
7617   
7618          + sum ((yearsToCalc,converter_techs,vintage)
7619                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7620                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7621                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7622                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7623                          and yearsToCalc.val <= yearsSel.val ),
7624              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7625              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7626              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7627              )
7628   
7629          + sum ((converter_techs,vintage)
7630                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7631                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7632              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7633              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7634   
7635          + sum ((converter_techs,vintage)
7636                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7637              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7638              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7639   
7640          + sum ((timeModelSel,converter_techs,vintage,activity)
7641                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7642              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7643              * timeLength(timeModelSel)
7644              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7645          / timefrac
7646   
7647          + sum ((timeModelSel,converter_techs,vintage)
7648                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7649              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7650              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7651          / timefrac
7652   
7653          + sum ((timeModelSel,converter_techs,vintage)
7654                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7655              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7656              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7657                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7658   
7659              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7660              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7661                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7662          / timefrac
7663          )
7664      )
7665   
7666  * == storage ==
7667      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7668              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7669                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7670          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7671          *
7672          ( sum ((storage_techs,vintage)
7673                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7674                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7675              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7676              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7677              )
7678   
7679          + sum ((years_a,storage_techs,vintage)
7680                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7681                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7682                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7683                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7684                          and years_a.val <= yearsSel.val ),
7685              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7686              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7687              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7688              )
7689   
7690          + sum ((yearsToCalc,storage_techs,vintage)
7691                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7692                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7693                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7694                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7695                          and yearsToCalc.val <= yearsSel.val ),
7696              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7697              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7698              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7699              )
7700   
7701          + sum ((storage_techs,vintage)
7702                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7703                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7704              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7705              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7706   
7707          + sum ((storage_techs,vintage)
7708                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7709              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7710              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7711          )
7712      )
7713   
7714   
7715  * == transfer ==
7716      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7717              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7718                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7719          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7720          *
7721          ( sum ((linksModelToCalc,transfer_techs,vintage)
7722                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7723                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7724                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7725              0.5
7726              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7727              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7728   
7729          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7730                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7731                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7732                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7733                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7734                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7735                          and years_a.val <= yearsSel.val ),
7736              0.5
7737              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7738              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7739              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7740   
7741          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7742                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7743                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7744                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7745                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7746                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7747                          and yearsToCalc.val <= yearsSel.val ),
7748              0.5
7749              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7750              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7751              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7752   
7753          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7754                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7755                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7756                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7757              0.5
7758              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7759              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7760              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7761   
7762          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7763                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7764                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7765                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7766                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7767                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7768                          and years_a.val <= yearsSel.val ),
7769              0.5
7770              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7771              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7772              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7773              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7774   
7775          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7776                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7777                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7778                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7779                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7780                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7781                          and yearsToCalc.val <= yearsSel.val ),
7782              0.5
7783              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7784              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7785              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7786              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7787   
7788          + sum ((linksModelToCalc,transfer_techs,vintage)
7789                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7790                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7791                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7792              0.5
7793              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7794              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7795   
7796              + 0.5
7797              * sum (link_types,
7798                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7799                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7800                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7801              ) )
7802   
7803          + sum ((linksModelToCalc,transfer_techs,vintage)
7804                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7805                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7806              0.5
7807              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7808              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7809   
7810              + 0.5
7811              * sum (link_types,
7812                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7813                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7814                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7815   
7816              + 0.5
7817              * sum (timeModelSel,
7818                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7819                  * timeLength(timeModelSel)
7820                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7821                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7822   
7823                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7824                  * timeLength(timeModelSel)
7825                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7826                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7827                  / timefrac
7828   
7829              + 0.5
7830              * sum ((timeModelSel, link_types),
7831                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7832                  * timeLength(timeModelSel)
7833                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7834                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7835                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7836   
7837                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7838                  * timeLength(timeModelSel)
7839                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7840                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7841                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7842                  / timefrac
7843              )
7844          )
7845      )
7846   
7847   
7848  * == sources / sinks ==
7849      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7850              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7851                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7852          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7853          *
7854          sum ((timeModelSel,sourcesink_techs,commodity)
7855                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7856              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7857              * timeLength(timeModelSel)
7858              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7859          / timefrac
7860      )
7861      )
7862   
7863   
7864  * ==== model definition ====
7865   
7866  Model M_accounting
7867  /
7868  Eq_accounting_indicatorCalc_fixed
7869  Eq_accounting_indicatorCalc_upper
7870  Eq_accounting_indicatorCalc_lower
7871  Eq_accounting_indicatorCalc_links_fixed
7872  Eq_accounting_indicatorCalc_links_upper
7873  Eq_accounting_indicatorCalc_links_lower
7874  Eq_accounting_objective
7875  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
7877  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7878  * SPDX-License-Identifier: BSD-3-Clause
7879   
7880  * ==== optimization frames ====
7882   
7883  * mapping from optimization frame to years
7885  set optiframe / of1 * of1 /;
7886  set optiframeToCalc(optiframe);
7887   
7889  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7891   
7893   
7894  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
7896  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7897  * SPDX-License-Identifier: BSD-3-Clause
7898   
7899  * ==== Overview of model dimensions ====
7900  parameters  acts(converter_techs) "active technologies"
7901              asts(storage_techs) "active storage technologies"
7902              atts(transfer_techs) "active transfer technologies"
7903   
7904  scalars nd "number of dispatch time steps per year"
7905          nn "number of network nodes"
7906          nl "number of network links"
7907          nt "number of converter, storage and transfer technologies"
7908          nc "number of commodities"
7909          ny "number of years of the capacity planning horizon";
7910   
7911  option acts < converter_availTech;
7912  option asts < storage_availTech;
7913  option atts < transfer_availTech;
7914   
7915  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
7916  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
7917  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
7918  nt = sum (storage_techs $asts(storage_techs), 1)
7919      + sum (converter_techs $acts(converter_techs), 1)
7920      + sum (transfer_techs $atts(transfer_techs), 1);
7921  nc = card(commodity);
7922  ny = sum (years $yearsToCalc(years), 1);
7923   
7924  file props / '' /;
7925  put props;
7926  put "### Model properties  ###" /;
7927  put "Number of active dispatch time steps per year: " nd:0:0  /;
7928  put "Number of active network nodes: " nn:0:0  /;
7929  put "Number of active network links: " nl:0:0  /;
7930  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
7931  put "Number of commodities: " nc:0:0  /;
7932  put "Number of years considered for capacity expansion: " ny:0:0  /;
7933  putclose;
7934   
7935  Model remix /
7936    M_converter
7937    M_storage
7938    M_transfer
7939    M_sourcesink
7940    M_balance
7941    M_accounting
7942  /;
7943   
7947   
7948  * ==== include methods  ====
7951   
7952  * check if the method is valid
7957   
7958   
7959  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
7961  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7962  * SPDX-License-Identifier: BSD-3-Clause
7963   
7966   
7969   
7970  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
7972  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7973  * SPDX-License-Identifier: BSD-3-Clause
7974   
7978   
7979  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
7981  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7982  * SPDX-License-Identifier: BSD-3-Clause
7983   
7987   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
7989  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7990  * SPDX-License-Identifier: BSD-3-Clause
7991   
7993   
7995   
7996  * ==== GAMS solver options ====
8002   
8003  * ==== REMix debug options ====
8007   
8008  * ==== REMix solver defaults ====
8016   
8024   
8034   
8042   
8051   
8052   
8053  * ==== setup optimization ====
8054  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8055     option limRow=0, limCol=0, solPrint=off;
8056  else
8057     option limRow=100000, limCol=100000, solPrint=on;
8058  );
8059   
8060   
8061  * ==== Solver specific default values ====
8062   
8082   
8083   
8085   
8086   
8088   
8089  option mip = cplex;
8090  option reslim = 1209600;
8091  option optcr = 1e-3;
8092  remix.threads = 8;
8093  remix.optFile = 1;
8094  remix.solveLink = 0;
8095  remix.holdFixed = 1;
8096   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8099  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8100  * SPDX-License-Identifier: BSD-3-Clause
8101   
8103   
8105  file opt / "cplex.opt" /;
8106  put opt;
8107  put "names no" /;
8108  put "rerun no" /;
8109   
8110  put "lpmethod 4" /;
8111  put "threads 8" /;
8112  put "barorder 3" /;
8113   
8115  put "scaind 0" /;
8116  put "predual -1" /;
8117   
8120  put "barepcomp 1e-6" /;
8122  put "solutiontype 2" /;
8123  put "epgap 1e-3" /;
8124   
8126  put "iis 0" /;
8127  put "quality 1" /;
8128   
8131  putclose;
8133   
8134   
8136   
8137   
8139   
8140   
8142   
8143   
8145   
8146   
8148   
8149   
8151   
8152   
8154   
8156   
8157   
8158  * ==== solve the problem ====
8159   
8160  loop ( optiframeToCalc,
8161      yearsSel(years) = no;
8162      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8163      yearsToFix(years) = no;
8164      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8165      accYearsSel(accYears) = no;
8166      accYearsSel("horizon") = yes;
8167      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8168      accYearsToFix(accYears) = no;
8169      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8170      timeModelSel(timeModel) = no;
8171      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8172      nodesModelSel(nodesModel) = no;
8173      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8174   
8175  * Fix decision for years previously optimized in case of myopic or foresight
8176      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8177          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8178          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8179              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8180      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8181          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8182   
8183      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8184          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8185          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8186              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8187      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8188          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8189   
8190      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8191          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8192              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8193                  sum(years$sameas(years, yearsToCalc),
8194                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8195                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8196              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8197                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
8198                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
8199      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8200          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
8201   
8202      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8203          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8204          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8205              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8206   
8207      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8208          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8209          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8210              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
8211   
8212      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8213          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8214      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8215          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8216      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8217          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8218      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8219          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8220      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8221          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8222   
8223   
8224      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8225          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8226          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8227              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8228      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8229          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8230   
8231      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8232          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8233          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8234              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8235      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8236          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8237   
8238      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8239          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
8240              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8241                  sum(years$sameas(years, yearsToCalc),
8242                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
8243                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
8244              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8245                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
8246                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
8247      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8248          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
8249   
8250      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8251          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8252          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8253              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
8254   
8255      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8256          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8257          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8258              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
8259   
8260      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8261          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8262      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8263          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8264      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8265          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8266      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8267          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8268      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8269          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8270   
8271   
8272      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8273          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8274          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8275              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8276      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8277          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8278   
8279      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8280          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8281          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
8282              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
8283      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8284          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8285   
8286      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8287          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
8288              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8289                  sum(years$sameas(years, yearsToCalc),
8290                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
8291                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
8292              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8293                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
8294                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
8295      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8296          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
8297   
8298      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8299          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8300          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8301              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8302   
8303      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8304          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8305          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8306              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8307   
8308      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8309          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8310      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8311          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8312      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8313          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8314      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8315          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8316      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8317          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8318   
8319      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8320          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8321   
8322  * Optimize and log values
8323      solve remix minimizing accounting_objective using mip;
8324      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8325      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8326   
8327  );
8328   
8332   
8333  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
8335  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8336  * SPDX-License-Identifier: BSD-3-Clause
8337   
8341   
8342  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
8344  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8345  * SPDX-License-Identifier: BSD-3-Clause
8346   
8350   
8351  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
8353  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8354  * SPDX-License-Identifier: BSD-3-Clause
8355   
8359   
8360  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
8362  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8363  * SPDX-License-Identifier: BSD-3-Clause
8364   
8367   
8368  * ==== indicator accounting ====
8369   
8370  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8371      =
8372  * == converters ==
8373      sum ((converter_techs(techs),vintage)
8374                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8375                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
8376          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8377          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
8378   
8379      + sum ((years_a,converter_techs(techs),vintage)
8380                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8381                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
8382                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
8383                      and years_a.val <= yearsToCalc.val ),
8384          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8385          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
8386          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
8387   
8388      + sum ((converter_techs(techs),vintage)
8389                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8390                      and converter_techParam(converter_techs,vintage,"freeDecom")),
8391          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8392          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
8393   
8394      + sum ((converter_techs(techs),vintage)
8395                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8396          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8397          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
8398   
8399      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8400                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8401          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8402          * timeLength(timeModelToCalc)
8403          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
8404          / timefrac
8405   
8406      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8407                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8408          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8409          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
8410          / timefrac
8411   
8412      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8413                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8414          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8415          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8416              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
8417   
8418          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8419          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8420              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
8421          / timefrac
8422   
8423  * == storage ==
8424      + sum ((storage_techs(techs),vintage)
8425                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8426                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
8427          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8428          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
8429   
8430      + sum ((years_a,storage_techs(techs),vintage)
8431                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8432                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
8433                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
8434                      and years_a.val <= yearsToCalc.val ),
8435          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8436          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
8437          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
8438   
8439      + sum ((storage_techs(techs),vintage)
8440                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8441                      and storage_techParam(storage_techs,vintage,"freeDecom")),
8442          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8443          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
8444   
8445      + sum ((storage_techs(techs),vintage)
8446                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8447          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8448          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
8449   
8450  * == transfer ==
8451      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8452                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8453                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8454                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8455          0.5
8456          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8457          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8458   
8459      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
8460                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8461                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8462                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
8463                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8464                      and years_a.val <= yearsToCalc.val ),
8465          0.5
8466          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8467          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
8468          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
8469   
8470      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
8471                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8472                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8473                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8474          0.5
8475          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8476          * transfer_lengthParam(linksModel,link_types,"length")
8477          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8478   
8479      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
8480                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8481                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8482                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8483                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8484                      and years_a.val <= yearsToCalc.val ),
8485          0.5
8486          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8487          * transfer_lengthParam(linksModel,link_types,"length")
8488          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8489          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
8490   
8491      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8492                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
8493                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8494                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8495          0.5
8496          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8497          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8498   
8499          + 0.5
8500          * sum (link_types,
8501              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8502              * transfer_lengthParam(linksModel,link_types,"length")
8503              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8504          ) )
8505   
8506   
8507      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8508                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8509                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8510          + 0.5
8511          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8512          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8513   
8514          + 0.5
8515          * sum (link_types,
8516              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8517              * transfer_lengthParam(linksModel,link_types,"length")
8518              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8519   
8520          + 0.5
8521          * sum (timeModelToCalc,
8522              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8523              * timeLength(timeModelToCalc)
8524              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8525                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8526   
8527              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8528              * timeLength(timeModelToCalc)
8529              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8530                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8531              / timefrac
8532   
8533          + 0.5
8534          * sum ((timeModelToCalc, link_types),
8535              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8536              * timeLength(timeModelToCalc)
8537              * transfer_lengthParam(linksModel,link_types,"length")
8538              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8539                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8540   
8541              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8542              * timeLength(timeModelToCalc)
8543              * transfer_lengthParam(linksModel,link_types,"length")
8544              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8545                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8546              / timefrac
8547          )
8548   
8549   
8550  * == sources / sinks ==
8551      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8552              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8553          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8554          * timeLength(timeModelToCalc)
8555          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8556      / timefrac
8557      ;
8558   
8559   
8560  * ==== full set of main indicators ====
8561   
8562  indicator_accounting(accNodesModel,accYears,indicator)
8563      $sum((accNodesModel_a,accYears_a,indicator_a)
8564              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8565      =
8566      + sum((accNodesModel_a,accYears_a,indicator_a)
8567              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8568                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8569          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8570          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8571   
8572      + sum((accNodesModel_a,accYears_a,indicator_a)
8573              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8574          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8575          * (sum((nodesModelToCalc,yearsToCalc,techs)
8576                  $(sameas(accNodesModel_a, nodesModelToCalc)
8577                      and sameas(accYears_a, yearsToCalc)),
8578                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8579      ;
8580   
8581  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8582      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8583      =
8584          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8585          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8586              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8587   
8588          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8589          * (sum((nodesModelToCalc,yearsToCalc,techs)
8590                  $(sameas(accNodesModel_a, nodesModelToCalc)
8591                      and sameas(accYears_a, yearsToCalc)),
8592                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8593      ;
8594   
8595  indicator_accounting_var(accNodesModel,accYears,indicator)
8596      $accounting_indicator.l(accNodesModel,accYears,indicator)
8597      = accounting_indicator.l(accNodesModel,accYears,indicator);
8598   
8599  indicator_accounting_ref(accNodesModel,accYears,indicator)
8600      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8603  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8604  * SPDX-License-Identifier: BSD-3-Clause
8605   
8606  * == variable indicators ==
8607      sum((accNodesModel_a,accYears_a,indicator_a)
8608          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8609              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8610          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8611          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8612          )
8613   
8614  * == converters ==
8615      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8616              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8617                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8618          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8619          *
8620          ( sum ((converter_techs,vintage)
8621                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8622                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8623              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8624              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8625              )
8626   
8627          + sum ((years_a,converter_techs,vintage)
8628                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8629                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8630                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8631                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8632                          and years_a.val <= yearsSel.val ),
8633              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8634              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8635              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8636              )
8637   
8638          + sum ((yearsToCalc,converter_techs,vintage)
8639                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8640                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8641                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8642                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8643                          and yearsToCalc.val <= yearsSel.val ),
8644              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8645              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8646              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8647              )
8648   
8649          + sum ((converter_techs,vintage)
8650                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8651                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8652              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8653              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8654   
8655          + sum ((converter_techs,vintage)
8656                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8657              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8658              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8659   
8660          + sum ((timeModelSel,converter_techs,vintage,activity)
8661                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8662              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8663              * timeLength(timeModelSel)
8664              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8665          / timefrac
8666   
8667          + sum ((timeModelSel,converter_techs,vintage)
8668                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8669              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8670              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8671          / timefrac
8672   
8673          + sum ((timeModelSel,converter_techs,vintage)
8674                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8675              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8676              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8677                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8678   
8679              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8680              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8681                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8682          / timefrac
8683          )
8684      )
8685   
8686  * == storage ==
8687      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8688              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8689                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8690          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8691          *
8692          ( sum ((storage_techs,vintage)
8693                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8694                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8695              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8696              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8697              )
8698   
8699          + sum ((years_a,storage_techs,vintage)
8700                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8701                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8702                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8703                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8704                          and years_a.val <= yearsSel.val ),
8705              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8706              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8707              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8708              )
8709   
8710          + sum ((yearsToCalc,storage_techs,vintage)
8711                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8712                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8713                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8714                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8715                          and yearsToCalc.val <= yearsSel.val ),
8716              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8717              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8718              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8719              )
8720   
8721          + sum ((storage_techs,vintage)
8722                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8723                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8724              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8725              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8726   
8727          + sum ((storage_techs,vintage)
8728                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8729              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8730              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8731          )
8732      )
8733   
8734   
8735  * == transfer ==
8736      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8737              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8738                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8739          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8740          *
8741          ( sum ((linksModelToCalc,transfer_techs,vintage)
8742                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8743                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8744                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8745              0.5
8746              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8747              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8748   
8749          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8750                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8751                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8752                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8753                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8754                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8755                          and years_a.val <= yearsSel.val ),
8756              0.5
8757              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8758              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8759              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8760   
8761          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8762                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8763                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8764                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8765                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8766                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8767                          and yearsToCalc.val <= yearsSel.val ),
8768              0.5
8769              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8770              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8771              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8772   
8773          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8774                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8775                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8776                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8777              0.5
8778              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8779              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8780              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8781   
8782          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8783                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8784                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8785                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8786                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8787                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8788                          and years_a.val <= yearsSel.val ),
8789              0.5
8790              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8791              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8792              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8793              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8794   
8795          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8796                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8797                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8798                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8799                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8800                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8801                          and yearsToCalc.val <= yearsSel.val ),
8802              0.5
8803              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8804              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8805              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8806              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8807   
8808          + sum ((linksModelToCalc,transfer_techs,vintage)
8809                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8810                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8811                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8812              0.5
8813              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8814              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8815   
8816              + 0.5
8817              * sum (link_types,
8818                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8819                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8820                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8821              ) )
8822   
8823          + sum ((linksModelToCalc,transfer_techs,vintage)
8824                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8825                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8826              0.5
8827              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8828              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8829   
8830              + 0.5
8831              * sum (link_types,
8832                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8833                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8834                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8835   
8836              + 0.5
8837              * sum (timeModelSel,
8838                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8839                  * timeLength(timeModelSel)
8840                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8841                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8842   
8843                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8844                  * timeLength(timeModelSel)
8845                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8846                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8847                  / timefrac
8848   
8849              + 0.5
8850              * sum ((timeModelSel, link_types),
8851                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8852                  * timeLength(timeModelSel)
8853                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8854                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8855                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8856   
8857                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8858                  * timeLength(timeModelSel)
8859                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8860                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8861                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8862                  / timefrac
8863              )
8864          )
8865      )
8866   
8867   
8868  * == sources / sinks ==
8869      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8870              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8871                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8872          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8873          *
8874          sum ((timeModelSel,sourcesink_techs,commodity)
8875                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8876              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8877              * timeLength(timeModelSel)
8878              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8879          / timefrac
8880      )
8882  ;
8883   
8884   
8885  * ==== link-specific indicator accounting ====
8886   
8887  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8888      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8889          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8890      =
8891      sum ((transfer_techs(techs),vintage)
8892                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8893                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8894          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8895          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8896   
8897      + sum ((years_a,transfer_techs(techs),vintage)
8898                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8899                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8900                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8901                      and years_a.val <= yearsToCalc.val ),
8902          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8903          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8904          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8905   
8906      + sum ((transfer_techs(techs),vintage,link_types)
8907                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8908                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8909          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8910          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8911          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8912   
8913      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8914                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8915                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8916                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8917                      and years_a.val <= yearsToCalc.val ),
8918          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8919          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8920          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8921          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8922   
8923      + sum ((transfer_techs(techs),vintage)
8924                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8925          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8926          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8927   
8928          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8929          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8930   
8931          + sum (link_types,
8932              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8933              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8934              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8935   
8936              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8937              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8938              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8939   
8940          + sum (timeModelToCalc,
8941              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8942              * timeLength(timeModelToCalc)
8943              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8944                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8945   
8946              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8947              * timeLength(timeModelToCalc)
8948              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8949                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8950              / timefrac
8951   
8952          + sum ((timeModelToCalc, link_types),
8953              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8954              * timeLength(timeModelToCalc)
8955              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8956              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8957                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8958   
8959              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8960              * timeLength(timeModelToCalc)
8961              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8962              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8963                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8964              / timefrac
8965      );
8966   
8967   
8968  * == converter capacities ==
8969   
8970  converter_ratedInput(converter_techs,vintage,commodity)
8971      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8972      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8973              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8974  converter_ratedInput(converter_techs,vintage,commodity)
8975      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8976      = 0;
8977   
8978  converter_ratedOutput(converter_techs,vintage,commodity)
8979      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8980      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8981              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8982  converter_ratedOutput(converter_techs,vintage,commodity)
8983      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8984      = 0;
8985   
8986  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8987      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8988          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8989      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8990              and converter_ratedOutput(converter_techs,vintage,commodity)),
8991          converter_ratedOutput(converter_techs,vintage,commodity));
8992   
8993  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8994      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8995          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8996      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8997              and converter_ratedOutput(converter_techs,vintage,commodity)),
8998          converter_ratedOutput(converter_techs,vintage,commodity));
8999   
9000  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9001      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9002   
9003  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9004      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9005   
9006  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9007  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9008      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9009       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9010      = sum(years_a$
9011            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9012             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9013             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9014        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9015   
9016  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9017      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9018   
9019  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9020      $(converter_ratedOutput(converter_techs,vintage,commodity))
9021      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9022          * converter_ratedOutput(converter_techs,vintage,commodity);
9023   
9024  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9025      = sum(vintage,
9026          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9027  option clear = converter_caps_ext;
9028   
9029  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9030      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9031          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9032          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9033      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9034          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9035   
9036  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9037      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9038          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9039          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9040      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9041          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9042   
9043  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9044      = sum((nodesModelToCalc,years)
9045              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9046                  and map_accYearsPostCalc(accYears,years)),
9047          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9048  option clear = converter_caps_novintage_ext;
9049   
9050  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9051      = sum((nodesModelToCalc,years)
9052              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9053                  and map_accYearsPostCalc(accYears,years)),
9054          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9055  option clear = converter_units_ext;
9056   
9057  * ==== transfer capacities ====
9058   
9059  max_transfer_coefficient(transfer_techs(techs),commodity)
9060          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9061          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9062   
9063  min_transfer_coefficient(transfer_techs(techs),commodity)
9064          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9065          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9066   
9067  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9068      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9069          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9070          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9071      = yes;
9072   
9073  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9074      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9075   
9076  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9077      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9078   
9079  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9080  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9081      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9082       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9083      = sum(years_a$
9084            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9085             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9086             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9087        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9088   
9089  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9090      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9091   
9092  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9093      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9094          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9095                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9096      = sum(vintage,
9097          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9098          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9099   
9100  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9101      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9102          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9103          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9104                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9105      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9106          * min_transfer_coefficient(transfer_techs,commodity);
9107   
9108  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9109      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9110          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9111          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9112                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9113      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9114          * max_transfer_coefficient(transfer_techs,commodity);
9115   
9116   
9117  * ==== transfer flows ====
9118   
9119  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9120      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9121      = sum(vintage,
9122          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9123              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9124          * timeLength(timeModelToCalc)
9125          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9126   
9127  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9128      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9129      = sum(timeModelToCalc,
9130          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9131   
9132  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9133      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9134      = sum(timeModelToCalc
9135              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9136          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9137   
9138  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9139      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9140      = sum(timeModelToCalc
9141              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9142          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9143   
9144  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9145      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9146      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9147          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9148   
9149  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9150      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9151          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9152          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9153      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9154          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9155   
9156  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9157      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9158          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9159              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9160      = -1 * abs(sum(vintage,
9161          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9162              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9163          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9164              + sum(link_types,
9165                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9166                  * transfer_lengthParam(linksModel,link_types,"length")))))
9167          * timeLength(timeModelToCalc);
9168   
9169  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9170      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9171          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9172              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9173      = sum(timeModelToCalc,
9174          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9175   
9176   
9177  * ==== storage capacities ====
9178   
9179  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9180      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9181              and storage_usedCom(storage_techs,vintage,commodity)
9182              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9183      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9184              and storage_usedCom(storage_techs,vintage,commodity)
9185              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9186          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9187   
9188  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9189      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9190              and storage_usedCom(storage_techs,vintage,commodity)
9191              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9192      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9193              and storage_usedCom(storage_techs,vintage,commodity)
9194              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9195          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9196   
9197  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9198      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9199      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9200   
9201  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9202      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9203      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9204   
9205  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
9206  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9207      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
9208       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9209      = sum(years_a$
9210            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9211             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9212             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9213        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
9214   
9215  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9216      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9217   
9218  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9219      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9220      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9221          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9222   
9223  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
9224      = sum(vintage,
9225          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9226   
9227  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9228      $(storage_usedCom(storage_techs,vintage,commodity)
9229          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9230               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9231      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9232                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9233                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9234                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9235  option clear = storage_caps_ext;
9236   
9237  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
9238      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9239          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9240      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9241          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9242   
9243  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
9244      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9245          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9246      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9247          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9248   
9249  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9250      = sum((nodesModelToCalc,years)
9251              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9252                  and map_accYearsPostCalc(accYears,years)),
9253          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
9254  option clear = storage_caps_novintage_ext;
9255   
9256  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9257      = sum((nodesModelToCalc,years)
9258              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9259                  and map_accYearsPostCalc(accYears,years)),
9260          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9261  option clear = storage_units_ext;
9262   
9263   
9264  * ==== storage levels and flows ====
9265   
9266  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9267      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9268      =
9269      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9270      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9271          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9272      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9273          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9274      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9275          * storage_sizeParam(storage_techs,vintage,commodity,"size")
9276          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9277          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9278              and ord(timeModelToCalc)=1)
9280      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9281          * timeLength(timeModelToCalc)
9283      ;
9284   
9285  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9286      = sum((nodesModelToCalc,yearsToCalc,vintage)
9287              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9288          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9289  option clear = storage_flows_ext;
9290   
9291  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9292      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9293      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9294   
9295  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9296      = sum((nodesModelToCalc,yearsToCalc,vintage)
9297              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9298          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9299  option clear = storage_level_out_ext;
9300   
9301  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9302      = sum(timeModelToCalc,
9303          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9304   
9305  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9306      = sum(timeModelToCalc
9307              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9308          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9309   
9310  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9311      = sum(timeModelToCalc
9312              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9313          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9314   
9315  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
9316      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9317          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9318   
9319  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9320      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
9321          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9322      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
9323          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9324   
9325  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9326      = sum((nodesModelToCalc,yearsToCalc,vintage)
9327              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9328                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9329                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9330          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9331          * timeLength(timeModelToCalc));
9332   
9333  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9334      = sum(timeModelToCalc,
9335          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9336   
9337   
9338  * == commodity balance ==
9339   
9340  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9341      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9342          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9343      = sum((activity)
9344              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9345          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9346              * timeLength(timeModelToCalc)
9347              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9348          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9349              * timeLength(timeModelToCalc)
9350              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9351   
9352  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9353      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9354          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9355      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9356          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9357              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9358          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9359              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9360          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9361              * storage_sizeParam(storage_techs,vintage,commodity,"size")
9362              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9363              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9364                  and ord(timeModelToCalc)=1)
9365          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9366      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9367      * timeLength(timeModelToCalc);
9368   
9369  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9370      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9371          and sameas(yearsToCalc,vintage))
9372      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9373      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9374      * timeLength(timeModelToCalc);
9375   
9376  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9377      $sum((linksModel)
9378          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9379                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9380                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9381      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9382      + sum((linksModel)
9383              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9384                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9385                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9386   
9387  * incoming transfer flows
9388              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9389                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9390                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9391                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9392              * timeLength(timeModelToCalc)
9393              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9394   
9395  * outgoing transfer flows
9396              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9397                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9398                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9399                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9400              * timeLength(timeModelToCalc)
9401              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9402   
9403              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9404                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9405                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9406                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9407                      * timeLength(timeModelToCalc)
9408                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9409                          + sum(link_types,
9410                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9411                              * transfer_lengthParam(linksModel,link_types,"length")))))
9412      ;
9413   
9414  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9415      = sum((nodesModelToCalc,yearsToCalc,vintage)
9416              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9417                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9418                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9419          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9420  option clear = commodity_balance_ext;
9421   
9422   
9423  * ==== annual commodity sums ====
9424   
9425  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
9426      = sum(timeModelToCalc,
9427          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9428   
9429  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9430      = sum(timeModelToCalc
9431              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9432          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9433   
9434  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9435      = sum(timeModelToCalc
9436              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9437          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9438   
9439  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9440      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9441          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9442   
9443  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9444      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
9445          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9446      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9447          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9448   
9449   
9450  * ==== marginal information ====
9451   
9452  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9453    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9454    =
9455    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9456   
9457  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9458      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9459      =
9460      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9461   
9462  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9463      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9464          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9465          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9466      =
9467      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9468      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9469      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9470   
9471  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
9472  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9473      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
9474      =
9475      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9476          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
9477  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9478      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
9479      =
9480      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9481          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
9482  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9483      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
9484      =
9485      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9486          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
9489   
9490  * ==== R2A postcalc information ====
9491   
9493   
9494   
9495  * ==== round profiles to reduce size of gdx ====
9496   
9498  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9499      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9500      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9501   
9502  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9503      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9504      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9505   
9506  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9507      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9508      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9509   
9510  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9511      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9512      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9513   
9514  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9515      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9516      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9517   
9518  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9519      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9520      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9521   
9522  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9523      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9524      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9526   
9527  * ==== Dump diagnostics ====
9528   
9529  diagnostics("variables") = remix.numVar;
9530  diagnostics("equations") = remix.numEqu;
9531  diagnostics("iterations") = remix.iterUsd;
9532   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
9536  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9537  * SPDX-License-Identifier: BSD-3-Clause
9538   
9541   
9542  execute_unload "./results\PIC_trial_3.gdx"
9544      metadata
9546      timeModel
9547      timeModelToCalc
9548      nodesModel
9549      linksModel
9550      indicator
9551      commodity
9552      techs
9553      accNodesModel
9554      accYears
9555   
9556      map_nodesModel
9557      map_linksModel
9558      map_nodesAccounting
9559   
9560      indicator_accounting
9561      indicator_accounting_var
9562      indicator_accounting_ref
9563      indicator_accounting_comp
9564      indicator_accounting_detailed
9565      indicator_accounting_links
9566   
9567      converter_caps
9568      converter_units
9570   
9571      transfer_caps
9572      transfer_links
9573      transfer_flows
9574      transfer_flows_annual
9575      transfer_losses
9576      transfer_losses_annual
9577   
9578      storage_caps
9579      storage_units
9580      storage_flows
9581      storage_level_out
9582      storage_flows_annual
9583      storage_losses_out
9584      storage_losses_annual
9586   
9587      commodity_balance
9588      commodity_balance_annual
9589   
9590      marginals_balance
9591      marginals_sourcesink_profile
9592      marginals_sourcesink_sum
9593      marginals_indicator_bounds
9594   
9596      diagnostics
9597      ;
9600   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/15/25 13:38:01 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/15/25 13:38:01\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    55      412 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    56      420 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    57      422 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    58      430 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    59      432 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    60      450 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    61      452 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    62      461 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    63      461 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    64      467 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    65      476 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    66      476 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    67      482 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    68      491 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    69      491 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    70      506 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    71      506 INCLUDE       29     303  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    72      510 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    73      513 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    74      513 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    75      521 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    76      521 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    77      534 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    78      538 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    79      538 INCLUDE       29     319  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    80      540 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    81      545 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    82      546 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    83      550 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    84      550 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    85      554 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    86      564 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    87      566 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    88      575 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    89      577 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    90      593 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    91      595 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    92      609 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    93      720 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    94      722 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    95      787 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    96      789 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    97      842 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    98      874 IF EXIST      97      32  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
    99      874 INCLUDE       97      32  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   100      899 IF EXIST      97      34  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   101      913 IF EXIST      97      48  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   102      915 IF EXIST      97      50  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   103      932 IF EXIST      97      67  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   104      934 IF EXIST      97      69  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   105      953 IF EXIST      97      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   106      953 INCLUDE       97      88  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   107      958 IF EXIST      97      90  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   108      980 IF EXIST      97     112  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   109      982 IF EXIST      97     114  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   110     1004 IF EXIST      97     136  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   111     1006 IF EXIST      97     138  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   112     1021 IF EXIST      97     153  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   113     1021 INCLUDE       97     153  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   114     1038 IF EXIST      97     155  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   115     1052 IF EXIST      97     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   116     1052 INCLUDE       97     169  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   117     1058 IF EXIST      97     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   118     1084 IF EXIST      97     197  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   119     1084 INCLUDE       97     197  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   120     1088 IF EXIST      97     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   121     1107 IF EXIST      97     218  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   122     1109 IF EXIST      97     220  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   123     1115 BATINCLUDE    97     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1183 BATINCLUDE    97     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1235 BATINCLUDE    97     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1287 BATINCLUDE    97     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1355 BATINCLUDE    97     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   128     1423 BATINCLUDE    97     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   129     1491 BATINCLUDE    97     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   130     1951 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   131     2026 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   132     2033 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   133     2040 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   134     2057 IF DEXIST    133      17  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\results\
   135     2275 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   136     2288 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   137     2391 IF EXIST     136     103  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   138     2391 INCLUDE      136     103  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   139     2497 IF EXIST     136     105  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   140     2505 BATINCLUDE   136     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   141     2516 BATINCLUDE   136     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   142     2549 IF EXIST     136     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   143     2549 INCLUDE      136     137  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   144     2563 IF EXIST     136     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   145     2585 IF EXIST     136     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   146     2585 INCLUDE      136     161  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   147     2699 IF EXIST     136     162  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   148     2701 IF EXIST     136     164  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   149     2722 IF EXIST     136     185  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   150     2722 INCLUDE      136     185  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   151     2742 IF EXIST     136     186  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   152     2743 IF EXIST     136     187  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   153     2745 IF EXIST     136     189  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   154     2758 IF EXIST     136     202  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   155     2759 IF EXIST     136     203  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   156     2761 IF EXIST     136     205  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   157     3762 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   158     3855 IF EXIST     157      93  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   159     3855 INCLUDE      157      93  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   160     3872 IF EXIST     157      95  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   161     3876 BATINCLUDE   157      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   162     3887 BATINCLUDE   157     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   163     3898 BATINCLUDE   157     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   164     3934 IF EXIST     157     127  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   165     3934 INCLUDE      157     127  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   166     3938 IF EXIST     157     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   167     3959 IF EXIST     157     150  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   168     3959 INCLUDE      157     150  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   169     3963 IF EXIST     157     152  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   170     3980 IF EXIST     157     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   171     3982 IF EXIST     157     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   172     4001 IF EXIST     157     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   173     4003 IF EXIST     157     192  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   174     4032 IF EXIST     157     221  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   175     4033 IF EXIST     157     222  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   176     4035 IF EXIST     157     224  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   177     4972 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   178     5037 IF EXIST     177      71  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   179     5039 IF EXIST     177      73  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   180     5055 IF EXIST     177      89  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   181     5057 IF EXIST     177      91  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   182     5077 IF EXIST     177     111  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   183     5079 IF EXIST     177     113  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   184     5094 IF EXIST     177     128  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   185     5096 IF EXIST     177     130  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   186     5110 IF EXIST     177     144  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   187     5112 IF EXIST     177     146  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   188     5127 IF EXIST     177     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   189     5129 IF EXIST     177     163  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   190     5143 IF EXIST     177     177  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   191     5145 IF EXIST     177     179  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   192     5159 IF EXIST     177     193  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   193     5161 IF EXIST     177     195  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   194     5175 IF EXIST     177     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   195     5177 IF EXIST     177     211  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   196     5832 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   197     5870 IF EXIST     196      38  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   198     5870 INCLUDE      196      38  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   199     5915 IF EXIST     196      40  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   200     5919 BATINCLUDE   196      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   201     5947 IF EXIST     196      62  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   202     5947 INCLUDE      196      62  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   203     5963 IF EXIST     196      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   204     5964 IF EXIST     196      64  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   205     5966 IF EXIST     196      66  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   206     5986 IF EXIST     196      86  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   207     5986 INCLUDE      196      86  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   208     6017 IF EXIST     196      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   209     6020 BATINCLUDE   196      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   210     6208 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   211     6356 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   212     6423 INCLUDE      211      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     6713 INCLUDE      211      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   214     7003 INCLUDE      211      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   215     7293 INCLUDE      211     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   216     7388 INCLUDE      211     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   217     7483 INCLUDE      211     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   218     7582 INCLUDE      211     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   219     7876 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   220     7895 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   221     7960 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   222     7971 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   223     7980 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   224     7988 INCLUDE      223       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   225     8098 INCLUDE      223       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   226     8334 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   227     8343 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   228     8352 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   229     8361 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   230     8602 INCLUDE      229     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   231     9535 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        5.532 SECONDS     29 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/15/25 13:38:01 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8323


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.800E-04, 1.000E+05] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 5.357E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/15/25 13:38:01 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8323


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    2,369,629
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    2,246,973
NON ZERO ELEMENTS     6,039,974


GENERATION TIME      =       13.172 SECONDS  1,416 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       22.890 SECONDS  1,416 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/15/25 13:38:01 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8323


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8323

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              722.5663

 RESOURCE USAGE, LIMIT        103.594   1209600.000
 ITERATION COUNT, LIMIT       156    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 804.86 Mb (peak 822.00 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 69.98 Mb (peak 182.81 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 102.44sec (det. 84598.29 ticks)


Optimal solution found
Objective:          722.566262

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        6.494e-06   8.293e-05   6.494e-06   8.293e-05
dual infeasibility          2.380e-08   5.135e-04   2.380e-08   5.135e-04
primal residual             7.276e-12   6.338e-11   7.276e-12   6.338e-11
dual residual               2.408e-08   1.912e-02   2.408e-08   1.912e-02
primal solution vector      2.172e+04   2.666e+05   2.172e+04   2.666e+05
dual solution vector        9.881e+02   1.339e+05   9.881e+02   1.339e+05
slacks                      1.000e+05   1.525e+06   1.000e+05   1.525e+06
reduced costs               1.181e+01   2.108e+05   1.181e+01   2.108e+05
comp. slackness viol.       3.543e-06   5.189e-03




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/15/25 13:38:01 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt


EXECUTION TIME       =       18.375 SECONDS  1,233 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\run_remix.lst
