GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/12/25 16:54:28 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/12/25 16:54:28"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "5cb0193fb178f950184b9025f328f46726671efb"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 791   
 792  map_accNodes(accNodesModel,accNodesModel_aggregation)
 793      $sum((nodesData, nodesModelToCalc)
 794              $( sameas(nodesModelToCalc,accNodesModel)
 795                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 796                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 797   
 798  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 799  map_accNodes(accNodesModel,accNodesModel) = yes;
 800  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 801  map_accLinks(accLinksModel,accLinksModel) = yes;
 802  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 803  map_accYears(accYears,accYears) = yes;
 804   
 805  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 806      $sum((nodesData)
 807              $( map_accNodesLoad(nodesData,accNodesModel)
 808                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 809   
 810  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 811  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 812  map_accLinksToCalc("global",linksModelToCalc) = yes;
 813  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 814  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 815  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 816   
 817  * Duplicate sets for postcalc reporting without horizon and accYears
 818  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 819  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 820  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 821  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 822   
 823  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 824  option map_nodesAccounting < map_accNodes;
 825   
 826  * ==== Generic sets  ====
 827  * These set names are repeated across different profile parameters.
 828  * they are not strictly related to each other and are not input data but
 829  * are needed for validation.
 830  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 831   
 832  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 833  * "Scenario indexes help to differentiate scenarios." /
 834   
 835  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 836  * "Capacity types differentiate investment decisions." /
 837   
 838  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 839  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 841  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 842  * SPDX-License-Identifier: BSD-3-Clause
 843   
 844  * // # accounting_input
 845  * // The parameters in this file describe the accounting of indicators in the model.
 846   
 847  * // ## Variables
 848  * // {special_table_input_variables}
1109   
1110  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1112  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1113  * SPDX-License-Identifier: BSD-3-Clause
1114   
1116   
1118   
1119  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1120  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1121      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1122      = yes;
1123   
1125  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1126  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1127      $sum((nodesData,accnodesData)
1128              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1129                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1130      = smax((nodesData,accnodesData)
1131              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1132                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1133          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1134      - smin((nodesData,accnodesData)
1135              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1136                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1137          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1138   
1139  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1141   
1142  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1143  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1144      $sum((nodesData,accnodesData)
1145              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1146                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1147      = sum((nodesData,accnodesData)
1148              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1149                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1150          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1151      / sum((nodesData,accnodesData)
1152              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1153                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1154          1);
1155   
1156  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1157  loop(accnodes,
1158  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1159      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1160                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1161      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1162              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1163  );
1164   
1165  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1166      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1167      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1168   
1169  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1170  loop(accYears,
1171  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1172      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1173              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1174      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1175              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1176  );
1177   
1178  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1180  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1181  * SPDX-License-Identifier: BSD-3-Clause
1182   
1184   
1186   
1187  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1188  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1189      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1190      = yes;
1191   
1193   
1194  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1195  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1196      $sum((nodesData,accnodesData)
1197              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1198                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1199      = sum((nodesData,accnodesData)
1200              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1201                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1202          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1203      / sum((nodesData,accnodesData)
1204              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1205                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1206          1);
1207   
1208  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1209  loop(accnodes,
1210  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1211      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1212                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1213      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1214              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1215  );
1216   
1217  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1218      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1219      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1220   
1221  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1222  loop(accYears,
1223  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1224      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1225              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1226      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1227              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1228  );
1229   
1230  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1232  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1233  * SPDX-License-Identifier: BSD-3-Clause
1234   
1236   
1238   
1239  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1240  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1241      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1242      = yes;
1243   
1245   
1246  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1247  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1248      $sum((nodesData,accnodesData)
1249              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1250                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1251      = sum((nodesData,accnodesData)
1252              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1253                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1254          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1255      / sum((nodesData,accnodesData)
1256              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1257                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1258          1);
1259   
1260  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1261  loop(accnodes,
1262  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1263      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1264                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1265      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1266              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1267  );
1268   
1269  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1270      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1271      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1272   
1273  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1274  loop(accYears,
1275  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1276      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1277              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1278      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1279              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1280  );
1281   
1282  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1284  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1285  * SPDX-License-Identifier: BSD-3-Clause
1286   
1288   
1290   
1291  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1292  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1293      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1294      = yes;
1295   
1297  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1298  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1299      $sum((nodesData,accnodesData)
1300              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1301                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1302      = smax((nodesData,accnodesData)
1303              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1304                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1305          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1306      - smin((nodesData,accnodesData)
1307              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1308                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1309          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1310   
1311  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1313   
1314  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1315  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1316      $sum((nodesData,accnodesData)
1317              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1318                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1319      = sum((nodesData,accnodesData)
1320              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1321                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1322          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1323      / sum((nodesData,accnodesData)
1324              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1325                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1326          1);
1327   
1328  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1329  loop(accnodes,
1330  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1331      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1332                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1333      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1334              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1335  );
1336   
1337  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1338      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1339      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1340   
1341  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1342  loop(accYears,
1343  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1344      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1345              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1346      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1347              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1348  );
1349   
1350  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1352  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1353  * SPDX-License-Identifier: BSD-3-Clause
1354   
1356   
1358   
1359  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1360  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1361      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1362      = yes;
1363   
1365  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1366  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1367      $sum((linksData,acclinksData)
1368              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1369                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1370      = smax((linksData,acclinksData)
1371              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1372                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1373          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1374      - smin((linksData,acclinksData)
1375              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1376                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1377          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1378   
1379  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1381   
1382  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1383  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1384      $sum((linksData,acclinksData)
1385              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1386                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1387      = sum((linksData,acclinksData)
1388              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1389                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1390          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1391      / sum((linksData,acclinksData)
1392              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1393                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1394          1);
1395   
1396  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1397  loop(acclinks,
1398  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1399      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1400                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1401      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1402              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1403  );
1404   
1405  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1406      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1407      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1408   
1409  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1410  loop(accYears,
1411  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1412      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1413              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1414      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1415              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1416  );
1417   
1418  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1420  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1421  * SPDX-License-Identifier: BSD-3-Clause
1422   
1424   
1426   
1427  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1428  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1429      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1430      = yes;
1431   
1433  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1434  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1435      $sum((linksData,acclinksData)
1436              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1437                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1438      = smax((linksData,acclinksData)
1439              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1440                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1441          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1442      - smin((linksData,acclinksData)
1443              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1444                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1445          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1446   
1447  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1449   
1450  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1451  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1452      $sum((linksData,acclinksData)
1453              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1454                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1455      = sum((linksData,acclinksData)
1456              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1457                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1458          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1459      / sum((linksData,acclinksData)
1460              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1461                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1462          1);
1463   
1464  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1465  loop(acclinks,
1466  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1467      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1468                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1469      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1470              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1471  );
1472   
1473  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1474      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1475      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1476   
1477  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1478  loop(accYears,
1479  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1480      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1481              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1482      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1483              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1484  );
1485   
1486  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1488  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1489  * SPDX-License-Identifier: BSD-3-Clause
1490   
1492   
1494   
1495  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1496  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1497      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1498      = yes;
1499   
1501   
1502  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1503  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1504      $sum((nodesData,accnodesData)
1505              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1506                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1507      = sum((nodesData,accnodesData)
1508              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1509                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1510          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1511      / sum((nodesData,accnodesData)
1512              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1513                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1514          1);
1515   
1516  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1517  loop(accnodes,
1518  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1519      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1520                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1521      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1522              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1523  );
1524   
1525  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1526      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1527      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1528   
1529  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1530  loop(accYears,
1531  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1532      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1533              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1534      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1535              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1536  );
1537   
1538  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1539   
1540  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1541  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1542      = sum((linksData)$sameas(linksModelToCalc,linksData),
1543              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1544   
1545  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1546      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1547              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1548   
1549  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1550  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1551      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1552          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1553   
1554  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1555      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1556      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1557              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1558          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1559   
1560  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1561  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1562      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1563      = yes;
1564   
1565  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1566  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1567      $sum((nodesDataToCalc,accnodesData)
1568              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1569                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1570      = sum((nodesDataToCalc,accnodesData)
1571              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1572                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1573          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1574      / sum((nodesDataToCalc,accnodesData)
1575              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1576                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1577          1);
1578   
1579  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1580   
1581  loop(accNodes,
1582  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1583      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1584              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1585          and map_accNodes(accNodesModel,accNodes)
1586              )
1587      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1588              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1589   
1590  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1591      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1592              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1593          and map_accNodes(accNodesModel,accNodes)
1594          and not sameas(accYears, "horizon"))
1595      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1596              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1597  );
1598   
1599  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1600      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1601          and sameas(accNodesModel,nodesModelToCalc)), 1)
1602      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1603          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1604   
1605  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1606      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1607          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1608      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1609          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1610   
1611   
1612  * Make sure all required indicators end up in the model
1613  set variableIndicators(accNodesModel,accYears,indicator);
1614  variableIndicators(accNodesModel,accYears,indicator)
1615     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1616        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1617     = yes;
1618   
1619  set activeIndicators(accNodesModel,accYears,indicator);
1620  activeIndicators(accNodesModel,accYears,indicator)
1621     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1626        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1627        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1628        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1629          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1630     = yes;
1631   
1632  set activeIndicators_links(linksModel,years,indicator);
1633  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1634     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1635        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1636        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1637     = yes;
1638   
1639  * Clear other dependencies and only add self mapping for variable and qp indicators
1640  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1641      $(variableIndicators(accNodesModel,accYears,indicator))
1642      = 0;
1643  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1644      $(variableIndicators(accNodesModel,accYears,indicator))
1645      = 1;
1646   
1647  * Calculate length of years and discount rates per indicator
1648  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1649  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1650      $(map_accYears(accYears_a,accYears)
1651          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1652      = 1;
1653   
1654  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1655      $(map_accYears(accYears_a,accYears)
1656          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1657          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1658      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1659   
1660  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1661      $(map_accYears(accYears_a,accYears)
1662          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1663          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1664          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1665          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1666      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1667   
1668  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1669      $(map_accYears(accYears_a,accYears)
1670          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1671          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1672          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1673      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1674          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1675                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1676   
1677  * Add self mapping for variable and qp indicators
1678  yearFactor(accNodesModel,accYears,indicator,accYears)
1679      $(variableIndicators(accNodesModel,accYears,indicator))
1680      = 1;
1681   
1682   
1683  * ==== calculate compound indicators for the optimization ====
1684  scalar compIndicators_pre;
1685  scalar compIndicators_post;
1686   
1687  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1688  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1689      $(activeIndicators(accNodesModel,accYears,indicator))
1690      = 1;
1691   
1692  set compoundIndicators_act(accNodesModel,accYears,indicator);
1693  option compoundIndicators_act < compoundIndicators;
1694   
1695  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1696  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1697  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1698      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1699   
1700  compIndicators_pre = 0;
1701  compIndicators_post = 1;
1702   
1703  option sparseval = 1;
1704  while(compIndicators_pre < compIndicators_post,
1705      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1706          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1707   
1708      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1709          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1710              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1711              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1712              and map_accYears(accYears_aa,accYears_a))
1713          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1714              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1715   
1716      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1717   
1718      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1719          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1720              and sum((accNodesModel_a,accYears_a,indicator_a)
1721                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1722          = sum((accNodesModel_a,accYears_a,indicator_a)
1723                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1724              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1725   
1726      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1727          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1728              and sum((accNodesModel_a,accYears_a,indicator_a)
1729                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1730          = sum((accNodesModel_a,accYears_a,indicator_a)
1731                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1732                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1733              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1734          / sum((accNodesModel_a,accYears_a,indicator_a)
1735                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1736                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1737   
1738      option compoundIndicators_act < compoundIndicators;
1739      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1740          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1741  );
1742  option sparseval = 0;
1743   
1744  * map to sub-years and sub-nodes
1745  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1746      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1747          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1748          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1749          and map_accYears(accYears_aa,accYears_a)
1750          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1751      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1752          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1753   
1754  * Remove all accounting regions and accounting years
1755  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1756      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1757          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1758          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1759              or sameas("horizon",accYears_aa)))
1760      = 0;
1761   
1762  * Remove all slack indicators except the ones declared in indicatorBounds
1763  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1764      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1765          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1766                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1767          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1768      = 0;
1769   
1770   
1771  * Map from extended parameter to final parameter
1772  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1773  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1774      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1775          and sum((accNodesModel_a,accYears_a,indicator_a)
1776                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1777      = sum((accNodesModel_a,accYears_a,indicator_a)
1778              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1779          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1780   
1781  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1782      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1783          and sum((accNodesModel_a,accYears_a,indicator_a)
1784                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1785      = sum((accNodesModel_a,accYears_a,indicator_a)
1786              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1787                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1788          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1789      / sum((accNodesModel_a,accYears_a,indicator_a)
1790              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1791                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1792   
1793  * Remove all accounting regions and accounting years
1794  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1795      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1796          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1797          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1798              or sameas("horizon",accYears_aa)))
1799      = 0;
1800   
1801  * Remove all slack indicators except the ones declared in indicatorBounds
1802  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1803      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1804          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1805          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1806      = 0;
1807   
1808   
1809  * ==== compound indicators for the post calculation ====
1810  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1811  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1812      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1813          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1814   
1815  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1816      $(activeIndicators(accNodesModel,accYears,indicator)
1817          or variableIndicators(accNodesModel,accYears,indicator))
1818      = 1;
1819   
1820  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1821  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1822   
1823  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1824  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1825  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1826   
1827  compIndicators_pre = 0;
1828  compIndicators_post = 1;
1829   
1830  option sparseval = 1;
1831  while(compIndicators_pre < compIndicators_post,
1832      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1833          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1834   
1835      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1836          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1837              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1838              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1839              and map_accYears(accYears_aa,accYears_a))
1840          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1841              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1842   
1843      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1844   
1845      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1846          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1847              and sum((accNodesModel_a,accYears_a,indicator_a)
1848                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1849          = sum((accNodesModel_a,accYears_a,indicator_a)
1850                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1851              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1852   
1853      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1854          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1855              and sum((accNodesModel_a,accYears_a,indicator_a)
1856                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1857          = sum((accNodesModel_a,accYears_a,indicator_a)
1858                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1859                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1860              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1861          / sum((accNodesModel_a,accYears_a,indicator_a)
1862                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1863                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1864   
1865      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1866      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1867          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1868  );
1869  option sparseval = 0;
1870   
1871  * map to sub-years and sub-nodes
1872  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1873      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1874          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1875          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1876          and map_accYears(accYears_aa,accYears_a)
1877          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1878      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1879          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1880   
1881  * Remove all accounting regions and accounting years
1882  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1883      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1884          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1885          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1886              or sameas("horizon",accYears_aa)))
1887      = 0;
1888   
1889  * Remove all slack indicators except the ones declared in indicatorBounds
1890  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1891      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1892          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1893                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1894          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1895      = 0;
1896   
1897   
1898  * Map from extended parameter to final parameter
1899  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1900  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1901      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1902          and sum((accNodesModel_a,accYears_a,indicator_a)
1903                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1904      = sum((accNodesModel_a,accYears_a,indicator_a)
1905              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1906          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1907   
1908  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1909      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1910          and sum((accNodesModel_a,accYears_a,indicator_a)
1911                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1912      = sum((accNodesModel_a,accYears_a,indicator_a)
1913              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1914                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1915          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1916      / sum((accNodesModel_a,accYears_a,indicator_a)
1917              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1918                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1919   
1920  * Remove all accounting regions and accounting years
1921  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1922      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1923          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1924   
1925          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1926              or sameas("horizon",accYears_aa)))
1927      = 0;
1928   
1929  * Remove all slack indicators except the ones declared in indicatorBounds
1930  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1931      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1932          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1933          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1934      = 0;
1935   
1936   
1937  * Check if the objective value and optimization sense is set correctly
1938  scalar opti_values, opti_sense;
1939  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1940  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1941  abort$(opti_values < 1)
1942      "Accounting: No indicator specified as objective value"
1943  abort$(opti_values > 1)
1944      "Accounting: Too many indicators specified as objective value"
1945  abort$(opti_sense <> -1 and opti_sense <> 1)
1946      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
1948  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1949  * SPDX-License-Identifier: BSD-3-Clause
1950   
1951  * Calculation of annuities
1952  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1953          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
1954          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1955      "Accounting: Some converter technologies use annuities but have no amortization time"
1956   
1957  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
1958  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1959      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
1960      =
1961      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
1962          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1963          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
1964      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1965          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
1966   
1967   
1968  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1969          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
1970          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1971      "Accounting: Some storage technologies use annuities but have no amortization time"
1972   
1973  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
1974  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1975      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
1976      =
1977      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
1978          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1979          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
1980      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1981          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
1982   
1983   
1984  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1985          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
1986          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1987      "Accounting: Some transfer technologies use annuities but have no amortization time"
1988   
1989  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
1990  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1991      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
1992      =
1993      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
1994          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1995          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
1996      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1997          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
1998   
1999   
2000   
2001  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2002          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2003          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2004      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2005   
2006  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2007  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2008   
2009  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2010      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2011      =
2012      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2013          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2014          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2015      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2016          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2017   
2021   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2023  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2024  * SPDX-License-Identifier: BSD-3-Clause
2025   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2030  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2031  * SPDX-License-Identifier: BSD-3-Clause
2032   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2037  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2038  * SPDX-License-Identifier: BSD-3-Clause
2039  * // # Output data
2040  * // This is the reference data model of the REMix output.
2041  * //
2042  * // ## Standard output
2045   
2052   
2054   
2055  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2056  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2057  set profileType / "upper", "fixed", "lower" /;
2058  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2059   
2060  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2061  * // ### indicator_accounting
2062  * // Title: Accounting indicators Post-calculation
2063  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2064  * //
2065  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2066  * // ### indicator_accounting_ref
2067  * // Title: Accounting indicators reference
2068  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2069  * //
2070  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2071  * // ### indicator_accounting_var
2072  * // Title: Accounting indicators variable states
2073  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2074  * //
2075  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2076  * // ### indicator_accounting_comp
2077  * // Title: Accounting indicators composition
2078  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2079  * //
2080  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2081  * // ### indicator_accounting_detailed
2082  * // Title: Accounting indicators detail
2083  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2084  * //
2085  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2086  * // ### indicator_accounting_links
2087  * // Title: Accounting indicators per transfer link
2088  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2089  * //
2090  parameter converter_ratedInput(techs,vintage,commodity);
2091  parameter converter_ratedOutput(techs,vintage,commodity);
2092  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2093  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2094   
2095  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2096  * // ### converter_caps
2097  * // Title: Coverter capacities post-calculation
2098  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2099  * //
2100  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2101  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2102   
2103  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2104  * // ### converter_units
2105  * // Title: Coverter units post-calculation
2106  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2107  * //
2108  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2109   
2110  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2111  parameter max_transfer_coefficient(techs,commodity);
2112  parameter min_transfer_coefficient(techs,commodity);
2113  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2114  * // ### transfer_links
2115  * // Title: Transfer post-calculation
2116  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2117  * //
2118  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2119  * // ### transfer_caps
2120  * // Title: Transfer capacities post-calculation
2121  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2122  * //
2123  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2124  * // ### transfer_flows
2125  * // Title: Transfer hourly flows
2126  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2127  * //
2128  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2129  * // ### transfer_flows_annual
2130  * // Title: Transfer annual flows
2131  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2132  * //
2133  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2134  * // ### transfer_losses
2135  * // Title: Transfer hourly losses
2136  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2137  * //
2138  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2139  * // ### transfer_losses_annual
2140  * // Title: Transfer annual losses
2141  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2142  * //
2143  parameter storage_size_max(nodesModel,years,techs,commodity);
2144  parameter storage_size_min(nodesModel,years,techs,commodity);
2145  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2146  * // ### storage_units
2147  * // Title: Storage units post-calculation
2148  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2149  * //
2150  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2151  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2152  * // ### storage_caps
2153  * // Title: Storage capacities post-calculation
2154  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2155  * //
2156  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2157  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2158  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2159  * // ### storage_level_out
2160  * // Title: Storage level
2161  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2162  * //
2163  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2164  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2165  * // ### storage_flows
2166  * // Title: Storage hourly flows
2167  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2168  * //
2169  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2170  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2171  * // ### storage_flows_annual
2172  * // Title: Storage annual flows
2173  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2174  * //
2175  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2176  * // ### storage_losses_out
2177  * // Title: Storage hourly losses
2178  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2179  * //
2180  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2181  * // ### storage_losses_annual
2182  * // Title: Storage annual losses
2183  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2184  * //
2185  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2186  * // ### commodity_balance
2187  * // Title: Hourly commodity balance
2188  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2189  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2190  * //
2191  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2192  * // ### commodity_balance_annual
2193  * // Title: Annual commodity balance
2194  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2195  * //
2196  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2197  * // ### marginals_sourcesink_profile
2198  * // Title: Source-sink marginals
2199  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2200  * //
2201  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2202  * // ### marginals_balance
2203  * // Title: Nodel balance marginals
2204  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2205  * //
2206  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2207  * // ### marginals_sourcesink_sum
2208  * // Title: Source-sink annual marginals
2209  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2210  * //
2211  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2212  * // ### marginals_indicator_bounds
2213  * // Title: Indicator bounds marginals
2214  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2215  * //
2216  * // ## REMix-AMIRIS interface output
2217  * //
2218  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2219  * // ### r2a_annuity_cost_converter
2220  * // Title: Converter annuity cost
2221  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2222  * //
2223  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2224  * // ### r2a_spec_cost_converter
2225  * // Title: Converter specific cost
2226  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2227  * //
2228  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2229  * // ### r2a_spec_cost_fuel
2230  * // Title: Commodity specific cost
2231  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2232  * //
2233  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2234  * // ### r2a_spec_cost_indicator
2235  * // Title: Indicator specific cost
2236  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2237  * //
2238  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2239  * // ### r2a_converter_efficiencies
2240  * // Title: Indicator specific cost
2241  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2242  * //
2243  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2244  * // ### r2a_converter_avail_factor
2245  * // Title: Converter availability factor
2246  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2247  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2248  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2249  * //
2250  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2251  * // ### r2a_storage_e2p
2252  * // Title: E2P Storage
2253  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2254  * //
2255  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2256  * // ### r2a_storage_selfdischarge
2257  * // Title: Storage self discharge rates
2258  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2259   
2260  set attribute(*)
2261       /
2262      "variables"
2263      "equations"
2264      "iterations"
2265      /;
2266   
2267  parameter diagnostics(attribute);
2268   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2272  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2273  * SPDX-License-Identifier: BSD-3-Clause
2274   
2275  * ==== global settings ====
2277   
2279   
2281   
2283   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2285  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2286  * SPDX-License-Identifier: BSD-3-Clause
2287   
2288  * // # core_converter
2289  * // The equations in this file describe the converters in the model.
2290   
2291  * // ## Advanced features
2292  * //
2293  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2294  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2295  * //
2296  * // In the following table you can see which modifications you have to make to your data to use the different features.
2297  * //
2298  * // | Feature | Modification |
2299  * // | ------ | ------ |
2300  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2301  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2302  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2303  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2304  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2305  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2306   
2307  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2308  * //
2309  * // ### set_converter_techs.dat
2310  * // In this file all converter technologies are listed that can be used within your model.
2311  * //
2312  * // ### set_activities.dat
2313  * // All modes with which the converter technologies can be operated need to be added here.
2314  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2315  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2316  * //
2317  * // ### set_commodities.dat
2318  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2319  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2320   
2321  * // ## Variables
2322  * // {special_table_converter_variables}
2771   
2772  * // ## Load units from gdx file
2774   
2775   
2776  * ==== calculation of mappings ====
2777   
2778  * Technologies with a lifeTime > 0 are available
2779  set converter_availTech(nodesModel,years,converter_techs,vintage);
2780  converter_availTech(nodesModel,years,converter_techs,vintage)
2781      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
2782          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
2783   
2784  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
2785  converter_availTech(nodesModel,years,converter_techs,vintage)
2786      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
2787   
2788  * Technologies already built become unavailable if they have an unitsBuild of 0
2789  converter_availTech(nodesModel,years,converter_techs,vintage)
2790      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
2791   
2792  * Used technologies are available technologies over their technical lifeTime
2793  set converter_usedTech(nodesModel,years,converter_techs,vintage);
2794  converter_usedTech(nodesModel,years,converter_techs,vintage)
2795      $(vintage.val <= years.val
2796          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
2797                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
2798          ) = yes;
2799   
2800  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
2801  set converter_decomTech(nodesModel,years,converter_techs,vintage);
2802  converter_decomTech(nodesModel,years,converter_techs,vintage)
2803    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2804                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2805      and sum(yearsToCalc
2806        $(sameas(years, yearsToCalc)
2807          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2808          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2809    = yes;
2810   
2811  converter_decomTech(nodesModel,years,converter_techs,vintage)
2812    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2813                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2814      and sum(yearsToCalc
2815        $(sameas(years, yearsToCalc)
2816          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2817          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2818    = yes;
2819   
2820  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
2821  converter_decomTech(nodesModel,years,converter_techs,vintage)
2822    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
2823      and sum(yearsToCalc
2824        $(sameas(years, yearsToCalc)
2825          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
2826    = yes;
2827   
2828  * Extend the decom frame to the model year after the last model year of usedTech
2829  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2830    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
2831      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
2832    = yes;
2833   
2834  * Mapping for used activities and commodities
2835  set converter_usedActCom(converter_techs,vintage,activity,commodity);
2836  option converter_usedActCom < converter_coefficient;
2837   
2838  set converter_usedAct(converter_techs,vintage,activity);
2839  option converter_usedAct < converter_usedActCom;
2840   
2841  set converter_usedCom(converter_techs,vintage,commodity);
2842  option converter_usedCom < converter_usedActCom;
2843   
2844  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
2845  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
2846      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2847          and converter_usedAct(converter_techs,vintage,activity))
2848      = yes;
2849   
2850  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
2851  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2852    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2853      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
2854    = 1;
2855   
2856  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
2857  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2858    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2859      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
2860    = 1;
2861   
2862   
2863  * ==== aggregation of profiles ====
2864   
2865  * derive upper and lower profiles then aggregate
2866  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
2867  option converter_activity_hasProfileIn < converter_activityProfileIn;
2868   
2869  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
2870  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2871      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2872              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
2873   
2874  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
2875  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
2876   
2877  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
2878  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2879      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2880              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
2881   
2882  * aagregate time dimension
2883  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
2884  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2885    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2886    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
2887            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2888            / timeLength(timeModelToCalc));
2889  option clear = converter_activityProfileIn;
2890   
2891  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2892  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
2893  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
2894      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
2895  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
2896      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
2897   
2898   
2899  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2900  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2901      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
2902          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
2903   
2904  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2905  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2906      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
2907   
2908  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2909      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2910          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2911      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2912                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
2913                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2914                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
2915      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2916              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2917   
2918  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2919      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2920          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2921      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2922                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
2923                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
2924      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2925                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2926              1);
2927  option clear = converter_activityProfileIn_aggTime;
2928   
2929  * for fixed profiles overwrite upper and lower profile
2930  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
2931      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2932      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2933   
2934  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
2935      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2936      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2937   
2941   
2942  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2943  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
2944  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2945      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
2946   
2947  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2948      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2949          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
2950      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2951            sum(timeData$timeMapping(timeData,timeModelToCalc),
2952                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2953                / timeLength(timeModelToCalc)
2954              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
2955      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2956              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2957   
2958  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2959      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2960          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2961      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2962                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2963            sum(timeData$timeMapping(timeData,timeModelToCalc),
2964                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2965                / timeLength(timeModelToCalc))
2966      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2967                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
2968   
2971   
2972  * reduce coefficient delay based on time resolution
2973  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
2974    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
2975    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
2977   
2978  * ==== prepare partial load behavior parameters ====
2979   
2980  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
2981  alias(commodity, com);
2982  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
2983      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
2984        and converter_usedAct(converter_techs,vintage,activity))
2985      = 1;
2986   
2987  * indicate that at least one activity of a technology makes use of partial load behavior
2988  set converter_hasMaxLoad(converter_techs,vintage);
2989  converter_hasMaxLoad(converter_techs,vintage)
2990    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2991              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
2992   
2993  set converter_hasMinLoad(converter_techs,vintage);
2994  converter_hasMinLoad(converter_techs,vintage)
2995    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2996              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
2997   
2998  set converter_hasConstantFluxInActivity(converter_techs,vintage);
2999  converter_hasConstantFluxInActivity(converter_techs,vintage)
3000    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3001                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3002   
3003  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3004  set pc_converter_activityRequirements
3005      /
3006      minLoad             "Lower profile for converter activity"
3007      maxLoad             "Upper profile for converter activity"
3008      /;
3009  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3010  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3011    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3012  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3013    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3014   
3015  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3016   
3017  set converter_hasMinUptime(converter_techs,vintage);
3018  converter_hasMinUptime(converter_techs,vintage)
3019    $(converter_techParam(converter_techs,vintage,"minUptime")
3020      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3021    = yes;
3022   
3023  set converter_hasMinDowntime(converter_techs,vintage);
3024  converter_hasMinDowntime(converter_techs,vintage)
3025    $(converter_techParam(converter_techs,vintage,"minDowntime")
3026      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3027    = yes;
3028   
3029  * require integer unit counts if online state is to be tracked
3030  converter_techParam(converter_techs,vintage,"mipUnits")
3031      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3032        or converter_hasMinLoad(converter_techs, vintage)
3033        or converter_hasMaxLoad(converter_techs, vintage)
3034        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3035      = 1;
3036   
3037  * ==== floor mip converter units to integer values ====
3038  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3039      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3040      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3041  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3042      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3043      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3044   
3045  * ==== scalars and sets for minUptime and minDowntime ====
3046   
3047  scalar converter_maxUptimeReq;
3048  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3049  set uptimeSearchRange(timeModelToCalc);
3050  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3051   
3052  scalar converter_maxDowntimeReq;
3053  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3054  set downtimeSearchRange(timeModelToCalc);
3055  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3056   
3057  * ==== definition of variables ====
3058   
3059  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3060      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3061        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3062      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3063  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3064      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3065        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3066      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3067  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3068      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3069        and (converter_hasMinLoad(converter_techs, vintage)
3070              or converter_hasMaxLoad(converter_techs, vintage)))
3071      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3072   
3073   
3074  * Initialise variables for unitsBuild
3075  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3076      $converter_availTech(nodesModel,years,converter_techs,vintage)
3077      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3078  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3079      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3080      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3081  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3082      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3083      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3084   
3085  * Initialise variables for unitsDecom
3086  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3087    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3088      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3089    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3090                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3091                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3092                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3093          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3094   
3095  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3096    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3097    = sum(years$
3098          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3099            and converter_availTech(nodesModel,years,converter_techs,vintage)
3100            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3101            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3102        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3103      + sum(yearsToCalc_a$
3104          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3105            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3106            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3107            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3108        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3109        ;
3110   
3111  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3112      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3113          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3114      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3115   
3116   
3118   
3119   
3120  * Calculate planned unit expansion
3121  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3122  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3123  loop(years,
3124    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3125      =
3126      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3127          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3128      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3129          $converter_availTech(nodesModel,years,converter_techs,vintage)
3130      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3131          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3132  );
3133   
3134  * Set initial state for planned units
3135  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3136    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3137   
3138   
3139  * // ## Load units from gdx file
3141   
3142  * Calculate if planned unit expansion is bounded by upper and lower limits
3143  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3144  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3145    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3146          converter_techParam(converter_techs,vintage,"freeDecom"))
3147    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3148          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3149      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3150    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3151          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3152      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3153    = yes;
3154   
3155  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3156  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3157    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3158      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3159    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3160  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3161    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3162      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3163    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3164  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3165    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3166      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3167    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3168   
3169   
3170  * Add parameter for fixing capacities during myopic runs
3171  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3172  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3173  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3174   
3175  * Fix activities of upper limit if upper limit is zero
3176  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3177    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3178      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3179      = 0;
3180   
3181   
3182  * ==== declaration of equations ====
3183   
3184  equations
3185    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3186      ) "Ensures the units balance over the planning period."
3187    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3188      ) "Ensures the units balance over the planning period."
3189    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3190      ) "Restricts the free decommissioning of units over the planning period."
3191    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3192      ) "Upper bound for the total number of units."
3193    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3194      ) "Lower bound for the total number of units."
3195    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3196      ) "Fixed bound for the total number of units."
3197    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3198      ) "Fixes the total number of units to the corresponding integer variable."
3199    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3200      ) "Fixes the number of online units to the corresponding integer variable."
3201   
3202    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3203      ) "Lower limit on the activity."
3204    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3205      ) "Upper limit on the activity."
3206   
3207    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3208      ) "Fixed limit on the activity."
3209    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3210      ) "Positive ramping of unit activity."
3211    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3212      ) "Negative ramping of unit activity."
3213    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3214      ) "Restrict ramping up of unit activity."
3215   
3216    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3217      ) "Set online units to total number of operational units."
3218    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3219      ) "Allow shutting down units."
3220    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3221      ) "Variable counting the number of unit startups."
3222    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3223      ) "Variable tracking the number of unit shutdowns."
3224    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3225      ) "Limit the number of startup cycles a unit can perform."
3226    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3227      ) "Require recently started units to remain online for their respective minimum uptime."
3228    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3229      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3230    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3231      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3232    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3233      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3234    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3235      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3236    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3237      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3238    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3239      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3240    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3241      ) "Limit usage of an activity to corresponding units."
3242    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3243      ) "Limit usage of an activity to corresponding units."
3244    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3245      ) "Limit the number of units in one particular mode to the number of operational units."
3246    ;
3247   
3248  * ==== equation definition ====
3249  * // ## Equations
3250  * // ### Converter Units Balance
3251  * // Ensures that the total units are consistent with the built and decommissioned units.
3252  * // {Eq_converter_unitsBalance}
3253   
3254  * Equation using build only
3255  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3256      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3257            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3258          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3259          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3260      ..
3261      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3262      =e=
3263      sum ((years_a)
3264              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3265                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3266                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3267                  and years_a.val <= yearsSel.val ),
3268            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3269   
3270      + sum ((yearsToCalc)
3271              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3272                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3273                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3274                  and yearsToCalc.val <= yearsSel.val ),
3275            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3276   
3277  * Equation using build and decom
3278  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3279      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3280            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3281          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3282          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3283      ..
3284      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3285      =e=
3286      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3287        sum(years$sameas(years, yearsToCalc),
3288          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3289            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3290      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3291        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3292          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3293      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3294          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3295      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3296          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3297      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3298          ;
3299   
3300  * // ### Converter Units Free Decommission
3301  * // Restricts the free decommissioning of units over the planning period.
3302  * // {Eq_converter_unitsFreeDecom}
3303  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3304      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3305          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3306      ..
3307      sum(years$
3308            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3309              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3310          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3311      + sum(yearsToCalc$
3312            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3313              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3314              and yearsToCalc.val <= yearsSel.val),
3315          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3316      =g=
3317      sum(years$
3318            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3319              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3320              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3321          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3322      + sum(yearsToCalc$
3323            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3324              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3325              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3326          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3327   
3328  * // ### Converter Units Upper Limit
3329  * // Upper bound for the total number of units.
3330  * // {Eq_converter_unitsUpperLimit}
3331  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3332      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3333          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3334          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3335              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3336      ..
3337      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3338          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3339      =l=
3340      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3341   
3342  * // ### Converter Units Lower Limit
3343  * // Lower bound for the total number of units.
3344  * // {Eq_converter_unitsLowerLimit}
3345  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3346      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3347          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3348              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3349      ..
3350      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3351          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3352      =g=
3353      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3354   
3355  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3356      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3357          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3358      ..
3359      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3360          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3361      =e=
3362      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3363   
3364  * // ### Converter Units Total MIP
3365  * // Fixes the total number of units to the corresponding integer variable.
3366  * // {Eq_converter_unitsTotalMIP}
3367  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3368      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3369          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3370      ..
3371      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3372      =e=
3373      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3374   
3375  * // ### Converter Units Online MIP
3376  * // Fixes the number of online units to the corresponding integer variable.
3377  * // {Eq_converter_unitsOnlineMIP}
3378  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3379      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3380          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3381      ..
3382      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3383      =e=
3384      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3385   
3386  * // ### Converter Activity Lower Limit
3387  * // Lower limit on the activity.
3388  * // {Eq_converter_activityLowerLimit}
3389  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3390      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3391          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3392          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3393              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3394          and not converter_hasMinLoad(converter_techs, vintage))
3395      ..
3396      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3397          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3398      )
3399      =g=
3400      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3403      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3406   
3407  * // ### Converter Activity Upper Limit
3408  * // Upper limit on the activity.
3409  * // {Eq_converter_activityUpperLimit}
3410  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3411      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3412          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3413          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3414               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3415      ..
3416      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3417          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3418      )
3419      =l=
3420      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3423      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3426   
3427  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3428      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3429          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3430               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3431      ..
3432      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3433          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3434      )
3435      =e=
3436      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3439      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3442   
3443  * // ### Converter Positive Ramping
3444  * // Positive ramping of unit activity.
3445  * // {Eq_converter_rampPos}
3446  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3447    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3448        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3449      ..
3450      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3451      =g=
3452      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3453              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3454              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3455   
3456  * // ### Converter Negative Ramping
3457  * // Negative ramping of unit activity.
3458  * // {Eq_converter_rampNeg}
3459  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3460    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3461        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3462      ..
3463      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3464      =g=
3465      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3466              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3467              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3468   
3469  * // ### Converter Ramping Limit
3470  * // Restrict ramping up of unit activity.
3471  * // {Eq_converter_rampLimit}
3472  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3473    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3474          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3475      ..
3476      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3477              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3478              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3479    =l=
3480    converter_techParam(converter_techs,vintage,"activityRampLimit")
3483      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3486   
3489   
3490  * // ### Converter Units Online
3491  * // Set converter units online to total converter units for non-MIP case.
3492  * // {Eq_converter_unitsOnline}
3493  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3494      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3495          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3496    ..
3497    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3498    =e=
3499    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3500      ;
3501   
3502  * // ### Converter MIP Units Shutting Down
3503  * // Allow shutting down units.
3504  * // {Eq_converter_unitsOnlineUC}
3505  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3506      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3507          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3508    ..
3509    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3510    =l=
3511    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3512      ;
3515   
3516  * // ### Converter Activity Startups
3517  * // Variable counting the number of unit startups.
3518  * // {Eq_converter_activityStartups}
3519  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3520    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3521          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3522      ..
3523      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3524      =g=
3525          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3526      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3527   
3528  * // ### Converter Activity Shutdowns
3529  * // Variable tracking the number of unit shutdowns.
3530  * // {Eq_converter_activityShutdowns}
3531  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3532    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3533          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3534          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3535      ..
3536      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3537      =g=
3538          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3539      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3540   
3541  * // ### Converter Activity Startup Limit
3542  * // Limit the number of startup cycles a unit can perform.
3543  * // {Eq_converter_limitStartups}
3544  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3545    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3546          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3547      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3548      ..
3549      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3550    =l=
3551    converter_techParam(converter_techs,vintage,"startupLimit")
3552    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3553   
3554  alias(timeModelToCalc,ttc);
3555   
3556  * // ### Converter Units Minimum Uptime
3557  * // Require recently started units to remain online for their respective minimum uptime.
3558  * // {Eq_converter_minUptime}
3559  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3560    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3561          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3562      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3563      ..
3564      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3565          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3566              nodesModelSel,yearsSel,converter_techs,vintage))
3567          =l=
3568          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3569   
3570  * // ### Converter Units Minimum Downtime
3571  * // Require recently shut down units to remain offline for their respective minimum downtime.
3572  * // {Eq_converter_minDowntime}
3573  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3574    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3575          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3576      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3577      ..
3578      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3579          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3580              nodesModelSel,yearsSel,converter_techs,vintage))
3581          =l=
3582          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3583      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3584   
3585  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3586  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3587  alias(activity, act);
3588   
3589  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3590  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3591  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3592  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3593    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3594          and converter_hasMinLoad(converter_techs, vintage)
3595          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3596      ..
3597      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3598                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3599               and converter_usedAct(converter_techs,vintage,act)),
3600      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3601    =l=
3602    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3603      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3604                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3605                 and converter_usedAct(converter_techs,vintage,act)),
3606      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3607   
3608  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3609  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3610  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3611  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3612    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3613          and converter_hasMaxLoad(converter_techs,vintage)
3614          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3615      ..
3616      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3617                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3618               and converter_usedAct(converter_techs,vintage,act)),
3619      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3620    =l=
3621      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3622                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3623               and converter_usedAct(converter_techs,vintage,act)),
3624      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3625            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3626            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3627   
3628  * This equation is meant to enforce the lower limit requirements of activities in use.
3629  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3630  * because these activities can only run on units in the respectively strict activation state.
3631   
3632  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3633  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3634  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3635  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3636    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3637          and converter_hasMinLoad(converter_techs, vintage)
3638          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3639      ..
3640      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3641                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3642               and converter_usedAct(converter_techs,vintage,act)),
3643      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3644    =g=
3645      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3646                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3647               and converter_usedAct(converter_techs,vintage,act)),
3648      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3649            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3650            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3651   
3652   
3653  * Simple one-activity-per-unit partial load equations
3654  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3655  * // Enforce MIP units partial load upper limit.
3656  * // {Eq_converter_activityUpperLimitPartLoad}
3657  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3658    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3659          and (converter_hasMinLoad(converter_techs, vintage)
3660                or converter_hasMaxLoad(converter_techs, vintage)
3661                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3662          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3663      ..
3664      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3665    =l=
3666    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3667          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3668          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3669   
3670  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3671  * // Enforce MIP units partial load lower limit.
3672  * // {Eq_converter_activityLowerLimitPartLoad}
3673  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3674    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3675          and (converter_hasMinLoad(converter_techs, vintage)
3676                or converter_hasMaxLoad(converter_techs, vintage))
3677          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3678      ..
3679      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3680    =g=
3681    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3682          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3683          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3684   
3685  * // ### Converter MIP Units Idle Online Units
3686  * // Counts idle online units at every time step
3687  * // {Eq_converter_noOnlineIdle}
3688  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3689    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3690          and (converter_hasMinLoad(converter_techs, vintage)
3691              or converter_hasMaxLoad(converter_techs, vintage)
3692              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3693          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3694      ..
3695      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3696      =e=
3697      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3698            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3699   
3700  * // ### Converter MIP Units Idle Online Units Partial load
3701  * // Counts idle online units at every time step
3702  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3703  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3704    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3705          and (converter_hasMinLoad(converter_techs, vintage)
3706                  or converter_hasMaxLoad(converter_techs, vintage))
3707          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3708      ..
3709      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3710      =l=
3711      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3712            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3713   
3714  * // ### Converter MIP activity model limit
3715  * // Converter activity model limit
3716  * // {Eq_converter_activityModeLimit}
3717  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3718    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3719          and (converter_hasMinLoad(converter_techs, vintage)
3720                or converter_hasMaxLoad(converter_techs, vintage))
3721          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3722      ..
3723      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3724      =g=
3725      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3726   
3727  * ==== model definition ====
3728   
3729  Model M_converter
3730  /
3731    Eq_converter_unitsBalance
3732    Eq_converter_unitsBalanceFreeDecom
3733    Eq_converter_unitsFreeDecom
3734    Eq_converter_unitsUpperLimit
3735    Eq_converter_unitsLowerLimit
3736    Eq_converter_unitsFixedLimit
3737    Eq_converter_unitsTotalMIP
3738    Eq_converter_unitsOnlineMIP
3739    Eq_converter_activityUpperLimit
3740    Eq_converter_activityLowerLimit
3741    Eq_converter_activityFixedLimit
3742    Eq_converter_rampPos
3743    Eq_converter_rampNeg
3744    Eq_converter_rampLimit
3747    Eq_converter_unitsOnline
3748    Eq_converter_unitsOnlineUC
3751    Eq_converter_activityStartups
3752    Eq_converter_activityShutdowns
3753    Eq_converter_limitStartups
3754    Eq_converter_minUptime
3755    Eq_converter_minDowntime
3756    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
3757    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
3758    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
3759    Eq_converter_activityUpperLimitPartLoad
3760    Eq_converter_activityLowerLimitPartLoad
3761    Eq_converter_noOnlineIdle
3762    Eq_converter_noOnlineIdleDetailedPartLoad
3763    Eq_converter_activityModeLimit
3764  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
3766  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
3767  * SPDX-License-Identifier: BSD-3-Clause
3768   
3769  * // # core_storage
3770  * // The equations in this file describe the storages in the model.
3771   
3772  * // ## Variables
3773  * // {special_table_storage_variables}
4046   
4047   
4048  * === SoC mappings ===
4049  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4050  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4051      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4052        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4053      = yes;
4054   
4055  set storage_validSoCRange(storage_techs,vintage);
4056  storage_validSoCRange(storage_techs,vintage)
4057      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4058        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4059   
4060  * === Translate SoC parameters to ordered SoC-set ===
4061  * set ordered_socs / soc1*soc20 /;
4062  * alias(soc_states, soc_states_c);
4063  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4064  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4065  *     $storage_validSoCRange(storage_techs,vintage)
4066  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4067  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4068  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4069  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4070  *
4071  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4072  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4073  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4074  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4075  *     = yes;
4076   
4077  parameter storage_bigM(storage_techs,vintage);
4078  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4079  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4080  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4081   
4082  * === calculate the number of years represented by single year to calc ===
4083  alias(yearsToCalc, yearsToCalc_a)
4084  parameter representedYears(years);
4085  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4086                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4087   
4088  * ==== calculation of mappings ====
4089   
4090  * Technologies with a lifeTime > 0 are available
4091  set storage_availTech(nodesModel,years,storage_techs,vintage);
4092  storage_availTech(nodesModel,years,storage_techs,vintage)
4093      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4094          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4095   
4096  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4097  storage_availTech(nodesModel,years,storage_techs,vintage)
4098      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4099   
4100  * Technologies already built become unavailable if they have an unitsBuild of 0
4101  storage_availTech(nodesModel,years,storage_techs,vintage)
4102      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4103   
4104  * Used technologies are available technologies over their technical lifeTime
4105  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4106  storage_usedTech(nodesModel,years,storage_techs,vintage)
4107      $(vintage.val <= years.val
4108          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4109                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4110          ) = yes;
4111   
4112  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4113  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4114  storage_decomTech(nodesModel,years,storage_techs,vintage)
4115    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4116                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4117      and sum(yearsToCalc
4118        $(sameas(years, yearsToCalc)
4119          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4120          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4121    = yes;
4122   
4123  storage_decomTech(nodesModel,years,storage_techs,vintage)
4124    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4125                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4126      and sum(yearsToCalc
4127        $(sameas(years, yearsToCalc)
4128          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4129          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4130    = yes;
4131   
4132  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4133  storage_decomTech(nodesModel,years,storage_techs,vintage)
4134    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4135      and sum(yearsToCalc
4136        $(sameas(years, yearsToCalc)
4137          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4138    = yes;
4139   
4140  * Extend the decom frame to the year after the last year of usedTech
4141  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4142    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4143      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4144    = yes;
4145   
4146  * Mapping for used commodities
4147  set storage_usedCom(storage_techs,vintage,commodity);
4148  option storage_usedCom < storage_sizeParam;
4149   
4150  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4151  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4152      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4153          and storage_usedCom(storage_techs,vintage,commodity))
4154      = yes;
4155   
4156   
4157  * // ## Load units from gdx file
4159   
4160   
4161  * ==== aggregation of profiles ====
4162  * derive upper and lower profiles then aggregate
4163  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4164  option storage_level_hasProfileIn < storage_levelProfileIn;
4165   
4166  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4167  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4168      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4169              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4170   
4171  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4172  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4173  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4174      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4175  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4176      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4177   
4178  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4179  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4180                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4181   
4182  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4183      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4184          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4185      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4186              sum(timeData$timeMapping(timeData,timeModelToCalc),
4187                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4188                / timeLength(timeModelToCalc)
4189              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4190      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4191              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4192   
4193  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4194      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4195          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4196                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4197      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4198                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4199              sum(timeData$timeMapping(timeData,timeModelToCalc),
4200                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4201                / timeLength(timeModelToCalc))
4202      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4203                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4204   
4205  * for fixed profiles overwrite upper and lower profile
4206  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4207      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4208      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4209   
4210  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4211      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4212      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4213   
4214  * storage initial level
4215   
4216  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4217      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4218          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4219      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4220            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4221              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4222      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4223              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4224   
4225  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4226      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4227          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4228                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4229      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4230                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4231            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4232      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4233                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4234   
4235  * ==== parameter modifications ====
4236  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4237          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4238      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4239  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4240          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4241      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4242   
4243   
4244  * ==== definition of variables ====
4245   
4246  * Initialise variables for unitsBuild
4247  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4248      $storage_availTech(nodesModel,years,storage_techs,vintage)
4249      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4250  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4251      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4252      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4253  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4254      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4255      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4256   
4257  * Initialise variables for unitsDecom
4258  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4259      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4260        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4261      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4262                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4263                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4264                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4265          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4266   
4267  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4268    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4269    = sum(years$
4270          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4271            and storage_availTech(nodesModel,years,storage_techs,vintage)
4272            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4273            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4274        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4275      + sum(yearsToCalc_a$
4276          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4277            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4278            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4279            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4280        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4281        ;
4282   
4283  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4284      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4285        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4286      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4287   
4288   
4290   
4291   
4292  * Calculate planned unit expansion
4293  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4294  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4295  loop(years,
4296    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4297      =
4298      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4299          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4300      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4301          $storage_availTech(nodesModel,years,storage_techs,vintage)
4302      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4303          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4304  );
4305   
4306  * Set initial state for planned units
4307  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4308    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4309   
4310  * // ## Load units from gdx file
4312   
4313  * Calculate if planned unit expansion is bounded by upper and lower limits
4314  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4315  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4316    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4317          storage_techParam(storage_techs,vintage,"freeDecom"))
4318    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4319          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4320      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4321    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4322          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4323      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4324    = yes;
4325   
4326  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4327  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4328    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4329      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4330    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4331  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4332    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4333      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4334    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4335  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4336    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4337      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4338    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4339   
4340  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4341      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4342        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4343      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4344   
4345  * Add parameter for fixing capacities during myopic runs
4346  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4347  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4348  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4349   
4350  * ==== declaration of equations ====
4351   
4352  equations
4353    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4354      ) "Ensures the units balance over the planning period."
4355    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4356      ) "Ensures the units balance over the planning period."
4357    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4358      ) "Restricts the free decommissioning of units over the planning period."
4359    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4360      ) "Upper bound for the total number of units."
4361    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4362      ) "Lower bound for the total number of units."
4363    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4364      ) "Fixes the total number of units to the corresponding integer variable."
4365   
4366    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4367      ) "Upper bound for the total number of units."
4368    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4369      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4370    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4371      ) "Lower bound for the total number of units."
4372    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4373      ) "Stored commodities lost due to self discharge."
4374    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4375      ) "Currently available units must have been built at some point in time and have some state of degradation."
4376    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4377      ) "There cannot be more units from a certain year than the amount built in that year."
4378    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4379      ) "There is no recovery."
4380    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4381      ) "Limit charging rate based on unit capacity."
4382    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4383      ) "Limit discharging rate based on unit capacity."
4384    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4385      ) "Positive change in state of charge is influx."
4386    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4387      ) "Negative change in state of charge is outflux."
4388   
4389    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4390      ) "Sum of degradation class storage levels is the global level."
4391    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4392      ) "Upper bound for units of a certain state."
4393    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4394      ) "Positive change in state of charge is influx for each degradation class."
4395    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4396      ) "Determine degradation states of storage units."
4397    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4398      ) "All decomminsioned units must have a degradation state."
4399    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4400      ) "Only allow one range of degradation states per year and age group."
4401    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4402      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4403   
4404    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4405      ) "Every unit has a state of charge."
4406    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4407      ) "Every unit has a state of charge."
4408    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4409      ) "Number of units in particular SoC."
4410    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4411      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4412   
4413    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4414      ) "Limit charging rate based on unit capacity."
4415    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4416      ) "Limit discharging rate based on unit capacity."
4417    ;
4418   
4419  * ==== equation definition ====
4420  * // ## Equations
4421  * // ### Storage Units Balance
4422  * // Ensures that the total units are consistent with the built and decommissioned units.
4423  * // {Eq_storage_unitsBalance}
4424   
4425  * Equation using build only
4426  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4427      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4428            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4429          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4430          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4431      ..
4432      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4433      =e=
4434      sum ((years_a)
4435                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4436                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4437                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4438                          and years_a.val <= yearsSel.val ),
4439              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4440   
4441      + sum ((yearsToCalc)
4442                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4443                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4444                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4445                          and yearsToCalc.val <= yearsSel.val ),
4446              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4447   
4448  * Equation using build and decom
4449  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4450      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4451            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4452          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4453          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4454      ..
4455      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4456      =e=
4457          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4458        sum(years$sameas(years, yearsToCalc),
4459          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4460            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4461      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4462        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4463          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4464      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4465          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4466      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4467          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4468      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4469          ;
4470   
4471  * // ### Storage Units Free Decommission
4472  * // Restricts the free decommissioning of storage units over the planning period.
4473  * // {Eq_storage_unitsFreeDecom}
4474  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4475      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4476          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4477      ..
4478      sum(years$
4479            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4480              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4481          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4482      + sum(yearsToCalc$
4483            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4484              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4485              and yearsToCalc.val <= yearsSel.val),
4486          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4487      =g=
4488      sum(years$
4489            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4490              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4491              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4492          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4493      + sum(yearsToCalc$
4494            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4495              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4496              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4497          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4498   
4499  * // ### Storage Units Lower Limit
4500  * // Lower bound for the total number of storage units.
4501  * // {Eq_storage_unitsLowerLimit}
4502  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4503      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4504      ..
4505      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4506          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4507      =g=
4508      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4509   
4510  * // ### Storage Units Upper Limit
4511  * // Upper bound for the total number of storage units.
4512  * // {Eq_storage_unitsUpperLimit}
4513  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4514      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4515          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4516      ..
4517      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4518          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4519      =l=
4520      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4521   
4522  * // ### Storage Units Total MIP
4523  * // Fixes the total number of storage units to the corresponding integer variable.
4524  * // {Eq_storage_unitsTotalMIP}
4525  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4526      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4527          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4528      ..
4529      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4530      =e=
4531      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4532   
4533  * // ### Storage Level Lower Limit
4534  * // Lower limit on the storage level.
4535  * // {Eq_storage_levelLowerLimit}
4536  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4537      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4538          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4539      ..
4540      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4541      =g=
4542      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4543      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4544      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4545   
4546  * // ### Storage Level Upper Limit
4547  * // Upper limit on the storage level.
4548  * // {Eq_storage_levelUpperLimit}
4549  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4550      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4551          and not storage_hasDegradation(storage_techs,vintage)
4552          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4553      ..
4554      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4555      =l=
4556      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4557      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4558      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4559   
4560  * // ### Storage Level Upper Limit (degradation)
4561  * // Upper limit on the storage level if the storage technology accounts for degradation.
4562  * // {Eq_storage_levelUpperLimit_degradation}
4563  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4564      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4565          and storage_hasDegradation(storage_techs,vintage)
4566          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4567      ..
4568      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4569      =l=
4570      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4571      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4572      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4573              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4574                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4575                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4576   
4577  * // ### Storage Unit States Sum (degradation)
4578  * // The number of units in all degradation state must match the total unit number.
4579  * // {Eq_storage_unitsBalanceStates}
4580  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4581      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4582        and storage_hasDegradation(storage_techs,vintage))
4583      ..
4584      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4585      =e=
4586      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4587            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4588   
4589  * // ### Storage Unit States Upper Limit(degradation)
4590  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4591  * // {Eq_storage_unitsUpperLimitPerState}
4592  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4593      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4594          and storage_hasDegradation(storage_techs,vintage))
4595      ..
4596      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4597            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4598            + sum(years$(years.val <= yearsSel.val),
4599                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4600      =e=
4601      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4602   
4603  * // ### Storage Unit States Progression (degradation)
4604  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4605  * // {Eq_storage_unitsStatesNoRecovery}
4606  alias(degradation_states, dc_states);
4607  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4608      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4609        and yearsToCalc.val > yearsCom.val
4610        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4611      ..
4612      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4613                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4614              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4615              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4616      =l=
4617      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4618                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4619              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4620              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4621   
4622  * // ### Storage Losses
4623  * // Accumulation of storage losses.
4624  * // {Eq_storage_losses}
4625  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4626      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4627      ..
4628      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4629      =e=
4630      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4631          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4632        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4633            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4634        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4635            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4636            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4637            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4638                and ord(timeModelToCalc)=1))
4639      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4640      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4641      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4642          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4643        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4644          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4645      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4646        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4647          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4648      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4649        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4650                          and storage_validSoCRange(storage_techs,vintage)),
4651              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4652              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4653              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4654   
4655  * // ### C-Rate Limit
4656  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4657  * // {Eq_storage_cRateLimit}
4658  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4659      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4660        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4661      ..
4662      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4663      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4664          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4665      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4666          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4667      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4668          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4669          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4670          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4671              and ord(timeModelToCalc)=1)
4672      =l=
4673      storage_techParam(storage_techs,vintage,"maxCRate")
4674      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4675      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4676   
4677  * // ### E-Rate Limit
4678  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4679  * // {Eq_storage_eRateLimit}
4680  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4681      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4682        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4683      ..
4684      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4685      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4686          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4687      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4688          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4689      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4690          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4691          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4692          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4693              and ord(timeModelToCalc)=1)
4694      =g=
4695      - storage_techParam(storage_techs,vintage,"maxERate")
4696      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4697      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4698   
4699  * // ### Storage Charging
4700  * // Increases in storage levels are accounted as charging amounts.
4701  * // {Eq_storage_charge}
4702  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4703      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4704        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4705      ..
4706      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4707      =g=
4708      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4709      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4710          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4711      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4712          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4713      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4714          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4715          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4716          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4717              and ord(timeModelToCalc)=1);
4718   
4719  * // ### Storage Discharging
4720  * // Decreases in storage levels are accounted as discharging amounts.
4721  * // {Eq_storage_discharge}
4722  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4723      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4724        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4725      ..
4726      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4727      =g=
4728      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4729          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4730      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4731          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4732      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4733          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4734          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4735          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4736              and ord(timeModelToCalc)=1)
4737      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4738   
4739  * // ### Storage Level Sum (degradation)
4740  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4741  * // {Eq_storage_levelStateSum}
4742  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4743      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4744        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4745      ..
4746      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4747      =e=
4748      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4749   
4750  * // ### Storage Level Upper Limit per Age Group (degradation)
4751  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4752  * // {Eq_storage_levelUpperLimitPerAge}
4753  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4754      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4755        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4756      ..
4757      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4758      =l=
4759      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4760      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4761      * sum(degradation_states,
4762              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4763                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4764                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4765   
4766  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4767  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4768  * // {Eq_storage_chargeBasedDegradationDistribution}
4769  alias(years, prev_years);
4770  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4771      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4772        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4773      ..
4774      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
4775          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
4776      =l=
4777      storage_sizeParam(storage_techs,vintage,commodity,"size")
4778      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
4779          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
4780          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
4781             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
4782   
4783  * // ### Storage Charging per Commissioning Year (degradation)
4784  * // Increases in storage levels are accounted as charging amounts.
4785  * // {Eq_storage_chargingPerAge}
4786  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4787      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4788        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4789      ..
4790      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4791      =g=
4792      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4793      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
4794   
4795  * // ### Storage Unit Decommissioning States Sum (degradation)
4796  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
4797  * // {Eq_storage_unitsDecomStateSum}
4798  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
4799      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
4800      ..
4801      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4802      =e=
4803      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4804          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4805   
4806  * // ### Storage Unit Sequential Degradation (degradation)
4807  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
4808  * // {Eq_storage_unitsDegradation}
4809  alias(degradation_states, degradation_states_a, degradation_states_b);
4810  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4811      $(storage_techParam(storage_techs,vintage,"usageDegradation")
4812        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4813      ..
4814      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4815                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
4816                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4817                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
4818                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
4819                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
4820          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
4821      * storage_bigM(storage_techs,vintage)
4822      =g=
4823      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
4824   
4825  * // ### Storage Unit Sequential Degradation Range (degradation)
4826  * // Only one degradation range can be active.
4827  * // {Eq_storage_unitsDegradation_onlyOneRange}
4828  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4829      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4830      ..
4831      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4832            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
4833      =e= 1;
4834   
4835  * // ### Storage Unit Sequential State of Charge (SoC)
4836  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
4837  * // {Eq_storage_unitsSoC}
4838  alias(soc_states, soc_states_a, soc_states_b);
4839  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4840      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4841      ..
4842      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4843                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
4844                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4845                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
4846                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
4847                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
4848          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
4849      * storage_bigM(storage_techs,vintage)
4850      =g=
4851      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
4852   
4853  * // ### Storage Unit Sequential State of Charge Range (SoC)
4854  * // Only one state of charge range can be active.
4855  * // {Eq_storage_unitsSoC_onlyOneRange}
4856  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4857      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4858      ..
4859      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4860            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
4861   
4862  * // ### Storage Unit State of Charge Sum (SoC)
4863  * // Each storage unit must have one state of charge.
4864  * // {Eq_storage_unitsSoC_sum}
4865  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4866      $storage_validSoCRange(storage_techs,vintage)
4867      ..
4868      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4869      =e=
4870      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4871            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4872   
4873  * // ### Storage Level State of Charge Sum (SoC)
4874  * // The total storage level must be represented by units in their specific states of charge.
4875  * // {Eq_storage_levelSoC}
4876  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4877      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
4878      ..
4879      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4880      =e=
4881      storage_sizeParam(storage_techs,vintage,commodity,"size")
4882      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4883              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4884              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
4885   
4886  * // ### C-Rate Limit (SoC)
4887  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4888  * // {Eq_storage_cRateLimit_SoC}
4889  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4890      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4891        and storage_validSoCRange(storage_techs,vintage)
4892        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
4893      ..
4894      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4895      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4896          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4897      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4898          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4899      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4900          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4901          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4902          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4903              and ord(timeModelToCalc)=1)
4904      =l=
4905      storage_sizeParam(storage_techs,vintage,commodity,"size")
4906      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4907                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
4908                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4909   
4910  * // ### E-Rate Limit (SoC)
4911  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4912  * // {Eq_storage_cRateLimit_SoC}
4913  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4914      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4915        and storage_validSoCRange(storage_techs,vintage)
4916        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
4917      ..
4918      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4919      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4920          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4921      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4922          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4923      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4924          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4925          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4926          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4927              and ord(timeModelToCalc)=1)
4928      =g=
4929      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4930      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4931                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
4932                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4933   
4934   
4935  * ==== model definition ====
4936   
4937  Model M_storage
4938  /
4939    Eq_storage_unitsBalance
4940    Eq_storage_unitsBalanceFreeDecom
4941    Eq_storage_unitsFreeDecom
4942    Eq_storage_unitsLowerLimit
4943    Eq_storage_unitsUpperLimit
4944    Eq_storage_levelUpperLimit_degradation
4945    Eq_storage_unitsTotalMIP
4946    Eq_storage_levelLowerLimit
4947    Eq_storage_levelUpperLimit
4950    Eq_storage_losses
4953    Eq_storage_unitsBalanceStates
4954    Eq_storage_unitsUpperLimitPerState
4955    Eq_storage_unitsStatesNoRecovery
4956    Eq_storage_cRateLimit
4957    Eq_storage_eRateLimit
4958    Eq_storage_charge
4959    Eq_storage_discharge
4960    Eq_storage_levelStateSum
4961    Eq_storage_levelUpperLimitPerAge
4962    Eq_storage_chargeBasedDegradationDistribution
4963    Eq_storage_chargingPerAge
4964    Eq_storage_unitsDecomStateSum
4965    Eq_storage_unitsDegradation
4966    Eq_storage_unitsDegradation_onlyOneRange
4967   
4968    Eq_storage_unitsSoC
4969    Eq_storage_unitsSoC_sum
4970    Eq_storage_unitsSoC_onlyOneRange
4971    Eq_storage_levelSoC
4972    Eq_storage_cRateLimit_SoC
4973    Eq_storage_eRateLimit_SoC
4974  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
4976  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4977  * SPDX-License-Identifier: BSD-3-Clause
4978   
4979  * // # core_transfer
4980  * // The equations in this file describe the commodity transfer in the model.
4981   
4982  * // ## Variables
4983  * // {special_table_transfer_variables}
4986   
4991   
5187   
5188  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5189  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5190      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5191   
5192   
5193  * ==== calculation of mappings ====
5194   
5195  * Technologies with a lifeTime > 0 are available
5196  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5197  transfer_availTech(linksModel,years,transfer_techs,vintage)
5198      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5199          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5200   
5201  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5202  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5203      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5204   
5205  * Technologies already built become unavailable if they have a linksBuild of 0
5206  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5207      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5208   
5209  * Used technologies are available technologies over their technical lifeTime
5210  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5211  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5212      $(vintage.val <= years.val
5213          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5214                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5215          ) = yes;
5216   
5217  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5218  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5219  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5220    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5221                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5222      and sum(yearsToCalc
5223        $(sameas(years, yearsToCalc)
5224          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5225          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5226    = yes;
5227   
5228  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5229    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5230                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5231      and sum(yearsToCalc
5232        $(sameas(years, yearsToCalc)
5233          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5234          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5235    = yes;
5236   
5237  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5238  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5239    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5240      and sum(yearsToCalc
5241        $(sameas(years, yearsToCalc)
5242          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5243    = yes;
5244   
5245  * Extend the decom frame to the year after the last year of usedTech
5246  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5247    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5248      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5249    = yes;
5250   
5251   
5252  * // ## Load links from gdx file
5254   
5255   
5256  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5257  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5258   
5259  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5260  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5261      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5262      = 1;
5263   
5264  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5265      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5266      = 1;
5267   
5268  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5269      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5270      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5271   
5272  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5273      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5274      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5275   
5276  * aggregate time dimension
5277  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5278  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5279      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5280      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5281            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5282            / timeLength(timeModelToCalc));
5283  option clear = transfer_flowProfileIn;
5284   
5285  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5286      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5287        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5288      = 1;
5289   
5290  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5291      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5292        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5293      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5294   
5295  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5296      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5297        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5298      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5299   
5300  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5301  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5302      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5303          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5304   
5305  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5306  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5307      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5309   
5310  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5311  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5312      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5313          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5314   
5315  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5316  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5317      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5318   
5319  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5320  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5321      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5322          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5323          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5324      = (1 / sum(linksData
5325                  $links_aggregate(linksModelToCalc,linksData),
5326              1 / ( sum(link_types,
5327                          transfer_lengthParamIn(linksData,link_types,"length")
5328                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5329                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5330   
5331  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5332  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5333      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5334              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5335   
5336  * aggregate coefficient delays per link and reduce based on time resolution
5337  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5339  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5340    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5341      or sum(link_types,
5342          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5343    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5344            + sum(link_types,
5345                transfer_lengthParam(linksModel,link_types,"length")
5346                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5347            / 1);
5349   
5350  * ==== parameter modifications ====
5351  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5352      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5353      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5354  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5355      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5356      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5357   
5358   
5359  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5360   
5361  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5362      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5363      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5364                       and transfer_incidenceData_flip(linksData) = 1),
5365              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5366              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5367          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5368                          and transfer_incidenceData_flip(linksData) = -1),
5369              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5370              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5371      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5372              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5373   
5374  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5375      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5376      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5377                       and transfer_incidenceData_flip(linksData) = 1),
5378              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5379              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5380          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5381                          and transfer_incidenceData_flip(linksData) = -1),
5382              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5383              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5384      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5385              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5386   
5387  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5388      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5389      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5390                       and transfer_incidenceData_flip(linksData) = 1
5391                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5392              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5393          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5394                          and transfer_incidenceData_flip(linksData) = -1
5395                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5396              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5397      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5398                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5399              1);
5400   
5401  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5402      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5403      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5404                       and transfer_incidenceData_flip(linksData) = 1
5405                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5406              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5407          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5408                          and transfer_incidenceData_flip(linksData) = -1
5409                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5410              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5411      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5412                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5413              1);
5414  option clear = transfer_flowProfileIn_aggTime;
5415   
5416  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5417   
5418  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5419      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5420      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5421                       and transfer_incidenceData_flip(linksData) = 1),
5422              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5423              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5424          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5425                          and transfer_incidenceData_flip(linksData) = -1),
5426              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5427              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5428      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5429              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5430   
5431  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5432      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5433      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5434                       and transfer_incidenceData_flip(linksData) = -1),
5435              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5436              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5437          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5438                          and transfer_incidenceData_flip(linksData) = 1),
5439              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5440              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5441      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5442              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5443   
5444  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5445      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5446      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5447                       and transfer_incidenceData_flip(linksData) = 1
5448                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5449              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5450          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5451                          and transfer_incidenceData_flip(linksData) = -1
5452                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5453              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5454      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5455                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5456              1);
5457   
5458  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5459      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5460      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5461                       and transfer_incidenceData_flip(linksData) = -1
5462                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5463              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5464          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5465                          and transfer_incidenceData_flip(linksData) = 1
5466                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5467              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5468      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5469                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5470              1);
5471   
5472  * Mapping for grid segments using DC optimal power flow
5473  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5474  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5475      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5478      = yes;
5481   
5482  * Ensure each grid segment uses exactly one commodity
5483  parameter checkGridSegmentCommodities(gridSegments);
5484  checkGridSegmentCommodities(gridSegments)
5485      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5486                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5487                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5488   
5489  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5490  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5491      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5492                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5493                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5494      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5495   
5496   
5500   
5501  scalar transfer_enableMIP;
5502  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5503   
5504   
5505  * ==== definition of variables ====
5506   
5507  * Initialise variables for linksBuild
5508  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5509      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5510      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5511  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5512      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5513      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5514  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5515      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5516      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5517   
5518  * Initialise variables for linksDecom
5519  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5520      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5521        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5522      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5523                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5524                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5525                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5526          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5527   
5528  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5529    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5530    = sum(years$
5531          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5532            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5533            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5534            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5535        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5536      + sum(yearsToCalc_a$
5537          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5538            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5539            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5540            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5541        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5542   
5543  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5544      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5545          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5546      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5547   
5548   
5550   
5551   
5552  * Calculate planned transfer links expansion
5553  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5554  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5555  loop(years,
5556    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5557      =
5558      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5559          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5560      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5561          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5562      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5563          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5564  );
5565   
5566  * Set initial state for planned units
5567  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5568    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5569   
5570  * // ## Load units from gdx file
5572   
5573  * Calculate if planned links expansion is bound by upper and lower limits
5574  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5575  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5576    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5577          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5578    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5579          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5580      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5581    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5582          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5583      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5584    = yes;
5585   
5586  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5587  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5588    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5589      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5590    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5591  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5592    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5593      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5594    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5595  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5596    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5597      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5598    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5599   
5600  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5601      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5602        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5603      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5604   
5605  * Add parameter for fixing capacities during myopic runs
5606  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5607  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5608  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5609   
5610  * ==== declaration of equations ====
5611   
5612  equations
5613    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5614      ) "Ensures the links balance over the planning period."
5615    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5616      ) "Ensures the links balance over the planning period."
5617    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5618      ) "Restricts the free decommissioning of links over the planning period."
5619    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5620      ) "Upper bound for the total number of links."
5621    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5622      ) "Lower bound for the total number of links."
5623    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5624      ) "Fixes the total number of links to the corresponding integer variable."
5625   
5626    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5627      ) "Upper bound for the flow along the transfer links."
5628    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5629      ) "Upper bound for the flow against the transfer links."
5630    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5631      )
5632    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5633      )
5634    ;
5635   
5636   
5637  * ==== equation definition ====
5638  * // ## Equations
5639  * // ### Transfer Links Balance
5640  * // Ensures that the transfer between nodes is balanced.
5641  * // {Eq_transfer_linksBalance}
5642   
5643  * Equation using build only
5644  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5645      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5646            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5647          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5648          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5649      ..
5650      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5651      =e=
5652      sum ((years_a)
5653              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5654                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5655                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5656                  and years_a.val <= yearsSel.val ),
5657            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5658   
5659      + sum ((yearsToCalc)
5660              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5661                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5662                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5663                  and yearsToCalc.val <= yearsSel.val ),
5664            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5665   
5666  * Equation using build and decom
5667  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5668      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5669            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5670          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5671          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5672      ..
5673      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5674      =e=
5675      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5676        sum(years$sameas(years, yearsToCalc),
5677          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5678            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5679      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5680        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5681          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5682      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5683          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5684      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5685          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5686      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5687          ;
5688   
5689  * // ### Transfer Links Free Decommissioning
5690  * // Balances free link decommissioning.
5691  * // {Eq_transfer_linksFreeDecom}
5692  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5693      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5694          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5695          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5696      ..
5697      sum(years$
5698            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5699              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5700              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5701          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5702      + sum(yearsToCalc$
5703            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5704              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5705              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5706              and yearsToCalc.val <= yearsSel.val),
5707          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5708      =g=
5709      sum(years$
5710            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5711              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5712              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5713          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5714      + sum(yearsToCalc$
5715            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5716              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5717              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5718          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5719   
5720  * // ### Transfer Links Lower Limit
5721  * // Ensures link capacity lower limits.
5722  * // {Eq_transfer_linksLowerLimit}
5723  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5724      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5725      ..
5726      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5727          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5728      =g=
5729      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5730   
5731  * // ### Transfer Links Upper Limit
5732  * // Ensures link capacity upper limits.
5733  * // {Eq_transfer_linksUpperLimit}
5734  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5735      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5736          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5737      ..
5738      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5739          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5740      =l=
5741      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5742   
5743  * // ### Transfer Links Total MIP
5744  * // Ensures number of MIP links.
5745  * // {Eq_transfer_linksTotalMIP}
5746  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5747      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5748          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5749      ..
5750      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5751      =e=
5752      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5753   
5754  * // ### Transfer Links Flow Along Upper Limit
5755  * // Ensures links flow along upper limit.
5756  * // {Eq_transfer_flowAlongUpperLimit}
5757  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5758      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5759      ..
5760      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5761      =l=
5762      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5763      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5764      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5765      ;
5766   
5767  * // ### Transfer Links Flow Against Upper Limit
5768  * // Ensures links flow against upper limit.
5769  * // {Eq_transfer_flowAgainstUpperLimit}
5770  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5771      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5772      ..
5773      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5774      =l=
5775      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
5776      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5777      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5778      ;
5779   
5780  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
5781  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
5782      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5783          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
5784      = yes;
5785   
5786  set transfer_usedOpfLinks(linksModel,years,gridSegments);
5787  option transfer_usedOpfLinks < transfer_usedOpf;
5788   
5789  set transfer_usedOpfSegments(years,gridSegments);
5790  option transfer_usedOpfSegments < transfer_usedOpf;
5791   
5795  * // ### Transfer DC optimal flow angle flows
5796  * // Angle flows.
5797  * // {Eq_transfer_dcopf_cycleFlows}
5798  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
5799      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
5800      ..
5801      sum ((transfer_techs,vintage)
5802              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
5803          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5804              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
5805          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
5806      =e=
5807      sum ( nodesModelSel,
5808          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
5809          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
5813   
5814   
5815  * ==== model definition ====
5816   
5817  Model M_transfer
5818  /
5819    Eq_transfer_linksBalance
5820    Eq_transfer_linksBalanceFreeDecom
5821    Eq_transfer_linksFreeDecom
5822    Eq_transfer_linksLowerLimit
5823    Eq_transfer_linksUpperLimit
5824    Eq_transfer_linksTotalMIP
5825    Eq_transfer_flowAlongUpperLimit
5826    Eq_transfer_flowAgainstUpperLimit
5830    Eq_transfer_dcopf_angleFlows
5834  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
5836  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5837  * SPDX-License-Identifier: BSD-3-Clause
5838   
5839  * // # core_sourcesink
5840  * // The equations in this file describe the sources and sinks in the model.
5841   
5842  * // ## Variables
5843  * // {special_table_sourcesink_variables}
6037   
6038  * // ## Aggregation of profiles
6039  * // Profiles are rescaled based on the annual sum.
6040   
6041  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6042  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6043      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6044  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6045      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6046  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6047      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6048   
6049  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6050  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6051      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6052      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6053   
6054  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6055  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6056      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6057      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6058   
6059  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6060  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6061      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6062          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6063          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6064      = yes;
6065   
6066  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6067              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6068   
6069  * calculate scaling factor for each type
6070  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6071  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6072      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6073          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6074      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6075          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6076              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6077   
6078  * rescale profiles
6079  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6080      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6081      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6082          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6083   
6084  * // ## Aggregation of profiles
6085  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6086   
6087  * ==== aggregation of profiles ====
6088  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6089  option sourcesink_usesProfileIn < sourcesink_profileIn
6090   
6091  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6092  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6093      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6094          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6095      = yes;
6096   
6097  * aagregate time dimension
6098  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6099  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6100    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6101    = sum(timeMapping_t(timeModelToCalc,timeData),
6102            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6103      / timeLength(timeModelToCalc);
6104  option clear = sourcesink_profileIn;
6105   
6106  * sum up absolute profiles
6107  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6108  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6109      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6110      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6111              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6112  option clear = sourcesink_profileIn_aggTime;
6113   
6114  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6115  option sourcesink_enabled < sourcesink_config;
6116   
6120   
6121  * ==== declaration of variables ====
6122  * // ## Bounding of variables
6123  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6124  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6125      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6126          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6127          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6128      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6129   
6130  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6131      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6132          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6133          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6134      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6135   
6136  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6137      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6138          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6139      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6140   
6141  option clear = sourcesink_profile;
6142   
6143   
6144  * ==== equation definition ====
6145  * // ## Equations
6146  equations
6147  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6148      ) "Fixes the annual sum from sources / to sinks"
6149  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6150      ) "Limits the lower sum from sources / to sinks"
6151  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6152      ) "Limits the upper sum from sources / to sinks"
6153    ;
6154   
6155  * // ### Fixed annual sums for sources and sinks
6156  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6157  * // {Eq_sourcesink_useFixedSum}
6158  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6159      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6160          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6161      ..
6162      sum(timeModelSel,
6163          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6164          * timeLength(timeModelSel))
6165      =e=
6166      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6167      * timefrac
6168      ;
6169   
6170  * // ### Lower annual sums for sources and sinks
6171  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6172  * // {Eq_sourcesink_useLowerSum}
6173  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6174      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6175          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6176          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6177      ..
6178      sum(timeModelSel,
6179          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6180          * timeLength(timeModelSel))
6181      =g=
6182      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6183      * timefrac
6184      ;
6185   
6186  * // ### Upper annual sums for sources and sinks
6187  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6188  * // {Eq_sourcesink_useUpperSum}
6189  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6190      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6191          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6192          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6193      ..
6194      sum(timeModelSel,
6195          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6196          * timeLength(timeModelSel))
6197      =l=
6198      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6199      * timefrac
6200      ;
6201   
6202   
6203  * ==== model definition ====
6204   
6205  Model M_sourcesink
6206  /
6207    Eq_sourcesink_useFixedSum
6208    Eq_sourcesink_useLowerSum
6209    Eq_sourcesink_useUpperSum
6210  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
6212  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6213  * SPDX-License-Identifier: BSD-3-Clause
6214   
6215  * // # balance
6216  * // The equations in this file describe the commodity balancing in the model.
6217   
6218  Equations
6219    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6220      ) "Balance for each commodity used in each time step, region, and year";
6221   
6222   
6223  * ==== calculation of mappings ====
6224   
6225  set balance_techComm(techs,commodity);
6226  balance_techComm(converter_techs(techs),commodity)
6227      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6228  balance_techComm(storage_techs(techs),commodity)
6229      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6230  balance_techComm(transfer_techs(techs),commodity)
6231      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6232  balance_techComm(sourcesink_techs(techs),commodity)
6233      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6234   
6235  set balance_usedConverter(nodesModel,years,commodity);
6236  set balance_usedStorage(nodesModel,years,commodity);
6237  set balance_usedTransfer(nodesModel,years,commodity);
6238  set balance_usedSourceSink(nodesModel,years,commodity);
6239  set balance_usedBalance(nodesModel,years,commodity);
6240   
6241  balance_usedConverter(nodesModel,years,commodity)
6242      = sum ((converter_techs,vintage,activity)
6243              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6244                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6245   
6246  balance_usedStorage(nodesModel,years,commodity)
6247      = sum ((storage_techs,vintage,activity)
6248              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6249                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6250   
6251  balance_usedTransfer(nodesModel,years,commodity)
6252      = sum ((linksModel,transfer_techs,vintage)
6253              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6254                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6255   
6256  option balance_usedSourceSink < sourcesink_enabled;
6257   
6258  balance_usedBalance(nodesModel,years,commodity)
6259      $(balance_usedConverter(nodesModel,years,commodity)
6260          or balance_usedStorage(nodesModel,years,commodity)
6261          or balance_usedTransfer(nodesModel,years,commodity)
6262          or balance_usedSourceSink(nodesModel,years,commodity) )
6263      = yes;
6264   
6265   
6266  * ==== equation definition ====
6267   
6268  * // ### Balance commodities
6269  * // Balancing of commodities for all model regions, time steps, and years
6270  * // {Eq_balance_commodities}
6271  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6272      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6273      ..
6274  * converter
6275      sum((converter_techs,vintage,activity)
6276              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6277                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6278          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6279              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6280              * timeLength(timeModelToCalc)
6281          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6282              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6283              * timeLength(timeModelToCalc))
6284   
6285  * storages
6286      + sum((storage_techs,vintage)
6287              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6288                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6289          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6290              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6291          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6292              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6293          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
6294              * storage_sizeParam(storage_techs,vintage,commodity,"size")
6295              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6296              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
6297                  and ord(timeModelToCalc)=1)
6298          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6301          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6302          * timeLength(timeModelSel)
6305          )
6306   
6307  * incoming transfer
6308      + sum((linksModel,transfer_techs,vintage)
6309              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6310                  and linksModelToCalc(linksModel)),
6311          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6312                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6313            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6314                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6315          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6316          * timeLength(timeModelToCalc))
6317   
6318  * outgoing transfer
6319      - sum((linksModel,transfer_techs,vintage)
6320              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6321                  and linksModelToCalc(linksModel)),
6322          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6323                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6324            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6325                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6326          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6327          * timeLength(timeModelSel))
6328   
6329  * transfer losses
6330      + 0.5 * sum((linksModel,transfer_techs,vintage)
6331              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6332                  AND linksModelToCalc(linksModel)),
6333          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6334                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6335            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6336                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6337          * timeLength(timeModelSel)
6338          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
6339              + sum(link_types,
6340                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
6341                  * transfer_lengthParam(linksModel,link_types,"length"))))
6342   
6343  * sourcesink
6344      + sum((sourcesink_techs)
6345              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6346          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6347          * timeLength(timeModelSel))
6348      =e=
6349      0;
6350   
6351   
6352  * ==== model definition ====
6353   
6354  Model M_balance
6355  /
6356    Eq_balance_commodities
6357  /;
6358   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
6360  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6361  * SPDX-License-Identifier: BSD-3-Clause
6362   
6363  * // # accounting_equations
6364   
6365  * ==== declaration of variables ====
6366   
6367  variables
6368  accounting_indicator(accNodesModel,accYears,indicator)
6369  accounting_indicator_links(linksModel,years,indicator)
6370  accounting_objective
6371  ;
6372   
6373   
6374  * ==== definition of variables ====
6375   
6376  accounting_indicator.lo(accNodesModel,accYears,indicator)
6377      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6378          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6379      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6380   
6381  accounting_indicator.up(accNodesModel,accYears,indicator)
6382      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6383          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6384      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6385   
6386  accounting_indicator.fx(accNodesModel,accYears,indicator)
6387      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
6388          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
6389      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6390   
6391   
6392  * set the variable levels to be fixed for years before the optimization years
6393  accounting_indicator.l(accNodesModel,accYears,indicator)
6394      $activeIndicators(accNodesModel,accYears,indicator)
6395      = 0;
6396   
6397   
6398  * ==== declaration of equations ====
6399   
6400  equations
6401  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
6402      ) "Ensures the fixed value of an indicator per accounting region"
6403  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
6404      ) "Ensures the upper limit of an indicator per accounting region"
6405  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
6406      ) "Ensures the lower limit of an indicator per accounting region"
6407  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
6408      ) "Ensures the fixed value of an indicator per model link"
6409  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
6410      ) "Ensures the upper limit of an indicator per model link"
6411  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
6412      ) "Ensures the lower limit of an indicator per model link"
6413  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
6414    ;
6415   
6416   
6417  * ==== equations definition ====
6418  * // ## Equations
6419  * // ### Accounting Indicator Calculation
6420  * // Calculates the fixed limit for accounting indicators.
6421  * // {Eq_accounting_indicatorCalc_fixed}
6422  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
6423      $(activeIndicators(accNodesModel,accYears,indicator)
6424          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6425      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6427  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6428  * SPDX-License-Identifier: BSD-3-Clause
6429   
6430  * == variable indicators ==
6431      sum((accNodesModel_a,accYears_a,indicator_a)
6432          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6433              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6434          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6435          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6436          )
6437   
6438  * == converters ==
6439      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6440              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6441                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6442          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6443          *
6444          ( sum ((converter_techs,vintage)
6445                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6446                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6447              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6448              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6449              )
6450   
6451          + sum ((years_a,converter_techs,vintage)
6452                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6453                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6454                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6455                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6456                          and years_a.val <= yearsSel.val ),
6457              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6458              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6459              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6460              )
6461   
6462          + sum ((yearsToCalc,converter_techs,vintage)
6463                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6464                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6465                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6466                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6467                          and yearsToCalc.val <= yearsSel.val ),
6468              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6469              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6470              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6471              )
6472   
6473          + sum ((converter_techs,vintage)
6474                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6475                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6476              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6477              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6478   
6479          + sum ((converter_techs,vintage)
6480                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6481              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6482              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6483   
6484          + sum ((timeModelSel,converter_techs,vintage,activity)
6485                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6486              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6487              * timeLength(timeModelSel)
6488              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6489          / timefrac
6490   
6491          + sum ((timeModelSel,converter_techs,vintage)
6492                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6493              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6494              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6495          / timefrac
6496   
6497          + sum ((timeModelSel,converter_techs,vintage)
6498                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6499              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6500              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6501                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6502   
6503              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6504              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6505                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6506          / timefrac
6507          )
6508      )
6509   
6510  * == storage ==
6511      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6512              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6513                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6514          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6515          *
6516          ( sum ((storage_techs,vintage)
6517                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6518                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6519              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6520              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6521              )
6522   
6523          + sum ((years_a,storage_techs,vintage)
6524                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6525                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6526                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6527                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6528                          and years_a.val <= yearsSel.val ),
6529              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6530              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6531              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6532              )
6533   
6534          + sum ((yearsToCalc,storage_techs,vintage)
6535                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6536                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6537                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6538                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6539                          and yearsToCalc.val <= yearsSel.val ),
6540              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6541              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6542              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6543              )
6544   
6545          + sum ((storage_techs,vintage)
6546                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6547                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6548              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6549              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6550   
6551          + sum ((storage_techs,vintage)
6552                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6553              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6554              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6555          )
6556      )
6557   
6558   
6559  * == transfer ==
6560      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6561              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6562                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6563          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6564          *
6565          ( sum ((linksModelToCalc,transfer_techs,vintage)
6566                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6567                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6568                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6569              0.5
6570              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6571              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6572   
6573          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6574                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6575                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6576                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6577                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6578                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6579                          and years_a.val <= yearsSel.val ),
6580              0.5
6581              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6582              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6583              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6584   
6585          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6586                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6587                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6588                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6589                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6590                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6591                          and yearsToCalc.val <= yearsSel.val ),
6592              0.5
6593              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6594              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6595              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6596   
6597          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6598                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6599                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6600                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6601              0.5
6602              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6603              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6604              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6605   
6606          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6607                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6608                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6609                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6610                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6611                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6612                          and years_a.val <= yearsSel.val ),
6613              0.5
6614              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6615              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6616              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6617              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6618   
6619          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6620                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6621                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6622                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6623                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6624                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6625                          and yearsToCalc.val <= yearsSel.val ),
6626              0.5
6627              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6628              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6629              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6630              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6631   
6632          + sum ((linksModelToCalc,transfer_techs,vintage)
6633                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6634                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6635                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6636              0.5
6637              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6638              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6639   
6640              + 0.5
6641              * sum (link_types,
6642                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6643                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6644                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6645              ) )
6646   
6647          + sum ((linksModelToCalc,transfer_techs,vintage)
6648                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6649                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6650              0.5
6651              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6652              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6653   
6654              + 0.5
6655              * sum (link_types,
6656                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6657                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6658                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6659   
6660              + 0.5
6661              * sum (timeModelSel,
6662                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6663                  * timeLength(timeModelSel)
6664                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6665                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6666   
6667                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6668                  * timeLength(timeModelSel)
6669                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6670                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6671                  / timefrac
6672   
6673              + 0.5
6674              * sum ((timeModelSel, link_types),
6675                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6676                  * timeLength(timeModelSel)
6677                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6678                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6679                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6680   
6681                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6682                  * timeLength(timeModelSel)
6683                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6684                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6685                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6686                  / timefrac
6687              )
6688          )
6689      )
6690   
6691   
6692  * == sources / sinks ==
6693      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6694              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6695                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6696          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6697          *
6698          sum ((timeModelSel,sourcesink_techs,commodity)
6699                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6700              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6701              * timeLength(timeModelSel)
6702              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6703          / timefrac
6704      )
6705      =e=
6706      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6707   
6708  * // ### Accounting Indicator Calculation
6709  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6710  * // {Eq_accounting_indicatorCalc_upper}
6711  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
6712      $(activeIndicators(accNodesModel,accYears,indicator)
6713          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6714          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6715      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6717  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6718  * SPDX-License-Identifier: BSD-3-Clause
6719   
6720  * == variable indicators ==
6721      sum((accNodesModel_a,accYears_a,indicator_a)
6722          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6723              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6724          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6725          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6726          )
6727   
6728  * == converters ==
6729      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6730              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6731                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6732          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6733          *
6734          ( sum ((converter_techs,vintage)
6735                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6736                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6737              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6738              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6739              )
6740   
6741          + sum ((years_a,converter_techs,vintage)
6742                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6743                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6744                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6745                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6746                          and years_a.val <= yearsSel.val ),
6747              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6748              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6749              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6750              )
6751   
6752          + sum ((yearsToCalc,converter_techs,vintage)
6753                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6754                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6755                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6756                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6757                          and yearsToCalc.val <= yearsSel.val ),
6758              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6759              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6760              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6761              )
6762   
6763          + sum ((converter_techs,vintage)
6764                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6765                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6766              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6767              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6768   
6769          + sum ((converter_techs,vintage)
6770                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6771              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6772              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6773   
6774          + sum ((timeModelSel,converter_techs,vintage,activity)
6775                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6776              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6777              * timeLength(timeModelSel)
6778              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6779          / timefrac
6780   
6781          + sum ((timeModelSel,converter_techs,vintage)
6782                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6783              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6784              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6785          / timefrac
6786   
6787          + sum ((timeModelSel,converter_techs,vintage)
6788                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6789              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6790              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6791                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6792   
6793              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6794              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6795                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6796          / timefrac
6797          )
6798      )
6799   
6800  * == storage ==
6801      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6802              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6803                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6804          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6805          *
6806          ( sum ((storage_techs,vintage)
6807                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6808                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6809              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6810              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6811              )
6812   
6813          + sum ((years_a,storage_techs,vintage)
6814                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6815                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6816                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6817                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6818                          and years_a.val <= yearsSel.val ),
6819              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6820              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6821              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6822              )
6823   
6824          + sum ((yearsToCalc,storage_techs,vintage)
6825                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6826                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6827                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6828                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6829                          and yearsToCalc.val <= yearsSel.val ),
6830              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6831              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6832              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6833              )
6834   
6835          + sum ((storage_techs,vintage)
6836                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6837                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6838              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6839              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6840   
6841          + sum ((storage_techs,vintage)
6842                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6843              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6844              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6845          )
6846      )
6847   
6848   
6849  * == transfer ==
6850      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6851              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6852                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6853          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6854          *
6855          ( sum ((linksModelToCalc,transfer_techs,vintage)
6856                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6857                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6858                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6859              0.5
6860              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6861              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6862   
6863          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6864                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6865                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6866                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6867                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6868                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6869                          and years_a.val <= yearsSel.val ),
6870              0.5
6871              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6872              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6873              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6874   
6875          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6876                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6877                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6878                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6879                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6880                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6881                          and yearsToCalc.val <= yearsSel.val ),
6882              0.5
6883              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6884              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6885              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6886   
6887          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6888                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6889                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6890                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6891              0.5
6892              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6893              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6894              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6895   
6896          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6897                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6898                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6899                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6900                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6901                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6902                          and years_a.val <= yearsSel.val ),
6903              0.5
6904              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6905              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6906              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6907              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6908   
6909          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6910                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6911                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6912                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6913                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6914                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6915                          and yearsToCalc.val <= yearsSel.val ),
6916              0.5
6917              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6918              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6919              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6920              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6921   
6922          + sum ((linksModelToCalc,transfer_techs,vintage)
6923                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6924                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6925                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6926              0.5
6927              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6928              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6929   
6930              + 0.5
6931              * sum (link_types,
6932                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6933                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6934                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6935              ) )
6936   
6937          + sum ((linksModelToCalc,transfer_techs,vintage)
6938                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6939                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6940              0.5
6941              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6942              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6943   
6944              + 0.5
6945              * sum (link_types,
6946                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6947                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6948                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6949   
6950              + 0.5
6951              * sum (timeModelSel,
6952                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6953                  * timeLength(timeModelSel)
6954                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6955                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6956   
6957                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6958                  * timeLength(timeModelSel)
6959                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6960                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6961                  / timefrac
6962   
6963              + 0.5
6964              * sum ((timeModelSel, link_types),
6965                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6966                  * timeLength(timeModelSel)
6967                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6968                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6969                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6970   
6971                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6972                  * timeLength(timeModelSel)
6973                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6974                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6975                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6976                  / timefrac
6977              )
6978          )
6979      )
6980   
6981   
6982  * == sources / sinks ==
6983      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6984              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6985                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6986          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6987          *
6988          sum ((timeModelSel,sourcesink_techs,commodity)
6989                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6990              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6991              * timeLength(timeModelSel)
6992              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6993          / timefrac
6994      )
6995      =l=
6996      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6997   
6998  * // ### Accounting Indicator Calculation
6999  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7000  * // {Eq_accounting_indicatorCalc_lower}
7001  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
7002      $(activeIndicators(accNodesModel,accYears,indicator)
7003          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7004          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7005      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7007  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7008  * SPDX-License-Identifier: BSD-3-Clause
7009   
7010  * == variable indicators ==
7011      sum((accNodesModel_a,accYears_a,indicator_a)
7012          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7013              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7014          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7015          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7016          )
7017   
7018  * == converters ==
7019      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7020              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7021                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7022          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7023          *
7024          ( sum ((converter_techs,vintage)
7025                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7026                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7027              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7028              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7029              )
7030   
7031          + sum ((years_a,converter_techs,vintage)
7032                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7033                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7034                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7035                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7036                          and years_a.val <= yearsSel.val ),
7037              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7038              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7039              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7040              )
7041   
7042          + sum ((yearsToCalc,converter_techs,vintage)
7043                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7044                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7045                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7046                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7047                          and yearsToCalc.val <= yearsSel.val ),
7048              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7049              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7050              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7051              )
7052   
7053          + sum ((converter_techs,vintage)
7054                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7055                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7056              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7057              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7058   
7059          + sum ((converter_techs,vintage)
7060                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7061              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7062              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7063   
7064          + sum ((timeModelSel,converter_techs,vintage,activity)
7065                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7066              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7067              * timeLength(timeModelSel)
7068              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7069          / timefrac
7070   
7071          + sum ((timeModelSel,converter_techs,vintage)
7072                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7073              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7074              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7075          / timefrac
7076   
7077          + sum ((timeModelSel,converter_techs,vintage)
7078                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7079              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7080              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7081                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7082   
7083              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7084              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7085                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7086          / timefrac
7087          )
7088      )
7089   
7090  * == storage ==
7091      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7092              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7093                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7094          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7095          *
7096          ( sum ((storage_techs,vintage)
7097                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7098                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7099              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7100              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7101              )
7102   
7103          + sum ((years_a,storage_techs,vintage)
7104                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7105                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7106                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7107                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7108                          and years_a.val <= yearsSel.val ),
7109              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7110              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7111              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7112              )
7113   
7114          + sum ((yearsToCalc,storage_techs,vintage)
7115                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7116                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7117                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7118                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7119                          and yearsToCalc.val <= yearsSel.val ),
7120              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7121              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7122              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7123              )
7124   
7125          + sum ((storage_techs,vintage)
7126                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7127                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7128              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7129              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7130   
7131          + sum ((storage_techs,vintage)
7132                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7133              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7134              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7135          )
7136      )
7137   
7138   
7139  * == transfer ==
7140      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7141              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7142                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7143          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7144          *
7145          ( sum ((linksModelToCalc,transfer_techs,vintage)
7146                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7147                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7148                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7149              0.5
7150              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7151              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7152   
7153          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7154                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7155                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7156                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7157                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7158                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7159                          and years_a.val <= yearsSel.val ),
7160              0.5
7161              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7162              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7163              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7164   
7165          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7166                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7167                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7168                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7169                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7170                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7171                          and yearsToCalc.val <= yearsSel.val ),
7172              0.5
7173              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7174              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7175              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7176   
7177          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7178                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7179                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7180                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7181              0.5
7182              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7183              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7184              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7185   
7186          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7187                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7188                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7189                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7190                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7191                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7192                          and years_a.val <= yearsSel.val ),
7193              0.5
7194              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7195              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7196              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7197              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7198   
7199          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7200                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7201                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7202                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7203                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7204                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7205                          and yearsToCalc.val <= yearsSel.val ),
7206              0.5
7207              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7208              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7209              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7210              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7211   
7212          + sum ((linksModelToCalc,transfer_techs,vintage)
7213                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7214                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7215                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7216              0.5
7217              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7218              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7219   
7220              + 0.5
7221              * sum (link_types,
7222                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7223                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7224                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7225              ) )
7226   
7227          + sum ((linksModelToCalc,transfer_techs,vintage)
7228                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7229                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7230              0.5
7231              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7232              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7233   
7234              + 0.5
7235              * sum (link_types,
7236                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7237                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7238                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7239   
7240              + 0.5
7241              * sum (timeModelSel,
7242                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7243                  * timeLength(timeModelSel)
7244                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7245                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7246   
7247                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7248                  * timeLength(timeModelSel)
7249                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7250                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7251                  / timefrac
7252   
7253              + 0.5
7254              * sum ((timeModelSel, link_types),
7255                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7256                  * timeLength(timeModelSel)
7257                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7258                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7259                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7260   
7261                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7262                  * timeLength(timeModelSel)
7263                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7264                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7265                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7266                  / timefrac
7267              )
7268          )
7269      )
7270   
7271   
7272  * == sources / sinks ==
7273      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7274              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7275                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7276          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7277          *
7278          sum ((timeModelSel,sourcesink_techs,commodity)
7279                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7280              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7281              * timeLength(timeModelSel)
7282              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7283          / timefrac
7284      )
7285      =g=
7286      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7287   
7288   
7289  * // ### Accounting Indicator Calculation Links
7290  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7291  * // {Eq_accounting_indicatorCalc_links_fixed}
7292  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
7293      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7294          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7295      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7297  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7298  * SPDX-License-Identifier: BSD-3-Clause
7299   
7300      sum ((transfer_techs,vintage)
7301                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7302                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7303          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7304          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7305   
7306      + sum ((years_a,transfer_techs,vintage)
7307                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7308                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7309                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7310                      and years_a.val <= yearsSel.val ),
7311          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7312          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7313          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7314   
7315      + sum ((transfer_techs,vintage,link_types)
7316                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7317                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7318          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7319          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7320          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7321   
7322      + sum ((years_a,transfer_techs,vintage,link_types)
7323                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7324                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7325                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7326                      and years_a.val <= yearsSel.val ),
7327          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7328          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7329          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7330          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7331   
7332      + sum ((transfer_techs,vintage)
7333                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7334                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7335          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7336          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7337   
7338          + sum (link_types,
7339              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7340              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7341              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7342          ) )
7343   
7344      + sum ((transfer_techs,vintage)
7345                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7346          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7347          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7348   
7349          + sum (link_types,
7350              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7351              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7352              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7353   
7354          + sum (timeModelSel,
7355              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7356              * timeLength(timeModelSel)
7357              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7358                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7359   
7360              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7361              * timeLength(timeModelSel)
7362              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7363                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7364              / timefrac
7365   
7366          + sum ((timeModelSel, link_types),
7367              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7368              * timeLength(timeModelSel)
7369              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7370              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7371                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7372   
7373              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7374              * timeLength(timeModelSel)
7375              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7376              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7377                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7378              / timefrac
7379          )
7380      =e=
7381  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
7382   
7383  * // ### Accounting Indicator Calculation Links
7384  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7385  * // {Eq_accounting_indicatorCalc_links_upper}
7386  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
7387      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7388          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
7389          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7390      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7392  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7393  * SPDX-License-Identifier: BSD-3-Clause
7394   
7395      sum ((transfer_techs,vintage)
7396                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7397                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7398          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7399          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7400   
7401      + sum ((years_a,transfer_techs,vintage)
7402                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7403                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7404                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7405                      and years_a.val <= yearsSel.val ),
7406          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7407          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7408          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7409   
7410      + sum ((transfer_techs,vintage,link_types)
7411                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7412                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7413          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7414          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7415          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7416   
7417      + sum ((years_a,transfer_techs,vintage,link_types)
7418                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7419                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7420                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7421                      and years_a.val <= yearsSel.val ),
7422          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7423          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7424          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7425          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7426   
7427      + sum ((transfer_techs,vintage)
7428                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7429                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7430          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7431          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7432   
7433          + sum (link_types,
7434              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7435              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7436              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7437          ) )
7438   
7439      + sum ((transfer_techs,vintage)
7440                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7441          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7442          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7443   
7444          + sum (link_types,
7445              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7446              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7447              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7448   
7449          + sum (timeModelSel,
7450              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7451              * timeLength(timeModelSel)
7452              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7453                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7454   
7455              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7456              * timeLength(timeModelSel)
7457              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7458                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7459              / timefrac
7460   
7461          + sum ((timeModelSel, link_types),
7462              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7463              * timeLength(timeModelSel)
7464              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7465              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7466                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7467   
7468              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7469              * timeLength(timeModelSel)
7470              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7471              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7472                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7473              / timefrac
7474          )
7475      =l=
7476  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
7477   
7478  * // ### Accounting Indicator Calculation Links
7479  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7480  * // {Eq_accounting_indicatorCalc_links_lower}
7481  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
7482      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7483          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
7484          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7485      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7487  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7488  * SPDX-License-Identifier: BSD-3-Clause
7489   
7490      sum ((transfer_techs,vintage)
7491                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7492                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7493          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7494          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7495   
7496      + sum ((years_a,transfer_techs,vintage)
7497                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7498                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7499                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7500                      and years_a.val <= yearsSel.val ),
7501          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7502          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7503          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7504   
7505      + sum ((transfer_techs,vintage,link_types)
7506                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7507                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7508          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7509          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7510          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7511   
7512      + sum ((years_a,transfer_techs,vintage,link_types)
7513                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7514                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7515                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7516                      and years_a.val <= yearsSel.val ),
7517          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7518          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7519          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7520          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7521   
7522      + sum ((transfer_techs,vintage)
7523                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7524                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7525          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7526          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7527   
7528          + sum (link_types,
7529              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7530              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7531              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7532          ) )
7533   
7534      + sum ((transfer_techs,vintage)
7535                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7536          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7537          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7538   
7539          + sum (link_types,
7540              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7541              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7542              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7543   
7544          + sum (timeModelSel,
7545              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7546              * timeLength(timeModelSel)
7547              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7548                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7549   
7550              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7551              * timeLength(timeModelSel)
7552              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7553                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7554              / timefrac
7555   
7556          + sum ((timeModelSel, link_types),
7557              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7558              * timeLength(timeModelSel)
7559              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7560              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7561                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7562   
7563              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7564              * timeLength(timeModelSel)
7565              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7566              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7567                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7568              / timefrac
7569          )
7570      =g=
7571  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
7572   
7573   
7574  * // ### Accounting Objective
7575  * // Calculates the indicators for the objective.
7576  * // {Eq_accounting_objective}
7577  Eq_accounting_objective
7578      ..
7579      accounting_objective
7580      =e=
7581      sum ((accNodesModel,accYears,indicator)
7582              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7583          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
7584          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7586  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7587  * SPDX-License-Identifier: BSD-3-Clause
7588   
7589  * == variable indicators ==
7590      sum((accNodesModel_a,accYears_a,indicator_a)
7591          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7592              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7593          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7594          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7595          )
7596   
7597  * == converters ==
7598      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7599              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7600                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7601          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7602          *
7603          ( sum ((converter_techs,vintage)
7604                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7605                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7606              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7607              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7608              )
7609   
7610          + sum ((years_a,converter_techs,vintage)
7611                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7612                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7613                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7614                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7615                          and years_a.val <= yearsSel.val ),
7616              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7617              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7618              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7619              )
7620   
7621          + sum ((yearsToCalc,converter_techs,vintage)
7622                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7623                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7624                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7625                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7626                          and yearsToCalc.val <= yearsSel.val ),
7627              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7628              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7629              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7630              )
7631   
7632          + sum ((converter_techs,vintage)
7633                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7634                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7635              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7636              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7637   
7638          + sum ((converter_techs,vintage)
7639                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7640              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7641              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7642   
7643          + sum ((timeModelSel,converter_techs,vintage,activity)
7644                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7645              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7646              * timeLength(timeModelSel)
7647              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7648          / timefrac
7649   
7650          + sum ((timeModelSel,converter_techs,vintage)
7651                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7652              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7653              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7654          / timefrac
7655   
7656          + sum ((timeModelSel,converter_techs,vintage)
7657                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7658              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7659              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7660                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7661   
7662              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7663              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7664                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7665          / timefrac
7666          )
7667      )
7668   
7669  * == storage ==
7670      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7671              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7672                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7673          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7674          *
7675          ( sum ((storage_techs,vintage)
7676                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7677                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7678              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7679              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7680              )
7681   
7682          + sum ((years_a,storage_techs,vintage)
7683                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7684                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7685                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7686                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7687                          and years_a.val <= yearsSel.val ),
7688              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7689              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7690              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7691              )
7692   
7693          + sum ((yearsToCalc,storage_techs,vintage)
7694                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7695                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7696                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7697                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7698                          and yearsToCalc.val <= yearsSel.val ),
7699              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7700              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7701              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7702              )
7703   
7704          + sum ((storage_techs,vintage)
7705                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7706                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7707              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7708              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7709   
7710          + sum ((storage_techs,vintage)
7711                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7712              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7713              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7714          )
7715      )
7716   
7717   
7718  * == transfer ==
7719      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7720              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7721                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7722          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7723          *
7724          ( sum ((linksModelToCalc,transfer_techs,vintage)
7725                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7726                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7727                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7728              0.5
7729              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7730              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7731   
7732          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7733                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7734                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7735                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7736                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7737                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7738                          and years_a.val <= yearsSel.val ),
7739              0.5
7740              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7741              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7742              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7743   
7744          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7745                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7746                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7747                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7748                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7749                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7750                          and yearsToCalc.val <= yearsSel.val ),
7751              0.5
7752              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7753              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7754              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7755   
7756          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7757                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7758                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7759                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7760              0.5
7761              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7762              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7763              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7764   
7765          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7766                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7767                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7768                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7769                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7770                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7771                          and years_a.val <= yearsSel.val ),
7772              0.5
7773              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7774              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7775              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7776              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7777   
7778          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7779                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7780                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7781                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7782                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7783                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7784                          and yearsToCalc.val <= yearsSel.val ),
7785              0.5
7786              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7787              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7788              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7789              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7790   
7791          + sum ((linksModelToCalc,transfer_techs,vintage)
7792                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7793                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7794                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7795              0.5
7796              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7797              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7798   
7799              + 0.5
7800              * sum (link_types,
7801                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7802                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7803                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7804              ) )
7805   
7806          + sum ((linksModelToCalc,transfer_techs,vintage)
7807                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7808                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7809              0.5
7810              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7811              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7812   
7813              + 0.5
7814              * sum (link_types,
7815                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7816                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7817                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7818   
7819              + 0.5
7820              * sum (timeModelSel,
7821                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7822                  * timeLength(timeModelSel)
7823                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7824                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7825   
7826                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7827                  * timeLength(timeModelSel)
7828                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7829                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7830                  / timefrac
7831   
7832              + 0.5
7833              * sum ((timeModelSel, link_types),
7834                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7835                  * timeLength(timeModelSel)
7836                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7837                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7838                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7839   
7840                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7841                  * timeLength(timeModelSel)
7842                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7843                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7844                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7845                  / timefrac
7846              )
7847          )
7848      )
7849   
7850   
7851  * == sources / sinks ==
7852      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7853              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7854                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7855          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7856          *
7857          sum ((timeModelSel,sourcesink_techs,commodity)
7858                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7859              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7860              * timeLength(timeModelSel)
7861              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7862          / timefrac
7863      )
7864      )
7865   
7866   
7867  * ==== model definition ====
7868   
7869  Model M_accounting
7870  /
7871  Eq_accounting_indicatorCalc_fixed
7872  Eq_accounting_indicatorCalc_upper
7873  Eq_accounting_indicatorCalc_lower
7874  Eq_accounting_indicatorCalc_links_fixed
7875  Eq_accounting_indicatorCalc_links_upper
7876  Eq_accounting_indicatorCalc_links_lower
7877  Eq_accounting_objective
7878  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
7880  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7881  * SPDX-License-Identifier: BSD-3-Clause
7882   
7883  * ==== optimization frames ====
7885   
7886  * mapping from optimization frame to years
7888  set optiframe / of1 * of1 /;
7889  set optiframeToCalc(optiframe);
7890   
7892  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7894   
7896   
7897  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
7899  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7900  * SPDX-License-Identifier: BSD-3-Clause
7901   
7902  * ==== Overview of model dimensions ====
7903  parameters  acts(converter_techs) "active technologies"
7904              asts(storage_techs) "active storage technologies"
7905              atts(transfer_techs) "active transfer technologies"
7906   
7907  scalars nd "number of dispatch time steps per year"
7908          nn "number of network nodes"
7909          nl "number of network links"
7910          nt "number of converter, storage and transfer technologies"
7911          nc "number of commodities"
7912          ny "number of years of the capacity planning horizon";
7913   
7914  option acts < converter_availTech;
7915  option asts < storage_availTech;
7916  option atts < transfer_availTech;
7917   
7918  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
7919  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
7920  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
7921  nt = sum (storage_techs $asts(storage_techs), 1)
7922      + sum (converter_techs $acts(converter_techs), 1)
7923      + sum (transfer_techs $atts(transfer_techs), 1);
7924  nc = card(commodity);
7925  ny = sum (years $yearsToCalc(years), 1);
7926   
7927  file props / '' /;
7928  put props;
7929  put "### Model properties  ###" /;
7930  put "Number of active dispatch time steps per year: " nd:0:0  /;
7931  put "Number of active network nodes: " nn:0:0  /;
7932  put "Number of active network links: " nl:0:0  /;
7933  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
7934  put "Number of commodities: " nc:0:0  /;
7935  put "Number of years considered for capacity expansion: " ny:0:0  /;
7936  putclose;
7937   
7938  Model remix /
7939    M_converter
7940    M_storage
7941    M_transfer
7942    M_sourcesink
7943    M_balance
7944    M_accounting
7945  /;
7946   
7950   
7951  * ==== include methods  ====
7954   
7955  * check if the method is valid
7960   
7961   
7962  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
7964  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7965  * SPDX-License-Identifier: BSD-3-Clause
7966   
7969   
7972   
7973  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
7975  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7976  * SPDX-License-Identifier: BSD-3-Clause
7977   
7981   
7982  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
7984  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7985  * SPDX-License-Identifier: BSD-3-Clause
7986   
7990   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
7992  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7993  * SPDX-License-Identifier: BSD-3-Clause
7994   
7996   
7998   
7999  * ==== GAMS solver options ====
8005   
8006  * ==== REMix debug options ====
8010   
8011  * ==== REMix solver defaults ====
8019   
8027   
8037   
8045   
8054   
8055   
8056  * ==== setup optimization ====
8057  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8058     option limRow=0, limCol=0, solPrint=off;
8059  else
8060     option limRow=100000, limCol=100000, solPrint=on;
8061  );
8062   
8063   
8064  * ==== Solver specific default values ====
8065   
8085   
8086   
8088   
8089   
8091   
8092  option mip = cplex;
8093  option reslim = 1209600;
8094  option optcr = 1e-3;
8095  remix.threads = 8;
8096  remix.optFile = 1;
8097  remix.solveLink = 0;
8098  remix.holdFixed = 1;
8099   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8102  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8103  * SPDX-License-Identifier: BSD-3-Clause
8104   
8106   
8108  file opt / "cplex.opt" /;
8109  put opt;
8110  put "names no" /;
8111  put "rerun no" /;
8112   
8113  put "lpmethod 4" /;
8114  put "threads 8" /;
8115  put "barorder 3" /;
8116   
8118  put "scaind 0" /;
8119  put "predual -1" /;
8120   
8123  put "barepcomp 1e-6" /;
8125  put "solutiontype 2" /;
8126  put "epgap 1e-3" /;
8127   
8129  put "iis 0" /;
8130  put "quality 1" /;
8131   
8134  putclose;
8136   
8137   
8139   
8140   
8142   
8143   
8145   
8146   
8148   
8149   
8151   
8152   
8154   
8155   
8157   
8159   
8160   
8161  * ==== solve the problem ====
8162   
8163  loop ( optiframeToCalc,
8164      yearsSel(years) = no;
8165      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8166      yearsToFix(years) = no;
8167      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8168      accYearsSel(accYears) = no;
8169      accYearsSel("horizon") = yes;
8170      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8171      accYearsToFix(accYears) = no;
8172      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8173      timeModelSel(timeModel) = no;
8174      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8175      nodesModelSel(nodesModel) = no;
8176      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8177   
8178  * Fix decision for years previously optimized in case of myopic or foresight
8179      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8180          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8181          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8182              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8183      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8184          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8185   
8186      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8187          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8188          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8189              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8190      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8191          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8192   
8193      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8194          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8195              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8196                  sum(years$sameas(years, yearsToCalc),
8197                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8198                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8199              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8200                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
8201                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
8202      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8203          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
8204   
8205      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8206          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8207          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8208              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8209   
8210      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8211          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8212          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8213              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
8214   
8215      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8216          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8217      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8218          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8219      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8220          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8221      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8222          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8223      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8224          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8225   
8226   
8227      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8228          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8229          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8230              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8231      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8232          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8233   
8234      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8235          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8236          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8237              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8238      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8239          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8240   
8241      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8242          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
8243              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8244                  sum(years$sameas(years, yearsToCalc),
8245                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
8246                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
8247              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8248                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
8249                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
8250      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8251          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
8252   
8253      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8254          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8255          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8256              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
8257   
8258      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8259          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8260          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8261              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
8262   
8263      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8264          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8265      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8266          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8267      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8268          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8269      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8270          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8271      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8272          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8273   
8274   
8275      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8276          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8277          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8278              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8279      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8280          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8281   
8282      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8283          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8284          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
8285              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
8286      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8287          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8288   
8289      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8290          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
8291              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8292                  sum(years$sameas(years, yearsToCalc),
8293                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
8294                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
8295              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8296                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
8297                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
8298      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8299          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
8300   
8301      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8302          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8303          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8304              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8305   
8306      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8307          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8308          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8309              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8310   
8311      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8312          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8313      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8314          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8315      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8316          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8317      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8318          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8319      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8320          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8321   
8322      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8323          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8324   
8325  * Optimize and log values
8326      solve remix minimizing accounting_objective using mip;
8327      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8328      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8329   
8330  );
8331   
8335   
8336  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
8338  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8339  * SPDX-License-Identifier: BSD-3-Clause
8340   
8344   
8345  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
8347  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8348  * SPDX-License-Identifier: BSD-3-Clause
8349   
8353   
8354  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
8356  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8357  * SPDX-License-Identifier: BSD-3-Clause
8358   
8362   
8363  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
8365  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8366  * SPDX-License-Identifier: BSD-3-Clause
8367   
8370   
8371  * ==== indicator accounting ====
8372   
8373  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
8374      =
8375  * == converters ==
8376      sum ((converter_techs(techs),vintage)
8377                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8378                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
8379          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8380          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
8381   
8382      + sum ((years_a,converter_techs(techs),vintage)
8383                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8384                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
8385                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
8386                      and years_a.val <= yearsToCalc.val ),
8387          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
8388          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
8389          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
8390   
8391      + sum ((converter_techs(techs),vintage)
8392                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8393                      and converter_techParam(converter_techs,vintage,"freeDecom")),
8394          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8395          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
8396   
8397      + sum ((converter_techs(techs),vintage)
8398                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8399          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8400          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
8401   
8402      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
8403                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
8404          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8405          * timeLength(timeModelToCalc)
8406          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
8407          / timefrac
8408   
8409      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8410                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8411          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8412          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
8413          / timefrac
8414   
8415      + sum ((timeModelToCalc,converter_techs(techs),vintage)
8416                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
8417          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8418          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8419              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
8420   
8421          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8422          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8423              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
8424          / timefrac
8425   
8426  * == storage ==
8427      + sum ((storage_techs(techs),vintage)
8428                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8429                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
8430          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8431          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
8432   
8433      + sum ((years_a,storage_techs(techs),vintage)
8434                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8435                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
8436                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
8437                      and years_a.val <= yearsToCalc.val ),
8438          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8439          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
8440          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
8441   
8442      + sum ((storage_techs(techs),vintage)
8443                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8444                      and storage_techParam(storage_techs,vintage,"freeDecom")),
8445          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8446          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
8447   
8448      + sum ((storage_techs(techs),vintage)
8449                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8450          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8451          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
8452   
8453  * == transfer ==
8454      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8455                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8456                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8457                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8458          0.5
8459          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8460          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8461   
8462      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
8463                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8464                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8465                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
8466                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8467                      and years_a.val <= yearsToCalc.val ),
8468          0.5
8469          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8470          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
8471          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
8472   
8473      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
8474                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8475                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8476                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8477          0.5
8478          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8479          * transfer_lengthParam(linksModel,link_types,"length")
8480          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8481   
8482      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
8483                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8484                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8485                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8486                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8487                      and years_a.val <= yearsToCalc.val ),
8488          0.5
8489          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8490          * transfer_lengthParam(linksModel,link_types,"length")
8491          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8492          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
8493   
8494      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8495                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
8496                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8497                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8498          0.5
8499          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8500          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8501   
8502          + 0.5
8503          * sum (link_types,
8504              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8505              * transfer_lengthParam(linksModel,link_types,"length")
8506              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8507          ) )
8508   
8509   
8510      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8511                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8512                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8513          + 0.5
8514          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8515          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8516   
8517          + 0.5
8518          * sum (link_types,
8519              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8520              * transfer_lengthParam(linksModel,link_types,"length")
8521              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8522   
8523          + 0.5
8524          * sum (timeModelToCalc,
8525              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8526              * timeLength(timeModelToCalc)
8527              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8528                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8529   
8530              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8531              * timeLength(timeModelToCalc)
8532              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8533                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8534              / timefrac
8535   
8536          + 0.5
8537          * sum ((timeModelToCalc, link_types),
8538              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8539              * timeLength(timeModelToCalc)
8540              * transfer_lengthParam(linksModel,link_types,"length")
8541              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8542                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8543   
8544              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8545              * timeLength(timeModelToCalc)
8546              * transfer_lengthParam(linksModel,link_types,"length")
8547              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8548                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8549              / timefrac
8550          )
8551   
8552   
8553  * == sources / sinks ==
8554      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8555              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8556          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8557          * timeLength(timeModelToCalc)
8558          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8559      / timefrac
8560      ;
8561   
8562   
8563  * ==== full set of main indicators ====
8564   
8565  indicator_accounting(accNodesModel,accYears,indicator)
8566      $sum((accNodesModel_a,accYears_a,indicator_a)
8567              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8568      =
8569      + sum((accNodesModel_a,accYears_a,indicator_a)
8570              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8571                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8572          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8573          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8574   
8575      + sum((accNodesModel_a,accYears_a,indicator_a)
8576              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8577          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8578          * (sum((nodesModelToCalc,yearsToCalc,techs)
8579                  $(sameas(accNodesModel_a, nodesModelToCalc)
8580                      and sameas(accYears_a, yearsToCalc)),
8581                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8582      ;
8583   
8584  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8585      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8586      =
8587          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8588          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8589              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8590   
8591          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8592          * (sum((nodesModelToCalc,yearsToCalc,techs)
8593                  $(sameas(accNodesModel_a, nodesModelToCalc)
8594                      and sameas(accYears_a, yearsToCalc)),
8595                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8596      ;
8597   
8598  indicator_accounting_var(accNodesModel,accYears,indicator)
8599      $accounting_indicator.l(accNodesModel,accYears,indicator)
8600      = accounting_indicator.l(accNodesModel,accYears,indicator);
8601   
8602  indicator_accounting_ref(accNodesModel,accYears,indicator)
8603      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8606  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8607  * SPDX-License-Identifier: BSD-3-Clause
8608   
8609  * == variable indicators ==
8610      sum((accNodesModel_a,accYears_a,indicator_a)
8611          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8612              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8613          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8614          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8615          )
8616   
8617  * == converters ==
8618      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8619              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8620                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8621          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8622          *
8623          ( sum ((converter_techs,vintage)
8624                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8625                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8626              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8627              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8628              )
8629   
8630          + sum ((years_a,converter_techs,vintage)
8631                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8632                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8633                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8634                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8635                          and years_a.val <= yearsSel.val ),
8636              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8637              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8638              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8639              )
8640   
8641          + sum ((yearsToCalc,converter_techs,vintage)
8642                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8643                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8644                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8645                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8646                          and yearsToCalc.val <= yearsSel.val ),
8647              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8648              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8649              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8650              )
8651   
8652          + sum ((converter_techs,vintage)
8653                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8654                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8655              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8656              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8657   
8658          + sum ((converter_techs,vintage)
8659                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8660              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8661              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8662   
8663          + sum ((timeModelSel,converter_techs,vintage,activity)
8664                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8665              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8666              * timeLength(timeModelSel)
8667              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8668          / timefrac
8669   
8670          + sum ((timeModelSel,converter_techs,vintage)
8671                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8672              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8673              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8674          / timefrac
8675   
8676          + sum ((timeModelSel,converter_techs,vintage)
8677                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8678              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8679              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8680                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8681   
8682              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8683              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8684                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8685          / timefrac
8686          )
8687      )
8688   
8689  * == storage ==
8690      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8691              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8692                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8693          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8694          *
8695          ( sum ((storage_techs,vintage)
8696                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8697                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8698              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8699              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8700              )
8701   
8702          + sum ((years_a,storage_techs,vintage)
8703                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8704                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8705                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8706                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8707                          and years_a.val <= yearsSel.val ),
8708              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8709              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8710              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8711              )
8712   
8713          + sum ((yearsToCalc,storage_techs,vintage)
8714                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8715                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8716                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8717                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8718                          and yearsToCalc.val <= yearsSel.val ),
8719              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8720              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8721              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8722              )
8723   
8724          + sum ((storage_techs,vintage)
8725                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8726                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8727              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8728              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8729   
8730          + sum ((storage_techs,vintage)
8731                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8732              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8733              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8734          )
8735      )
8736   
8737   
8738  * == transfer ==
8739      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8740              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8741                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8742          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8743          *
8744          ( sum ((linksModelToCalc,transfer_techs,vintage)
8745                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8746                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8747                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8748              0.5
8749              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8750              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8751   
8752          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8753                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8754                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8755                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8756                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8757                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8758                          and years_a.val <= yearsSel.val ),
8759              0.5
8760              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8761              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8762              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8763   
8764          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8765                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8766                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8767                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8768                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8769                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8770                          and yearsToCalc.val <= yearsSel.val ),
8771              0.5
8772              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8773              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8774              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8775   
8776          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8777                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8778                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8779                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8780              0.5
8781              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8782              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8783              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8784   
8785          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8786                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8787                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8788                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8789                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8790                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8791                          and years_a.val <= yearsSel.val ),
8792              0.5
8793              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8794              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8795              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8796              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8797   
8798          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8799                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8800                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8801                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8802                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8803                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8804                          and yearsToCalc.val <= yearsSel.val ),
8805              0.5
8806              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8807              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8808              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8809              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8810   
8811          + sum ((linksModelToCalc,transfer_techs,vintage)
8812                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8813                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8814                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8815              0.5
8816              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8817              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8818   
8819              + 0.5
8820              * sum (link_types,
8821                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8822                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8823                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8824              ) )
8825   
8826          + sum ((linksModelToCalc,transfer_techs,vintage)
8827                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8828                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8829              0.5
8830              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8831              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8832   
8833              + 0.5
8834              * sum (link_types,
8835                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8836                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8837                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8838   
8839              + 0.5
8840              * sum (timeModelSel,
8841                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8842                  * timeLength(timeModelSel)
8843                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8844                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8845   
8846                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8847                  * timeLength(timeModelSel)
8848                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8849                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8850                  / timefrac
8851   
8852              + 0.5
8853              * sum ((timeModelSel, link_types),
8854                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8855                  * timeLength(timeModelSel)
8856                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8857                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8858                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8859   
8860                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8861                  * timeLength(timeModelSel)
8862                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8863                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8864                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8865                  / timefrac
8866              )
8867          )
8868      )
8869   
8870   
8871  * == sources / sinks ==
8872      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8873              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8874                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8875          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8876          *
8877          sum ((timeModelSel,sourcesink_techs,commodity)
8878                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8879              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8880              * timeLength(timeModelSel)
8881              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8882          / timefrac
8883      )
8885  ;
8886   
8887   
8888  * ==== link-specific indicator accounting ====
8889   
8890  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8891      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8892          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8893      =
8894      sum ((transfer_techs(techs),vintage)
8895                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8896                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8897          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8898          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8899   
8900      + sum ((years_a,transfer_techs(techs),vintage)
8901                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8902                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8903                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8904                      and years_a.val <= yearsToCalc.val ),
8905          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8906          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8907          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8908   
8909      + sum ((transfer_techs(techs),vintage,link_types)
8910                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8911                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8912          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8913          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8914          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8915   
8916      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8917                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8918                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8919                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8920                      and years_a.val <= yearsToCalc.val ),
8921          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8922          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8923          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8924          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8925   
8926      + sum ((transfer_techs(techs),vintage)
8927                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8928          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8929          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8930   
8931          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8932          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8933   
8934          + sum (link_types,
8935              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8936              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8937              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8938   
8939              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8940              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8941              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8942   
8943          + sum (timeModelToCalc,
8944              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8945              * timeLength(timeModelToCalc)
8946              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8947                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8948   
8949              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8950              * timeLength(timeModelToCalc)
8951              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8952                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8953              / timefrac
8954   
8955          + sum ((timeModelToCalc, link_types),
8956              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8957              * timeLength(timeModelToCalc)
8958              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8959              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8960                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8961   
8962              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8963              * timeLength(timeModelToCalc)
8964              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8965              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8966                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8967              / timefrac
8968      );
8969   
8970   
8971  * == converter capacities ==
8972   
8973  converter_ratedInput(converter_techs,vintage,commodity)
8974      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8975      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8976              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8977  converter_ratedInput(converter_techs,vintage,commodity)
8978      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8979      = 0;
8980   
8981  converter_ratedOutput(converter_techs,vintage,commodity)
8982      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8983      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8984              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8985  converter_ratedOutput(converter_techs,vintage,commodity)
8986      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8987      = 0;
8988   
8989  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8990      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8991          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8992      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8993              and converter_ratedOutput(converter_techs,vintage,commodity)),
8994          converter_ratedOutput(converter_techs,vintage,commodity));
8995   
8996  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8997      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8998          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8999      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9000              and converter_ratedOutput(converter_techs,vintage,commodity)),
9001          converter_ratedOutput(converter_techs,vintage,commodity));
9002   
9003  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9004      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9005   
9006  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9007      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9008   
9009  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9010  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9011      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9012       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9013      = sum(years_a$
9014            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9015             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9016             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9017        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9018   
9019  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9020      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9021   
9022  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9023      $(converter_ratedOutput(converter_techs,vintage,commodity))
9024      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9025          * converter_ratedOutput(converter_techs,vintage,commodity);
9026   
9027  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9028      = sum(vintage,
9029          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9030  option clear = converter_caps_ext;
9031   
9032  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9033      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9034          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9035          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9036      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9037          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9038   
9039  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9040      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9041          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9042          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9043      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9044          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9045   
9046  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9047      = sum((nodesModelToCalc,years)
9048              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9049                  and map_accYearsPostCalc(accYears,years)),
9050          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9051  option clear = converter_caps_novintage_ext;
9052   
9053  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9054      = sum((nodesModelToCalc,years)
9055              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9056                  and map_accYearsPostCalc(accYears,years)),
9057          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9058  option clear = converter_units_ext;
9059   
9060  * ==== transfer capacities ====
9061   
9062  max_transfer_coefficient(transfer_techs(techs),commodity)
9063          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9064          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9065   
9066  min_transfer_coefficient(transfer_techs(techs),commodity)
9067          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9068          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9069   
9070  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9071      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9072          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9073          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9074      = yes;
9075   
9076  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9077      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9078   
9079  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9080      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9081   
9082  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9083  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9084      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9085       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9086      = sum(years_a$
9087            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9088             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9089             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9090        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9091   
9092  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9093      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9094   
9095  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9096      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9097          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9098                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9099      = sum(vintage,
9100          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9101          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9102   
9103  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9104      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9105          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9106          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9107                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9108      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9109          * min_transfer_coefficient(transfer_techs,commodity);
9110   
9111  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9112      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9113          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9114          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9115                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9116      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9117          * max_transfer_coefficient(transfer_techs,commodity);
9118   
9119   
9120  * ==== transfer flows ====
9121   
9122  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9123      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9124      = sum(vintage,
9125          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9126              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9127          * timeLength(timeModelToCalc)
9128          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9129   
9130  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9131      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9132      = sum(timeModelToCalc,
9133          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9134   
9135  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9136      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9137      = sum(timeModelToCalc
9138              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9139          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9140   
9141  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9142      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9143      = sum(timeModelToCalc
9144              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9145          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9146   
9147  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9148      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9149      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9150          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9151   
9152  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9153      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9154          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9155          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9156      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9157          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9158   
9159  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9160      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9161          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9162              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9163      = -1 * abs(sum(vintage,
9164          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9165              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9166          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9167              + sum(link_types,
9168                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9169                  * transfer_lengthParam(linksModel,link_types,"length")))))
9170          * timeLength(timeModelToCalc);
9171   
9172  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9173      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9174          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9175              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9176      = sum(timeModelToCalc,
9177          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9178   
9179   
9180  * ==== storage capacities ====
9181   
9182  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9183      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9184              and storage_usedCom(storage_techs,vintage,commodity)
9185              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9186      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9187              and storage_usedCom(storage_techs,vintage,commodity)
9188              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9189          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9190   
9191  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9192      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9193              and storage_usedCom(storage_techs,vintage,commodity)
9194              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9195      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9196              and storage_usedCom(storage_techs,vintage,commodity)
9197              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9198          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9199   
9200  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9201      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9202      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9203   
9204  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9205      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9206      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9207   
9208  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
9209  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9210      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
9211       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9212      = sum(years_a$
9213            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9214             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9215             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9216        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
9217   
9218  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9219      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9220   
9221  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9222      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9223      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9224          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9225   
9226  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
9227      = sum(vintage,
9228          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9229   
9230  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9231      $(storage_usedCom(storage_techs,vintage,commodity)
9232          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9233               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9234      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9235                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9236                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9237                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9238  option clear = storage_caps_ext;
9239   
9240  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
9241      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9242          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9243      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9244          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9245   
9246  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
9247      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9248          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9249      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9250          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9251   
9252  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9253      = sum((nodesModelToCalc,years)
9254              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9255                  and map_accYearsPostCalc(accYears,years)),
9256          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
9257  option clear = storage_caps_novintage_ext;
9258   
9259  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9260      = sum((nodesModelToCalc,years)
9261              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9262                  and map_accYearsPostCalc(accYears,years)),
9263          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9264  option clear = storage_units_ext;
9265   
9266   
9267  * ==== storage levels and flows ====
9268   
9269  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9270      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9271      =
9272      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9273      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9274          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9275      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9276          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9277      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9278          * storage_sizeParam(storage_techs,vintage,commodity,"size")
9279          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9280          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9281              and ord(timeModelToCalc)=1)
9283      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9284          * timeLength(timeModelToCalc)
9286      ;
9287   
9288  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9289      = sum((nodesModelToCalc,yearsToCalc,vintage)
9290              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9291          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9292  option clear = storage_flows_ext;
9293   
9294  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9295      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9296      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9297   
9298  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9299      = sum((nodesModelToCalc,yearsToCalc,vintage)
9300              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9301          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9302  option clear = storage_level_out_ext;
9303   
9304  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9305      = sum(timeModelToCalc,
9306          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9307   
9308  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9309      = sum(timeModelToCalc
9310              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9311          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9312   
9313  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9314      = sum(timeModelToCalc
9315              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9316          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9317   
9318  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
9319      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9320          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9321   
9322  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9323      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
9324          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9325      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
9326          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9327   
9328  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9329      = sum((nodesModelToCalc,yearsToCalc,vintage)
9330              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9331                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9332                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9333          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9334          * timeLength(timeModelToCalc));
9335   
9336  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9337      = sum(timeModelToCalc,
9338          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9339   
9340   
9341  * == commodity balance ==
9342   
9343  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
9344      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9345          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
9346      = sum((activity)
9347              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
9348          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9349              * timeLength(timeModelToCalc)
9350              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
9351          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9352              * timeLength(timeModelToCalc)
9353              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
9354   
9355  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9356      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9357          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
9358      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
9359          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9360              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9361          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9362              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9363          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9364              * storage_sizeParam(storage_techs,vintage,commodity,"size")
9365              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9366              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9367                  and ord(timeModelToCalc)=1)
9368          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9369      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9370      * timeLength(timeModelToCalc);
9371   
9372  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
9373      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9374          and sameas(yearsToCalc,vintage))
9375      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
9376      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9377      * timeLength(timeModelToCalc);
9378   
9379  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
9380      $sum((linksModel)
9381          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9382                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9383                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
9384      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
9385      + sum((linksModel)
9386              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
9387                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9388                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
9389   
9390  * incoming transfer flows
9391              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9392                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
9393                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
9394                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
9395              * timeLength(timeModelToCalc)
9396              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9397   
9398  * outgoing transfer flows
9399              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9400                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
9401                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9402                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
9403              * timeLength(timeModelToCalc)
9404              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
9405   
9406              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9407                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
9408                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9409                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
9410                      * timeLength(timeModelToCalc)
9411                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9412                          + sum(link_types,
9413                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9414                              * transfer_lengthParam(linksModel,link_types,"length")))))
9415      ;
9416   
9417  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9418      = sum((nodesModelToCalc,yearsToCalc,vintage)
9419              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9420                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9421                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9422          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9423  option clear = commodity_balance_ext;
9424   
9425   
9426  * ==== annual commodity sums ====
9427   
9428  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
9429      = sum(timeModelToCalc,
9430          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9431   
9432  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9433      = sum(timeModelToCalc
9434              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9435          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9436   
9437  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9438      = sum(timeModelToCalc
9439              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9440          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9441   
9442  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9443      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9444          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9445   
9446  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9447      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
9448          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9449      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9450          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9451   
9452   
9453  * ==== marginal information ====
9454   
9455  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9456    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9457    =
9458    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9459   
9460  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9461      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9462      =
9463      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9464   
9465  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9466      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9467          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9468          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9469      =
9470      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9471      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9472      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9473   
9474  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
9475  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9476      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
9477      =
9478      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9479          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
9480  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9481      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
9482      =
9483      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9484          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
9485  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9486      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
9487      =
9488      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9489          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
9492   
9493  * ==== R2A postcalc information ====
9494   
9496   
9497   
9498  * ==== round profiles to reduce size of gdx ====
9499   
9501  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9502      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9503      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9504   
9505  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9506      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9507      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9508   
9509  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9510      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9511      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9512   
9513  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9514      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9515      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9516   
9517  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9518      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9519      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9520   
9521  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9522      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9523      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9524   
9525  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9526      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9527      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9529   
9530  * ==== Dump diagnostics ====
9531   
9532  diagnostics("variables") = remix.numVar;
9533  diagnostics("equations") = remix.numEqu;
9534  diagnostics("iterations") = remix.iterUsd;
9535   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
9539  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9540  * SPDX-License-Identifier: BSD-3-Clause
9541   
9544   
9545  execute_unload "./results\PIC_trial_2.gdx"
9547      metadata
9549      timeModel
9550      timeModelToCalc
9551      nodesModel
9552      linksModel
9553      indicator
9554      commodity
9555      techs
9556      accNodesModel
9557      accYears
9558   
9559      map_nodesModel
9560      map_linksModel
9561      map_nodesAccounting
9562   
9563      indicator_accounting
9564      indicator_accounting_var
9565      indicator_accounting_ref
9566      indicator_accounting_comp
9567      indicator_accounting_detailed
9568      indicator_accounting_links
9569   
9570      converter_caps
9571      converter_units
9573   
9574      transfer_caps
9575      transfer_links
9576      transfer_flows
9577      transfer_flows_annual
9578      transfer_losses
9579      transfer_losses_annual
9580   
9581      storage_caps
9582      storage_units
9583      storage_flows
9584      storage_level_out
9585      storage_flows_annual
9586      storage_losses_out
9587      storage_losses_annual
9589   
9590      commodity_balance
9591      commodity_balance_annual
9592   
9593      marginals_balance
9594      marginals_sourcesink_profile
9595      marginals_sourcesink_sum
9596      marginals_indicator_bounds
9597   
9599      diagnostics
9600      ;
9603   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/12/25 16:54:28 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/12/25 16:54:28\"\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    55      412 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_activities.csv
    56      420 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    57      422 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_gridsegments.csv
    58      430 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    59      432 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_linksdata.csv
    60      450 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    61      452 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_link_types.csv
    62      461 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    63      461 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    64      467 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_commodities.csv
    65      476 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    66      476 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    67      482 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_indicators.csv
    68      491 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    69      491 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    70      505 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    71      505 INCLUDE       29     303  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    72      509 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    73      512 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    74      512 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    75      520 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    76      520 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    77      532 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_converter_techs.csv
    78      536 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    79      536 INCLUDE       29     319  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    80      538 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_storage_techs.csv
    81      543 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    82      544 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_transfer_techs.csv
    83      548 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    84      548 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    85      552 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_sourcesink_techs.csv
    86      562 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    87      564 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_degradation_states.csv
    88      573 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    89      575 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_soc.csv
    90      591 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    91      593 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linkstartend.csv
    92      607 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    93      718 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    94      720 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\set_accnodes.csv
    95      785 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    96      787 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\map_accnodes.csv
    97      840 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    98      872 IF EXIST      97      32  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
    99      872 INCLUDE       97      32  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   100      895 IF EXIST      97      34  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterunits.csv
   101      909 IF EXIST      97      48  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   102      911 IF EXIST      97      50  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converteractivity.csv
   103      928 IF EXIST      97      67  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   104      930 IF EXIST      97      69  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_converterstartup.csv
   105      949 IF EXIST      97      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   106      949 INCLUDE       97      88  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   107      954 IF EXIST      97      90  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_storageunits.csv
   108      976 IF EXIST      97     112  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   109      978 IF EXIST      97     114  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferlinks.csv
   110     1000 IF EXIST      97     136  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   111     1002 IF EXIST      97     138  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_transferperlength.csv
   112     1017 IF EXIST      97     153  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   113     1017 INCLUDE       97     153  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   114     1034 IF EXIST      97     155  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_sourcesinkflow.csv
   115     1048 IF EXIST      97     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   116     1048 INCLUDE       97     169  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   117     1054 IF EXIST      97     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_perindicator.csv
   118     1080 IF EXIST      97     197  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   119     1080 INCLUDE       97     197  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   120     1084 IF EXIST      97     199  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds.csv
   121     1103 IF EXIST      97     218  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   122     1105 IF EXIST      97     220  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   123     1111 BATINCLUDE    97     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1179 BATINCLUDE    97     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1231 BATINCLUDE    97     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1283 BATINCLUDE    97     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1351 BATINCLUDE    97     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   128     1419 BATINCLUDE    97     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   129     1487 BATINCLUDE    97     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   130     1947 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   131     2022 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   132     2029 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   133     2036 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   134     2053 IF DEXIST    133      17  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\results\
   135     2271 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   136     2284 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   137     2387 IF EXIST     136     103  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   138     2387 INCLUDE      136     103  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   139     2504 IF EXIST     136     105  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_capacityparam.csv
   140     2512 BATINCLUDE   136     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   141     2523 BATINCLUDE   136     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   142     2556 IF EXIST     136     137  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   143     2556 INCLUDE      136     137  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   144     2569 IF EXIST     136     139  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_techparam.csv
   145     2591 IF EXIST     136     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   146     2591 INCLUDE      136     161  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   147     2705 IF EXIST     136     162  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   148     2707 IF EXIST     136     164  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_activityprofile.csv
   149     2728 IF EXIST     136     185  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   150     2728 INCLUDE      136     185  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   151     2745 IF EXIST     136     186  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   152     2746 IF EXIST     136     187  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   153     2748 IF EXIST     136     189  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficient.csv
   154     2761 IF EXIST     136     202  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   155     2762 IF EXIST     136     203  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   156     2764 IF EXIST     136     205  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\converter_coefficientprofile.csv
   157     3765 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   158     3858 IF EXIST     157      93  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   159     3858 INCLUDE      157      93  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   160     3875 IF EXIST     157      95  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_reservoirparam.csv
   161     3879 BATINCLUDE   157      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   162     3890 BATINCLUDE   157     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   163     3901 BATINCLUDE   157     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   164     3937 IF EXIST     157     127  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   165     3937 INCLUDE      157     127  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   166     3941 IF EXIST     157     129  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_techparam.csv
   167     3962 IF EXIST     157     150  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   168     3962 INCLUDE      157     150  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   169     3966 IF EXIST     157     152  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_sizeparam.csv
   170     3983 IF EXIST     157     169  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   171     3985 IF EXIST     157     171  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_socparam.csv
   172     4004 IF EXIST     157     190  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   173     4006 IF EXIST     157     192  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_degradationparam.csv
   174     4035 IF EXIST     157     221  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   175     4036 IF EXIST     157     222  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   176     4038 IF EXIST     157     224  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\storage_levelprofile.csv
   177     4975 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   178     5040 IF EXIST     177      71  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   179     5042 IF EXIST     177      73  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_linksparam.csv
   180     5058 IF EXIST     177      89  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   181     5060 IF EXIST     177      91  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_flowprofile.csv
   182     5080 IF EXIST     177     111  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   183     5082 IF EXIST     177     113  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_techparam.csv
   184     5097 IF EXIST     177     128  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   185     5099 IF EXIST     177     130  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefficient.csv
   186     5113 IF EXIST     177     144  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   187     5115 IF EXIST     177     146  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperflow.csv
   188     5130 IF EXIST     177     161  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   189     5132 IF EXIST     177     163  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_coefperlength.csv
   190     5146 IF EXIST     177     177  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   191     5148 IF EXIST     177     179  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_reactperlength.csv
   192     5162 IF EXIST     177     193  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   193     5164 IF EXIST     177     195  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_lengthparam.csv
   194     5178 IF EXIST     177     209  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   195     5180 IF EXIST     177     211  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\transfer_gridsegments.csv
   196     5835 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   197     5873 IF EXIST     196      38  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   198     5873 INCLUDE      196      38  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   199     5918 IF EXIST     196      40  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_config.csv
   200     5922 BATINCLUDE   196      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   201     5950 IF EXIST     196      62  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   202     5950 INCLUDE      196      62  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   203     5966 IF EXIST     196      63  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   204     5967 IF EXIST     196      64  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   205     5969 IF EXIST     196      66  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_profile.csv
   206     5989 IF EXIST     196      86  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   207     5989 INCLUDE      196      86  ...C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   208     6020 IF EXIST     196      88  ..C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\225a\sourcesink_annualsum.csv
   209     6023 BATINCLUDE   196      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   210     6211 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   211     6359 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   212     6426 INCLUDE      211      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     6716 INCLUDE      211      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   214     7006 INCLUDE      211      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   215     7296 INCLUDE      211     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   216     7391 INCLUDE      211     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   217     7486 INCLUDE      211     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   218     7585 INCLUDE      211     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   219     7879 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   220     7898 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   221     7963 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   222     7974 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   223     7983 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   224     7991 INCLUDE      223       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   225     8101 INCLUDE      223       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   226     8337 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   227     8346 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   228     8355 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   229     8364 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   230     8605 INCLUDE      229     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   231     9538 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        3.797 SECONDS     29 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/12/25 16:54:28 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8326


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 3.000E-04, 1.000E+03] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 2.370E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/12/25 16:54:28 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8326


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    2,467,830
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    2,345,148
NON ZERO ELEMENTS     6,168,047


GENERATION TIME      =       10.093 SECONDS  1,471 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       18.078 SECONDS  1,471 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/12/25 16:54:28 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8326


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8326

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              199.0695

 RESOURCE USAGE, LIMIT         55.750   1209600.000
 ITERATION COUNT, LIMIT        69    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 832.83 Mb (peak 850.73 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 72.97 Mb (peak 189.24 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 54.91sec (det. 56025.20 ticks)


Optimal solution found
Objective:          199.069484

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        2.910e-06   1.091e-04   2.910e-06   1.091e-04
dual infeasibility          2.600e-09   2.642e-05   2.600e-09   2.642e-05
primal residual             6.054e-13   2.746e-12   6.054e-13   2.746e-12
dual residual               6.411e-08   4.057e-03   6.411e-08   4.057e-03
primal solution vector      7.614e+01   2.854e+04   7.614e+01   2.854e+04
dual solution vector        2.370e+02   8.098e+04   2.370e+02   8.098e+04
slacks                      9.956e+02   2.762e+04   9.956e+02   2.762e+04
reduced costs               3.200e+02   2.638e+04   3.200e+02   2.638e+04
comp. slackness viol.       2.622e-04   7.995e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/12/25 16:54:28 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\cplex.opt


EXECUTION TIME       =       13.500 SECONDS  1,273 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\run_remix.lst
