GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/28/25 15:28:26 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/28/25 15:28:26"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-Pacific_Island_Countries\Process\data"
  83   
  84  project_hash "6e9668bd777b20f8d9046df09078f977cb37b3f1"
  85   
  86  project_branch "main"
  87   
  88  /;
  89   
  92   
  94   
  95   
  96   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  98  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  99  * SPDX-License-Identifier: BSD-3-Clause
 100   
 103   
 108   
 109  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 131  ;
 132   
 136   
 137  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 142  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 143  * SPDX-License-Identifier: BSD-3-Clause
 144   
 145  * ==== global settings ====
 154   
 158   
 161   
 165  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 167  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 168  * SPDX-License-Identifier: BSD-3-Clause
 169   
 170  * // # sets
 171  * // Sets are the indices of variables and parameters.
 172   
 173  * // ## Reference
 174  * // {special_table_sets}
 175   
 176  * // ## Input Files
 177  * // {special_table_set_input_files}
 817   
 818  map_accNodes(accNodesModel,accNodesModel_aggregation)
 819      $sum((nodesData, nodesModelToCalc)
 820              $( sameas(nodesModelToCalc,accNodesModel)
 821                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 822                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 823   
 824  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 825  map_accNodes(accNodesModel,accNodesModel) = yes;
 826  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 827  map_accLinks(accLinksModel,accLinksModel) = yes;
 828  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 829  map_accYears(accYears,accYears) = yes;
 830   
 831  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 832      $sum((nodesData)
 833              $( map_accNodesLoad(nodesData,accNodesModel)
 834                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 835   
 836  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 837  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 838  map_accLinksToCalc("global",linksModelToCalc) = yes;
 839  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 840  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 841  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 842   
 843  * Duplicate sets for postcalc reporting without horizon and accYears
 844  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 845  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 846  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 847  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 848   
 849  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 850  option map_nodesAccounting < map_accNodes;
 851   
 852  * ==== Generic sets  ====
 853  * These set names are repeated across different profile parameters.
 854  * they are not strictly related to each other and are not input data but
 855  * are needed for validation.
 856  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 857   
 858  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 859  * "Scenario indexes help to differentiate scenarios." /
 860   
 861  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 862  * "Capacity types differentiate investment decisions." /
 863   
 864  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 865  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 867  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 868  * SPDX-License-Identifier: BSD-3-Clause
 869   
 870  * // # accounting_input
 871  * // The parameters in this file describe the accounting of indicators in the model.
 872   
 873  * // ## Variables
 874  * // {special_table_input_variables}
1232   
1233  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1235  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1236  * SPDX-License-Identifier: BSD-3-Clause
1237   
1239   
1241   
1242  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1243  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1244      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1245      = yes;
1246   
1248  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1249  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1250      $sum((nodesData,accnodesData)
1251              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1252                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1253      = smax((nodesData,accnodesData)
1254              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1255                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1256          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1257      - smin((nodesData,accnodesData)
1258              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1259                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1260          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1261   
1262  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1264   
1265  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1266  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1267      $sum((nodesData,accnodesData)
1268              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1269                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1270      = sum((nodesData,accnodesData)
1271              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1272                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1273          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1274      / sum((nodesData,accnodesData)
1275              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1276                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1277          1);
1278   
1279  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1280  loop(accnodes,
1281  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1282      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1283                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1284      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1285              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1286  );
1287   
1288  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1289      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1290      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1291   
1292  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1293  loop(accYears,
1294  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1295      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1296              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1297      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1298              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1299  );
1300   
1301  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1303  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1304  * SPDX-License-Identifier: BSD-3-Clause
1305   
1307   
1309   
1310  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1311  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1312      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1313      = yes;
1314   
1316   
1317  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1318  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1319      $sum((nodesData,accnodesData)
1320              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1321                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1322      = sum((nodesData,accnodesData)
1323              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1324                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1325          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1326      / sum((nodesData,accnodesData)
1327              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1328                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1329          1);
1330   
1331  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1332  loop(accnodes,
1333  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1334      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1335                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1336      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1337              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1338  );
1339   
1340  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1341      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1342      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1343   
1344  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1345  loop(accYears,
1346  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1347      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1348              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1349      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1350              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1351  );
1352   
1353  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1355  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1356  * SPDX-License-Identifier: BSD-3-Clause
1357   
1359   
1361   
1362  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1363  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1364      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1365      = yes;
1366   
1368   
1369  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1370  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1371      $sum((nodesData,accnodesData)
1372              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1373                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1374      = sum((nodesData,accnodesData)
1375              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1376                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1377          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1378      / sum((nodesData,accnodesData)
1379              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1380                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1381          1);
1382   
1383  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1384  loop(accnodes,
1385  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1386      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1387                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1388      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1389              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1390  );
1391   
1392  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1393      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1394      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1395   
1396  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1397  loop(accYears,
1398  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1399      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1400              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1401      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1402              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1403  );
1404   
1405  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1407  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1408  * SPDX-License-Identifier: BSD-3-Clause
1409   
1411   
1413   
1414  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1415  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1416      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1417      = yes;
1418   
1420  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1421  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1422      $sum((nodesData,accnodesData)
1423              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1424                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1425      = smax((nodesData,accnodesData)
1426              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1427                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1428          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1429      - smin((nodesData,accnodesData)
1430              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1431                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1432          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1433   
1434  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1436   
1437  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1438  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1439      $sum((nodesData,accnodesData)
1440              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1441                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1442      = sum((nodesData,accnodesData)
1443              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1444                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1445          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1446      / sum((nodesData,accnodesData)
1447              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1448                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1449          1);
1450   
1451  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1452  loop(accnodes,
1453  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1454      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1455                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1456      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1457              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1458  );
1459   
1460  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1461      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1462      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1463   
1464  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1465  loop(accYears,
1466  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1467      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1468              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1469      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1470              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1471  );
1472   
1473  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1475  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1476  * SPDX-License-Identifier: BSD-3-Clause
1477   
1479   
1481   
1482  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1483  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1484      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1485      = yes;
1486   
1488  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1489  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1490      $sum((linksData,acclinksData)
1491              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1492                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1493      = smax((linksData,acclinksData)
1494              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1495                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1496          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1497      - smin((linksData,acclinksData)
1498              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1499                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1500          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1501   
1502  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1504   
1505  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1506  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1507      $sum((linksData,acclinksData)
1508              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1509                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1510      = sum((linksData,acclinksData)
1511              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1512                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1513          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1514      / sum((linksData,acclinksData)
1515              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1516                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1517          1);
1518   
1519  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1520  loop(acclinks,
1521  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1522      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1523                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1524      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1525              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1526  );
1527   
1528  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1529      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1530      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1531   
1532  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1533  loop(accYears,
1534  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1535      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1536              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1537      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1538              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1539  );
1540   
1541  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1543  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1544  * SPDX-License-Identifier: BSD-3-Clause
1545   
1547   
1549   
1550  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1551  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1552      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1553      = yes;
1554   
1556  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1557  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1558      $sum((linksData,acclinksData)
1559              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1560                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1561      = smax((linksData,acclinksData)
1562              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1563                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1564          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1565      - smin((linksData,acclinksData)
1566              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1567                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1568          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1569   
1570  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1572   
1573  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1574  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1575      $sum((linksData,acclinksData)
1576              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1577                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1578      = sum((linksData,acclinksData)
1579              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1580                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1581          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1582      / sum((linksData,acclinksData)
1583              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1584                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1585          1);
1586   
1587  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1588  loop(acclinks,
1589  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1590      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1591                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1592      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1593              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1594  );
1595   
1596  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1597      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1598      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1599   
1600  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1601  loop(accYears,
1602  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1603      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1604              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1605      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1606              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1607  );
1608   
1609  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1611  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1612  * SPDX-License-Identifier: BSD-3-Clause
1613   
1615   
1617   
1618  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1619  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1620      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1621      = yes;
1622   
1624   
1625  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1626  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1627      $sum((nodesData,accnodesData)
1628              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1629                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1630      = sum((nodesData,accnodesData)
1631              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1632                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1633          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1634      / sum((nodesData,accnodesData)
1635              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1636                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1637          1);
1638   
1639  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1640  loop(accnodes,
1641  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1642      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1643                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1644      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1645              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1646  );
1647   
1648  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1649      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1650      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1651   
1652  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1653  loop(accYears,
1654  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1655      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1656              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1657      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1658              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1659  );
1660   
1661  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1662   
1663  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1664  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1665      = sum((linksData)$sameas(linksModelToCalc,linksData),
1666              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1667   
1668  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1669      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1670              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1671   
1672  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1673  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1674      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1675          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1676   
1677  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1678      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1679      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1680              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1681          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1682   
1683  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1684  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1685      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1686      = yes;
1687   
1688  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1689  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1690      $sum((nodesDataToCalc,accnodesData)
1691              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1692                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1693      = sum((nodesDataToCalc,accnodesData)
1694              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1695                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1696          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1697      / sum((nodesDataToCalc,accnodesData)
1698              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1699                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1700          1);
1701   
1702  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1703   
1704  loop(accNodes,
1705  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1706      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1707              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1708          and map_accNodes(accNodesModel,accNodes)
1709              )
1710      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1711              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1712   
1713  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1714      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1715              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1716          and map_accNodes(accNodesModel,accNodes)
1717          and not sameas(accYears, "horizon"))
1718      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1719              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1720  );
1721   
1722  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1723      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1724          and sameas(accNodesModel,nodesModelToCalc)), 1)
1725      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1726          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1727   
1728  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1729      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1730          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1731      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1732          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1733   
1734   
1735  * Make sure all required indicators end up in the model
1736  set variableIndicators(accNodesModel,accYears,indicator);
1737  variableIndicators(accNodesModel,accYears,indicator)
1738     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1739        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1740     = yes;
1741   
1742  set activeIndicators(accNodesModel,accYears,indicator);
1743  activeIndicators(accNodesModel,accYears,indicator)
1744     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1749        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1750        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1751        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1752          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1753     = yes;
1754   
1755  set activeIndicators_links(linksModel,years,indicator);
1756  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1757     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1758        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1759        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1760     = yes;
1761   
1762  * Clear other dependencies and only add self mapping for variable and qp indicators
1763  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1764      $(variableIndicators(accNodesModel,accYears,indicator))
1765      = 0;
1766  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1767      $(variableIndicators(accNodesModel,accYears,indicator))
1768      = 1;
1769   
1770  * Calculate length of years and discount rates per indicator
1771  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1772  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1773      $(map_accYears(accYears_a,accYears)
1774          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1775      = 1;
1776   
1777  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1778      $(map_accYears(accYears_a,accYears)
1779          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1780          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1781      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1782   
1783  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1784      $(map_accYears(accYears_a,accYears)
1785          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1786          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1787          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1788          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1789      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1790   
1791  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1792      $(map_accYears(accYears_a,accYears)
1793          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1794          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1795          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1796      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1797          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1798                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1799   
1800  * Add self mapping for variable and qp indicators
1801  yearFactor(accNodesModel,accYears,indicator,accYears)
1802      $(variableIndicators(accNodesModel,accYears,indicator))
1803      = 1;
1804   
1805   
1806  * ==== calculate compound indicators for the optimization ====
1807  scalar compIndicators_pre;
1808  scalar compIndicators_post;
1809   
1810  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1811  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1812      $(activeIndicators(accNodesModel,accYears,indicator))
1813      = 1;
1814   
1815  set compoundIndicators_act(accNodesModel,accYears,indicator);
1816  option compoundIndicators_act < compoundIndicators;
1817   
1818  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1819  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1820  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1821      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1822   
1823  compIndicators_pre = 0;
1824  compIndicators_post = 1;
1825   
1826  option sparseval = 1;
1827  while(compIndicators_pre < compIndicators_post,
1828      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1829          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1830   
1831      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1832          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1833              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1834              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1835              and map_accYears(accYears_aa,accYears_a))
1836          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1837              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1838   
1839      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1840   
1841      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1842          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1843              and sum((accNodesModel_a,accYears_a,indicator_a)
1844                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1845          = sum((accNodesModel_a,accYears_a,indicator_a)
1846                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1847              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1848   
1849      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1850          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1851              and sum((accNodesModel_a,accYears_a,indicator_a)
1852                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1853          = sum((accNodesModel_a,accYears_a,indicator_a)
1854                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1855                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1856              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1857          / sum((accNodesModel_a,accYears_a,indicator_a)
1858                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1859                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1860   
1861      option compoundIndicators_act < compoundIndicators;
1862      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1863          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1864  );
1865  option sparseval = 0;
1866   
1867  * map to sub-years and sub-nodes
1868  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1869      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1870          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1871          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1872          and map_accYears(accYears_aa,accYears_a)
1873          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1874      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1875          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1876   
1877  * Remove all accounting regions and accounting years
1878  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1879      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1880          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1881          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1882              or sameas("horizon",accYears_aa)))
1883      = 0;
1884   
1885  * Remove all slack indicators except the ones declared in indicatorBounds
1886  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1887      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1888          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1889                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1890          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1891      = 0;
1892   
1893   
1894  * Map from extended parameter to final parameter
1895  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1896  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1897      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1898          and sum((accNodesModel_a,accYears_a,indicator_a)
1899                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1900      = sum((accNodesModel_a,accYears_a,indicator_a)
1901              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1902          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1903   
1904  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1905      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1906          and sum((accNodesModel_a,accYears_a,indicator_a)
1907                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1908      = sum((accNodesModel_a,accYears_a,indicator_a)
1909              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1910                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1911          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1912      / sum((accNodesModel_a,accYears_a,indicator_a)
1913              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1914                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1915   
1916  * Remove all accounting regions and accounting years
1917  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1918      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1919          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1920          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1921              or sameas("horizon",accYears_aa)))
1922      = 0;
1923   
1924  * Remove all slack indicators except the ones declared in indicatorBounds
1925  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1926      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1927          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1928          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1929      = 0;
1930   
1931   
1932  * ==== compound indicators for the post calculation ====
1933  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1934  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1935      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1936          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1937   
1938  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1939      $(activeIndicators(accNodesModel,accYears,indicator)
1940          or variableIndicators(accNodesModel,accYears,indicator))
1941      = 1;
1942   
1943  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1944  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1945   
1946  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1947  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1948  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1949   
1950  compIndicators_pre = 0;
1951  compIndicators_post = 1;
1952   
1953  option sparseval = 1;
1954  while(compIndicators_pre < compIndicators_post,
1955      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1956          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1957   
1958      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1959          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1960              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1961              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1962              and map_accYears(accYears_aa,accYears_a))
1963          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1964              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1965   
1966      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1967   
1968      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1969          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1970              and sum((accNodesModel_a,accYears_a,indicator_a)
1971                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1972          = sum((accNodesModel_a,accYears_a,indicator_a)
1973                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1974              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1975   
1976      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1977          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1978              and sum((accNodesModel_a,accYears_a,indicator_a)
1979                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1980          = sum((accNodesModel_a,accYears_a,indicator_a)
1981                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1982                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1983              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1984          / sum((accNodesModel_a,accYears_a,indicator_a)
1985                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1986                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1987   
1988      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1989      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1990          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1991  );
1992  option sparseval = 0;
1993   
1994  * map to sub-years and sub-nodes
1995  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1996      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1997          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1998          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1999          and map_accYears(accYears_aa,accYears_a)
2000          and map_accNodes(accNodesModel_aa,accNodesModel_a))
2001      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
2002          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
2003   
2004  * Remove all accounting regions and accounting years
2005  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2006      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2007          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2008          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2009              or sameas("horizon",accYears_aa)))
2010      = 0;
2011   
2012  * Remove all slack indicators except the ones declared in indicatorBounds
2013  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2014      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
2015          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
2016                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
2017          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2018      = 0;
2019   
2020   
2021  * Map from extended parameter to final parameter
2022  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
2023  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2024      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2025          and sum((accNodesModel_a,accYears_a,indicator_a)
2026                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
2027      = sum((accNodesModel_a,accYears_a,indicator_a)
2028              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
2029          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
2030   
2031  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2032      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
2033          and sum((accNodesModel_a,accYears_a,indicator_a)
2034                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
2035      = sum((accNodesModel_a,accYears_a,indicator_a)
2036              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2037                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
2038          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
2039      / sum((accNodesModel_a,accYears_a,indicator_a)
2040              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
2041                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
2042   
2043  * Remove all accounting regions and accounting years
2044  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2045      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2046          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
2047   
2048          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
2049              or sameas("horizon",accYears_aa)))
2050      = 0;
2051   
2052  * Remove all slack indicators except the ones declared in indicatorBounds
2053  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2054      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
2055          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
2056          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
2057      = 0;
2058   
2059   
2060  * Check if the objective value and optimization sense is set correctly
2061  scalar opti_values, opti_sense;
2062  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
2063  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
2064  abort$(opti_values < 1)
2065      "Accounting: No indicator specified as objective value"
2066  abort$(opti_values > 1)
2067      "Accounting: Too many indicators specified as objective value"
2068  abort$(opti_sense <> -1 and opti_sense <> 1)
2069      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
2071  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2072  * SPDX-License-Identifier: BSD-3-Clause
2073   
2074  * Calculation of annuities
2075  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2076          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
2077          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
2078      "Accounting: Some converter technologies use annuities but have no amortization time"
2079   
2080  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
2081  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2082      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
2083      =
2084      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
2085          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2086          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
2087      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
2088          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
2089   
2090   
2091  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2092          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
2093          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
2094      "Accounting: Some storage technologies use annuities but have no amortization time"
2095   
2096  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
2097  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
2098      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
2099      =
2100      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
2101          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2102          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
2103      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
2104          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
2105   
2106   
2107  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2108          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
2109          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
2110      "Accounting: Some transfer technologies use annuities but have no amortization time"
2111   
2112  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
2113  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
2114      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
2115      =
2116      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
2117          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2118          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
2119      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
2120          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
2121   
2122   
2123   
2124  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2125          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
2126          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
2127      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
2128   
2129  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
2130  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
2131   
2132  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
2133      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
2134      =
2135      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
2136          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2137          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
2138      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
2139          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
2140   
2144   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
2146  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2147  * SPDX-License-Identifier: BSD-3-Clause
2148   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
2153  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2154  * SPDX-License-Identifier: BSD-3-Clause
2155   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
2160  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2161  * SPDX-License-Identifier: BSD-3-Clause
2162  * // # Output data
2163  * // This is the reference data model of the REMix output.
2164  * //
2165  * // ## Standard output
2168   
2175   
2177   
2178  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
2179  set balanceType / "net", "gross", "positive", "negative", "flh" /;
2180  set profileType / "upper", "fixed", "lower" /;
2181  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
2182   
2183  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
2184  * // ### indicator_accounting
2185  * // Title: Accounting indicators Post-calculation
2186  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
2187  * //
2188  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
2189  * // ### indicator_accounting_ref
2190  * // Title: Accounting indicators reference
2191  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
2192  * //
2193  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
2194  * // ### indicator_accounting_var
2195  * // Title: Accounting indicators variable states
2196  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
2197  * //
2198  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
2199  * // ### indicator_accounting_comp
2200  * // Title: Accounting indicators composition
2201  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
2202  * //
2203  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
2204  * // ### indicator_accounting_detailed
2205  * // Title: Accounting indicators detail
2206  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2207  * //
2208  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2209  * // ### indicator_accounting_links
2210  * // Title: Accounting indicators per transfer link
2211  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2212  * //
2213  parameter converter_ratedInput(techs,vintage,commodity);
2214  parameter converter_ratedOutput(techs,vintage,commodity);
2215  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2216  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2217   
2218  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2219  * // ### converter_caps
2220  * // Title: Coverter capacities post-calculation
2221  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2222  * //
2223  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2224  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2225   
2226  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2227  * // ### converter_units
2228  * // Title: Coverter units post-calculation
2229  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2230  * //
2231  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2232   
2233  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2234  parameter max_transfer_coefficient(techs,commodity);
2235  parameter min_transfer_coefficient(techs,commodity);
2236  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2237  * // ### transfer_links
2238  * // Title: Transfer post-calculation
2239  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2240  * //
2241  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2242  * // ### transfer_caps
2243  * // Title: Transfer capacities post-calculation
2244  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2245  * //
2246  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2247  * // ### transfer_flows
2248  * // Title: Transfer hourly flows
2249  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2250  * //
2251  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2252  * // ### transfer_flows_annual
2253  * // Title: Transfer annual flows
2254  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2255  * //
2256  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2257  * // ### transfer_losses
2258  * // Title: Transfer hourly losses
2259  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2260  * //
2261  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2262  * // ### transfer_losses_annual
2263  * // Title: Transfer annual losses
2264  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2265  * //
2266  parameter storage_size_max(nodesModel,years,techs,commodity);
2267  parameter storage_size_min(nodesModel,years,techs,commodity);
2268  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2269  * // ### storage_units
2270  * // Title: Storage units post-calculation
2271  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2272  * //
2273  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2274  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2275  * // ### storage_caps
2276  * // Title: Storage capacities post-calculation
2277  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2278  * //
2279  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2280  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2281  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2282  * // ### storage_level_out
2283  * // Title: Storage level
2284  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2285  * //
2286  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2287  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2288  * // ### storage_flows
2289  * // Title: Storage hourly flows
2290  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2291  * //
2292  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2293  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2294  * // ### storage_flows_annual
2295  * // Title: Storage annual flows
2296  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2297  * //
2298  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2299  * // ### storage_losses_out
2300  * // Title: Storage hourly losses
2301  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2302  * //
2303  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2304  * // ### storage_losses_annual
2305  * // Title: Storage annual losses
2306  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2307  * //
2308  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2309  * // ### commodity_balance
2310  * // Title: Hourly commodity balance
2311  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2312  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2313  * //
2314  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2315  * // ### commodity_balance_annual
2316  * // Title: Annual commodity balance
2317  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2318  * //
2319  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2320  * // ### marginals_sourcesink_profile
2321  * // Title: Source-sink marginals
2322  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2323  * //
2324  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2325  * // ### marginals_balance
2326  * // Title: Nodel balance marginals
2327  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2328  * //
2329  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2330  * // ### marginals_sourcesink_sum
2331  * // Title: Source-sink annual marginals
2332  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2333  * //
2334  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2335  * // ### marginals_indicator_bounds
2336  * // Title: Indicator bounds marginals
2337  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2338  * //
2339  * // ## REMix-AMIRIS interface output
2340  * //
2341  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2342  * // ### r2a_annuity_cost_converter
2343  * // Title: Converter annuity cost
2344  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2345  * //
2346  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2347  * // ### r2a_spec_cost_converter
2348  * // Title: Converter specific cost
2349  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2350  * //
2351  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2352  * // ### r2a_spec_cost_fuel
2353  * // Title: Commodity specific cost
2354  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2355  * //
2356  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2357  * // ### r2a_spec_cost_indicator
2358  * // Title: Indicator specific cost
2359  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2360  * //
2361  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2362  * // ### r2a_converter_efficiencies
2363  * // Title: Indicator specific cost
2364  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2365  * //
2366  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2367  * // ### r2a_converter_avail_factor
2368  * // Title: Converter availability factor
2369  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2370  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2371  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2372  * //
2373  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2374  * // ### r2a_storage_e2p
2375  * // Title: E2P Storage
2376  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2377  * //
2378  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2379  * // ### r2a_storage_selfdischarge
2380  * // Title: Storage self discharge rates
2381  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2382   
2383  set attribute(*)
2384       /
2385      "variables"
2386      "equations"
2387      "iterations"
2388      /;
2389   
2390  parameter diagnostics(attribute);
2391   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2395  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2396  * SPDX-License-Identifier: BSD-3-Clause
2397   
2398  * ==== global settings ====
2400   
2402   
2404   
2406   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2408  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2409  * SPDX-License-Identifier: BSD-3-Clause
2410   
2411  * // # core_converter
2412  * // The equations in this file describe the converters in the model.
2413   
2414  * // ## Advanced features
2415  * //
2416  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2417  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2418  * //
2419  * // In the following table you can see which modifications you have to make to your data to use the different features.
2420  * //
2421  * // | Feature | Modification |
2422  * // | ------ | ------ |
2423  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2424  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2425  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2426  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2427  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2428  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2429   
2430  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2431  * //
2432  * // ### set_converter_techs.dat
2433  * // In this file all converter technologies are listed that can be used within your model.
2434  * //
2435  * // ### set_activities.dat
2436  * // All modes with which the converter technologies can be operated need to be added here.
2437  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2438  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2439  * //
2440  * // ### set_commodities.dat
2441  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2442  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2443   
2444  * // ## Variables
2445  * // {special_table_converter_variables}
2975   
2976  * // ## Load units from gdx file
2978   
2979   
2980  * ==== calculation of mappings ====
2981   
2982  * Technologies with a lifeTime > 0 are available
2983  set converter_availTech(nodesModel,years,converter_techs,vintage);
2984  converter_availTech(nodesModel,years,converter_techs,vintage)
2985      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
2986          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
2987   
2988  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
2989  converter_availTech(nodesModel,years,converter_techs,vintage)
2990      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
2991   
2992  * Technologies already built become unavailable if they have an unitsBuild of 0
2993  converter_availTech(nodesModel,years,converter_techs,vintage)
2994      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
2995   
2996  * Used technologies are available technologies over their technical lifeTime
2997  set converter_usedTech(nodesModel,years,converter_techs,vintage);
2998  converter_usedTech(nodesModel,years,converter_techs,vintage)
2999      $(vintage.val <= years.val
3000          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
3001                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
3002          ) = yes;
3003   
3004  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
3005  set converter_decomTech(nodesModel,years,converter_techs,vintage);
3006  converter_decomTech(nodesModel,years,converter_techs,vintage)
3007    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3008                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3009      and sum(yearsToCalc
3010        $(sameas(years, yearsToCalc)
3011          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3012          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3013    = yes;
3014   
3015  converter_decomTech(nodesModel,years,converter_techs,vintage)
3016    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
3017                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
3018      and sum(yearsToCalc
3019        $(sameas(years, yearsToCalc)
3020          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
3021          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
3022    = yes;
3023   
3024  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
3025  converter_decomTech(nodesModel,years,converter_techs,vintage)
3026    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
3027      and sum(yearsToCalc
3028        $(sameas(years, yearsToCalc)
3029          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
3030    = yes;
3031   
3032  * Extend the decom frame to the model year after the last model year of usedTech
3033  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3034    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
3035      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
3036    = yes;
3037   
3038  * Mapping for used activities and commodities
3039  set converter_usedActCom(converter_techs,vintage,activity,commodity);
3040  option converter_usedActCom < converter_coefficient;
3041   
3042  set converter_usedAct(converter_techs,vintage,activity);
3043  option converter_usedAct < converter_usedActCom;
3044   
3045  set converter_usedCom(converter_techs,vintage,commodity);
3046  option converter_usedCom < converter_usedActCom;
3047   
3048  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
3049  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
3050      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3051          and converter_usedAct(converter_techs,vintage,activity))
3052      = yes;
3053   
3054  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
3055  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3056    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3057      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
3058    = 1;
3059   
3060  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
3061  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3062    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
3063      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
3064    = 1;
3065   
3066   
3067  * ==== aggregation of profiles ====
3068   
3069  * derive upper and lower profiles then aggregate
3070  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
3071  option converter_activity_hasProfileIn < converter_activityProfileIn;
3072   
3073  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
3074  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3075      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3076              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
3077   
3078  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
3079  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
3080   
3081  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
3082  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3083      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3084              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
3085   
3086  * aagregate time dimension
3087  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
3088  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3089    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3090    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
3091            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3092            / timeLength(timeModelToCalc));
3093  option clear = converter_activityProfileIn;
3094   
3095  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3096  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
3097  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
3098      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
3099  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
3100      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
3101   
3102   
3103  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3104  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3105      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
3106          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
3107   
3108  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
3109  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
3110      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
3111   
3112  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3113      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3114          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3115      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3116                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
3117                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3118                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
3119      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3120              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3121   
3122  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
3123      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
3124          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3125      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3126                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
3127                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
3128      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3129                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3130              1);
3131  option clear = converter_activityProfileIn_aggTime;
3132   
3133  * for fixed profiles overwrite upper and lower profile
3134  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
3135      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3136      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3137   
3138  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
3139      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
3140      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
3141   
3145   
3146  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3147  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
3148  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3149      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
3150   
3151  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3152      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3153          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
3154      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3155            sum(timeData$timeMapping(timeData,timeModelToCalc),
3156                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3157                / timeLength(timeModelToCalc)
3158              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
3159      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3160              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3161   
3162  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
3163      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
3164          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
3165      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3166                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
3167            sum(timeData$timeMapping(timeData,timeModelToCalc),
3168                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
3169                / timeLength(timeModelToCalc))
3170      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3171                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
3172   
3175   
3176  * reduce coefficient delay based on time resolution
3177  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
3178    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
3179    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
3181   
3182  * ==== prepare partial load behavior parameters ====
3183   
3184  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
3185  alias(commodity, com);
3186  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
3187      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
3188        and converter_usedAct(converter_techs,vintage,activity))
3189      = 1;
3190   
3191  * indicate that at least one activity of a technology makes use of partial load behavior
3192  set converter_hasMaxLoad(converter_techs,vintage);
3193  converter_hasMaxLoad(converter_techs,vintage)
3194    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3195              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
3196   
3197  set converter_hasMinLoad(converter_techs,vintage);
3198  converter_hasMinLoad(converter_techs,vintage)
3199    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3200              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
3201   
3202  set converter_hasConstantFluxInActivity(converter_techs,vintage);
3203  converter_hasConstantFluxInActivity(converter_techs,vintage)
3204    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
3205                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
3206   
3207  * setting up a requirements parameter to avoid having to cycle through commodities in equations
3208  set pc_converter_activityRequirements
3209      /
3210      minLoad             "Lower profile for converter activity"
3211      maxLoad             "Upper profile for converter activity"
3212      /;
3213  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
3214  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3215    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
3216  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3217    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
3218   
3219  * ==== activate MIP units for MIP dispatch or partial load technologies ====
3220   
3221  set converter_hasMinUptime(converter_techs,vintage);
3222  converter_hasMinUptime(converter_techs,vintage)
3223    $(converter_techParam(converter_techs,vintage,"minUptime")
3224      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3225    = yes;
3226   
3227  set converter_hasMinDowntime(converter_techs,vintage);
3228  converter_hasMinDowntime(converter_techs,vintage)
3229    $(converter_techParam(converter_techs,vintage,"minDowntime")
3230      and converter_techParam(converter_techs,vintage,"mipDispatch"))
3231    = yes;
3232   
3233  * require integer unit counts if online state is to be tracked
3234  converter_techParam(converter_techs,vintage,"mipUnits")
3235      $(converter_techParam(converter_techs,vintage,"mipDispatch")
3236        or converter_hasMinLoad(converter_techs, vintage)
3237        or converter_hasMaxLoad(converter_techs, vintage)
3238        or converter_hasConstantFluxInActivity(converter_techs,vintage))
3239      = 1;
3240   
3241  * ==== floor mip converter units to integer values ====
3242  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
3243      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3244      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
3245  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
3246      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
3247      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
3248   
3249  * ==== scalars and sets for minUptime and minDowntime ====
3250   
3251  scalar converter_maxUptimeReq;
3252  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
3253  set uptimeSearchRange(timeModelToCalc);
3254  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
3255   
3256  scalar converter_maxDowntimeReq;
3257  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
3258  set downtimeSearchRange(timeModelToCalc);
3259  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
3260   
3261  * ==== definition of variables ====
3262   
3263  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
3264      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3265        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
3266      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3267  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
3268      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3269        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
3270      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3271  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
3272      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
3273        and (converter_hasMinLoad(converter_techs, vintage)
3274              or converter_hasMaxLoad(converter_techs, vintage)))
3275      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
3276   
3277   
3278  * Initialise variables for unitsBuild
3279  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3280      $converter_availTech(nodesModel,years,converter_techs,vintage)
3281      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
3282  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3283      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
3284      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
3285  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3286      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
3287      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3288   
3289  * Initialise variables for unitsDecom
3290  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3291    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
3292      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3293    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3294                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
3295                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
3296                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
3297          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
3298   
3299  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
3300    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
3301    = sum(years$
3302          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3303            and converter_availTech(nodesModel,years,converter_techs,vintage)
3304            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3305            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3306        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
3307      + sum(yearsToCalc_a$
3308          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3309            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
3310            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
3311            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3312        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
3313        ;
3314   
3315  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
3316      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
3317          and not converter_techParam(converter_techs,vintage,"freeDecom"))
3318      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
3319   
3320   
3322   
3323   
3324  * Calculate planned unit expansion
3325  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3326  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
3327  loop(years,
3328    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
3329      =
3330      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
3331          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
3332      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
3333          $converter_availTech(nodesModel,years,converter_techs,vintage)
3334      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
3335          $converter_decomTech(nodesModel,years,converter_techs,vintage);
3336  );
3337   
3338  * Set initial state for planned units
3339  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
3340    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
3341   
3342   
3343  * // ## Load units from gdx file
3345   
3346  * Calculate if planned unit expansion is bounded by upper and lower limits
3347  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
3348  converter_unitBoundsFixed(nodesModel,years,converter_techs)
3349    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3350          converter_techParam(converter_techs,vintage,"freeDecom"))
3351    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3352          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3353      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
3354    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
3355          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
3356      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
3357    = yes;
3358   
3359  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3360  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
3361    $(converter_availTech(nodesModel,years,converter_techs,vintage)
3362      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3363    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
3364  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
3365    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3366      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3367    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
3368  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
3369    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
3370      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
3371    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
3372   
3373   
3374  * Add parameter for fixing capacities during myopic runs
3375  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
3376  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
3377  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
3378   
3379  * Fix activities of upper limit if upper limit is zero
3380  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
3381    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
3382      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
3383      = 0;
3384   
3385   
3386  * ==== declaration of equations ====
3387   
3388  equations
3389    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
3390      ) "Ensures the units balance over the planning period."
3391    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
3392      ) "Ensures the units balance over the planning period."
3393    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
3394      ) "Restricts the free decommissioning of units over the planning period."
3395    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
3396      ) "Upper bound for the total number of units."
3397    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
3398      ) "Lower bound for the total number of units."
3399    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
3400      ) "Fixed bound for the total number of units."
3401    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
3402      ) "Fixes the total number of units to the corresponding integer variable."
3403    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
3404      ) "Fixes the number of online units to the corresponding integer variable."
3405   
3406    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
3407      ) "Lower limit on the activity."
3408    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
3409      ) "Upper limit on the activity."
3410   
3411    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
3412      ) "Fixed limit on the activity."
3413    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
3414      ) "Positive ramping of unit activity."
3415    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
3416      ) "Negative ramping of unit activity."
3417    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
3418      ) "Restrict ramping up of unit activity."
3419   
3420    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
3421      ) "Set online units to total number of operational units."
3422    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
3423      ) "Allow shutting down units."
3424    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
3425      ) "Variable counting the number of unit startups."
3426    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
3427      ) "Variable tracking the number of unit shutdowns."
3428    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
3429      ) "Limit the number of startup cycles a unit can perform."
3430    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
3431      ) "Require recently started units to remain online for their respective minimum uptime."
3432    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
3433      ) "Require recently shut down units to remain offline for their respective minimum downtime."
3434    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3435      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3436    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3437      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
3438    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
3439      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
3440    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
3441      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
3442    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
3443      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
3444    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3445      ) "Limit usage of an activity to corresponding units."
3446    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
3447      ) "Limit usage of an activity to corresponding units."
3448    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
3449      ) "Limit the number of units in one particular mode to the number of operational units."
3450    ;
3451   
3452  * ==== equation definition ====
3453  * // ## Equations
3454  * // ### Converter Units Balance
3455  * // Ensures that the total units are consistent with the built and decommissioned units.
3456  * // {Eq_converter_unitsBalance}
3457   
3458  * Equation using build only
3459  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
3460      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3461            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3462          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3463          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3464      ..
3465      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3466      =e=
3467      sum ((years_a)
3468              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
3469                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3470                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3471                  and years_a.val <= yearsSel.val ),
3472            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
3473   
3474      + sum ((yearsToCalc)
3475              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3476                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3477                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
3478                  and yearsToCalc.val <= yearsSel.val ),
3479            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3480   
3481  * Equation using build and decom
3482  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3483      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3484            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3485          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
3486          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3487      ..
3488      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3489      =e=
3490      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
3491        sum(years$sameas(years, yearsToCalc),
3492          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
3493            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
3494      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
3495        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
3496          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
3497      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
3498          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
3499      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3500          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3501      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
3502          ;
3503   
3504  * // ### Converter Units Free Decommission
3505  * // Restricts the free decommissioning of units over the planning period.
3506  * // {Eq_converter_unitsFreeDecom}
3507  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
3508      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
3509          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
3510      ..
3511      sum(years$
3512            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
3513              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
3514          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
3515      + sum(yearsToCalc$
3516            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
3517              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3518              and yearsToCalc.val <= yearsSel.val),
3519          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
3520      =g=
3521      sum(years$
3522            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
3523              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
3524              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3525          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3526      + sum(yearsToCalc$
3527            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3528              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3529              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3530          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3531   
3532  * // ### Converter Units Upper Limit
3533  * // Upper bound for the total number of units.
3534  * // {Eq_converter_unitsUpperLimit}
3535  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3536      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3537          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3538          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3539              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3540      ..
3541      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3542          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3543      =l=
3544      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3545   
3546  * // ### Converter Units Lower Limit
3547  * // Lower bound for the total number of units.
3548  * // {Eq_converter_unitsLowerLimit}
3549  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3550      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3551          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3552              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3553      ..
3554      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3555          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3556      =g=
3557      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3558   
3559  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3560      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3561          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3562      ..
3563      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3564          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3565      =e=
3566      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3567   
3568  * // ### Converter Units Total MIP
3569  * // Fixes the total number of units to the corresponding integer variable.
3570  * // {Eq_converter_unitsTotalMIP}
3571  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3572      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3573          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3574      ..
3575      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3576      =e=
3577      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3578   
3579  * // ### Converter Units Online MIP
3580  * // Fixes the number of online units to the corresponding integer variable.
3581  * // {Eq_converter_unitsOnlineMIP}
3582  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3583      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3584          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3585      ..
3586      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3587      =e=
3588      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3589   
3590  * // ### Converter Activity Lower Limit
3591  * // Lower limit on the activity.
3592  * // {Eq_converter_activityLowerLimit}
3593  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3594      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3595          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3596          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3597              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3598          and not converter_hasMinLoad(converter_techs, vintage))
3599      ..
3600      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3601          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3602      )
3603      =g=
3604      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3607      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3610   
3611  * // ### Converter Activity Upper Limit
3612  * // Upper limit on the activity.
3613  * // {Eq_converter_activityUpperLimit}
3614  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3615      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3616          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3617          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3618               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3619      ..
3620      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3621          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3622      )
3623      =l=
3624      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3627      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3630   
3631  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3632      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3633          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3634               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3635      ..
3636      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3637          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3638      )
3639      =e=
3640      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3643      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3646   
3647  * // ### Converter Positive Ramping
3648  * // Positive ramping of unit activity.
3649  * // {Eq_converter_rampPos}
3650  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3651    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3652        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3653      ..
3654      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3655      =g=
3656      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3657              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3658              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3659   
3660  * // ### Converter Negative Ramping
3661  * // Negative ramping of unit activity.
3662  * // {Eq_converter_rampNeg}
3663  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3664    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3665        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3666      ..
3667      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3668      =g=
3669      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3670              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3671              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3672   
3673  * // ### Converter Ramping Limit
3674  * // Restrict ramping up of unit activity.
3675  * // {Eq_converter_rampLimit}
3676  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3677    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3678          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3679      ..
3680      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3681              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3682              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3683    =l=
3684    converter_techParam(converter_techs,vintage,"activityRampLimit")
3687      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3690   
3693   
3694  * // ### Converter Units Online
3695  * // Set converter units online to total converter units for non-MIP case.
3696  * // {Eq_converter_unitsOnline}
3697  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3698      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3699          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3700    ..
3701    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3702    =e=
3703    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3704      ;
3705   
3706  * // ### Converter MIP Units Shutting Down
3707  * // Allow shutting down units.
3708  * // {Eq_converter_unitsOnlineUC}
3709  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3710      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3711          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3712    ..
3713    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3714    =l=
3715    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3716      ;
3719   
3720  * // ### Converter Activity Startups
3721  * // Variable counting the number of unit startups.
3722  * // {Eq_converter_activityStartups}
3723  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3724    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3725          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3726      ..
3727      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3728      =g=
3729          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3730      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3731   
3732  * // ### Converter Activity Shutdowns
3733  * // Variable tracking the number of unit shutdowns.
3734  * // {Eq_converter_activityShutdowns}
3735  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3736    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3737          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3738          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3739      ..
3740      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3741      =g=
3742          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3743      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3744   
3745  * // ### Converter Activity Startup Limit
3746  * // Limit the number of startup cycles a unit can perform.
3747  * // {Eq_converter_limitStartups}
3748  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3749    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3750          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3751      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3752      ..
3753      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3754    =l=
3755    converter_techParam(converter_techs,vintage,"startupLimit")
3756    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3757   
3758  alias(timeModelToCalc,ttc);
3759   
3760  * // ### Converter Units Minimum Uptime
3761  * // Require recently started units to remain online for their respective minimum uptime.
3762  * // {Eq_converter_minUptime}
3763  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3764    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3765          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3766      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3767      ..
3768      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3769          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3770              nodesModelSel,yearsSel,converter_techs,vintage))
3771          =l=
3772          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3773   
3774  * // ### Converter Units Minimum Downtime
3775  * // Require recently shut down units to remain offline for their respective minimum downtime.
3776  * // {Eq_converter_minDowntime}
3777  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3778    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3779          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3780      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3781      ..
3782      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3783          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3784              nodesModelSel,yearsSel,converter_techs,vintage))
3785          =l=
3786          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3787      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3788   
3789  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3790  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3791  alias(activity, act);
3792   
3793  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3794  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3795  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3796  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3797    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3798          and converter_hasMinLoad(converter_techs, vintage)
3799          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3800      ..
3801      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3802                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3803               and converter_usedAct(converter_techs,vintage,act)),
3804      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3805    =l=
3806    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3807      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3808                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3809                 and converter_usedAct(converter_techs,vintage,act)),
3810      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3811   
3812  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3813  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3814  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3815  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3816    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3817          and converter_hasMaxLoad(converter_techs,vintage)
3818          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3819      ..
3820      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3821                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3822               and converter_usedAct(converter_techs,vintage,act)),
3823      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3824    =l=
3825      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3826                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3827               and converter_usedAct(converter_techs,vintage,act)),
3828      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3829            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3830            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3831   
3832  * This equation is meant to enforce the lower limit requirements of activities in use.
3833  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3834  * because these activities can only run on units in the respectively strict activation state.
3835   
3836  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3837  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3838  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3839  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3840    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3841          and converter_hasMinLoad(converter_techs, vintage)
3842          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3843      ..
3844      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3845                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3846               and converter_usedAct(converter_techs,vintage,act)),
3847      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3848    =g=
3849      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3850                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3851               and converter_usedAct(converter_techs,vintage,act)),
3852      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3853            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3854            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3855   
3856   
3857  * Simple one-activity-per-unit partial load equations
3858  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3859  * // Enforce MIP units partial load upper limit.
3860  * // {Eq_converter_activityUpperLimitPartLoad}
3861  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3862    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3863          and (converter_hasMinLoad(converter_techs, vintage)
3864                or converter_hasMaxLoad(converter_techs, vintage)
3865                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3866          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3867      ..
3868      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3869    =l=
3870    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3871          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3872          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3873   
3874  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3875  * // Enforce MIP units partial load lower limit.
3876  * // {Eq_converter_activityLowerLimitPartLoad}
3877  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3878    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3879          and (converter_hasMinLoad(converter_techs, vintage)
3880                or converter_hasMaxLoad(converter_techs, vintage))
3881          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3882      ..
3883      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3884    =g=
3885    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3886          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3887          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3888   
3889  * // ### Converter MIP Units Idle Online Units
3890  * // Counts idle online units at every time step
3891  * // {Eq_converter_noOnlineIdle}
3892  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3893    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3894          and (converter_hasMinLoad(converter_techs, vintage)
3895              or converter_hasMaxLoad(converter_techs, vintage)
3896              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3897          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3898      ..
3899      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3900      =e=
3901      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3902            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3903   
3904  * // ### Converter MIP Units Idle Online Units Partial load
3905  * // Counts idle online units at every time step
3906  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3907  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3908    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3909          and (converter_hasMinLoad(converter_techs, vintage)
3910                  or converter_hasMaxLoad(converter_techs, vintage))
3911          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3912      ..
3913      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3914      =l=
3915      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3916            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3917   
3918  * // ### Converter MIP activity model limit
3919  * // Converter activity model limit
3920  * // {Eq_converter_activityModeLimit}
3921  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3922    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3923          and (converter_hasMinLoad(converter_techs, vintage)
3924                or converter_hasMaxLoad(converter_techs, vintage))
3925          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3926      ..
3927      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3928      =g=
3929      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3930   
3931  * ==== model definition ====
3932   
3933  Model M_converter
3934  /
3935    Eq_converter_unitsBalance
3936    Eq_converter_unitsBalanceFreeDecom
3937    Eq_converter_unitsFreeDecom
3938    Eq_converter_unitsUpperLimit
3939    Eq_converter_unitsLowerLimit
3940    Eq_converter_unitsFixedLimit
3941    Eq_converter_unitsTotalMIP
3942    Eq_converter_unitsOnlineMIP
3943    Eq_converter_activityUpperLimit
3944    Eq_converter_activityLowerLimit
3945    Eq_converter_activityFixedLimit
3946    Eq_converter_rampPos
3947    Eq_converter_rampNeg
3948    Eq_converter_rampLimit
3951    Eq_converter_unitsOnline
3952    Eq_converter_unitsOnlineUC
3955    Eq_converter_activityStartups
3956    Eq_converter_activityShutdowns
3957    Eq_converter_limitStartups
3958    Eq_converter_minUptime
3959    Eq_converter_minDowntime
3960    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
3961    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
3962    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
3963    Eq_converter_activityUpperLimitPartLoad
3964    Eq_converter_activityLowerLimitPartLoad
3965    Eq_converter_noOnlineIdle
3966    Eq_converter_noOnlineIdleDetailedPartLoad
3967    Eq_converter_activityModeLimit
3968  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
3970  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
3971  * SPDX-License-Identifier: BSD-3-Clause
3972   
3973  * // # core_storage
3974  * // The equations in this file describe the storages in the model.
3975   
3976  * // ## Variables
3977  * // {special_table_storage_variables}
4231   
4232   
4233  * === SoC mappings ===
4234  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
4235  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
4236      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
4237        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
4238      = yes;
4239   
4240  set storage_validSoCRange(storage_techs,vintage);
4241  storage_validSoCRange(storage_techs,vintage)
4242      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
4243        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
4244   
4245  * === Translate SoC parameters to ordered SoC-set ===
4246  * set ordered_socs / soc1*soc20 /;
4247  * alias(soc_states, soc_states_c);
4248  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
4249  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
4250  *     $storage_validSoCRange(storage_techs,vintage)
4251  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4252  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
4253  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
4254  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
4255  *
4256  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
4257  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
4258  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
4259  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
4260  *     = yes;
4261   
4262  parameter storage_bigM(storage_techs,vintage);
4263  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4264  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
4265  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
4266   
4267  * === calculate the number of years represented by single year to calc ===
4268  alias(yearsToCalc, yearsToCalc_a)
4269  parameter representedYears(years);
4270  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
4271                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
4272   
4273  * ==== calculation of mappings ====
4274   
4275  * Technologies with a lifeTime > 0 are available
4276  set storage_availTech(nodesModel,years,storage_techs,vintage);
4277  storage_availTech(nodesModel,years,storage_techs,vintage)
4278      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4279          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4280   
4281  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
4282  storage_availTech(nodesModel,years,storage_techs,vintage)
4283      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
4284   
4285  * Technologies already built become unavailable if they have an unitsBuild of 0
4286  storage_availTech(nodesModel,years,storage_techs,vintage)
4287      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
4288   
4289  * Used technologies are available technologies over their technical lifeTime
4290  set storage_usedTech(nodesModel,years,storage_techs,vintage);
4291  storage_usedTech(nodesModel,years,storage_techs,vintage)
4292      $(vintage.val <= years.val
4293          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
4294                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
4295          ) = yes;
4296   
4297  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4298  set storage_decomTech(nodesModel,years,storage_techs,vintage);
4299  storage_decomTech(nodesModel,years,storage_techs,vintage)
4300    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4301                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4302      and sum(yearsToCalc
4303        $(sameas(years, yearsToCalc)
4304          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4305          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4306    = yes;
4307   
4308  storage_decomTech(nodesModel,years,storage_techs,vintage)
4309    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
4310                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
4311      and sum(yearsToCalc
4312        $(sameas(years, yearsToCalc)
4313          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
4314          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
4315    = yes;
4316   
4317  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4318  storage_decomTech(nodesModel,years,storage_techs,vintage)
4319    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
4320      and sum(yearsToCalc
4321        $(sameas(years, yearsToCalc)
4322          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4323    = yes;
4324   
4325  * Extend the decom frame to the year after the last year of usedTech
4326  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4327    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
4328      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
4329    = yes;
4330   
4331  * Mapping for used commodities
4332  set storage_usedCom(storage_techs,vintage,commodity);
4333  option storage_usedCom < storage_sizeParam;
4334   
4335  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
4336  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
4337      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4338          and storage_usedCom(storage_techs,vintage,commodity))
4339      = yes;
4340   
4341   
4342  * // ## Load units from gdx file
4344   
4345   
4346  * ==== aggregation of profiles ====
4347  * derive upper and lower profiles then aggregate
4348  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
4349  option storage_level_hasProfileIn < storage_levelProfileIn;
4350   
4351  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
4352  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4353      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4354              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
4355   
4356  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
4357  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
4358  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
4359      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
4360  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
4361      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
4362   
4363  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
4364  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
4365                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
4366   
4367  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4368      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4369          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4370      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4371              sum(timeData$timeMapping(timeData,timeModelToCalc),
4372                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4373                / timeLength(timeModelToCalc)
4374              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4375      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4376              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4377   
4378  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
4379      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
4380          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4381                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4382      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4383                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4384              sum(timeData$timeMapping(timeData,timeModelToCalc),
4385                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
4386                / timeLength(timeModelToCalc))
4387      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4388                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4389   
4390  * for fixed profiles overwrite upper and lower profile
4391  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
4392      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4393      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4394   
4395  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
4396      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
4397      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
4398   
4399  * storage initial level
4400   
4401  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4402      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4403          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
4404      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4405            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
4406              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
4407      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4408              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
4409   
4410  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
4411      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
4412          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
4413                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
4414      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4415                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
4416            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
4417      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
4418                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
4419   
4420  * ==== parameter modifications ====
4421  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
4422          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4423      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
4424  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4425          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
4426      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
4427   
4428   
4429  * ==== definition of variables ====
4430   
4431  * Initialise variables for unitsBuild
4432  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4433      $storage_availTech(nodesModel,years,storage_techs,vintage)
4434      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
4435  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4436      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
4437      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
4438  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4439      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
4440      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4441   
4442  * Initialise variables for unitsDecom
4443  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4444      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
4445        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
4446      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
4447                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
4448                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
4449                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
4450          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
4451   
4452  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
4453    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
4454    = sum(years$
4455          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
4456            and storage_availTech(nodesModel,years,storage_techs,vintage)
4457            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4458            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4459        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
4460      + sum(yearsToCalc_a$
4461          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
4462            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
4463            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
4464            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4465        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
4466        ;
4467   
4468  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
4469      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
4470        and not storage_techParam(storage_techs,vintage,"freeDecom"))
4471      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
4472   
4473   
4475   
4476   
4477  * Calculate planned unit expansion
4478  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4479  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
4480  loop(years,
4481    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
4482      =
4483      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
4484          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
4485      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
4486          $storage_availTech(nodesModel,years,storage_techs,vintage)
4487      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
4488          $storage_decomTech(nodesModel,years,storage_techs,vintage);
4489  );
4490   
4491  * Set initial state for planned units
4492  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
4493    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
4494   
4495  * // ## Load units from gdx file
4497   
4498  * Calculate if planned unit expansion is bounded by upper and lower limits
4499  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
4500  storage_unitBoundsFixed(nodesModel,years,storage_techs)
4501    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4502          storage_techParam(storage_techs,vintage,"freeDecom"))
4503    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4504          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4505      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
4506    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
4507          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
4508      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
4509    = yes;
4510   
4511  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
4512  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
4513    $(storage_availTech(nodesModel,years,storage_techs,vintage)
4514      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4515    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
4516  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
4517    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4518      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4519    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
4520  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
4521    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4522      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
4523    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
4524   
4525  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4526      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4527        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4528      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4529   
4530  * Add parameter for fixing capacities during myopic runs
4531  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4532  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4533  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4534   
4535  * ==== declaration of equations ====
4536   
4537  equations
4538    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4539      ) "Ensures the units balance over the planning period."
4540    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4541      ) "Ensures the units balance over the planning period."
4542    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4543      ) "Restricts the free decommissioning of units over the planning period."
4544    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4545      ) "Upper bound for the total number of units."
4546    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4547      ) "Lower bound for the total number of units."
4548    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4549      ) "Fixes the total number of units to the corresponding integer variable."
4550   
4551    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4552      ) "Upper bound for the total number of units."
4553    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4554      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4555    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4556      ) "Lower bound for the total number of units."
4557    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4558      ) "Stored commodities lost due to self discharge."
4559    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4560      ) "Currently available units must have been built at some point in time and have some state of degradation."
4561    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4562      ) "There cannot be more units from a certain year than the amount built in that year."
4563    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4564      ) "There is no recovery."
4565    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4566      ) "Limit charging rate based on unit capacity."
4567    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4568      ) "Limit discharging rate based on unit capacity."
4569    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4570      ) "Positive change in state of charge is influx."
4571    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4572      ) "Negative change in state of charge is outflux."
4573   
4574    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4575      ) "Sum of degradation class storage levels is the global level."
4576    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4577      ) "Upper bound for units of a certain state."
4578    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4579      ) "Positive change in state of charge is influx for each degradation class."
4580    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4581      ) "Determine degradation states of storage units."
4582    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4583      ) "All decomminsioned units must have a degradation state."
4584    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4585      ) "Only allow one range of degradation states per year and age group."
4586    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4587      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4588   
4589    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4590      ) "Every unit has a state of charge."
4591    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4592      ) "Every unit has a state of charge."
4593    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4594      ) "Number of units in particular SoC."
4595    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4596      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4597   
4598    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4599      ) "Limit charging rate based on unit capacity."
4600    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4601      ) "Limit discharging rate based on unit capacity."
4602    ;
4603   
4604  * ==== equation definition ====
4605  * // ## Equations
4606  * // ### Storage Units Balance
4607  * // Ensures that the total units are consistent with the built and decommissioned units.
4608  * // {Eq_storage_unitsBalance}
4609   
4610  * Equation using build only
4611  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4612      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4613            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4614          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4615          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4616      ..
4617      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4618      =e=
4619      sum ((years_a)
4620                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4621                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4622                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4623                          and years_a.val <= yearsSel.val ),
4624              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4625   
4626      + sum ((yearsToCalc)
4627                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4628                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4629                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4630                          and yearsToCalc.val <= yearsSel.val ),
4631              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4632   
4633  * Equation using build and decom
4634  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4635      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4636            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4637          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4638          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4639      ..
4640      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4641      =e=
4642          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4643        sum(years$sameas(years, yearsToCalc),
4644          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4645            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4646      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4647        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4648          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4649      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4650          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4651      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4652          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4653      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4654          ;
4655   
4656  * // ### Storage Units Free Decommission
4657  * // Restricts the free decommissioning of storage units over the planning period.
4658  * // {Eq_storage_unitsFreeDecom}
4659  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4660      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4661          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4662      ..
4663      sum(years$
4664            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4665              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4666          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4667      + sum(yearsToCalc$
4668            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4669              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4670              and yearsToCalc.val <= yearsSel.val),
4671          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4672      =g=
4673      sum(years$
4674            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4675              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4676              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4677          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4678      + sum(yearsToCalc$
4679            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4680              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4681              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4682          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4683   
4684  * // ### Storage Units Lower Limit
4685  * // Lower bound for the total number of storage units.
4686  * // {Eq_storage_unitsLowerLimit}
4687  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4688      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4689      ..
4690      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4691          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4692      =g=
4693      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4694   
4695  * // ### Storage Units Upper Limit
4696  * // Upper bound for the total number of storage units.
4697  * // {Eq_storage_unitsUpperLimit}
4698  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4699      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4700          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4701      ..
4702      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4703          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4704      =l=
4705      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4706   
4707  * // ### Storage Units Total MIP
4708  * // Fixes the total number of storage units to the corresponding integer variable.
4709  * // {Eq_storage_unitsTotalMIP}
4710  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4711      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4712          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4713      ..
4714      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4715      =e=
4716      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4717   
4718  * // ### Storage Level Lower Limit
4719  * // Lower limit on the storage level.
4720  * // {Eq_storage_levelLowerLimit}
4721  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4722      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4723          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4724      ..
4725      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4726      =g=
4727      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4728      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4729      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4730   
4731  * // ### Storage Level Upper Limit
4732  * // Upper limit on the storage level.
4733  * // {Eq_storage_levelUpperLimit}
4734  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4735      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4736          and not storage_hasDegradation(storage_techs,vintage)
4737          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4738      ..
4739      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4740      =l=
4741      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4742      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4743      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4744   
4745  * // ### Storage Level Upper Limit (degradation)
4746  * // Upper limit on the storage level if the storage technology accounts for degradation.
4747  * // {Eq_storage_levelUpperLimit_degradation}
4748  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4749      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4750          and storage_hasDegradation(storage_techs,vintage)
4751          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4752      ..
4753      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4754      =l=
4755      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4756      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4757      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4758              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4759                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4760                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4761   
4762  * // ### Storage Unit States Sum (degradation)
4763  * // The number of units in all degradation state must match the total unit number.
4764  * // {Eq_storage_unitsBalanceStates}
4765  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4766      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4767        and storage_hasDegradation(storage_techs,vintage))
4768      ..
4769      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4770      =e=
4771      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4772            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4773   
4774  * // ### Storage Unit States Upper Limit(degradation)
4775  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4776  * // {Eq_storage_unitsUpperLimitPerState}
4777  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4778      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4779          and storage_hasDegradation(storage_techs,vintage))
4780      ..
4781      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4782            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4783            + sum(years$(years.val <= yearsSel.val),
4784                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4785      =e=
4786      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4787   
4788  * // ### Storage Unit States Progression (degradation)
4789  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4790  * // {Eq_storage_unitsStatesNoRecovery}
4791  alias(degradation_states, dc_states);
4792  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4793      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4794        and yearsToCalc.val > yearsCom.val
4795        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4796      ..
4797      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4798                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4799              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4800              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4801      =l=
4802      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4803                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4804              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4805              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4806   
4807  * // ### Storage Losses
4808  * // Accumulation of storage losses.
4809  * // {Eq_storage_losses}
4810  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4811      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4812      ..
4813      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4814      =e=
4815      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4816          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4817        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4818            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4819        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4820            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4821            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4822            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4823                and ord(timeModelToCalc)=1))
4824      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4825      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4826      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4827          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4828        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4829          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4830      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4831        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4832          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4833      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4834        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4835                          and storage_validSoCRange(storage_techs,vintage)),
4836              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4837              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4838              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4839   
4840  * // ### C-Rate Limit
4841  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4842  * // {Eq_storage_cRateLimit}
4843  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4844      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4845        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4846      ..
4847      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4848      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4849          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4850      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4851          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4852      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4853          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4854          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4855          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4856              and ord(timeModelToCalc)=1)
4857      =l=
4858      storage_techParam(storage_techs,vintage,"maxCRate")
4859      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4860      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4861   
4862  * // ### E-Rate Limit
4863  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4864  * // {Eq_storage_eRateLimit}
4865  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4866      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4867        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4868      ..
4869      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4870      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4871          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4872      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4873          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4874      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4875          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4876          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4877          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4878              and ord(timeModelToCalc)=1)
4879      =g=
4880      - storage_techParam(storage_techs,vintage,"maxERate")
4881      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4882      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4883   
4884  * // ### Storage Charging
4885  * // Increases in storage levels are accounted as charging amounts.
4886  * // {Eq_storage_charge}
4887  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4888      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4889        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4890      ..
4891      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4892      =g=
4893      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4894      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4895          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4896      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4897          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4898      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4899          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4900          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4901          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4902              and ord(timeModelToCalc)=1);
4903   
4904  * // ### Storage Discharging
4905  * // Decreases in storage levels are accounted as discharging amounts.
4906  * // {Eq_storage_discharge}
4907  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4908      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4909        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4910      ..
4911      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4912      =g=
4913      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4914          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4915      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4916          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4917      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4918          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4919          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4920          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4921              and ord(timeModelToCalc)=1)
4922      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4923   
4924  * // ### Storage Level Sum (degradation)
4925  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4926  * // {Eq_storage_levelStateSum}
4927  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4928      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4929        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4930      ..
4931      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4932      =e=
4933      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4934   
4935  * // ### Storage Level Upper Limit per Age Group (degradation)
4936  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4937  * // {Eq_storage_levelUpperLimitPerAge}
4938  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4939      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4940        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4941      ..
4942      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4943      =l=
4944      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4945      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4946      * sum(degradation_states,
4947              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4948                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4949                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4950   
4951  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4952  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4953  * // {Eq_storage_chargeBasedDegradationDistribution}
4954  alias(years, prev_years);
4955  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4956      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4957        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4958      ..
4959      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
4960          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
4961      =l=
4962      storage_sizeParam(storage_techs,vintage,commodity,"size")
4963      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
4964          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
4965          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
4966             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
4967   
4968  * // ### Storage Charging per Commissioning Year (degradation)
4969  * // Increases in storage levels are accounted as charging amounts.
4970  * // {Eq_storage_chargingPerAge}
4971  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4972      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4973        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4974      ..
4975      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4976      =g=
4977      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4978      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
4979   
4980  * // ### Storage Unit Decommissioning States Sum (degradation)
4981  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
4982  * // {Eq_storage_unitsDecomStateSum}
4983  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
4984      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
4985      ..
4986      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4987      =e=
4988      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4989          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4990   
4991  * // ### Storage Unit Sequential Degradation (degradation)
4992  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
4993  * // {Eq_storage_unitsDegradation}
4994  alias(degradation_states, degradation_states_a, degradation_states_b);
4995  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4996      $(storage_techParam(storage_techs,vintage,"usageDegradation")
4997        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4998      ..
4999      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5000                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
5001                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
5002                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
5003                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
5004                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
5005          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
5006      * storage_bigM(storage_techs,vintage)
5007      =g=
5008      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
5009   
5010  * // ### Storage Unit Sequential Degradation Range (degradation)
5011  * // Only one degradation range can be active.
5012  * // {Eq_storage_unitsDegradation_onlyOneRange}
5013  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
5014      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
5015      ..
5016      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
5017            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
5018      =e= 1;
5019   
5020  * // ### Storage Unit Sequential State of Charge (SoC)
5021  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
5022  * // {Eq_storage_unitsSoC}
5023  alias(soc_states, soc_states_a, soc_states_b);
5024  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5025      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5026      ..
5027      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5028                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
5029                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
5030                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
5031                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
5032                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
5033          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
5034      * storage_bigM(storage_techs,vintage)
5035      =g=
5036      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
5037   
5038  * // ### Storage Unit Sequential State of Charge Range (SoC)
5039  * // Only one state of charge range can be active.
5040  * // {Eq_storage_unitsSoC_onlyOneRange}
5041  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5042      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
5043      ..
5044      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5045            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
5046   
5047  * // ### Storage Unit State of Charge Sum (SoC)
5048  * // Each storage unit must have one state of charge.
5049  * // {Eq_storage_unitsSoC_sum}
5050  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
5051      $storage_validSoCRange(storage_techs,vintage)
5052      ..
5053      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
5054      =e=
5055      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5056            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5057   
5058  * // ### Storage Level State of Charge Sum (SoC)
5059  * // The total storage level must be represented by units in their specific states of charge.
5060  * // {Eq_storage_levelSoC}
5061  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5062      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
5063      ..
5064      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5065      =e=
5066      storage_sizeParam(storage_techs,vintage,commodity,"size")
5067      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5068              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
5069              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
5070   
5071  * // ### C-Rate Limit (SoC)
5072  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5073  * // {Eq_storage_cRateLimit_SoC}
5074  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5075      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5076        and storage_validSoCRange(storage_techs,vintage)
5077        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
5078      ..
5079      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5080      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5081          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5082      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5083          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5084      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5085          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5086          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5087          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5088              and ord(timeModelToCalc)=1)
5089      =l=
5090      storage_sizeParam(storage_techs,vintage,commodity,"size")
5091      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5092                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
5093                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5094   
5095  * // ### E-Rate Limit (SoC)
5096  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
5097  * // {Eq_storage_cRateLimit_SoC}
5098  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5099      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5100        and storage_validSoCRange(storage_techs,vintage)
5101        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
5102      ..
5103      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5104      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5105          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5106      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5107          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5108      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5109          * storage_sizeParam(storage_techs,vintage,commodity,"size")
5110          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5111          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5112              and ord(timeModelToCalc)=1)
5113      =g=
5114      - storage_sizeParam(storage_techs,vintage,commodity,"size")
5115      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
5116                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
5117                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
5118   
5119   
5120  * ==== model definition ====
5121   
5122  Model M_storage
5123  /
5124    Eq_storage_unitsBalance
5125    Eq_storage_unitsBalanceFreeDecom
5126    Eq_storage_unitsFreeDecom
5127    Eq_storage_unitsLowerLimit
5128    Eq_storage_unitsUpperLimit
5129    Eq_storage_levelUpperLimit_degradation
5130    Eq_storage_unitsTotalMIP
5131    Eq_storage_levelLowerLimit
5132    Eq_storage_levelUpperLimit
5135    Eq_storage_losses
5138    Eq_storage_unitsBalanceStates
5139    Eq_storage_unitsUpperLimitPerState
5140    Eq_storage_unitsStatesNoRecovery
5141    Eq_storage_cRateLimit
5142    Eq_storage_eRateLimit
5143    Eq_storage_charge
5144    Eq_storage_discharge
5145    Eq_storage_levelStateSum
5146    Eq_storage_levelUpperLimitPerAge
5147    Eq_storage_chargeBasedDegradationDistribution
5148    Eq_storage_chargingPerAge
5149    Eq_storage_unitsDecomStateSum
5150    Eq_storage_unitsDegradation
5151    Eq_storage_unitsDegradation_onlyOneRange
5152   
5153    Eq_storage_unitsSoC
5154    Eq_storage_unitsSoC_sum
5155    Eq_storage_unitsSoC_onlyOneRange
5156    Eq_storage_levelSoC
5157    Eq_storage_cRateLimit_SoC
5158    Eq_storage_eRateLimit_SoC
5159  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
5161  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5162  * SPDX-License-Identifier: BSD-3-Clause
5163   
5164  * // # core_transfer
5165  * // The equations in this file describe the commodity transfer in the model.
5166   
5167  * // ## Variables
5168  * // {special_table_transfer_variables}
5171   
5176   
5372   
5373  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
5374  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
5375      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
5376   
5377   
5378  * ==== calculation of mappings ====
5379   
5380  * Technologies with a lifeTime > 0 are available
5381  set transfer_availTech(linksModel,years,transfer_techs,vintage);
5382  transfer_availTech(linksModel,years,transfer_techs,vintage)
5383      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
5384          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
5385   
5386  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
5387  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5388      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
5389   
5390  * Technologies already built become unavailable if they have a linksBuild of 0
5391  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5392      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
5393   
5394  * Used technologies are available technologies over their technical lifeTime
5395  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
5396  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
5397      $(vintage.val <= years.val
5398          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
5399                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
5400          ) = yes;
5401   
5402  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
5403  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
5404  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5405    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5406                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5407      and sum(yearsToCalc
5408        $(sameas(years, yearsToCalc)
5409          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5410          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5411    = yes;
5412   
5413  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5414    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
5415                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
5416      and sum(yearsToCalc
5417        $(sameas(years, yearsToCalc)
5418          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
5419          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
5420    = yes;
5421   
5422  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
5423  transfer_decomTech(linksModel,years,transfer_techs,vintage)
5424    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
5425      and sum(yearsToCalc
5426        $(sameas(years, yearsToCalc)
5427          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
5428    = yes;
5429   
5430  * Extend the decom frame to the year after the last year of usedTech
5431  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5432    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
5433      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
5434    = yes;
5435   
5436   
5437  * // ## Load links from gdx file
5439   
5440   
5441  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
5442  option transfer_hasflowProfileIn < transfer_flowProfileIn;
5443   
5444  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
5445  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5446      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5447      = 1;
5448   
5449  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5450      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
5451      = 1;
5452   
5453  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
5454      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
5455      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
5456   
5457  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
5458      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
5459      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
5460   
5461  * aggregate time dimension
5462  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
5463  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5464      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5465      = sum(timeData$timeMapping(timeData,timeModelToCalc),
5466            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5467            / timeLength(timeModelToCalc));
5468  option clear = transfer_flowProfileIn;
5469   
5470  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5471      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
5472        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5473      = 1;
5474   
5475  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5476      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
5477        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5478      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
5479   
5480  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5481      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
5482        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
5483      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
5484   
5485  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
5486  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5487      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
5488          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
5489   
5490  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
5491  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5492      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
5494   
5495  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
5496  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
5497      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
5498          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
5499   
5500  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
5501  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
5502      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
5503   
5504  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
5505  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
5506      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5507          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
5508          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
5509      = (1 / sum(linksData
5510                  $links_aggregate(linksModelToCalc,linksData),
5511              1 / ( sum(link_types,
5512                          transfer_lengthParamIn(linksData,link_types,"length")
5513                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
5514                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
5515   
5516  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
5517  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
5518      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
5519              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
5520   
5521  * aggregate coefficient delays per link and reduce based on time resolution
5522  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
5524  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5525    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5526      or sum(link_types,
5527          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5528    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5529            + sum(link_types,
5530                transfer_lengthParam(linksModel,link_types,"length")
5531                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5532            / 1);
5534   
5535  * ==== parameter modifications ====
5536  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5537      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5538      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5539  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5540      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5541      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5542   
5543   
5544  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5545   
5546  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5547      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5548      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5549                       and transfer_incidenceData_flip(linksData) = 1),
5550              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5551              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5552          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5553                          and transfer_incidenceData_flip(linksData) = -1),
5554              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5555              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5556      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5557              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5558   
5559  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5560      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5561      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5562                       and transfer_incidenceData_flip(linksData) = 1),
5563              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5564              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5565          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5566                          and transfer_incidenceData_flip(linksData) = -1),
5567              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5568              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5569      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5570              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5571   
5572  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5573      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5574      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5575                       and transfer_incidenceData_flip(linksData) = 1
5576                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5577              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5578          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5579                          and transfer_incidenceData_flip(linksData) = -1
5580                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5581              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5582      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5583                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5584              1);
5585   
5586  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5587      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5588      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5589                       and transfer_incidenceData_flip(linksData) = 1
5590                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5591              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5592          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5593                          and transfer_incidenceData_flip(linksData) = -1
5594                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5595              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5596      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5597                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5598              1);
5599  option clear = transfer_flowProfileIn_aggTime;
5600   
5601  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5602   
5603  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5604      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5605      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5606                       and transfer_incidenceData_flip(linksData) = 1),
5607              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5608              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5609          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5610                          and transfer_incidenceData_flip(linksData) = -1),
5611              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5612              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5613      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5614              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5615   
5616  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5617      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5618      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5619                       and transfer_incidenceData_flip(linksData) = -1),
5620              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5621              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5622          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5623                          and transfer_incidenceData_flip(linksData) = 1),
5624              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5625              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5626      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5627              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5628   
5629  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5630      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5631      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5632                       and transfer_incidenceData_flip(linksData) = 1
5633                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5634              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5635          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5636                          and transfer_incidenceData_flip(linksData) = -1
5637                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5638              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5639      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5640                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5641              1);
5642   
5643  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5644      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5645      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5646                       and transfer_incidenceData_flip(linksData) = -1
5647                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5648              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5649          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5650                          and transfer_incidenceData_flip(linksData) = 1
5651                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5652              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5653      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5654                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5655              1);
5656   
5657  * Mapping for grid segments using DC optimal power flow
5658  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5659  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5660      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5663      = yes;
5666   
5667  * Ensure each grid segment uses exactly one commodity
5668  parameter checkGridSegmentCommodities(gridSegments);
5669  checkGridSegmentCommodities(gridSegments)
5670      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5671                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5672                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5673   
5674  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5675  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5676      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5677                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5678                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5679      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5680   
5681   
5685   
5686  scalar transfer_enableMIP;
5687  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5688   
5689   
5690  * ==== definition of variables ====
5691   
5692  * Initialise variables for linksBuild
5693  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5694      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5695      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5696  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5697      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5698      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5699  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5700      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5701      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5702   
5703  * Initialise variables for linksDecom
5704  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5705      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5706        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5707      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5708                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5709                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5710                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5711          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5712   
5713  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5714    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5715    = sum(years$
5716          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5717            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5718            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5719            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5720        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5721      + sum(yearsToCalc_a$
5722          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5723            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5724            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5725            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5726        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5727   
5728  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5729      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5730          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5731      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5732   
5733   
5735   
5736   
5737  * Calculate planned transfer links expansion
5738  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5739  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5740  loop(years,
5741    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5742      =
5743      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5744          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5745      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5746          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5747      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5748          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5749  );
5750   
5751  * Set initial state for planned units
5752  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5753    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5754   
5755  * // ## Load units from gdx file
5757   
5758  * Calculate if planned links expansion is bound by upper and lower limits
5759  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5760  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5761    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5762          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5763    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5764          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5765      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5766    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5767          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5768      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5769    = yes;
5770   
5771  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5772  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5773    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5774      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5775    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5776  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5777    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5778      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5779    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5780  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5781    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5782      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5783    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5784   
5785  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5786      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5787        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5788      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5789   
5790  * Add parameter for fixing capacities during myopic runs
5791  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5792  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5793  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5794   
5795  * ==== declaration of equations ====
5796   
5797  equations
5798    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5799      ) "Ensures the links balance over the planning period."
5800    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5801      ) "Ensures the links balance over the planning period."
5802    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5803      ) "Restricts the free decommissioning of links over the planning period."
5804    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5805      ) "Upper bound for the total number of links."
5806    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5807      ) "Lower bound for the total number of links."
5808    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5809      ) "Fixes the total number of links to the corresponding integer variable."
5810   
5811    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5812      ) "Upper bound for the flow along the transfer links."
5813    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5814      ) "Upper bound for the flow against the transfer links."
5815    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5816      )
5817    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5818      )
5819    ;
5820   
5821   
5822  * ==== equation definition ====
5823  * // ## Equations
5824  * // ### Transfer Links Balance
5825  * // Ensures that the transfer between nodes is balanced.
5826  * // {Eq_transfer_linksBalance}
5827   
5828  * Equation using build only
5829  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5830      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5831            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5832          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5833          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5834      ..
5835      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5836      =e=
5837      sum ((years_a)
5838              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5839                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5840                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5841                  and years_a.val <= yearsSel.val ),
5842            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5843   
5844      + sum ((yearsToCalc)
5845              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5846                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5847                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5848                  and yearsToCalc.val <= yearsSel.val ),
5849            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5850   
5851  * Equation using build and decom
5852  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5853      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5854            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5855          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5856          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5857      ..
5858      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5859      =e=
5860      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5861        sum(years$sameas(years, yearsToCalc),
5862          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5863            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5864      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5865        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5866          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5867      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5868          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5869      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5870          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5871      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5872          ;
5873   
5874  * // ### Transfer Links Free Decommissioning
5875  * // Balances free link decommissioning.
5876  * // {Eq_transfer_linksFreeDecom}
5877  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5878      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5879          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5880          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5881      ..
5882      sum(years$
5883            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5884              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5885              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5886          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5887      + sum(yearsToCalc$
5888            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5889              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5890              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5891              and yearsToCalc.val <= yearsSel.val),
5892          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5893      =g=
5894      sum(years$
5895            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5896              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5897              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5898          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5899      + sum(yearsToCalc$
5900            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5901              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5902              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5903          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5904   
5905  * // ### Transfer Links Lower Limit
5906  * // Ensures link capacity lower limits.
5907  * // {Eq_transfer_linksLowerLimit}
5908  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5909      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5910      ..
5911      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5912          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5913      =g=
5914      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5915   
5916  * // ### Transfer Links Upper Limit
5917  * // Ensures link capacity upper limits.
5918  * // {Eq_transfer_linksUpperLimit}
5919  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5920      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5921          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5922      ..
5923      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5924          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5925      =l=
5926      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5927   
5928  * // ### Transfer Links Total MIP
5929  * // Ensures number of MIP links.
5930  * // {Eq_transfer_linksTotalMIP}
5931  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5932      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5933          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5934      ..
5935      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5936      =e=
5937      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5938   
5939  * // ### Transfer Links Flow Along Upper Limit
5940  * // Ensures links flow along upper limit.
5941  * // {Eq_transfer_flowAlongUpperLimit}
5942  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5943      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5944      ..
5945      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5946      =l=
5947      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5948      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5949      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5950      ;
5951   
5952  * // ### Transfer Links Flow Against Upper Limit
5953  * // Ensures links flow against upper limit.
5954  * // {Eq_transfer_flowAgainstUpperLimit}
5955  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5956      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5957      ..
5958      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5959      =l=
5960      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
5961      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5962      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5963      ;
5964   
5965  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
5966  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
5967      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5968          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
5969      = yes;
5970   
5971  set transfer_usedOpfLinks(linksModel,years,gridSegments);
5972  option transfer_usedOpfLinks < transfer_usedOpf;
5973   
5974  set transfer_usedOpfSegments(years,gridSegments);
5975  option transfer_usedOpfSegments < transfer_usedOpf;
5976   
5980  * // ### Transfer DC optimal flow angle flows
5981  * // Angle flows.
5982  * // {Eq_transfer_dcopf_cycleFlows}
5983  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
5984      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
5985      ..
5986      sum ((transfer_techs,vintage)
5987              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
5988          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5989              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
5990          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
5991      =e=
5992      sum ( nodesModelSel,
5993          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
5994          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
5998   
5999   
6000  * ==== model definition ====
6001   
6002  Model M_transfer
6003  /
6004    Eq_transfer_linksBalance
6005    Eq_transfer_linksBalanceFreeDecom
6006    Eq_transfer_linksFreeDecom
6007    Eq_transfer_linksLowerLimit
6008    Eq_transfer_linksUpperLimit
6009    Eq_transfer_linksTotalMIP
6010    Eq_transfer_flowAlongUpperLimit
6011    Eq_transfer_flowAgainstUpperLimit
6015    Eq_transfer_dcopf_angleFlows
6019  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
6021  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6022  * SPDX-License-Identifier: BSD-3-Clause
6023   
6024  * // # core_sourcesink
6025  * // The equations in this file describe the sources and sinks in the model.
6026   
6027  * // ## Variables
6028  * // {special_table_sourcesink_variables}
6698   
6699  * // ## Aggregation of profiles
6700  * // Profiles are rescaled based on the annual sum.
6701   
6702  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6703  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
6704      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
6705  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
6706      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
6707  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
6708      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
6709   
6710  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6711  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6712      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6713      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6714   
6715  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6716  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6717      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6718      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
6719   
6720  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6721  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6722      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6723          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
6724          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
6725      = yes;
6726   
6727  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
6728              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
6729   
6730  * calculate scaling factor for each type
6731  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6732  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6733      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6734          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
6735      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
6736          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
6737              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
6738   
6739  * rescale profiles
6740  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6741      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6742      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6743          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
6744   
6745  * // ## Aggregation of profiles
6746  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
6747   
6748  * ==== aggregation of profiles ====
6749  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6750  option sourcesink_usesProfileIn < sourcesink_profileIn
6751   
6752  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6753  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6754      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
6755          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
6756      = yes;
6757   
6758  * aagregate time dimension
6759  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
6760  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6761    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6762    = sum(timeMapping_t(timeModelToCalc,timeData),
6763            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
6764      / timeLength(timeModelToCalc);
6765  option clear = sourcesink_profileIn;
6766   
6767  * sum up absolute profiles
6768  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
6769  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6770      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
6771      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
6772              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
6773  option clear = sourcesink_profileIn_aggTime;
6774   
6775  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
6776  option sourcesink_enabled < sourcesink_config;
6777   
6781   
6782  * ==== declaration of variables ====
6783  * // ## Bounding of variables
6784  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
6785  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6786      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6787          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
6788          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
6789      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
6790   
6791  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6792      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6793          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
6794          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
6795      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
6796   
6797  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6798      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
6799          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
6800      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
6801   
6802  option clear = sourcesink_profile;
6803   
6804   
6805  * ==== equation definition ====
6806  * // ## Equations
6807  equations
6808  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
6809      ) "Fixes the annual sum from sources / to sinks"
6810  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
6811      ) "Limits the lower sum from sources / to sinks"
6812  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
6813      ) "Limits the upper sum from sources / to sinks"
6814    ;
6815   
6816  * // ### Fixed annual sums for sources and sinks
6817  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
6818  * // {Eq_sourcesink_useFixedSum}
6819  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6820      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6821          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
6822      ..
6823      sum(timeModelSel,
6824          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6825          * timeLength(timeModelSel))
6826      =e=
6827      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
6828      * timefrac
6829      ;
6830   
6831  * // ### Lower annual sums for sources and sinks
6832  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
6833  * // {Eq_sourcesink_useLowerSum}
6834  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6835      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6836          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
6837          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
6838      ..
6839      sum(timeModelSel,
6840          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6841          * timeLength(timeModelSel))
6842      =g=
6843      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
6844      * timefrac
6845      ;
6846   
6847  * // ### Upper annual sums for sources and sinks
6848  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
6849  * // {Eq_sourcesink_useUpperSum}
6850  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6851      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
6852          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
6853          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
6854      ..
6855      sum(timeModelSel,
6856          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6857          * timeLength(timeModelSel))
6858      =l=
6859      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
6860      * timefrac
6861      ;
6862   
6863   
6864  * ==== model definition ====
6865   
6866  Model M_sourcesink
6867  /
6868    Eq_sourcesink_useFixedSum
6869    Eq_sourcesink_useLowerSum
6870    Eq_sourcesink_useUpperSum
6871  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
6873  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6874  * SPDX-License-Identifier: BSD-3-Clause
6875   
6876  * // # balance
6877  * // The equations in this file describe the commodity balancing in the model.
6878   
6879  Equations
6880    Eq_balance_commodities(timeModel,nodesModel,years,commodity
6881      ) "Balance for each commodity used in each time step, region, and year";
6882   
6883   
6884  * ==== calculation of mappings ====
6885   
6886  set balance_techComm(techs,commodity);
6887  balance_techComm(converter_techs(techs),commodity)
6888      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
6889  balance_techComm(storage_techs(techs),commodity)
6890      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
6891  balance_techComm(transfer_techs(techs),commodity)
6892      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
6893  balance_techComm(sourcesink_techs(techs),commodity)
6894      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
6895   
6896  set balance_usedConverter(nodesModel,years,commodity);
6897  set balance_usedStorage(nodesModel,years,commodity);
6898  set balance_usedTransfer(nodesModel,years,commodity);
6899  set balance_usedSourceSink(nodesModel,years,commodity);
6900  set balance_usedBalance(nodesModel,years,commodity);
6901   
6902  balance_usedConverter(nodesModel,years,commodity)
6903      = sum ((converter_techs,vintage,activity)
6904              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
6905                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
6906   
6907  balance_usedStorage(nodesModel,years,commodity)
6908      = sum ((storage_techs,vintage,activity)
6909              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6910                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
6911   
6912  balance_usedTransfer(nodesModel,years,commodity)
6913      = sum ((linksModel,transfer_techs,vintage)
6914              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
6915                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
6916   
6917  option balance_usedSourceSink < sourcesink_enabled;
6918   
6919  balance_usedBalance(nodesModel,years,commodity)
6920      $(balance_usedConverter(nodesModel,years,commodity)
6921          or balance_usedStorage(nodesModel,years,commodity)
6922          or balance_usedTransfer(nodesModel,years,commodity)
6923          or balance_usedSourceSink(nodesModel,years,commodity) )
6924      = yes;
6925   
6926   
6927  * ==== equation definition ====
6928   
6929  * // ### Balance commodities
6930  * // Balancing of commodities for all model regions, time steps, and years
6931  * // {Eq_balance_commodities}
6932  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
6933      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
6934      ..
6935  * converter
6936      sum((converter_techs,vintage,activity)
6937              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
6938                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
6939          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6940              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
6941              * timeLength(timeModelToCalc)
6942          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
6943              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
6944              * timeLength(timeModelToCalc))
6945   
6946  * storages
6947      + sum((storage_techs,vintage)
6948              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
6949                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
6950          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6951              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6952          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6953              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
6954          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
6955              * storage_sizeParam(storage_techs,vintage,commodity,"size")
6956              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
6957              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
6958                  and ord(timeModelToCalc)=1)
6959          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6962          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
6963          * timeLength(timeModelSel)
6966          )
6967   
6968  * incoming transfer
6969      + sum((linksModel,transfer_techs,vintage)
6970              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6971                  and linksModelToCalc(linksModel)),
6972          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6973                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
6974            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
6975                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
6976          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6977          * timeLength(timeModelToCalc))
6978   
6979  * outgoing transfer
6980      - sum((linksModel,transfer_techs,vintage)
6981              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6982                  and linksModelToCalc(linksModel)),
6983          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6984                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
6985            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6986                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
6987          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
6988          * timeLength(timeModelSel))
6989   
6990  * transfer losses
6991      + 0.5 * sum((linksModel,transfer_techs,vintage)
6992              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
6993                  AND linksModelToCalc(linksModel)),
6994          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6995                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
6996            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
6997                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
6998          * timeLength(timeModelSel)
6999          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
7000              + sum(link_types,
7001                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
7002                  * transfer_lengthParam(linksModel,link_types,"length"))))
7003   
7004  * sourcesink
7005      + sum((sourcesink_techs)
7006              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7007          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7008          * timeLength(timeModelSel))
7009      =e=
7010      0;
7011   
7012   
7013  * ==== model definition ====
7014   
7015  Model M_balance
7016  /
7017    Eq_balance_commodities
7018  /;
7019   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
7021  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7022  * SPDX-License-Identifier: BSD-3-Clause
7023   
7024  * // # accounting_equations
7025   
7026  * ==== declaration of variables ====
7027   
7028  variables
7029  accounting_indicator(accNodesModel,accYears,indicator)
7030  accounting_indicator_links(linksModel,years,indicator)
7031  accounting_objective
7032  ;
7033   
7034   
7035  * ==== definition of variables ====
7036   
7037  accounting_indicator.lo(accNodesModel,accYears,indicator)
7038      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7039          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7040      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7041   
7042  accounting_indicator.up(accNodesModel,accYears,indicator)
7043      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7044          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7045      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7046   
7047  accounting_indicator.fx(accNodesModel,accYears,indicator)
7048      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
7049          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
7050      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7051   
7052   
7053  * set the variable levels to be fixed for years before the optimization years
7054  accounting_indicator.l(accNodesModel,accYears,indicator)
7055      $activeIndicators(accNodesModel,accYears,indicator)
7056      = 0;
7057   
7058   
7059  * ==== declaration of equations ====
7060   
7061  equations
7062  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
7063      ) "Ensures the fixed value of an indicator per accounting region"
7064  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
7065      ) "Ensures the upper limit of an indicator per accounting region"
7066  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
7067      ) "Ensures the lower limit of an indicator per accounting region"
7068  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
7069      ) "Ensures the fixed value of an indicator per model link"
7070  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
7071      ) "Ensures the upper limit of an indicator per model link"
7072  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
7073      ) "Ensures the lower limit of an indicator per model link"
7074  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
7075    ;
7076   
7077   
7078  * ==== equations definition ====
7079  * // ## Equations
7080  * // ### Accounting Indicator Calculation
7081  * // Calculates the fixed limit for accounting indicators.
7082  * // {Eq_accounting_indicatorCalc_fixed}
7083  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
7084      $(activeIndicators(accNodesModel,accYears,indicator)
7085          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7086      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7088  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7089  * SPDX-License-Identifier: BSD-3-Clause
7090   
7091  * == variable indicators ==
7092      sum((accNodesModel_a,accYears_a,indicator_a)
7093          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7094              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7095          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7096          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7097          )
7098   
7099  * == converters ==
7100      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7101              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7102                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7103          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7104          *
7105          ( sum ((converter_techs,vintage)
7106                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7107                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7108              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7109              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7110              )
7111   
7112          + sum ((years_a,converter_techs,vintage)
7113                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7114                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7115                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7116                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7117                          and years_a.val <= yearsSel.val ),
7118              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7119              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7120              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7121              )
7122   
7123          + sum ((yearsToCalc,converter_techs,vintage)
7124                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7125                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7126                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7127                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7128                          and yearsToCalc.val <= yearsSel.val ),
7129              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7130              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7131              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7132              )
7133   
7134          + sum ((converter_techs,vintage)
7135                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7136                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7137              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7138              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7139   
7140          + sum ((converter_techs,vintage)
7141                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7142              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7143              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7144   
7145          + sum ((timeModelSel,converter_techs,vintage,activity)
7146                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7147              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7148              * timeLength(timeModelSel)
7149              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7150          / timefrac
7151   
7152          + sum ((timeModelSel,converter_techs,vintage)
7153                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7154              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7155              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7156          / timefrac
7157   
7158          + sum ((timeModelSel,converter_techs,vintage)
7159                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7160              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7161              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7162                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7163   
7164              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7165              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7166                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7167          / timefrac
7168          )
7169      )
7170   
7171  * == storage ==
7172      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7173              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7174                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7175          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7176          *
7177          ( sum ((storage_techs,vintage)
7178                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7179                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7180              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7181              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7182              )
7183   
7184          + sum ((years_a,storage_techs,vintage)
7185                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7186                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7187                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7188                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7189                          and years_a.val <= yearsSel.val ),
7190              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7191              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7192              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7193              )
7194   
7195          + sum ((yearsToCalc,storage_techs,vintage)
7196                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7197                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7198                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7199                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7200                          and yearsToCalc.val <= yearsSel.val ),
7201              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7202              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7203              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7204              )
7205   
7206          + sum ((storage_techs,vintage)
7207                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7208                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7209              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7210              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7211   
7212          + sum ((storage_techs,vintage)
7213                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7214              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7215              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7216          )
7217      )
7218   
7219   
7220  * == transfer ==
7221      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7222              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7223                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7224          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7225          *
7226          ( sum ((linksModelToCalc,transfer_techs,vintage)
7227                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7228                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7229                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7230              0.5
7231              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7232              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7233   
7234          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7235                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7236                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7237                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7238                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7239                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7240                          and years_a.val <= yearsSel.val ),
7241              0.5
7242              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7243              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7244              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7245   
7246          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7247                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7248                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7249                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7250                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7251                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7252                          and yearsToCalc.val <= yearsSel.val ),
7253              0.5
7254              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7255              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7256              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7257   
7258          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7259                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7260                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7261                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7262              0.5
7263              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7264              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7265              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7266   
7267          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7268                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7269                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7270                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7271                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7272                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7273                          and years_a.val <= yearsSel.val ),
7274              0.5
7275              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7276              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7277              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7278              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7279   
7280          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7281                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7282                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7283                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7284                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7285                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7286                          and yearsToCalc.val <= yearsSel.val ),
7287              0.5
7288              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7289              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7290              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7291              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7292   
7293          + sum ((linksModelToCalc,transfer_techs,vintage)
7294                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7295                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7296                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7297              0.5
7298              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7299              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7300   
7301              + 0.5
7302              * sum (link_types,
7303                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7304                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7305                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7306              ) )
7307   
7308          + sum ((linksModelToCalc,transfer_techs,vintage)
7309                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7310                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7311              0.5
7312              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7313              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7314   
7315              + 0.5
7316              * sum (link_types,
7317                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7318                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7319                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7320   
7321              + 0.5
7322              * sum (timeModelSel,
7323                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7324                  * timeLength(timeModelSel)
7325                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7326                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7327   
7328                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7329                  * timeLength(timeModelSel)
7330                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7331                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7332                  / timefrac
7333   
7334              + 0.5
7335              * sum ((timeModelSel, link_types),
7336                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7337                  * timeLength(timeModelSel)
7338                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7339                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7340                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7341   
7342                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7343                  * timeLength(timeModelSel)
7344                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7345                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7346                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7347                  / timefrac
7348              )
7349          )
7350      )
7351   
7352   
7353  * == sources / sinks ==
7354      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7355              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7356                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7357          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7358          *
7359          sum ((timeModelSel,sourcesink_techs,commodity)
7360                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7361              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7362              * timeLength(timeModelSel)
7363              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7364          / timefrac
7365      )
7366      =e=
7367      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
7368   
7369  * // ### Accounting Indicator Calculation
7370  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7371  * // {Eq_accounting_indicatorCalc_upper}
7372  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
7373      $(activeIndicators(accNodesModel,accYears,indicator)
7374          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
7375          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7376      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7378  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7379  * SPDX-License-Identifier: BSD-3-Clause
7380   
7381  * == variable indicators ==
7382      sum((accNodesModel_a,accYears_a,indicator_a)
7383          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7384              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7385          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7386          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7387          )
7388   
7389  * == converters ==
7390      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7391              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7392                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7393          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7394          *
7395          ( sum ((converter_techs,vintage)
7396                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7397                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7398              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7399              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7400              )
7401   
7402          + sum ((years_a,converter_techs,vintage)
7403                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7404                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7405                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7406                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7407                          and years_a.val <= yearsSel.val ),
7408              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7409              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7410              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7411              )
7412   
7413          + sum ((yearsToCalc,converter_techs,vintage)
7414                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7415                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7416                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7417                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7418                          and yearsToCalc.val <= yearsSel.val ),
7419              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7420              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7421              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7422              )
7423   
7424          + sum ((converter_techs,vintage)
7425                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7426                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7427              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7428              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7429   
7430          + sum ((converter_techs,vintage)
7431                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7432              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7433              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7434   
7435          + sum ((timeModelSel,converter_techs,vintage,activity)
7436                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7437              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7438              * timeLength(timeModelSel)
7439              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7440          / timefrac
7441   
7442          + sum ((timeModelSel,converter_techs,vintage)
7443                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7444              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7445              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7446          / timefrac
7447   
7448          + sum ((timeModelSel,converter_techs,vintage)
7449                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7450              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7451              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7452                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7453   
7454              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7455              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7456                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7457          / timefrac
7458          )
7459      )
7460   
7461  * == storage ==
7462      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7463              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7464                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7465          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7466          *
7467          ( sum ((storage_techs,vintage)
7468                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7469                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7470              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7471              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7472              )
7473   
7474          + sum ((years_a,storage_techs,vintage)
7475                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7476                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7477                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7478                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7479                          and years_a.val <= yearsSel.val ),
7480              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7481              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7482              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7483              )
7484   
7485          + sum ((yearsToCalc,storage_techs,vintage)
7486                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7487                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7488                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7489                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7490                          and yearsToCalc.val <= yearsSel.val ),
7491              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7492              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7493              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7494              )
7495   
7496          + sum ((storage_techs,vintage)
7497                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7498                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7499              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7500              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7501   
7502          + sum ((storage_techs,vintage)
7503                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7504              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7505              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7506          )
7507      )
7508   
7509   
7510  * == transfer ==
7511      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7512              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7513                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7514          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7515          *
7516          ( sum ((linksModelToCalc,transfer_techs,vintage)
7517                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7518                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7519                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7520              0.5
7521              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7522              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7523   
7524          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7525                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7526                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7527                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7528                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7529                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7530                          and years_a.val <= yearsSel.val ),
7531              0.5
7532              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7533              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7534              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7535   
7536          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7537                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7538                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7539                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7540                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7541                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7542                          and yearsToCalc.val <= yearsSel.val ),
7543              0.5
7544              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7545              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7546              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7547   
7548          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7549                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7550                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7551                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7552              0.5
7553              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7554              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7555              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7556   
7557          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7558                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7559                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7560                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7561                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7562                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7563                          and years_a.val <= yearsSel.val ),
7564              0.5
7565              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7566              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7567              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7568              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7569   
7570          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7571                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7572                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7573                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7574                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7575                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7576                          and yearsToCalc.val <= yearsSel.val ),
7577              0.5
7578              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7579              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7580              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7581              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7582   
7583          + sum ((linksModelToCalc,transfer_techs,vintage)
7584                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7585                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7586                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7587              0.5
7588              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7589              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7590   
7591              + 0.5
7592              * sum (link_types,
7593                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7594                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7595                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7596              ) )
7597   
7598          + sum ((linksModelToCalc,transfer_techs,vintage)
7599                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7600                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7601              0.5
7602              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7603              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7604   
7605              + 0.5
7606              * sum (link_types,
7607                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7608                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7609                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7610   
7611              + 0.5
7612              * sum (timeModelSel,
7613                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7614                  * timeLength(timeModelSel)
7615                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7616                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7617   
7618                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7619                  * timeLength(timeModelSel)
7620                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7621                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7622                  / timefrac
7623   
7624              + 0.5
7625              * sum ((timeModelSel, link_types),
7626                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7627                  * timeLength(timeModelSel)
7628                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7629                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7630                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7631   
7632                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7633                  * timeLength(timeModelSel)
7634                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7635                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7636                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7637                  / timefrac
7638              )
7639          )
7640      )
7641   
7642   
7643  * == sources / sinks ==
7644      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7645              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7646                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7647          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7648          *
7649          sum ((timeModelSel,sourcesink_techs,commodity)
7650                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7651              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7652              * timeLength(timeModelSel)
7653              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7654          / timefrac
7655      )
7656      =l=
7657      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
7658   
7659  * // ### Accounting Indicator Calculation
7660  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
7661  * // {Eq_accounting_indicatorCalc_lower}
7662  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
7663      $(activeIndicators(accNodesModel,accYears,indicator)
7664          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
7665          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
7666      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7668  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7669  * SPDX-License-Identifier: BSD-3-Clause
7670   
7671  * == variable indicators ==
7672      sum((accNodesModel_a,accYears_a,indicator_a)
7673          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7674              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7675          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7676          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7677          )
7678   
7679  * == converters ==
7680      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7681              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7682                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7683          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7684          *
7685          ( sum ((converter_techs,vintage)
7686                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7687                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7688              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7689              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7690              )
7691   
7692          + sum ((years_a,converter_techs,vintage)
7693                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7694                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7695                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7696                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7697                          and years_a.val <= yearsSel.val ),
7698              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7699              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7700              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7701              )
7702   
7703          + sum ((yearsToCalc,converter_techs,vintage)
7704                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7705                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7706                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7707                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7708                          and yearsToCalc.val <= yearsSel.val ),
7709              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7710              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7711              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7712              )
7713   
7714          + sum ((converter_techs,vintage)
7715                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7716                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7717              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7718              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7719   
7720          + sum ((converter_techs,vintage)
7721                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7722              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7723              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7724   
7725          + sum ((timeModelSel,converter_techs,vintage,activity)
7726                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7727              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7728              * timeLength(timeModelSel)
7729              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7730          / timefrac
7731   
7732          + sum ((timeModelSel,converter_techs,vintage)
7733                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7734              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7735              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7736          / timefrac
7737   
7738          + sum ((timeModelSel,converter_techs,vintage)
7739                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7740              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7741              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7742                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7743   
7744              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7745              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7746                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7747          / timefrac
7748          )
7749      )
7750   
7751  * == storage ==
7752      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7753              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7754                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7755          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7756          *
7757          ( sum ((storage_techs,vintage)
7758                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7759                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7760              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7761              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7762              )
7763   
7764          + sum ((years_a,storage_techs,vintage)
7765                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7766                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7767                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7768                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7769                          and years_a.val <= yearsSel.val ),
7770              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7771              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7772              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7773              )
7774   
7775          + sum ((yearsToCalc,storage_techs,vintage)
7776                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7777                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7778                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7779                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7780                          and yearsToCalc.val <= yearsSel.val ),
7781              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7782              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7783              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7784              )
7785   
7786          + sum ((storage_techs,vintage)
7787                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7788                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7789              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7790              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7791   
7792          + sum ((storage_techs,vintage)
7793                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7794              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7795              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7796          )
7797      )
7798   
7799   
7800  * == transfer ==
7801      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7802              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7803                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7804          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7805          *
7806          ( sum ((linksModelToCalc,transfer_techs,vintage)
7807                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7808                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7809                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7810              0.5
7811              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7812              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7813   
7814          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7815                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7816                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7817                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7818                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7819                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7820                          and years_a.val <= yearsSel.val ),
7821              0.5
7822              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7823              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7824              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7825   
7826          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7827                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7828                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7829                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7830                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7831                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7832                          and yearsToCalc.val <= yearsSel.val ),
7833              0.5
7834              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7835              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7836              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7837   
7838          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7839                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7840                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7841                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7842              0.5
7843              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7844              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7845              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7846   
7847          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7848                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7849                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7850                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7851                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7852                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7853                          and years_a.val <= yearsSel.val ),
7854              0.5
7855              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7856              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7857              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7858              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7859   
7860          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7861                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7862                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7863                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7864                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7865                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7866                          and yearsToCalc.val <= yearsSel.val ),
7867              0.5
7868              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7869              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7870              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7871              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7872   
7873          + sum ((linksModelToCalc,transfer_techs,vintage)
7874                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7875                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7876                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7877              0.5
7878              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7879              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7880   
7881              + 0.5
7882              * sum (link_types,
7883                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7884                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7885                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7886              ) )
7887   
7888          + sum ((linksModelToCalc,transfer_techs,vintage)
7889                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7890                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7891              0.5
7892              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7893              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7894   
7895              + 0.5
7896              * sum (link_types,
7897                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7898                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7899                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7900   
7901              + 0.5
7902              * sum (timeModelSel,
7903                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7904                  * timeLength(timeModelSel)
7905                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7906                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7907   
7908                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7909                  * timeLength(timeModelSel)
7910                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7911                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7912                  / timefrac
7913   
7914              + 0.5
7915              * sum ((timeModelSel, link_types),
7916                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7917                  * timeLength(timeModelSel)
7918                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7919                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7920                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7921   
7922                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7923                  * timeLength(timeModelSel)
7924                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7925                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7926                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7927                  / timefrac
7928              )
7929          )
7930      )
7931   
7932   
7933  * == sources / sinks ==
7934      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7935              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7936                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7937          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7938          *
7939          sum ((timeModelSel,sourcesink_techs,commodity)
7940                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7941              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7942              * timeLength(timeModelSel)
7943              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7944          / timefrac
7945      )
7946      =g=
7947      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
7948   
7949   
7950  * // ### Accounting Indicator Calculation Links
7951  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7952  * // {Eq_accounting_indicatorCalc_links_fixed}
7953  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
7954      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7955          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7956      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7958  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7959  * SPDX-License-Identifier: BSD-3-Clause
7960   
7961      sum ((transfer_techs,vintage)
7962                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7963                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7964          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7965          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7966   
7967      + sum ((years_a,transfer_techs,vintage)
7968                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7969                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7970                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7971                      and years_a.val <= yearsSel.val ),
7972          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7973          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7974          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7975   
7976      + sum ((transfer_techs,vintage,link_types)
7977                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7978                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7979          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7980          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7981          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7982   
7983      + sum ((years_a,transfer_techs,vintage,link_types)
7984                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7985                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7986                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7987                      and years_a.val <= yearsSel.val ),
7988          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7989          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7990          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7991          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7992   
7993      + sum ((transfer_techs,vintage)
7994                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7995                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7996          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7997          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7998   
7999          + sum (link_types,
8000              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8001              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8002              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8003          ) )
8004   
8005      + sum ((transfer_techs,vintage)
8006                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8007          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8008          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8009   
8010          + sum (link_types,
8011              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8012              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8013              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8014   
8015          + sum (timeModelSel,
8016              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8017              * timeLength(timeModelSel)
8018              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8019                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8020   
8021              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8022              * timeLength(timeModelSel)
8023              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8024                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8025              / timefrac
8026   
8027          + sum ((timeModelSel, link_types),
8028              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8029              * timeLength(timeModelSel)
8030              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8031              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8032                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8033   
8034              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8035              * timeLength(timeModelSel)
8036              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8037              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8038                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8039              / timefrac
8040          )
8041      =e=
8042  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
8043   
8044  * // ### Accounting Indicator Calculation Links
8045  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8046  * // {Eq_accounting_indicatorCalc_links_upper}
8047  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
8048      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8049          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
8050          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8051      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8053  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8054  * SPDX-License-Identifier: BSD-3-Clause
8055   
8056      sum ((transfer_techs,vintage)
8057                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8058                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8059          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8060          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8061   
8062      + sum ((years_a,transfer_techs,vintage)
8063                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8064                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8065                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8066                      and years_a.val <= yearsSel.val ),
8067          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8068          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8069          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8070   
8071      + sum ((transfer_techs,vintage,link_types)
8072                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8073                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8074          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8075          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8076          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8077   
8078      + sum ((years_a,transfer_techs,vintage,link_types)
8079                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8080                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8081                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8082                      and years_a.val <= yearsSel.val ),
8083          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8084          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8085          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8086          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8087   
8088      + sum ((transfer_techs,vintage)
8089                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8090                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8091          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8092          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8093   
8094          + sum (link_types,
8095              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8096              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8097              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8098          ) )
8099   
8100      + sum ((transfer_techs,vintage)
8101                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8102          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8103          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8104   
8105          + sum (link_types,
8106              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8107              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8108              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8109   
8110          + sum (timeModelSel,
8111              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8112              * timeLength(timeModelSel)
8113              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8114                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8115   
8116              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8117              * timeLength(timeModelSel)
8118              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8119                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8120              / timefrac
8121   
8122          + sum ((timeModelSel, link_types),
8123              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8124              * timeLength(timeModelSel)
8125              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8126              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8127                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8128   
8129              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8130              * timeLength(timeModelSel)
8131              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8132              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8133                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8134              / timefrac
8135          )
8136      =l=
8137  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
8138   
8139  * // ### Accounting Indicator Calculation Links
8140  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
8141  * // {Eq_accounting_indicatorCalc_links_lower}
8142  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
8143      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
8144          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
8145          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
8146      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
8148  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8149  * SPDX-License-Identifier: BSD-3-Clause
8150   
8151      sum ((transfer_techs,vintage)
8152                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8153                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8154          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8155          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8156   
8157      + sum ((years_a,transfer_techs,vintage)
8158                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8159                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8160                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8161                      and years_a.val <= yearsSel.val ),
8162          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8163          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8164          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8165   
8166      + sum ((transfer_techs,vintage,link_types)
8167                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8168                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8169          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8170          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8171          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8172   
8173      + sum ((years_a,transfer_techs,vintage,link_types)
8174                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8175                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8176                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8177                      and years_a.val <= yearsSel.val ),
8178          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8179          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8180          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8181          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8182   
8183      + sum ((transfer_techs,vintage)
8184                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8185                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8186          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8187          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8188   
8189          + sum (link_types,
8190              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8191              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8192              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8193          ) )
8194   
8195      + sum ((transfer_techs,vintage)
8196                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
8197          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8198          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8199   
8200          + sum (link_types,
8201              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8202              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8203              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8204   
8205          + sum (timeModelSel,
8206              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8207              * timeLength(timeModelSel)
8208              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8209                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8210   
8211              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8212              * timeLength(timeModelSel)
8213              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8214                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8215              / timefrac
8216   
8217          + sum ((timeModelSel, link_types),
8218              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8219              * timeLength(timeModelSel)
8220              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8221              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8222                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8223   
8224              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8225              * timeLength(timeModelSel)
8226              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8227              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8228                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8229              / timefrac
8230          )
8231      =g=
8232  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
8233   
8234   
8235  * // ### Accounting Objective
8236  * // Calculates the indicators for the objective.
8237  * // {Eq_accounting_objective}
8238  Eq_accounting_objective
8239      ..
8240      accounting_objective
8241      =e=
8242      sum ((accNodesModel,accYears,indicator)
8243              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
8244          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
8245          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8247  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8248  * SPDX-License-Identifier: BSD-3-Clause
8249   
8250  * == variable indicators ==
8251      sum((accNodesModel_a,accYears_a,indicator_a)
8252          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8253              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8254          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8255          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8256          )
8257   
8258  * == converters ==
8259      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8260              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8261                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8262          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8263          *
8264          ( sum ((converter_techs,vintage)
8265                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8266                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8267              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8268              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8269              )
8270   
8271          + sum ((years_a,converter_techs,vintage)
8272                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8273                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8274                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8275                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8276                          and years_a.val <= yearsSel.val ),
8277              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8278              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8279              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8280              )
8281   
8282          + sum ((yearsToCalc,converter_techs,vintage)
8283                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8284                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8285                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8286                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8287                          and yearsToCalc.val <= yearsSel.val ),
8288              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8289              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8290              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8291              )
8292   
8293          + sum ((converter_techs,vintage)
8294                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8295                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8296              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8297              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8298   
8299          + sum ((converter_techs,vintage)
8300                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8301              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8302              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8303   
8304          + sum ((timeModelSel,converter_techs,vintage,activity)
8305                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8306              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8307              * timeLength(timeModelSel)
8308              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8309          / timefrac
8310   
8311          + sum ((timeModelSel,converter_techs,vintage)
8312                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8313              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8314              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8315          / timefrac
8316   
8317          + sum ((timeModelSel,converter_techs,vintage)
8318                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8319              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8320              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8321                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8322   
8323              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8324              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8325                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8326          / timefrac
8327          )
8328      )
8329   
8330  * == storage ==
8331      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8332              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8333                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8334          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8335          *
8336          ( sum ((storage_techs,vintage)
8337                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8338                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8339              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8340              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8341              )
8342   
8343          + sum ((years_a,storage_techs,vintage)
8344                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8345                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8346                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8347                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8348                          and years_a.val <= yearsSel.val ),
8349              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8350              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8351              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8352              )
8353   
8354          + sum ((yearsToCalc,storage_techs,vintage)
8355                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8356                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8357                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8358                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8359                          and yearsToCalc.val <= yearsSel.val ),
8360              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8361              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8362              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8363              )
8364   
8365          + sum ((storage_techs,vintage)
8366                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8367                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8368              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8369              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8370   
8371          + sum ((storage_techs,vintage)
8372                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8373              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8374              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8375          )
8376      )
8377   
8378   
8379  * == transfer ==
8380      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8381              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8382                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8383          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8384          *
8385          ( sum ((linksModelToCalc,transfer_techs,vintage)
8386                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8387                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8388                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8389              0.5
8390              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8391              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8392   
8393          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8394                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8395                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8396                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8397                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8398                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8399                          and years_a.val <= yearsSel.val ),
8400              0.5
8401              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8402              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8403              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8404   
8405          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8406                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8407                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8408                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8409                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8410                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8411                          and yearsToCalc.val <= yearsSel.val ),
8412              0.5
8413              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8414              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8415              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8416   
8417          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8418                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8419                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8420                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8421              0.5
8422              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8423              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8424              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8425   
8426          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8427                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8428                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8429                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8430                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8431                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8432                          and years_a.val <= yearsSel.val ),
8433              0.5
8434              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8435              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8436              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8437              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8438   
8439          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8440                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8441                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8442                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8443                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8444                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8445                          and yearsToCalc.val <= yearsSel.val ),
8446              0.5
8447              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8448              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8449              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8450              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8451   
8452          + sum ((linksModelToCalc,transfer_techs,vintage)
8453                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8454                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8455                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8456              0.5
8457              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8458              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8459   
8460              + 0.5
8461              * sum (link_types,
8462                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8463                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8464                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8465              ) )
8466   
8467          + sum ((linksModelToCalc,transfer_techs,vintage)
8468                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8469                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8470              0.5
8471              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8472              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8473   
8474              + 0.5
8475              * sum (link_types,
8476                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8477                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8478                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8479   
8480              + 0.5
8481              * sum (timeModelSel,
8482                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8483                  * timeLength(timeModelSel)
8484                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8485                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8486   
8487                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8488                  * timeLength(timeModelSel)
8489                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8490                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8491                  / timefrac
8492   
8493              + 0.5
8494              * sum ((timeModelSel, link_types),
8495                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8496                  * timeLength(timeModelSel)
8497                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8498                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8499                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8500   
8501                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8502                  * timeLength(timeModelSel)
8503                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8504                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8505                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8506                  / timefrac
8507              )
8508          )
8509      )
8510   
8511   
8512  * == sources / sinks ==
8513      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8514              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8515                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8516          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8517          *
8518          sum ((timeModelSel,sourcesink_techs,commodity)
8519                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8520              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8521              * timeLength(timeModelSel)
8522              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8523          / timefrac
8524      )
8525      )
8526   
8527   
8528  * ==== model definition ====
8529   
8530  Model M_accounting
8531  /
8532  Eq_accounting_indicatorCalc_fixed
8533  Eq_accounting_indicatorCalc_upper
8534  Eq_accounting_indicatorCalc_lower
8535  Eq_accounting_indicatorCalc_links_fixed
8536  Eq_accounting_indicatorCalc_links_upper
8537  Eq_accounting_indicatorCalc_links_lower
8538  Eq_accounting_objective
8539  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
8541  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8542  * SPDX-License-Identifier: BSD-3-Clause
8543   
8544  * ==== optimization frames ====
8546   
8547  * mapping from optimization frame to years
8549  set optiframe / of1 * of1 /;
8550  set optiframeToCalc(optiframe);
8551   
8553  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
8555   
8557   
8558  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
8560  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8561  * SPDX-License-Identifier: BSD-3-Clause
8562   
8563  * ==== Overview of model dimensions ====
8564  parameters  acts(converter_techs) "active technologies"
8565              asts(storage_techs) "active storage technologies"
8566              atts(transfer_techs) "active transfer technologies"
8567   
8568  scalars nd "number of dispatch time steps per year"
8569          nn "number of network nodes"
8570          nl "number of network links"
8571          nt "number of converter, storage and transfer technologies"
8572          nc "number of commodities"
8573          ny "number of years of the capacity planning horizon";
8574   
8575  option acts < converter_availTech;
8576  option asts < storage_availTech;
8577  option atts < transfer_availTech;
8578   
8579  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
8580  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
8581  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
8582  nt = sum (storage_techs $asts(storage_techs), 1)
8583      + sum (converter_techs $acts(converter_techs), 1)
8584      + sum (transfer_techs $atts(transfer_techs), 1);
8585  nc = card(commodity);
8586  ny = sum (years $yearsToCalc(years), 1);
8587   
8588  file props / '' /;
8589  put props;
8590  put "### Model properties  ###" /;
8591  put "Number of active dispatch time steps per year: " nd:0:0  /;
8592  put "Number of active network nodes: " nn:0:0  /;
8593  put "Number of active network links: " nl:0:0  /;
8594  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
8595  put "Number of commodities: " nc:0:0  /;
8596  put "Number of years considered for capacity expansion: " ny:0:0  /;
8597  putclose;
8598   
8599  Model remix /
8600    M_converter
8601    M_storage
8602    M_transfer
8603    M_sourcesink
8604    M_balance
8605    M_accounting
8606  /;
8607   
8611   
8612  * ==== include methods  ====
8615   
8616  * check if the method is valid
8621   
8622   
8623  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
8625  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8626  * SPDX-License-Identifier: BSD-3-Clause
8627   
8630   
8633   
8634  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
8636  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8637  * SPDX-License-Identifier: BSD-3-Clause
8638   
8642   
8643  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
8645  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8646  * SPDX-License-Identifier: BSD-3-Clause
8647   
8651   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
8653  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8654  * SPDX-License-Identifier: BSD-3-Clause
8655   
8657   
8659   
8660  * ==== GAMS solver options ====
8666   
8667  * ==== REMix debug options ====
8671   
8672  * ==== REMix solver defaults ====
8680   
8688   
8698   
8706   
8715   
8716   
8717  * ==== setup optimization ====
8718  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
8719     option limRow=0, limCol=0, solPrint=off;
8720  else
8721     option limRow=100000, limCol=100000, solPrint=on;
8722  );
8723   
8724   
8725  * ==== Solver specific default values ====
8726   
8746   
8747   
8749   
8750   
8752   
8753  option mip = cplex;
8754  option reslim = 1209600;
8755  option optcr = 1e-3;
8756  remix.threads = 8;
8757  remix.optFile = 1;
8758  remix.solveLink = 0;
8759  remix.holdFixed = 1;
8760   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
8763  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8764  * SPDX-License-Identifier: BSD-3-Clause
8765   
8767   
8769  file opt / "cplex.opt" /;
8770  put opt;
8771  put "names no" /;
8772  put "rerun no" /;
8773   
8774  put "lpmethod 4" /;
8775  put "threads 8" /;
8776  put "barorder 3" /;
8777   
8779  put "scaind 0" /;
8780  put "predual -1" /;
8781   
8784  put "barepcomp 1e-6" /;
8786  put "solutiontype 2" /;
8787  put "epgap 1e-3" /;
8788   
8790  put "iis 0" /;
8791  put "quality 1" /;
8792   
8795  putclose;
8797   
8798   
8800   
8801   
8803   
8804   
8806   
8807   
8809   
8810   
8812   
8813   
8815   
8816   
8818   
8820   
8821   
8822  * ==== solve the problem ====
8823   
8824  loop ( optiframeToCalc,
8825      yearsSel(years) = no;
8826      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
8827      yearsToFix(years) = no;
8828      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
8829      accYearsSel(accYears) = no;
8830      accYearsSel("horizon") = yes;
8831      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
8832      accYearsToFix(accYears) = no;
8833      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
8834      timeModelSel(timeModel) = no;
8835      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
8836      nodesModelSel(nodesModel) = no;
8837      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
8838   
8839  * Fix decision for years previously optimized in case of myopic or foresight
8840      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8841          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8842          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
8843              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
8844      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
8845          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8846   
8847      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8848          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8849          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
8850              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
8851      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
8852          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
8853   
8854      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8855          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
8856              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8857                  sum(years$sameas(years, yearsToCalc),
8858                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
8859                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
8860              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8861                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
8862                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
8863      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
8864          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
8865   
8866      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8867          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8868          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8869              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
8870   
8871      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8872          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8873          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8874              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
8875   
8876      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8877          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8878      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8879          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8880      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8881          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
8882      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8883          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8884      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
8885          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
8886   
8887   
8888      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8889          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8890          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
8891              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
8892      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
8893          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8894   
8895      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8896          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8897          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
8898              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
8899      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
8900          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
8901   
8902      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8903          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
8904              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8905                  sum(years$sameas(years, yearsToCalc),
8906                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
8907                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
8908              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8909                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
8910                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
8911      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
8912          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
8913   
8914      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8915          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8916          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8917              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
8918   
8919      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8920          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8921          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8922              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
8923   
8924      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8925          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8926      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8927          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8928      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8929          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
8930      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8931          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8932      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
8933          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
8934   
8935   
8936      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8937          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8938          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
8939              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
8940      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
8941          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8942   
8943      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8944          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
8945          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
8946              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
8947      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
8948          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
8949   
8950      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8951          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
8952              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
8953                  sum(years$sameas(years, yearsToCalc),
8954                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
8955                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
8956              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
8957                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
8958                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
8959      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8960          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
8961   
8962      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8963          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8964          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8965              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
8966   
8967      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8968          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8969          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8970              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
8971   
8972      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8973          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8974      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8975          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8976      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8977          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
8978      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8979          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8980      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
8981          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
8982   
8983      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
8984          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
8985   
8986  * Optimize and log values
8987      solve remix minimizing accounting_objective using mip;
8988      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
8989      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
8990   
8991  );
8992   
8996   
8997  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
8999  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9000  * SPDX-License-Identifier: BSD-3-Clause
9001   
9005   
9006  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
9008  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9009  * SPDX-License-Identifier: BSD-3-Clause
9010   
9014   
9015  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
9017  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9018  * SPDX-License-Identifier: BSD-3-Clause
9019   
9023   
9024  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
9026  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9027  * SPDX-License-Identifier: BSD-3-Clause
9028   
9031   
9032  * ==== indicator accounting ====
9033   
9034  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
9035      =
9036  * == converters ==
9037      sum ((converter_techs(techs),vintage)
9038                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9039                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
9040          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9041          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
9042   
9043      + sum ((years_a,converter_techs(techs),vintage)
9044                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9045                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
9046                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
9047                      and years_a.val <= yearsToCalc.val ),
9048          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
9049          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
9050          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
9051   
9052      + sum ((converter_techs(techs),vintage)
9053                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9054                      and converter_techParam(converter_techs,vintage,"freeDecom")),
9055          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9056          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
9057   
9058      + sum ((converter_techs(techs),vintage)
9059                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9060          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9061          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
9062   
9063      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
9064                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
9065          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
9066          * timeLength(timeModelToCalc)
9067          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
9068          / timefrac
9069   
9070      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9071                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9072          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9073          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
9074          / timefrac
9075   
9076      + sum ((timeModelToCalc,converter_techs(techs),vintage)
9077                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
9078          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9079          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
9080              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
9081   
9082          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
9083          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
9084              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
9085          / timefrac
9086   
9087  * == storage ==
9088      + sum ((storage_techs(techs),vintage)
9089                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9090                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
9091          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9092          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
9093   
9094      + sum ((years_a,storage_techs(techs),vintage)
9095                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9096                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
9097                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
9098                      and years_a.val <= yearsToCalc.val ),
9099          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
9100          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
9101          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
9102   
9103      + sum ((storage_techs(techs),vintage)
9104                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9105                      and storage_techParam(storage_techs,vintage,"freeDecom")),
9106          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9107          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
9108   
9109      + sum ((storage_techs(techs),vintage)
9110                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
9111          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
9112          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
9113   
9114  * == transfer ==
9115      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9116                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9117                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9118                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9119          0.5
9120          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9121          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9122   
9123      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
9124                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9125                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9126                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
9127                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9128                      and years_a.val <= yearsToCalc.val ),
9129          0.5
9130          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9131          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
9132          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
9133   
9134      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
9135                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
9136                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9137                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9138          0.5
9139          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
9140          * transfer_lengthParam(linksModel,link_types,"length")
9141          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9142   
9143      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
9144                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9145                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9146                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9147                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9148                      and years_a.val <= yearsToCalc.val ),
9149          0.5
9150          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
9151          * transfer_lengthParam(linksModel,link_types,"length")
9152          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9153          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
9154   
9155      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9156                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
9157                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
9158                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9159          0.5
9160          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9161          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9162   
9163          + 0.5
9164          * sum (link_types,
9165              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
9166              * transfer_lengthParam(linksModel,link_types,"length")
9167              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9168          ) )
9169   
9170   
9171      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
9172                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
9173                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
9174          + 0.5
9175          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9176          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9177   
9178          + 0.5
9179          * sum (link_types,
9180              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
9181              * transfer_lengthParam(linksModel,link_types,"length")
9182              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9183   
9184          + 0.5
9185          * sum (timeModelToCalc,
9186              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9187              * timeLength(timeModelToCalc)
9188              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9189                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9190   
9191              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9192              * timeLength(timeModelToCalc)
9193              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
9194                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9195              / timefrac
9196   
9197          + 0.5
9198          * sum ((timeModelToCalc, link_types),
9199              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9200              * timeLength(timeModelToCalc)
9201              * transfer_lengthParam(linksModel,link_types,"length")
9202              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9203                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9204   
9205              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9206              * timeLength(timeModelToCalc)
9207              * transfer_lengthParam(linksModel,link_types,"length")
9208              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9209                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9210              / timefrac
9211          )
9212   
9213   
9214  * == sources / sinks ==
9215      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
9216              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
9217          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9218          * timeLength(timeModelToCalc)
9219          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
9220      / timefrac
9221      ;
9222   
9223   
9224  * ==== full set of main indicators ====
9225   
9226  indicator_accounting(accNodesModel,accYears,indicator)
9227      $sum((accNodesModel_a,accYears_a,indicator_a)
9228              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
9229      =
9230      + sum((accNodesModel_a,accYears_a,indicator_a)
9231              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9232                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9233          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9234          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
9235   
9236      + sum((accNodesModel_a,accYears_a,indicator_a)
9237              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
9238          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9239          * (sum((nodesModelToCalc,yearsToCalc,techs)
9240                  $(sameas(accNodesModel_a, nodesModelToCalc)
9241                      and sameas(accYears_a, yearsToCalc)),
9242                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
9243      ;
9244   
9245  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9246      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9247      =
9248          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9249          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
9250              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
9251   
9252          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9253          * (sum((nodesModelToCalc,yearsToCalc,techs)
9254                  $(sameas(accNodesModel_a, nodesModelToCalc)
9255                      and sameas(accYears_a, yearsToCalc)),
9256                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
9257      ;
9258   
9259  indicator_accounting_var(accNodesModel,accYears,indicator)
9260      $accounting_indicator.l(accNodesModel,accYears,indicator)
9261      = accounting_indicator.l(accNodesModel,accYears,indicator);
9262   
9263  indicator_accounting_ref(accNodesModel,accYears,indicator)
9264      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
9267  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9268  * SPDX-License-Identifier: BSD-3-Clause
9269   
9270  * == variable indicators ==
9271      sum((accNodesModel_a,accYears_a,indicator_a)
9272          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9273              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
9274          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
9275          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
9276          )
9277   
9278  * == converters ==
9279      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9280              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9281                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9282          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9283          *
9284          ( sum ((converter_techs,vintage)
9285                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
9286                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
9287              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
9288              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
9289              )
9290   
9291          + sum ((years_a,converter_techs,vintage)
9292                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
9293                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9294                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
9295                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
9296                          and years_a.val <= yearsSel.val ),
9297              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
9298              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
9299              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
9300              )
9301   
9302          + sum ((yearsToCalc,converter_techs,vintage)
9303                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
9304                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9305                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
9306                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
9307                          and yearsToCalc.val <= yearsSel.val ),
9308              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
9309              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
9310              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
9311              )
9312   
9313          + sum ((converter_techs,vintage)
9314                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
9315                          and converter_techParam(converter_techs,vintage,"freeDecom")),
9316              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
9317              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
9318   
9319          + sum ((converter_techs,vintage)
9320                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9321              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
9322              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
9323   
9324          + sum ((timeModelSel,converter_techs,vintage,activity)
9325                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
9326              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
9327              * timeLength(timeModelSel)
9328              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
9329          / timefrac
9330   
9331          + sum ((timeModelSel,converter_techs,vintage)
9332                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9333              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9334              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
9335          / timefrac
9336   
9337          + sum ((timeModelSel,converter_techs,vintage)
9338                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
9339              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9340              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9341                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
9342   
9343              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
9344              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
9345                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
9346          / timefrac
9347          )
9348      )
9349   
9350  * == storage ==
9351      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9352              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9353                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9354          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9355          *
9356          ( sum ((storage_techs,vintage)
9357                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
9358                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
9359              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
9360              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
9361              )
9362   
9363          + sum ((years_a,storage_techs,vintage)
9364                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
9365                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9366                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
9367                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
9368                          and years_a.val <= yearsSel.val ),
9369              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
9370              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
9371              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
9372              )
9373   
9374          + sum ((yearsToCalc,storage_techs,vintage)
9375                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
9376                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9377                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
9378                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
9379                          and yearsToCalc.val <= yearsSel.val ),
9380              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
9381              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
9382              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
9383              )
9384   
9385          + sum ((storage_techs,vintage)
9386                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
9387                          and storage_techParam(storage_techs,vintage,"freeDecom")),
9388              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
9389              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
9390   
9391          + sum ((storage_techs,vintage)
9392                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
9393              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
9394              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
9395          )
9396      )
9397   
9398   
9399  * == transfer ==
9400      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9401              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9402                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9403          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9404          *
9405          ( sum ((linksModelToCalc,transfer_techs,vintage)
9406                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9407                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9408                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
9409              0.5
9410              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9411              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
9412   
9413          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
9414                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9415                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9416                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9417                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9418                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
9419                          and years_a.val <= yearsSel.val ),
9420              0.5
9421              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9422              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9423              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
9424   
9425          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9426                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9427                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9428                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9429                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
9430                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
9431                          and yearsToCalc.val <= yearsSel.val ),
9432              0.5
9433              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9434              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
9435              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
9436   
9437          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
9438                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9439                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9440                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9441              0.5
9442              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
9443              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9444              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
9445   
9446          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
9447                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9448                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9449                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9450                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9451                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9452                          and years_a.val <= yearsSel.val ),
9453              0.5
9454              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
9455              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9456              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9457              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9458   
9459          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
9460                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9461                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
9462                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9463                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
9464                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
9465                          and yearsToCalc.val <= yearsSel.val ),
9466              0.5
9467              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9468              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9469              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
9470              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
9471   
9472          + sum ((linksModelToCalc,transfer_techs,vintage)
9473                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9474                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
9475                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
9476              0.5
9477              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9478              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
9479   
9480              + 0.5
9481              * sum (link_types,
9482                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
9483                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9484                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
9485              ) )
9486   
9487          + sum ((linksModelToCalc,transfer_techs,vintage)
9488                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
9489                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
9490              0.5
9491              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9492              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
9493   
9494              + 0.5
9495              * sum (link_types,
9496                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
9497                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9498                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
9499   
9500              + 0.5
9501              * sum (timeModelSel,
9502                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9503                  * timeLength(timeModelSel)
9504                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9505                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
9506   
9507                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9508                  * timeLength(timeModelSel)
9509                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
9510                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
9511                  / timefrac
9512   
9513              + 0.5
9514              * sum ((timeModelSel, link_types),
9515                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9516                  * timeLength(timeModelSel)
9517                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9518                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9519                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
9520   
9521                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
9522                  * timeLength(timeModelSel)
9523                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
9524                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
9525                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
9526                  / timefrac
9527              )
9528          )
9529      )
9530   
9531   
9532  * == sources / sinks ==
9533      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
9534              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9535                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
9536          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
9537          *
9538          sum ((timeModelSel,sourcesink_techs,commodity)
9539                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
9540              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
9541              * timeLength(timeModelSel)
9542              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
9543          / timefrac
9544      )
9546  ;
9547   
9548   
9549  * ==== link-specific indicator accounting ====
9550   
9551  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
9552      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
9553          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
9554      =
9555      sum ((transfer_techs(techs),vintage)
9556                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9557                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
9558          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9559          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
9560   
9561      + sum ((years_a,transfer_techs(techs),vintage)
9562                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9563                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
9564                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
9565                      and years_a.val <= yearsToCalc.val ),
9566          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9567          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
9568          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
9569   
9570      + sum ((transfer_techs(techs),vintage,link_types)
9571                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9572                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
9573          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9574          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9575          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
9576   
9577      + sum ((years_a,transfer_techs(techs),vintage,link_types)
9578                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
9579                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
9580                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
9581                      and years_a.val <= yearsToCalc.val ),
9582          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
9583          * transfer_lengthParam(linksModelToCalc,link_types,"length")
9584          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
9585          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
9586   
9587      + sum ((transfer_techs(techs),vintage)
9588                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
9589          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9590          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
9591   
9592          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9593          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
9594   
9595          + sum (link_types,
9596              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9597              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9598              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
9599   
9600              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9601              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9602              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
9603   
9604          + sum (timeModelToCalc,
9605              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9606              * timeLength(timeModelToCalc)
9607              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9608                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
9609   
9610              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9611              * timeLength(timeModelToCalc)
9612              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
9613                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
9614              / timefrac
9615   
9616          + sum ((timeModelToCalc, link_types),
9617              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9618              * timeLength(timeModelToCalc)
9619              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9620              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9621                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
9622   
9623              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
9624              * timeLength(timeModelToCalc)
9625              * transfer_lengthParam(linksModelToCalc,link_types,"length")
9626              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
9627                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
9628              / timefrac
9629      );
9630   
9631   
9632  * == converter capacities ==
9633   
9634  converter_ratedInput(converter_techs,vintage,commodity)
9635      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9636      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
9637              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9638  converter_ratedInput(converter_techs,vintage,commodity)
9639      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
9640      = 0;
9641   
9642  converter_ratedOutput(converter_techs,vintage,commodity)
9643      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
9644      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
9645              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
9646  converter_ratedOutput(converter_techs,vintage,commodity)
9647      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
9648      = 0;
9649   
9650  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
9651      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9652          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9653      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9654              and converter_ratedOutput(converter_techs,vintage,commodity)),
9655          converter_ratedOutput(converter_techs,vintage,commodity));
9656   
9657  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
9658      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9659          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
9660      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
9661              and converter_ratedOutput(converter_techs,vintage,commodity)),
9662          converter_ratedOutput(converter_techs,vintage,commodity));
9663   
9664  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
9665      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
9666   
9667  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9668      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
9669   
9670  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
9671  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
9672      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
9673       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
9674      = sum(years_a$
9675            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
9676             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
9677             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
9678        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
9679   
9680  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
9681      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
9682   
9683  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
9684      $(converter_ratedOutput(converter_techs,vintage,commodity))
9685      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
9686          * converter_ratedOutput(converter_techs,vintage,commodity);
9687   
9688  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
9689      = sum(vintage,
9690          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
9691  option clear = converter_caps_ext;
9692   
9693  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
9694      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9695          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
9696          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9697      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
9698          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
9699   
9700  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
9701      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
9702          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
9703          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
9704      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
9705          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
9706   
9707  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
9708      = sum((nodesModelToCalc,years)
9709              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9710                  and map_accYearsPostCalc(accYears,years)),
9711          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
9712  option clear = converter_caps_novintage_ext;
9713   
9714  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
9715      = sum((nodesModelToCalc,years)
9716              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9717                  and map_accYearsPostCalc(accYears,years)),
9718          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
9719  option clear = converter_units_ext;
9720   
9721  * ==== transfer capacities ====
9722   
9723  max_transfer_coefficient(transfer_techs(techs),commodity)
9724          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9725          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9726   
9727  min_transfer_coefficient(transfer_techs(techs),commodity)
9728          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
9729          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9730   
9731  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9732      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
9733          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
9734          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
9735      = yes;
9736   
9737  transfer_links(linksModel,years,transfer_techs,vintage,"build")
9738      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
9739   
9740  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9741      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
9742   
9743  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
9744  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
9745      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
9746       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
9747      = sum(years_a$
9748            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
9749             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
9750             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
9751        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
9752   
9753  transfer_links(linksModel,years,transfer_techs,vintage,"total")
9754      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
9755   
9756  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
9757      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9758          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9759                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9760      = sum(vintage,
9761          transfer_links(linksModel,years,transfer_techs,vintage,capType)
9762          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9763   
9764  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
9765      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
9766          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9767          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9768                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9769      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
9770          * min_transfer_coefficient(transfer_techs,commodity);
9771   
9772  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
9773      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
9774          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
9775          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
9776                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
9777      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
9778          * max_transfer_coefficient(transfer_techs,commodity);
9779   
9780   
9781  * ==== transfer flows ====
9782   
9783  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9784      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9785      = sum(vintage,
9786          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9787              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9788          * timeLength(timeModelToCalc)
9789          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
9790   
9791  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9792      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9793      = sum(timeModelToCalc,
9794          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9795   
9796  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
9797      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9798      = sum(timeModelToCalc
9799              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
9800          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9801   
9802  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
9803      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9804      = sum(timeModelToCalc
9805              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
9806          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9807   
9808  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
9809      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9810      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
9811          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
9812   
9813  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
9814      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9815          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
9816          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
9817      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
9818          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
9819   
9820  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
9821      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9822          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9823              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9824      = -1 * abs(sum(vintage,
9825          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
9826              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
9827          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
9828              + sum(link_types,
9829                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
9830                  * transfer_lengthParam(linksModel,link_types,"length")))))
9831          * timeLength(timeModelToCalc);
9832   
9833  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
9834      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
9835          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
9836              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
9837      = sum(timeModelToCalc,
9838          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
9839   
9840   
9841  * ==== storage capacities ====
9842   
9843  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
9844      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9845              and storage_usedCom(storage_techs,vintage,commodity)
9846              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9847      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9848              and storage_usedCom(storage_techs,vintage,commodity)
9849              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9850          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9851   
9852  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
9853      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9854              and storage_usedCom(storage_techs,vintage,commodity)
9855              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
9856      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9857              and storage_usedCom(storage_techs,vintage,commodity)
9858              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
9859          storage_sizeParam(storage_techs,vintage,commodity,"size"));
9860   
9861  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
9862      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9863      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
9864   
9865  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9866      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
9867      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
9868   
9869  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
9870  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
9871      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
9872       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
9873      = sum(years_a$
9874            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
9875             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
9876             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
9877        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
9878   
9879  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
9880      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
9881   
9882  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
9883      $storage_sizeParam(storage_techs,vintage,commodity,"size")
9884      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
9885          * storage_sizeParam(storage_techs,vintage,commodity,"size");
9886   
9887  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
9888      = sum(vintage,
9889          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
9890   
9891  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
9892      $(storage_usedCom(storage_techs,vintage,commodity)
9893          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
9894               or storage_techParam(storage_techs,vintage,"usageDegradation")))
9895      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
9896                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
9897                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
9898                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
9899  option clear = storage_caps_ext;
9900   
9901  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
9902      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
9903          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
9904      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
9905          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
9906   
9907  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
9908      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
9909          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
9910      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
9911          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
9912   
9913  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
9914      = sum((nodesModelToCalc,years)
9915              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9916                  and map_accYearsPostCalc(accYears,years)),
9917          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
9918  option clear = storage_caps_novintage_ext;
9919   
9920  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
9921      = sum((nodesModelToCalc,years)
9922              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9923                  and map_accYearsPostCalc(accYears,years)),
9924          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
9925  option clear = storage_units_ext;
9926   
9927   
9928  * ==== storage levels and flows ====
9929   
9930  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9931      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9932      =
9933      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9934      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9935          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9936      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9937          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
9938      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
9939          * storage_sizeParam(storage_techs,vintage,commodity,"size")
9940          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
9941          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
9942              and ord(timeModelToCalc)=1)
9944      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9945          * timeLength(timeModelToCalc)
9947      ;
9948   
9949  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9950      = sum((nodesModelToCalc,yearsToCalc,vintage)
9951              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9952          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9953  option clear = storage_flows_ext;
9954   
9955  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
9956      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
9957      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
9958   
9959  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9960      = sum((nodesModelToCalc,yearsToCalc,vintage)
9961              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
9962          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
9963  option clear = storage_level_out_ext;
9964   
9965  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9966      = sum(timeModelToCalc,
9967          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9968   
9969  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
9970      = sum(timeModelToCalc
9971              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
9972          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9973   
9974  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
9975      = sum(timeModelToCalc
9976              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
9977          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
9978   
9979  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
9980      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
9981          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
9982   
9983  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
9984      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
9985          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
9986      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
9987          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
9988   
9989  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
9990      = sum((nodesModelToCalc,yearsToCalc,vintage)
9991              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9992                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9993                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9994          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
9995          * timeLength(timeModelToCalc));
9996   
9997  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
9998      = sum(timeModelToCalc,
9999          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
10000   
10001   
10002  * == commodity balance ==
10003   
10004  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
10005      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
10006          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
10007      = sum((activity)
10008              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
10009          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
10010              * timeLength(timeModelToCalc)
10011              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
10012          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
10013              * timeLength(timeModelToCalc)
10014              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
10015   
10016  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
10017      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
10018          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
10019      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
10020          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10021              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10022          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10023              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
10024          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
10025              * storage_sizeParam(storage_techs,vintage,commodity,"size")
10026              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
10027              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
10028                  and ord(timeModelToCalc)=1)
10029          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10030      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
10031      * timeLength(timeModelToCalc);
10032   
10033  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
10034      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10035          and sameas(yearsToCalc,vintage))
10036      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
10037      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10038      * timeLength(timeModelToCalc);
10039   
10040  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
10041      $sum((linksModel)
10042          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
10043                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10044                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
10045      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
10046      + sum((linksModel)
10047              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
10048                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
10049                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
10050   
10051  * incoming transfer flows
10052              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
10053                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
10054                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
10055                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
10056              * timeLength(timeModelToCalc)
10057              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
10058   
10059  * outgoing transfer flows
10060              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10061                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
10062                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10063                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
10064              * timeLength(timeModelToCalc)
10065              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
10066   
10067              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10068                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
10069                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
10070                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
10071                      * timeLength(timeModelToCalc)
10072                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
10073                          + sum(link_types,
10074                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
10075                              * transfer_lengthParam(linksModel,link_types,"length")))))
10076      ;
10077   
10078  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
10079      = sum((nodesModelToCalc,yearsToCalc,vintage)
10080              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
10081                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
10082                  and map_accYearsPostCalc(accYears,yearsToCalc)),
10083          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
10084  option clear = commodity_balance_ext;
10085   
10086   
10087  * ==== annual commodity sums ====
10088   
10089  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
10090      = sum(timeModelToCalc,
10091          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10092   
10093  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
10094      = sum(timeModelToCalc
10095              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
10096          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10097   
10098  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
10099      = sum(timeModelToCalc
10100              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
10101          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
10102   
10103  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10104      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
10105          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
10106   
10107  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
10108      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
10109          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
10110      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
10111          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
10112   
10113   
10114  * ==== marginal information ====
10115   
10116  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10117    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
10118    =
10119    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
10120   
10121  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10122      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
10123      =
10124      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
10125   
10126  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
10127      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10128          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10129          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
10130      =
10131      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10132      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10133      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
10134   
10135  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
10136  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10137      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
10138      =
10139      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10140          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
10141  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10142      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
10143      =
10144      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10145          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
10146  marginals_indicator_bounds(accNodesModel,accYears,indicator)
10147      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
10148      =
10149      marginals_indicator_bounds(accNodesModel,accYears,indicator)
10150          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
10153   
10154  * ==== R2A postcalc information ====
10155   
10157   
10158   
10159  * ==== round profiles to reduce size of gdx ====
10160   
10162  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10163      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
10164      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
10165   
10166  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10167      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10168      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10169   
10170  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10171      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
10172      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
10173   
10174  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10175      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10176      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10177   
10178  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10179      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
10180      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
10181   
10182  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10183      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
10184      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
10185   
10186  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10187      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
10188      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
10190   
10191  * ==== Dump diagnostics ====
10192   
10193  diagnostics("variables") = remix.numVar;
10194  diagnostics("equations") = remix.numEqu;
10195  diagnostics("iterations") = remix.iterUsd;
10196   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
10200  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
10201  * SPDX-License-Identifier: BSD-3-Clause
10202   
10205   
10206  execute_unload "./results\PIC_Basecase_2020.gdx"
10208      metadata
10210      timeModel
10211      timeModelToCalc
10212      nodesModel
10213      linksModel
10214      indicator
10215      commodity
10216      techs
10217      accNodesModel
10218      accYears
10219   
10220      map_nodesModel
10221      map_linksModel
10222      map_nodesAccounting
10223   
10224      indicator_accounting
10225      indicator_accounting_var
10226      indicator_accounting_ref
10227      indicator_accounting_comp
10228      indicator_accounting_detailed
10229      indicator_accounting_links
10230   
10231      converter_caps
10232      converter_units
10234   
10235      transfer_caps
10236      transfer_links
10237      transfer_flows
10238      transfer_flows_annual
10239      transfer_losses
10240      transfer_losses_annual
10241   
10242      storage_caps
10243      storage_units
10244      storage_flows
10245      storage_level_out
10246      storage_flows_annual
10247      storage_losses_out
10248      storage_losses_annual
10250   
10251      commodity_balance
10252      commodity_balance_annual
10253   
10254      marginals_balance
10255      marginals_sourcesink_profile
10256      marginals_sourcesink_sum
10257      marginals_indicator_bounds
10258   
10260      diagnostics
10261      ;
10264   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/28/25 15:28:26 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/28/25 15:28:26\"\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    17       57 CALL           3      48  .cd ./data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    20       62 CALL           3      53  .cd ./data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    23       67 CALL           3      58  .cd ./data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\metadata
    26       91 CALL           3      67  .cat C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\\metadata | grep -v "^$"
    27       97 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      141 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      166 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      190 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatetimemodel.csv
    31      255 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodel.csv
    32      255 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodel.csv
    33      271 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodel.csv
    34      278 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesdata.csv
    35      278 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesdata.csv
    36      294 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesdata.csv
    37      300 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodelsel.csv
    38      302 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodelsel.csv
    39      304 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_nodesmodelsel.csv
    40      317 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    41      317 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    42      333 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    43      336 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_aggregatenodesmodel.csv
    44      365 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    45      365 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    46      368 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    47      377 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    48      377 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    49      380 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_years.csv
    50      386 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_yearssel.csv
    51      386 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_yearssel.csv
    52      389 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_yearssel.csv
    53      407 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_activities.csv
    54      407 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_activities.csv
    55      410 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_activities.csv
    56      418 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_gridsegments.csv
    57      420 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_gridsegments.csv
    58      428 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_linksdata.csv
    59      430 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_linksdata.csv
    60      448 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_link_types.csv
    61      450 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_link_types.csv
    62      459 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_commodities.csv
    63      459 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_commodities.csv
    64      481 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_commodities.csv
    65      490 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_indicators.csv
    66      490 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_indicators.csv
    67      496 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_indicators.csv
    68      505 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    69      505 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    70      526 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_storage_techs.csv
    71      529 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_transfer_techs.csv
    72      532 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    73      532 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    74      540 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    75      540 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    76      559 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_converter_techs.csv
    77      563 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_storage_techs.csv
    78      564 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_storage_techs.csv
    79      569 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_transfer_techs.csv
    80      570 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_transfer_techs.csv
    81      574 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    82      574 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    83      578 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_sourcesink_techs.csv
    84      588 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_degradation_states.csv
    85      590 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_degradation_states.csv
    86      599 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_soc.csv
    87      601 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_soc.csv
    88      617 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linkstartend.csv
    89      619 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linkstartend.csv
    90      633 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    91      744 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_accnodes.csv
    92      746 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\set_accnodes.csv
    93      811 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_accnodes.csv
    94      813 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\map_accnodes.csv
    95      866 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    96      898 IF EXIST      95      32  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterunits.csv
    97      898 INCLUDE       95      32  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterunits.csv
    98      937 IF EXIST      95      34  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterunits.csv
    99      951 IF EXIST      95      48  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converteractivity.csv
   100      953 IF EXIST      95      50  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converteractivity.csv
   101      970 IF EXIST      95      67  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterstartup.csv
   102      972 IF EXIST      95      69  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_converterstartup.csv
   103      991 IF EXIST      95      88  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_storageunits.csv
   104      993 IF EXIST      95      90  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_storageunits.csv
   105     1015 IF EXIST      95     112  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferlinks.csv
   106     1017 IF EXIST      95     114  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferlinks.csv
   107     1039 IF EXIST      95     136  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferperlength.csv
   108     1041 IF EXIST      95     138  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_transferperlength.csv
   109     1056 IF EXIST      95     153  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_sourcesinkflow.csv
   110     1056 INCLUDE       95     153  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_sourcesinkflow.csv
   111     1157 IF EXIST      95     155  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_sourcesinkflow.csv
   112     1171 IF EXIST      95     169  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_perindicator.csv
   113     1171 INCLUDE       95     169  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_perindicator.csv
   114     1177 IF EXIST      95     171  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_perindicator.csv
   115     1203 IF EXIST      95     197  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds.csv
   116     1203 INCLUDE       95     197  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds.csv
   117     1207 IF EXIST      95     199  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds.csv
   118     1226 IF EXIST      95     218  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   119     1228 IF EXIST      95     220  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\accounting_indicatorbounds_links.csv
   120     1234 BATINCLUDE    95     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   121     1302 BATINCLUDE    95     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   122     1354 BATINCLUDE    95     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   123     1406 BATINCLUDE    95     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1474 BATINCLUDE    95     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1542 BATINCLUDE    95     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1610 BATINCLUDE    95     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     2070 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   128     2145 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   129     2152 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   130     2159 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   131     2176 IF DEXIST    130      17  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\results\
   132     2394 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   133     2407 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   134     2510 IF EXIST     133     103  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_capacityparam.csv
   135     2510 INCLUDE      133     103  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_capacityparam.csv
   136     2711 IF EXIST     133     105  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_capacityparam.csv
   137     2719 BATINCLUDE   133     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   138     2730 BATINCLUDE   133     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   139     2763 IF EXIST     133     137  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_techparam.csv
   140     2763 INCLUDE      133     137  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_techparam.csv
   141     2784 IF EXIST     133     139  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_techparam.csv
   142     2806 IF EXIST     133     161  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   143     2806 INCLUDE      133     161  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   144     2878 IF EXIST     133     162  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   145     2880 IF EXIST     133     164  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_activityprofile.csv
   146     2901 IF EXIST     133     185  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   147     2901 INCLUDE      133     185  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   148     2949 IF EXIST     133     186  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   149     2950 IF EXIST     133     187  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   150     2952 IF EXIST     133     189  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficient.csv
   151     2965 IF EXIST     133     202  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficientprofile.csv
   152     2966 IF EXIST     133     203  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficientprofile.csv
   153     2968 IF EXIST     133     205  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\converter_coefficientprofile.csv
   154     3969 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   155     4062 IF EXIST     154      93  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_reservoirparam.csv
   156     4064 IF EXIST     154      95  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_reservoirparam.csv
   157     4068 BATINCLUDE   154      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   158     4079 BATINCLUDE   154     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   159     4090 BATINCLUDE   154     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   160     4126 IF EXIST     154     127  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_techparam.csv
   161     4128 IF EXIST     154     129  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_techparam.csv
   162     4149 IF EXIST     154     150  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_sizeparam.csv
   163     4151 IF EXIST     154     152  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_sizeparam.csv
   164     4168 IF EXIST     154     169  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_socparam.csv
   165     4170 IF EXIST     154     171  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_socparam.csv
   166     4189 IF EXIST     154     190  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_degradationparam.csv
   167     4191 IF EXIST     154     192  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_degradationparam.csv
   168     4220 IF EXIST     154     221  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_levelprofile.csv
   169     4221 IF EXIST     154     222  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_levelprofile.csv
   170     4223 IF EXIST     154     224  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\storage_levelprofile.csv
   171     5160 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   172     5225 IF EXIST     171      71  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linksparam.csv
   173     5227 IF EXIST     171      73  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_linksparam.csv
   174     5243 IF EXIST     171      89  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_flowprofile.csv
   175     5245 IF EXIST     171      91  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_flowprofile.csv
   176     5265 IF EXIST     171     111  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_techparam.csv
   177     5267 IF EXIST     171     113  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_techparam.csv
   178     5282 IF EXIST     171     128  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefficient.csv
   179     5284 IF EXIST     171     130  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefficient.csv
   180     5298 IF EXIST     171     144  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperflow.csv
   181     5300 IF EXIST     171     146  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperflow.csv
   182     5315 IF EXIST     171     161  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperlength.csv
   183     5317 IF EXIST     171     163  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_coefperlength.csv
   184     5331 IF EXIST     171     177  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_reactperlength.csv
   185     5333 IF EXIST     171     179  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_reactperlength.csv
   186     5347 IF EXIST     171     193  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_lengthparam.csv
   187     5349 IF EXIST     171     195  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_lengthparam.csv
   188     5363 IF EXIST     171     209  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_gridsegments.csv
   189     5365 IF EXIST     171     211  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\transfer_gridsegments.csv
   190     6020 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   191     6058 IF EXIST     190      38  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_config.csv
   192     6058 INCLUDE      190      38  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_config.csv
   193     6341 IF EXIST     190      40  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_config.csv
   194     6345 BATINCLUDE   190      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   195     6373 IF EXIST     190      62  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   196     6373 INCLUDE      190      62  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   197     6543 IF EXIST     190      63  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   198     6544 IF EXIST     190      64  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   199     6546 IF EXIST     190      66  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_profile.csv
   200     6566 IF EXIST     190      86  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_annualsum.csv
   201     6566 INCLUDE      190      86  ...C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_annualsum.csv
   202     6681 IF EXIST     190      88  ..C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\225a\sourcesink_annualsum.csv
   203     6684 BATINCLUDE   190      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   204     6872 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   205     7020 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   206     7087 INCLUDE      205      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   207     7377 INCLUDE      205      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   208     7667 INCLUDE      205      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   209     7957 INCLUDE      205     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   210     8052 INCLUDE      205     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   211     8147 INCLUDE      205     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   212     8246 INCLUDE      205     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     8540 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   214     8559 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   215     8624 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   216     8635 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   217     8644 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   218     8652 INCLUDE      217       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   219     8762 INCLUDE      217       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   220     8998 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   221     9007 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   222     9016 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   223     9025 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   224     9266 INCLUDE      223     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   225    10199 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =       14.329 SECONDS     65 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/28/25 15:28:26 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 8987


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 1.000E-04, 1.000E+06] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.200E-04, 5.357E+02]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/28/25 15:28:26 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 8987


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS    5,857,289
BLOCKS OF VARIABLES          37     SINGLE VARIABLES    4,385,508
NON ZERO ELEMENTS    14,207,189


GENERATION TIME      =       22.235 SECONDS  3,301 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =       31.625 SECONDS  3,301 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/28/25 15:28:26 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 8987


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  8987

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              973.6568

 RESOURCE USAGE, LIMIT          8.031   1209600.000
 ITERATION COUNT, LIMIT        13    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 1817.08 Mb (peak 1850.54 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 150.68 Mb (peak 392.67 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 5.59sec (det. 7627.54 ticks)


Optimal solution found
Objective:          973.656846

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        4.403e-07   9.072e-03   4.403e-07   9.072e-03
dual infeasibility          0.000e+00   0.000e+00   0.000e+00   0.000e+00
primal residual             6.166e-11   9.862e-10   6.166e-11   9.862e-10
dual residual               1.928e-09   1.206e-05   1.928e-09   1.206e-05
primal solution vector      8.575e-01   2.558e+04   8.575e-01   2.558e+04
dual solution vector        2.374e+03   3.883e+05   2.374e+03   3.883e+05
slacks                      1.000e+06   7.876e+07   1.000e+06   7.876e+07
reduced costs               1.000e+00   5.278e+03   1.000e+00   5.278e+03
comp. slackness viol.       4.022e-05   2.393e-04




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/28/25 15:28:26 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\cplex.opt


EXECUTION TIME       =       39.968 SECONDS  2,984 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-Pacific_island_Countries\Process\run_remix.lst
