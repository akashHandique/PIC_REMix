GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/06/25 14:08:06 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
   2  * SPDX-License-Identifier: BSD-3-Clause
   3   
   4  * ==== REMix version number ====
   6   
   7  * ==== global settings ====
  18   
  20   
  21  * ==== write metadata and inherit dataset ====
INCLUDE    C:\Local\framework\remix\framework\model\source\metadata.gms
  23  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  24  * SPDX-License-Identifier: BSD-3-Clause
  25   
  26  * Include metadata in logfile
  28   
  29  * Set OS specific options
  34   
  35  * Get general REMix information
  39   
  40  * Path to framework
  44   
  45  * Hash of framework commit
  49   
  50  * Branch of framework
  54   
  55  * Path to project
  59   
  60  * Hash of project commit
  64   
  65  * Branch of project
  69   
  70  * Include metadata in gdx file
  71  set metadata(*) /
INCLUDE    C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\metadata
  73  remix_version "0.13.0"
  74  gams_version "43.3.0"
  75  timestamp "08/06/25 14:08:06"
  76  framework_path "C:\Local\framework\remix\framework\model\source"
  77   
  78  framework_hash c4d562dc434502ae346f255d5b29b268f7db540c
  79   
  80  framework_branch "dev"
  81   
  82  project_path "C:\Local\remix-pic\REMix-PIC\tutorials\tutorial_101\data"
  83   
  84  project_hash
  85  project_branch
  86  /;
  87   
  90   
  92   
  93   
  94   
INCLUDE    C:\Local\framework\remix\framework\model\source\data_inheritance.gms
  96  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
  97  * SPDX-License-Identifier: BSD-3-Clause
  98   
 101   
 106   
 107  * pandas based data inheritance reading in the dat files, merging them and writing csv files in the scrdir
 129  ;
 130   
 134   
 135  * ==== run remix ====
INCLUDE    C:\Local\framework\remix\framework\model\source\remix.gms
 140  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 141  * SPDX-License-Identifier: BSD-3-Clause
 142   
 143  * ==== global settings ====
 152   
 156   
 159   
 163  * ==== include modules ====
INCLUDE    C:\Local\framework\remix\framework\model\source\sets.gms
 165  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 166  * SPDX-License-Identifier: BSD-3-Clause
 167   
 168  * // # sets
 169  * // Sets are the indices of variables and parameters.
 170   
 171  * // ## Reference
 172  * // {special_table_sets}
 173   
 174  * // ## Input Files
 175  * // {special_table_set_input_files}
 738   
 739  map_accNodes(accNodesModel,accNodesModel_aggregation)
 740      $sum((nodesData, nodesModelToCalc)
 741              $( sameas(nodesModelToCalc,accNodesModel)
 742                  and map_accNodesLoad(nodesData,accNodesModel_aggregation)
 743                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 744   
 745  map_accNodes(accNodesModel,"global")$sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) = yes;
 746  map_accNodes(accNodesModel,accNodesModel) = yes;
 747  map_accLinks(accLinksModel,"global")$sum(linksModelToCalc$sameas(accLinksModel,linksModelToCalc), 1) = yes;
 748  map_accLinks(accLinksModel,accLinksModel) = yes;
 749  map_accYears(accYears,"horizon")$sum(yearsToCalc$sameas(accYears,yearsToCalc), 1)  = yes;
 750  map_accYears(accYears,accYears) = yes;
 751   
 752  map_accNodesToCalc(accNodesModel,nodesModelToCalc)
 753      $sum((nodesData)
 754              $( map_accNodesLoad(nodesData,accNodesModel)
 755                  and aggregateNodesModel(nodesData,nodesModelToCalc)), 1) = yes;
 756   
 757  map_accNodesToCalc("global",nodesModelToCalc) = yes;
 758  map_accNodesToCalc(accNodesModel,nodesModelToCalc)$sameas(accNodesModel,nodesModelToCalc) = yes;
 759  map_accLinksToCalc("global",linksModelToCalc) = yes;
 760  map_accLinksToCalc(accLinksModel,linksModelToCalc)$sameas(accLinksModel,linksModelToCalc) = yes;
 761  map_accYearsToCalc("horizon",yearsToCalc) = yes;
 762  map_accYearsToCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 763   
 764  * Duplicate sets for postcalc reporting without horizon and accYears
 765  map_accNodesPostCalc(accNodesModel,nodesModelToCalc) = map_accNodesToCalc(accNodesModel,nodesModelToCalc);
 766  map_accLinksPostCalc(accLinksModel,linksModelToCalc) = map_accLinksToCalc(accLinksModel,linksModelToCalc);
 767  map_accYearsPostCalc(accYears,yearsToCalc)$sameas(accYears,yearsToCalc) = yes;
 768  map_accYearsPostCalc(accYears,years)$(sameas(accYears,years) and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val)) = yes;
 769   
 770  set map_nodesAccounting(accNodesModel_aggregation,accNodesModel) "Map accounting nodes describes the mapping between model accounting nodes and data nodes." ;
 771  option map_nodesAccounting < map_accNodes;
 772   
 773  * ==== Generic sets  ====
 774  * These set names are repeated across different profile parameters.
 775  * they are not strictly related to each other and are not input data but
 776  * are needed for validation.
 777  ** // PROFILE: profileTypes | Profile Types | OEO_00140056:flow potential | set_profiletypes.csv
 778   
 779  ** // SET: scenario | Scenario | OEO_00000364:scenario | set_scenarios.csv
 780  * "Scenario indexes help to differentiate scenarios." /
 781   
 782  ** // SET: capType | Capacity Types | OEO_00030019:balance process attribute | set_captypes.csv
 783  * "Capacity types differentiate investment decisions." /
 784   
 785  ** // SET: balanceType | Balance Types | OEO_00030019:balance process attribute | set_balancetypes.csv
 786  * "Balance types differentiate types of balances." /
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\input.gms
 788  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
 789  * SPDX-License-Identifier: BSD-3-Clause
 790   
 791  * // # accounting_input
 792  * // The parameters in this file describe the accounting of indicators in the model.
 793   
 794  * // ## Variables
 795  * // {special_table_input_variables}
1026   
1027  * Aggregate accounting parameters
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1029  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1030  * SPDX-License-Identifier: BSD-3-Clause
1031   
1033   
1035   
1036  set accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1037  accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1038      $sum(pc_accounting_converterUnits$accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1)
1039      = yes;
1040   
1042  set accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1043  accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,"useAnnuity")
1044      $sum((nodesData,accnodesData)
1045              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1046                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1047      = smax((nodesData,accnodesData)
1048              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1049                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1050          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"))
1051      - smin((nodesData,accnodesData)
1052              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1053                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1054          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,"useAnnuity"));
1055   
1056  abort$sum(accounting_converterUnitsChk(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1058   
1059  parameter accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1060  accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1061      $sum((nodesData,accnodesData)
1062              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1063                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1064      = sum((nodesData,accnodesData)
1065              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1066                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1067          accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1068      / sum((nodesData,accnodesData)
1069              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1070                  and accounting_converterUnitsNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1071          1);
1072   
1073  parameter accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1074  loop(accnodes,
1075  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1076      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1077                              and accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1078      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1079              accounting_converterUnitsIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterUnits));
1080  );
1081   
1082  accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1083      $accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)
1084      = accounting_converterUnitsAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits);
1085   
1086  parameter accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits);
1087  loop(accYears,
1088  accounting_converterUnits(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterUnits)
1089      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1090              and accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits)), 1)
1091      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1092              accounting_converterUnitsIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterUnits))
1093  );
1094   
1095  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1097  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1098  * SPDX-License-Identifier: BSD-3-Clause
1099   
1101   
1103   
1104  set accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity);
1105  accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)
1106      $sum(pc_accounting_converterActivity$accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity), 1)
1107      = yes;
1108   
1110   
1111  parameter accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1112  accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1113      $sum((nodesData,accnodesData)
1114              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1115                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)), 1)
1116      = sum((nodesData,accnodesData)
1117              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1118                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1119          accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1120      / sum((nodesData,accnodesData)
1121              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1122                  and accounting_converterActivityNonzero(indicator,accnodesData,accYears,converter_techs,vintage,activity)),
1123          1);
1124   
1125  parameter accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1126  loop(accnodes,
1127  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1128      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1129                              and accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1130      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1131              accounting_converterActivityIn(indicator,accnodesData,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity));
1132  );
1133   
1134  accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1135      $accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)
1136      = accounting_converterActivityAgg(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity);
1137   
1138  parameter accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity);
1139  loop(accYears,
1140  accounting_converterActivity(indicator,nodesModel,years,converter_techs,vintage,activity,pc_accounting_converterActivity)
1141      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1142              and accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity)), 1)
1143      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1144              accounting_converterActivityIn2(indicator,nodesModel,accYears,converter_techs,vintage,activity,pc_accounting_converterActivity))
1145  );
1146   
1147  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1149  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1150  * SPDX-License-Identifier: BSD-3-Clause
1151   
1153   
1155   
1156  set accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage);
1157  accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)
1158      $sum(pc_accounting_converterStartup$accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup), 1)
1159      = yes;
1160   
1162   
1163  parameter accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1164  accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1165      $sum((nodesData,accnodesData)
1166              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1167                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)), 1)
1168      = sum((nodesData,accnodesData)
1169              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1170                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1171          accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1172      / sum((nodesData,accnodesData)
1173              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1174                  and accounting_converterStartupNonzero(indicator,accnodesData,accYears,converter_techs,vintage)),
1175          1);
1176   
1177  parameter accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1178  loop(accnodes,
1179  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1180      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1181                              and accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1182      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1183              accounting_converterStartupIn(indicator,accnodesData,accYears,converter_techs,vintage,pc_accounting_converterStartup));
1184  );
1185   
1186  accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1187      $accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)
1188      = accounting_converterStartupAgg(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup);
1189   
1190  parameter accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup);
1191  loop(accYears,
1192  accounting_converterStartup(indicator,nodesModel,years,converter_techs,vintage,pc_accounting_converterStartup)
1193      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1194              and accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup)), 1)
1195      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1196              accounting_converterStartupIn2(indicator,nodesModel,accYears,converter_techs,vintage,pc_accounting_converterStartup))
1197  );
1198   
1199  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1201  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1202  * SPDX-License-Identifier: BSD-3-Clause
1203   
1205   
1207   
1208  set accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage);
1209  accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)
1210      $sum(pc_accounting_storageUnits$accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1)
1211      = yes;
1212   
1214  set accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1215  accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,"useAnnuity")
1216      $sum((nodesData,accnodesData)
1217              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1218                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1219      = smax((nodesData,accnodesData)
1220              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1221                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1222          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"))
1223      - smin((nodesData,accnodesData)
1224              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1225                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1226          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,"useAnnuity"));
1227   
1228  abort$sum(accounting_storageUnitsChk(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits), 1) "Cannot aggregate technologies with different useAnnuity values."
1230   
1231  parameter accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1232  accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1233      $sum((nodesData,accnodesData)
1234              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1235                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)), 1)
1236      = sum((nodesData,accnodesData)
1237              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1238                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1239          accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1240      / sum((nodesData,accnodesData)
1241              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1242                  and accounting_storageUnitsNonzero(indicator,accnodesData,accYears,storage_techs,vintage)),
1243          1);
1244   
1245  parameter accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1246  loop(accnodes,
1247  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1248      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1249                              and accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1250      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1251              accounting_storageUnitsIn(indicator,accnodesData,accYears,storage_techs,vintage,pc_accounting_storageUnits));
1252  );
1253   
1254  accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1255      $accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)
1256      = accounting_storageUnitsAgg(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits);
1257   
1258  parameter accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits);
1259  loop(accYears,
1260  accounting_storageUnits(indicator,nodesModel,years,storage_techs,vintage,pc_accounting_storageUnits)
1261      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1262              and accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits)), 1)
1263      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1264              accounting_storageUnitsIn2(indicator,nodesModel,accYears,storage_techs,vintage,pc_accounting_storageUnits))
1265  );
1266   
1267  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1269  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1270  * SPDX-License-Identifier: BSD-3-Clause
1271   
1273   
1275   
1276  set accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage);
1277  accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)
1278      $sum(pc_accounting_transferLinks$accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1)
1279      = yes;
1280   
1282  set accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1283  accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,"useAnnuity")
1284      $sum((linksData,acclinksData)
1285              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1286                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1287      = smax((linksData,acclinksData)
1288              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1289                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1290          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"))
1291      - smin((linksData,acclinksData)
1292              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1293                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1294          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,"useAnnuity"));
1295   
1296  abort$sum(accounting_transferLinksChk(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks), 1) "Cannot aggregate technologies with different useAnnuity values."
1298   
1299  parameter accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1300  accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1301      $sum((linksData,acclinksData)
1302              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1303                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)), 1)
1304      = sum((linksData,acclinksData)
1305              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1306                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1307          accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1308      / sum((linksData,acclinksData)
1309              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1310                  and accounting_transferLinksNonzero(indicator,acclinksData,accYears,transfer_techs,vintage)),
1311          1);
1312   
1313  parameter accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1314  loop(acclinks,
1315  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1316      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1317                              and accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1318      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1319              accounting_transferLinksIn(indicator,acclinksData,accYears,transfer_techs,vintage,pc_accounting_transferLinks));
1320  );
1321   
1322  accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1323      $accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)
1324      = accounting_transferLinksAgg(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks);
1325   
1326  parameter accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks);
1327  loop(accYears,
1328  accounting_transferLinks(indicator,linksModel,years,transfer_techs,vintage,pc_accounting_transferLinks)
1329      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1330              and accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks)), 1)
1331      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1332              accounting_transferLinksIn2(indicator,linksModel,accYears,transfer_techs,vintage,pc_accounting_transferLinks))
1333  );
1334   
1335  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1337  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1338  * SPDX-License-Identifier: BSD-3-Clause
1339   
1341   
1343   
1344  set accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types);
1345  accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)
1346      $sum(pc_accounting_transferPerLength$accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1)
1347      = yes;
1348   
1350  set accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1351  accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,"useAnnuity")
1352      $sum((linksData,acclinksData)
1353              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1354                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1355      = smax((linksData,acclinksData)
1356              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1357                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1358          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"))
1359      - smin((linksData,acclinksData)
1360              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1361                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1362          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,"useAnnuity"));
1363   
1364  abort$sum(accounting_transferPerLengthChk(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength), 1) "Cannot aggregate technologies with different useAnnuity values."
1366   
1367  parameter accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1368  accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1369      $sum((linksData,acclinksData)
1370              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1371                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)), 1)
1372      = sum((linksData,acclinksData)
1373              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1374                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1375          accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1376      / sum((linksData,acclinksData)
1377              $(aggregatelinksModel(linksData,linksModel) and sameas(linksData,acclinksData)
1378                  and accounting_transferPerLengthNonzero(indicator,acclinksData,accYears,transfer_techs,vintage,link_types)),
1379          1);
1380   
1381  parameter accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1382  loop(acclinks,
1383  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1384      $sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)
1385                              and accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1386      = sum(acclinksData$(map_acclinksToCalc(acclinks,linksModel) and sameas(acclinks,acclinksData)),
1387              accounting_transferPerLengthIn(indicator,acclinksData,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength));
1388  );
1389   
1390  accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1391      $accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1392      = accounting_transferPerLengthAgg(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1393   
1394  parameter accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength);
1395  loop(accYears,
1396  accounting_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)
1397      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1398              and accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength)), 1)
1399      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1400              accounting_transferPerLengthIn2(indicator,linksModel,accYears,transfer_techs,vintage,link_types,pc_accounting_transferPerLength))
1401  );
1402   
1403  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
BATINCLUDE C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
1405  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1406  * SPDX-License-Identifier: BSD-3-Clause
1407   
1409   
1411   
1412  set accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity);
1413  accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)
1414      $sum(pc_accounting_sourcesinkFlow$accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow), 1)
1415      = yes;
1416   
1418   
1419  parameter accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1420  accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1421      $sum((nodesData,accnodesData)
1422              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1423                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)), 1)
1424      = sum((nodesData,accnodesData)
1425              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1426                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1427          accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1428      / sum((nodesData,accnodesData)
1429              $(aggregatenodesModel(nodesData,nodesModel) and sameas(nodesData,accnodesData)
1430                  and accounting_sourcesinkFlowNonzero(indicator,accnodesData,accYears,sourcesink_techs,commodity)),
1431          1);
1432   
1433  parameter accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1434  loop(accnodes,
1435  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1436      $sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)
1437                              and accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1438      = sum(accnodesData$(map_accnodesToCalc(accnodes,nodesModel) and sameas(accnodes,accnodesData)),
1439              accounting_sourcesinkFlowIn(indicator,accnodesData,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow));
1440  );
1441   
1442  accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1443      $accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1444      = accounting_sourcesinkFlowAgg(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1445   
1446  parameter accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow);
1447  loop(accYears,
1448  accounting_sourcesinkFlow(indicator,nodesModel,years,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)
1449      $sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)
1450              and accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow)), 1)
1451      = sum(accYears_a$(map_accYearsToCalc(accYears,years) and sameas(accYears_a, years)),
1452              accounting_sourcesinkFlowIn2(indicator,nodesModel,accYears,sourcesink_techs,commodity,pc_accounting_sourcesinkFlow))
1453  );
1454   
1455  * option kill %paramName%Nonzero %paramName%Chk %paramName%Agg
1456   
1457  parameter accounting_indicatorBounds_links(linksModel,years,indicator,pc_accounting_indicatorBounds_links);
1458  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1459      = sum((linksData)$sameas(linksModelToCalc,linksData),
1460              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1461   
1462  accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,pc_accounting_indicatorBounds_links)
1463      = sum((linksData)$links_aggregate(linksModelToCalc,linksData),
1464              accounting_indicatorBounds_linksIn(linksData,yearsToCalc,indicator,pc_accounting_indicatorBounds_links));
1465   
1466  parameter accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds);
1467  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1468      = sum (accNodesData$sameas(accNodesModel,accNodesData),
1469          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1470   
1471  accounting_indicatorBounds(accNodesModel,accYears,indicator,pc_accounting_indicatorBounds)
1472      $(sum (nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc), 1) > 0)
1473      = sum ((accNodesData,nodesDataToCalc,nodesModelToCalc)
1474              $(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(accNodesModel,nodesModelToCalc) and sameas(accNodesData,nodesDataToCalc)),
1475          accounting_indicatorBoundsIn(accNodesData,accYears,indicator,pc_accounting_indicatorBounds));
1476   
1477  set accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears);
1478  accounting_perIndicatorNonzero(indicator,indicator_a,accNodesData,accYears)
1479      $sum(pc_accounting_perIndicator$accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator), 1)
1480      = yes;
1481   
1482  parameter accounting_perIndicatorAgg(indicator,indicator_a,nodesModel,accYears,pc_accounting_perIndicator);
1483  accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1484      $sum((nodesDataToCalc,accnodesData)
1485              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1486                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)), 1)
1487      = sum((nodesDataToCalc,accnodesData)
1488              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1489                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1490          accounting_perIndicatorIn(indicator,indicator_a,accnodesData,accYears,pc_accounting_perIndicator))
1491      / sum((nodesDataToCalc,accnodesData)
1492              $(aggregatenodesModel(nodesDataToCalc,nodesModelToCalc) and sameas(nodesDataToCalc,accnodesData)
1493                  and accounting_perIndicatorNonzero(indicator,indicator_a,accnodesData,accYears)),
1494          1);
1495   
1496  parameter accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator);
1497   
1498  loop(accNodes,
1499  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1500      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1501              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator)), 1)
1502          and map_accNodes(accNodesModel,accNodes)
1503              )
1504      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1505              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,"horizon",pc_accounting_perIndicator));
1506   
1507  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1508      $(sum(accNodesData$(sameas(accNodes,accNodesData)
1509              and accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator)), 1)
1510          and map_accNodes(accNodesModel,accNodes)
1511          and not sameas(accYears, "horizon"))
1512      = sum(accNodesData$(sameas(accNodes,accNodesData)),
1513              accounting_perIndicatorIn(indicator,indicator_a,accNodesData,accYears,pc_accounting_perIndicator));
1514  );
1515   
1516  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1517      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator)
1518          and sameas(accNodesModel,nodesModelToCalc)), 1)
1519      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1520          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,"horizon",pc_accounting_perIndicator));
1521   
1522  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,pc_accounting_perIndicator)
1523      $sum(nodesModelToCalc$(accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator)
1524          and sameas(accNodesModel,nodesModelToCalc) and not sameas(accYears, "horizon")), 1)
1525      = sum(nodesModelToCalc$sameas(accNodesModel,nodesModelToCalc),
1526          accounting_perIndicatorAgg(indicator,indicator_a,nodesModelToCalc,accYears,pc_accounting_perIndicator));
1527   
1528   
1529  * Make sure all required indicators end up in the model
1530  set variableIndicators(accNodesModel,accYears,indicator);
1531  variableIndicators(accNodesModel,accYears,indicator)
1532     $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") = 0
1533        and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1534     = yes;
1535   
1536  set activeIndicators(accNodesModel,accYears,indicator);
1537  activeIndicators(accNodesModel,accYears,indicator)
1538     $((accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0
1543        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed") <> 0
1544        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower") <> 0
1545        or accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper") <> 0 )
1546          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
1547     = yes;
1548   
1549  set activeIndicators_links(linksModel,years,indicator);
1550  activeIndicators_links(linksModelToCalc,yearsToCalc,indicator)
1551     $(accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useFixed") <> 0
1552        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useLower") <> 0
1553        or accounting_indicatorBounds_links(linksModelToCalc,yearsToCalc,indicator,"useUpper") <> 0 )
1554     = yes;
1555   
1556  * Clear other dependencies and only add self mapping for variable and qp indicators
1557  accounting_perIndicator(indicator,indicator_a,accNodesModel,accYears,"perIndicator")
1558      $(variableIndicators(accNodesModel,accYears,indicator))
1559      = 0;
1560  accounting_perIndicator(indicator,indicator,accNodesModel,accYears,"perIndicator")
1561      $(variableIndicators(accNodesModel,accYears,indicator))
1562      = 1;
1563   
1564  * Calculate length of years and discount rates per indicator
1565  parameter yearFactor(accNodesModel,accYears,indicator,accYears);
1566  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1567      $(map_accYears(accYears_a,accYears)
1568          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1))
1569      = 1;
1570   
1571  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1572      $(map_accYears(accYears_a,accYears)
1573          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1574          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral"))
1575      = sum(yearsToCalc$sameas(accYears_a,yearsToCalc), yearsLen(yearsToCalc));
1576   
1577  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1578      $(map_accYears(accYears_a,accYears)
1579          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1580          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1581          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear")
1582          and yearFactor(accNodesModel,accYears,indicator,accYears_a) = inf)
1583      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"endyear");
1584   
1585  yearFactor(accNodesModel,accYears,indicator,accYears_a)
1586      $(map_accYears(accYears_a,accYears)
1587          and sum(yearsToCalc$(sameas(yearsToCalc,accYears_a)), 1)
1588          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"integral")
1589          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1590      = yearFactor(accNodesModel,accYears,indicator,accYears_a)
1591          * (1 - accounting_indicatorBounds(accNodesModel,accYears,indicator,"discount"))
1592                  ** (accYears_a.val - smin(yearsToCalc, yearsToCalc.val));
1593   
1594  * Add self mapping for variable and qp indicators
1595  yearFactor(accNodesModel,accYears,indicator,accYears)
1596      $(variableIndicators(accNodesModel,accYears,indicator))
1597      = 1;
1598   
1599   
1600  * ==== calculate compound indicators for the optimization ====
1601  scalar compIndicators_pre;
1602  scalar compIndicators_post;
1603   
1604  parameter compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1605  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1606      $(activeIndicators(accNodesModel,accYears,indicator))
1607      = 1;
1608   
1609  set compoundIndicators_act(accNodesModel,accYears,indicator);
1610  option compoundIndicators_act < compoundIndicators;
1611   
1612  parameter compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1613  parameter compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1614  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1615      $compoundIndicators_act(accNodesModel,accYears,indicator) = 1;
1616   
1617  compIndicators_pre = 0;
1618  compIndicators_post = 1;
1619   
1620  option sparseval = 1;
1621  while(compIndicators_pre < compIndicators_post,
1622      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1623          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1624   
1625      compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1626          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1627              and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1628              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1629              and map_accYears(accYears_aa,accYears_a))
1630          = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1631              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1632   
1633      option compoundIndicatorsExt_r < compoundIndicatorsExt;
1634   
1635      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1636          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1637              and sum((accNodesModel_a,accYears_a,indicator_a)
1638                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1639          = sum((accNodesModel_a,accYears_a,indicator_a)
1640                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1641              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1642   
1643      compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1644          $(compoundIndicators_act(accNodesModel,accYears,indicator)
1645              and sum((accNodesModel_a,accYears_a,indicator_a)
1646                      $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1647          = sum((accNodesModel_a,accYears_a,indicator_a)
1648                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1649                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1650              compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1651          / sum((accNodesModel_a,accYears_a,indicator_a)
1652                  $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1653                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1654   
1655      option compoundIndicators_act < compoundIndicators;
1656      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1657          $compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1658  );
1659  option sparseval = 0;
1660   
1661  * map to sub-years and sub-nodes
1662  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1663      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1664          and compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1665          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1666          and map_accYears(accYears_aa,accYears_a)
1667          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1668      = compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1669          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1670   
1671  * Remove all accounting regions and accounting years
1672  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1673      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1674          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1675          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1676              or sameas("horizon",accYears_aa)))
1677      = 0;
1678   
1679  * Remove all slack indicators except the ones declared in indicatorBounds
1680  compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1681      $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1682          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1683                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1684          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1685      = 0;
1686   
1687   
1688  * Map from extended parameter to final parameter
1689  option compoundIndicatorsExt_r < compoundIndicatorsExt;
1690  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1691      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1692          and sum((accNodesModel_a,accYears_a,indicator_a)
1693                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1694      = sum((accNodesModel_a,accYears_a,indicator_a)
1695              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1696          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1697   
1698  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1699      $(compoundIndicators_act(accNodesModel,accYears,indicator)
1700          and sum((accNodesModel_a,accYears_a,indicator_a)
1701                  $compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1702      = sum((accNodesModel_a,accYears_a,indicator_a)
1703              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1704                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1705          compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1706      / sum((accNodesModel_a,accYears_a,indicator_a)
1707              $(compoundIndicatorsExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1708                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1709   
1710  * Remove all accounting regions and accounting years
1711  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1712      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1713          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1714          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1715              or sameas("horizon",accYears_aa)))
1716      = 0;
1717   
1718  * Remove all slack indicators except the ones declared in indicatorBounds
1719  compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1720      $(compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1721          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1722          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1723      = 0;
1724   
1725   
1726  * ==== compound indicators for the post calculation ====
1727  parameter compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a);
1728  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1729      $(sum(nodesModelToCalc$map_accNodesToCalc(accNodesModel,nodesModelToCalc), 1)
1730          and sum(yearsToCalc$map_accYearsToCalc(accYears,yearsToCalc), 1)) = 1;
1731   
1732  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator)
1733      $(activeIndicators(accNodesModel,accYears,indicator)
1734          or variableIndicators(accNodesModel,accYears,indicator))
1735      = 1;
1736   
1737  set compoundIndicatorsFull_act(accNodesModel,accYears,indicator);
1738  option compoundIndicatorsFull_act < compoundIndicatorsFull;
1739   
1740  parameter compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa);
1741  parameter compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a);
1742  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel,accYears,indicator,accNodesModel,accYears,indicator) = 1;
1743   
1744  compIndicators_pre = 0;
1745  compIndicators_post = 1;
1746   
1747  option sparseval = 1;
1748  while(compIndicators_pre < compIndicators_post,
1749      compIndicators_pre = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1750          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1751   
1752      compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1753          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1754              and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1755              and map_accNodes(accNodesModel_aa,accNodesModel_a)
1756              and map_accYears(accYears_aa,accYears_a))
1757          = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1758              * accounting_perIndicator(indicator_a,indicator_aa,accNodesModel_aa,accYears_aa,"perIndicator");
1759   
1760      option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1761   
1762      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1763          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1764              and sum((accNodesModel_a,accYears_a,indicator_a)
1765                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1766          = sum((accNodesModel_a,accYears_a,indicator_a)
1767                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1768              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1769   
1770      compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1771          $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1772              and sum((accNodesModel_a,accYears_a,indicator_a)
1773                      $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1774          = sum((accNodesModel_a,accYears_a,indicator_a)
1775                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1776                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1777              compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1778          / sum((accNodesModel_a,accYears_a,indicator_a)
1779                  $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1780                      and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1781   
1782      option compoundIndicatorsFull_act < compoundIndicatorsFull;
1783      compIndicators_post = sum((accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1784          $compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa), 1);
1785  );
1786  option sparseval = 0;
1787   
1788  * map to sub-years and sub-nodes
1789  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_a)
1790      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1791          and compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1792          and not variableIndicators(accNodesModel_a,accYears_a,indicator_a)
1793          and map_accYears(accYears_aa,accYears_a)
1794          and map_accNodes(accNodesModel_aa,accNodesModel_a))
1795      = compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
1796          * yearFactor(accNodesModel,accYears,indicator,accYears_aa);
1797   
1798  * Remove all accounting regions and accounting years
1799  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1800      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1801          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1802          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1803              or sameas("horizon",accYears_aa)))
1804      = 0;
1805   
1806  * Remove all slack indicators except the ones declared in indicatorBounds
1807  compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1808      $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_aa,accYears_aa,indicator_aa)
1809          and (sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_a), 1)
1810                  or sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1))
1811          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1812      = 0;
1813   
1814   
1815  * Map from extended parameter to final parameter
1816  option compoundIndicatorsFullExt_r < compoundIndicatorsFullExt;
1817  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1818      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1819          and sum((accNodesModel_a,accYears_a,indicator_a)
1820                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) = 1)
1821      = sum((accNodesModel_a,accYears_a,indicator_a)
1822              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)),
1823          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a));
1824   
1825  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1826      $(compoundIndicatorsFull_act(accNodesModel,accYears,indicator)
1827          and sum((accNodesModel_a,accYears_a,indicator_a)
1828                  $compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a), 1) > 1)
1829      = sum((accNodesModel_a,accYears_a,indicator_a)
1830              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1831                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))),
1832          compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a))
1833      / sum((accNodesModel_a,accYears_a,indicator_a)
1834              $(compoundIndicatorsFullExt_r(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa,accNodesModel_a,accYears_a,indicator_a)
1835                  and not (sameas(accNodesModel, accNodesModel_a) and sameas(accYears, accYears_a) and sameas(indicator, indicator_a))), 1);
1836   
1837  * Remove all accounting regions and accounting years
1838  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1839      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1840          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa)
1841   
1842          and (sum(accNodes$(sameas(accNodes,accNodesModel_aa)), 1)
1843              or sameas("horizon",accYears_aa)))
1844      = 0;
1845   
1846  * Remove all slack indicators except the ones declared in indicatorBounds
1847  compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1848      $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_aa,accYears_aa,indicator_aa)
1849          and sum((accNodesModel_aaa,accYears_aaa)$variableIndicators(accNodesModel_aaa,accYears_aaa,indicator_aa), 1)
1850          and not variableIndicators(accNodesModel_aa,accYears_aa,indicator_aa))
1851      = 0;
1852   
1853   
1854  * Check if the objective value and optimization sense is set correctly
1855  scalar opti_values, opti_sense;
1856  opti_values = sum((accNodesModel,accYears,indicator)$(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0), 1);
1857  opti_sense = sum((accNodesModel,accYears,indicator), accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"));
1858  abort$(opti_values < 1)
1859      "Accounting: No indicator specified as objective value"
1860  abort$(opti_values > 1)
1861      "Accounting: Too many indicators specified as objective value"
1862  abort$(opti_sense <> -1 and opti_sense <> 1)
1863      "Accounting: Optimization sense has to be either -1 or 1"
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
1865  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1866  * SPDX-License-Identifier: BSD-3-Clause
1867   
1868  * Calculation of annuities
1869  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1870          $(accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
1871          and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") < 1), 1) > 0 )
1872      "Accounting: Some converter technologies use annuities but have no amortization time"
1873   
1874  parameter accounting_annuityFactor_converter(indicator,nodesModel,years,converter_techs,vintage);
1875  accounting_annuityFactor_converter(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
1876      $accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity")
1877      =
1878      accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest")
1879          * (1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1880          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime")
1881      / ((1 + accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"interest"))
1882          ** accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"amorTime") - 1);
1883   
1884   
1885  abort$(sum((indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1886          $(accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
1887          and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") < 1), 1) > 0 )
1888      "Accounting: Some storage technologies use annuities but have no amortization time"
1889   
1890  parameter accounting_annuityFactor_storage(indicator,nodesModel,years,storage_techs,vintage);
1891  accounting_annuityFactor_storage(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage)
1892      $accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity")
1893      =
1894      accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest")
1895          * (1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1896          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime")
1897      / ((1 + accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"interest"))
1898          ** accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"amorTime") - 1);
1899   
1900   
1901  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1902          $(accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
1903          and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") < 1), 1) > 0 )
1904      "Accounting: Some transfer technologies use annuities but have no amortization time"
1905   
1906  parameter accounting_annuityFactor_transferLink(indicator,linksModel,years,transfer_techs,vintage);
1907  accounting_annuityFactor_transferLink(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
1908      $accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity")
1909      =
1910      accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest")
1911          * (1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1912          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime")
1913      / ((1 + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"interest"))
1914          ** accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") - 1);
1915   
1916   
1917   
1918  abort$(sum((indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
1919          $(accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
1920          and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") < 1), 1) > 0 )
1921      "Accounting: Some transfer-per-length technologies use annuities but have no amortization time"
1922   
1923  parameter accounting_annuityFactor_transferPerLength(indicator,linksModel,years,transfer_techs,vintage,link_types);
1924  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) = 1;
1925   
1926  accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
1927      $accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity")
1928      =
1929      accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest")
1930          * (1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
1931          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime")
1932      / ((1 + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"interest"))
1933          ** accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") - 1);
1934   
1938   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
1940  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1941  * SPDX-License-Identifier: BSD-3-Clause
1942   
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
1947  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1948  * SPDX-License-Identifier: BSD-3-Clause
1949   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
1954  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
1955  * SPDX-License-Identifier: BSD-3-Clause
1956  * // # Output data
1957  * // This is the reference data model of the REMix output.
1958  * //
1959  * // ## Standard output
1962   
1969   
1971   
1972  set capType / "build", "decom", "total", "lowerLimit", "upperLimit", "total_degraded" /;
1973  set balanceType / "net", "gross", "positive", "negative", "flh" /;
1974  set profileType / "upper", "fixed", "lower" /;
1975  set r2a_has_converter_cost(indicator,nodesModel,years,techs,vintage,commodity);
1976   
1977  ** // OUTPUT: indicator_accounting | OEO_00000350:quantity value
1978  * // ### indicator_accounting
1979  * // Title: Accounting indicators Post-calculation
1980  parameter indicator_accounting(accNodesModel,accYears,indicator) "Post-calculation aggregated indicator accounting" ;
1981  * //
1982  ** // OUTPUT: indicator_accounting_ref | OEO_00000350:quantity value
1983  * // ### indicator_accounting_ref
1984  * // Title: Accounting indicators reference
1985  parameter indicator_accounting_ref(accNodesModel,accYears,indicator) "Indicator accounting reference" ;
1986  * //
1987  ** // OUTPUT: indicator_accounting_var | OEO_00000350:quantity value
1988  * // ### indicator_accounting_var
1989  * // Title: Accounting indicators variable states
1990  parameter indicator_accounting_var(accNodesModel,accYears,indicator) "Indicator accounting variable levels" ;
1991  * //
1992  ** // OUTPUT: indicator_accounting_comp | OEO_00000350:quantity value
1993  * // ### indicator_accounting_comp
1994  * // Title: Accounting indicators composition
1995  parameter indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a) "Indicator accounting with other indicator composition" ;
1996  * //
1997  ** // OUTPUT: indicator_accounting_detailed | OEO_00000350:quantity value
1998  * // ### indicator_accounting_detailed
1999  * // Title: Accounting indicators detail
2000  parameter indicator_accounting_detailed(indicator,nodesModel,years,techs) "Indicator accounting with technological composition" ;
2001  * //
2002  ** // OUTPUT: indicator_accounting_links | OEO_00000350:quantity value
2003  * // ### indicator_accounting_links
2004  * // Title: Accounting indicators per transfer link
2005  parameter indicator_accounting_links(indicator,nodesModel,nodesModel_a,linksModel,years,techs) "Indicator accounting of transfer technologies" ;
2006  * //
2007  parameter converter_ratedInput(techs,vintage,commodity);
2008  parameter converter_ratedOutput(techs,vintage,commodity);
2009  parameter converter_ratedOutput_min(nodesModel,years,techs,commodity);
2010  parameter converter_ratedOutput_max(nodesModel,years,techs,commodity);
2011   
2012  ** // OUTPUT: converter_caps | OEO_00010257:power capacity
2013  * // ### converter_caps
2014  * // Title: Coverter capacities post-calculation
2015  parameter converter_caps(accNodesModel,accYears,techs,commodity,capType) "Converter capacities, aggregated total" ;
2016  * //
2017  parameter converter_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2018  parameter converter_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2019   
2020  ** // OUTPUT: converter_units | OEO_00000350:quantity value
2021  * // ### converter_units
2022  * // Title: Coverter units post-calculation
2023  parameter converter_units(accNodesModel,accYears,techs,vintage,capType) "Converter units" ;
2024  * //
2025  parameter converter_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2026   
2027  set transfer_usedStartEnd(nodesModel,nodesModel,linksModel,years,techs);
2028  parameter max_transfer_coefficient(techs,commodity);
2029  parameter min_transfer_coefficient(techs,commodity);
2030  ** // OUTPUT: transfer_links | OEO_00000350:quantity value
2031  * // ### transfer_links
2032  * // Title: Transfer post-calculation
2033  parameter transfer_links(linksModel,years,techs,vintage,capType) "Transfer links" ;
2034  * //
2035  ** // OUTPUT: transfer_caps | OEO_00010257:power capacity
2036  * // ### transfer_caps
2037  * // Title: Transfer capacities post-calculation
2038  parameter transfer_caps(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,capType) "Transfer capacities, aggregated total" ;
2039  * //
2040  ** // OUTPUT: transfer_flows | OEO_00050019:energy amount value
2041  * // ### transfer_flows
2042  * // Title: Transfer hourly flows
2043  parameter transfer_flows(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link flows" ;
2044  * //
2045  ** // OUTPUT: transfer_flows_annual | OEO_00050019:energy amount value
2046  * // ### transfer_flows_annual
2047  * // Title: Transfer annual flows
2048  parameter transfer_flows_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link flows" ;
2049  * //
2050  ** // OUTPUT: transfer_losses | OEO_00050019:energy amount value
2051  * // ### transfer_losses
2052  * // Title: Transfer hourly losses
2053  parameter transfer_losses(timeModel,nodesModel_start,nodesModel_end,linksModel,years,techs,commodity) "Hourly link losses" ;
2054  * //
2055  ** // OUTPUT: transfer_losses_annual | OEO_00050019:energy amount value
2056  * // ### transfer_losses_annual
2057  * // Title: Transfer annual losses
2058  parameter transfer_losses_annual(nodesModel_start,nodesModel_end,linksModel,years,techs,commodity,balanceType) "Annual link losses" ;
2059  * //
2060  parameter storage_size_max(nodesModel,years,techs,commodity);
2061  parameter storage_size_min(nodesModel,years,techs,commodity);
2062  ** // OUTPUT: storage_units |  OEO_00000350:quantity value
2063  * // ### storage_units
2064  * // Title: Storage units post-calculation
2065  parameter storage_units(accNodesModel,accYears,techs,vintage,capType) "Storage units" ;
2066  * //
2067  parameter storage_units_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,capType);
2068  ** // OUTPUT: storage_caps | OEO_00230000:energy storage capacity
2069  * // ### storage_caps
2070  * // Title: Storage capacities post-calculation
2071  parameter storage_caps(accNodesModel,accYears,techs,commodity,capType) "Storage capacities, aggregated total" ;
2072  * //
2073  parameter storage_caps_ext(accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,capType);
2074  parameter storage_caps_novintage_ext(accNodesModel,nodesModel,accYears,years,techs,commodity,capType);
2075  ** // OUTPUT: storage_level_out | OEO_00330012:energy storage content
2076  * // ### storage_level_out
2077  * // Title: Storage level
2078  parameter storage_level_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage level per time step" ;
2079  * //
2080  parameter storage_level_out_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2081  ** // OUTPUT: storage_flows | OEO_00050019:energy amount value
2082  * // ### storage_flows
2083  * // Title: Storage hourly flows
2084  parameter storage_flows(timeModel,accNodesModel,accYears,techs,commodity) "Storage flows per time step" ;
2085  * //
2086  parameter storage_flows_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2087  ** // OUTPUT: storage_flows_annual | OEO_00050019:energy amount value
2088  * // ### storage_flows_annual
2089  * // Title: Storage annual flows
2090  parameter storage_flows_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage flows" ;
2091  * //
2092  ** // OUTPUT: storage_losses_out | OEO_00050019:energy amount value
2093  * // ### storage_losses_out
2094  * // Title: Storage hourly losses
2095  parameter storage_losses_out(timeModel,accNodesModel,accYears,techs,commodity) "Storage losses per time step" ;
2096  * //
2097  ** // OUTPUT: storage_losses_annual | OEO_00050019:energy amount value
2098  * // ### storage_losses_annual
2099  * // Title: Storage annual losses
2100  parameter storage_losses_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated storage losses" ;
2101  * //
2102  ** // OUTPUT: commodity_balance | OEO_00000350:quantity value
2103  * // ### commodity_balance
2104  * // Title: Hourly commodity balance
2105  parameter commodity_balance(timeModel,accNodesModel,accYears,techs,commodity) "Commodity balances per model hour" ;
2106  parameter commodity_balance_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity);
2107  * //
2108  ** // OUTPUT: commodity_balance_annual | OEO_00000350:quantity value
2109  * // ### commodity_balance_annual
2110  * // Title: Annual commodity balance
2111  parameter commodity_balance_annual(accNodesModel,accYears,techs,commodity,balanceType) "Aggregated commodity balances" ;
2112  * //
2113  ** // OUTPUT: marginals_sourcesink_profile | OEO_00040008:marginal cost
2114  * // ### marginals_sourcesink_profile
2115  * // Title: Source-sink marginals
2116  parameter marginals_sourcesink_profile(timeModel,nodesModel,years,techs,commodity) "Source and sink flow marginal values" ;
2117  * //
2118  ** // OUTPUT: marginals_balance | OEO_00040008:marginal cost
2119  * // ### marginals_balance
2120  * // Title: Nodel balance marginals
2121  parameter marginals_balance(timeModel,nodesModel,years,commodity) "Nodal balance marginal values" ;
2122  * //
2123  ** // OUTPUT: marginals_sourcesink_sum | OEO_00040008:marginal cost
2124  * // ### marginals_sourcesink_sum
2125  * // Title: Source-sink annual marginals
2126  parameter marginals_sourcesink_sum(nodesModel,years,techs,commodity) "Annual source and sink flow marginal values" ;
2127  * //
2128  ** // OUTPUT: marginals_indicator_bounds | OEO_00040008:marginal cost
2129  * // ### marginals_indicator_bounds
2130  * // Title: Indicator bounds marginals
2131  parameter marginals_indicator_bounds(accNodesModel,accYears,indicator) "Accounting indicator marginals" ;
2132  * //
2133  * // ## REMix-AMIRIS interface output
2134  * //
2135  ** // OUTPUT: r2a_annuity_cost_converter | OEO_00040009:cost
2136  * // ### r2a_annuity_cost_converter
2137  * // Title: Converter annuity cost
2138  parameter r2a_annuity_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Annuity cost of converters" ;
2139  * //
2140  ** // OUTPUT: r2a_spec_cost_converter | OEO_00040009:cost
2141  * // ### r2a_spec_cost_converter
2142  * // Title: Converter specific cost
2143  parameter r2a_spec_cost_converter(indicator,accNodesModel,accYears,techs,vintage,commodity) "Specific cost of converters" ;
2144  * //
2145  ** // OUTPUT: r2a_spec_cost_fuel | OEO_00040009:cost
2146  * // ### r2a_spec_cost_fuel
2147  * // Title: Commodity specific cost
2148  parameter r2a_spec_cost_fuel(indicator,accNodesModel,accYears,techs,commodity) "Specific cost of commodities, used particularly for fuels" ;
2149  * //
2150  ** // OUTPUT: r2a_spec_cost_indicator | OEO_00040009:cost
2151  * // ### r2a_spec_cost_indicator
2152  * // Title: Indicator specific cost
2153  parameter r2a_spec_cost_indicator(indicator,indicator_a,accNodesModel,accYears) "Specific indicator cost" ;
2154  * //
2155  ** // OUTPUT: r2a_converter_efficiencies | OEO_00140050:efficiency value
2156  * // ### r2a_converter_efficiencies
2157  * // Title: Indicator specific cost
2158  parameter r2a_converter_efficiencies(techs,vintage,activity,commodity,commodity_a) "Converter-specific efficiency" ;
2159  * //
2160  ** // OUTPUT: r2a_converter_avail_factor | OEO_00000350:quantity value
2161  * // ### r2a_converter_avail_factor
2162  * // Title: Converter availability factor
2163  parameter r2a_converter_avail_factor(accNodesModel,accYears,techs,vintage) "Availability factor of converter technologies" ;
2164  parameter r2a_converter_avail_profile(timeModel,accNodesModel,accYears,techs,commodity,profileType) "Availability of converter technologies" ;
2165  parameter r2a_converter_avail_profile_ext(timeModel,accNodesModel,nodesModel,accYears,years,techs,vintage,commodity,profileType);
2166  * //
2167  ** // OUTPUT: r2a_storage_e2p | OEO_00000350:quantity value
2168  * // ### r2a_storage_e2p
2169  * // Title: E2P Storage
2170  parameter r2a_storage_e2p(accNodesModel,accYears,techs,vintage,commodity,capType) "Energy-to-power ratio" ;
2171  * //
2172  ** // OUTPUT: r2a_storage_selfdischarge | OEO_00000350:quantity value
2173  * // ### r2a_storage_selfdischarge
2174  * // Title: Storage self discharge rates
2175  parameter r2a_storage_selfdischarge(accNodesModel,accYears,techs,vintage,commodity);
2176   
2177  set attribute(*)
2178       /
2179      "variables"
2180      "equations"
2181      "iterations"
2182      /;
2183   
2184  parameter diagnostics(attribute);
2185   
INCLUDE    C:\Local\framework\remix\framework\model\source\loadgdx.gms
2189  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2190  * SPDX-License-Identifier: BSD-3-Clause
2191   
2192  * ==== global settings ====
2194   
2196   
2198   
2200   
INCLUDE    C:\Local\framework\remix\framework\model\source\core\converter.gms
2202  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
2203  * SPDX-License-Identifier: BSD-3-Clause
2204   
2205  * // # core_converter
2206  * // The equations in this file describe the converters in the model.
2207   
2208  * // ## Advanced features
2209  * //
2210  * // You can find a more detailed explanation of the %curly_open%ref%curly_close%`MIP features <explanations_mip_label>`.
2211  ** // There is also a more detailed explanation on the modeling of outages at the %curly_open%ref%curly_close%`resilience section <explanations_resilience_label>`.
2212  * //
2213  * // In the following table you can see which modifications you have to make to your data to use the different features.
2214  * //
2215  * // | Feature | Modification |
2216  * // | ------ | ------ |
2217  * // | MIP expansion | The converter_tech_Parameter "mipUnits" has to be set to 1 in converter_techParam.dat for the technologies and years where descrete expansion is wanted |
2218  * // | Minimum up/downtime | The converter_tech_Parameters "minUptime" and/or "minDowntime" need to be set to the according amount of minimum time steps.Furthermore, the converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat
2219  * // for the technologies and years where a minimum up- or downtime should be applied so that the units can be shut down. "mipUnits" will automatically be set to 1 |
2220  * // | Partial load | The converter_tech_Parameter "mipDispatch" has to be set to 1 in converter_techParam.dat for the technologies and years where you want to make use of the partial load feature. You also have to set a value to
2221  * // the converter_coefficient_parameters "minLoad" and/or "maxLoad" for the according technologies, vintages, activities and commodities. You can then for example set different "coefficient" values for each activity in converter_coefficient.dat |
2222  ** // | Outages | You have to include the converter_outageProfile.dat-file and while executing the model you have to set --method=resilience |
2223   
2224  * // ## %curly_open%ref%curly_close%`sets <remix_model_sets_label>`
2225  * //
2226  * // ### set_converter_techs.dat
2227  * // In this file all converter technologies are listed that can be used within your model.
2228  * //
2229  * // ### set_activities.dat
2230  * // All modes with which the converter technologies can be operated need to be added here.
2231  * // Examples: Charge (for the charging mode of a storage), Powergen (for the mode in which a converter produces electricity), Curtailment (for the mode in which a renewable power plant is shut down), …
2232  * // If you would like to use the partial load feature, all activity modes that should be available for this feature need to be defined here as well.
2233  * //
2234  * // ### set_commodities.dat
2235  * // In this file all commodities are listed that can be used and converted by the converter technologies.
2236  * // Examples: Electricity, Coal, Biomass, Hydrogen, …
2237   
2238  * // ## Variables
2239  * // {special_table_converter_variables}
2450   
2451  * // ## Load units from gdx file
2453   
2454   
2455  * ==== calculation of mappings ====
2456   
2457  * Technologies with a lifeTime > 0 are available
2458  set converter_availTech(nodesModel,years,converter_techs,vintage);
2459  converter_availTech(nodesModel,years,converter_techs,vintage)
2460      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
2461          and converter_techParam(converter_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
2462   
2463  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
2464  converter_availTech(nodesModel,years,converter_techs,vintage)
2465      $(yearsToCalc(years) and converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit") = 0 ) = no;
2466   
2467  * Technologies already built become unavailable if they have an unitsBuild of 0
2468  converter_availTech(nodesModel,years,converter_techs,vintage)
2469      $( ( not yearsToCalc(years)) and converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild") = 0 ) = no;
2470   
2471  * Used technologies are available technologies over their technical lifeTime
2472  set converter_usedTech(nodesModel,years,converter_techs,vintage);
2473  converter_usedTech(nodesModel,years,converter_techs,vintage)
2474      $(vintage.val <= years.val
2475          and years.val < smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage),
2476                                  years_a.val + converter_techParam(converter_techs,vintage,"lifeTime"))
2477          ) = yes;
2478   
2479  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
2480  set converter_decomTech(nodesModel,years,converter_techs,vintage);
2481  converter_decomTech(nodesModel,years,converter_techs,vintage)
2482    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2483                  and not converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2484      and sum(yearsToCalc
2485        $(sameas(years, yearsToCalc)
2486          and yearsToCalc.val >= smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2487          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2488    = yes;
2489   
2490  converter_decomTech(nodesModel,years,converter_techs,vintage)
2491    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)
2492                  and converter_techParam(converter_techs,vintage,"freeDecom")), 1)
2493      and sum(yearsToCalc
2494        $(sameas(years, yearsToCalc)
2495          and yearsToCalc.val > smin(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val)
2496          and yearsToCalc.val <= smax(years_a$converter_availTech(nodesModel,years_a,converter_techs,vintage), years_a.val) + converter_techParam(converter_techs,vintage,"lifeTime")), 1))
2497    = yes;
2498   
2499  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
2500  converter_decomTech(nodesModel,years,converter_techs,vintage)
2501    $(sum(years_a$(converter_usedTech(nodesModel,years_a,converter_techs,vintage)), 1)
2502      and sum(yearsToCalc
2503        $(sameas(years, yearsToCalc)
2504          and (vintage.val + converter_techParam(converter_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
2505    = yes;
2506   
2507  * Extend the decom frame to the model year after the last model year of usedTech
2508  converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2509    $(converter_usedTech(nodesModel,yearsToCalc-1,converter_techs,vintage)
2510      and converter_decomTech(nodesModel,yearsToCalc-1,converter_techs,vintage))
2511    = yes;
2512   
2513  * Mapping for used activities and commodities
2514  set converter_usedActCom(converter_techs,vintage,activity,commodity);
2515  option converter_usedActCom < converter_coefficient;
2516   
2517  set converter_usedAct(converter_techs,vintage,activity);
2518  option converter_usedAct < converter_usedActCom;
2519   
2520  set converter_usedCom(converter_techs,vintage,commodity);
2521  option converter_usedCom < converter_usedActCom;
2522   
2523  set converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity);
2524  converter_usedTechAct(nodesModel,years,converter_techs,vintage,activity)
2525      $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2526          and converter_usedAct(converter_techs,vintage,activity))
2527      = yes;
2528   
2529  set converter_useRampPos(nodesModel,years,converter_techs,vintage);
2530  converter_useRampPos(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2531    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2532      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"), 1))
2533    = 1;
2534   
2535  set converter_useRampNeg(nodesModel,years,converter_techs,vintage);
2536  converter_useRampNeg(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2537    $(sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp"), 1)
2538      or sum(indicator$accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg"), 1))
2539    = 1;
2540   
2541   
2542  * ==== aggregation of profiles ====
2543   
2544  * derive upper and lower profiles then aggregate
2545  set converter_activity_hasProfileIn(nodesData,years,converter_techs,pc_converter_activityProfile);
2546  option converter_activity_hasProfileIn < converter_activityProfileIn;
2547   
2548  set converter_activity_hasProfile(nodesModel,years,converter_techs,pc_converter_activityProfile);
2549  converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2550      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2551              converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile));
2552   
2553  set converter_coefficient_hasProfileIn(nodesData,years,converter_techs,vintage,activity,commodity);
2554  option converter_coefficient_hasProfileIn < converter_coefficientProfileIn;
2555   
2556  set converter_coefficient_hasProfile(nodesModel,years,converter_techs,vintage,activity,commodity);
2557  converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2558      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2559              converter_coefficient_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity));
2560   
2561  * aagregate time dimension
2562  parameter converter_activityProfileIn_aggTime(timeModel,nodesData,yearsToCalc,converter_techs,pc_converter_activityProfile);
2563  converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2564    $converter_activity_hasProfileIn(nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2565    = sum(timeData$timeMapping_t(timeModelToCalc,timeData),
2566            converter_activityProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2567            / timeLength(timeModelToCalc));
2568  option clear = converter_activityProfileIn;
2569   
2570  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2571  parameter converter_activityProfile(timeModel,nodesModel,years,converter_techs,vintage,pc_converter_activityProfile);
2572  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"upper")
2573      = converter_techParam(converter_techs,vintage,"activityUpperLimit");
2574  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),"lower")
2575      = converter_techParam(converter_techs,vintage,"activityLowerLimit");
2576   
2577   
2578  set converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2579  converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2580      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) > 0
2581          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) < inf;
2582   
2583  set converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs);
2584  converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs)
2585      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")) = inf;
2586   
2587  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2588      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2589          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2590      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2591                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") < inf ),
2592                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2593                * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"))
2594      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2595              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2596   
2597  converter_activityProfile(timeModelToCalc,converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),pc_converter_activityProfile)
2598      $(converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile)
2599          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2600      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2601                  and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf),
2602                converter_activityProfileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,converter_techs,pc_converter_activityProfile))
2603      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2604                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2605              1);
2606  option clear = converter_activityProfileIn_aggTime;
2607   
2608  * for fixed profiles overwrite upper and lower profile
2609  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"lower")
2610      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2611      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2612   
2613  converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper")
2614      $converter_activity_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,"fixed")
2615      = converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"fixed");
2616   
2620   
2621  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
2622  parameter converter_coefficientProfile(timeModel,nodesModel,years,converter_techs,vintage,activity,commodity);
2623  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2624      = converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient");
2625   
2626  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2627      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2628          and converter_finiteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs) )
2629      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2630            sum(timeData$timeMapping(timeData,timeModelToCalc),
2631                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2632                / timeLength(timeModelToCalc)
2633              * converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") )
2634      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
2635              converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2636   
2637  converter_coefficientProfile(timeModelToCalc,converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),commodity)
2638      $( converter_coefficient_hasProfile(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
2639          and converter_infiniteUnitLimit(nodesModelToCalc,yearsToCalc,converter_techs))
2640      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2641                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ),
2642            sum(timeData$timeMapping(timeData,timeModelToCalc),
2643                    converter_coefficientProfileIn(timeData,nodesDataToCalc,yearsToCalc,converter_techs,vintage,activity,commodity))
2644                / timeLength(timeModelToCalc))
2645      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
2646                      and converter_capacityParamIn(nodesDataToCalc,yearsToCalc,converter_techs,"unitsUpperLimit") = inf ), 1);
2647   
2650   
2651  * reduce coefficient delay based on time resolution
2652  converter_coefficient(converter_techs,vintage,activity,commodity,"delay")
2653    $(converter_coefficient(converter_techs,vintage,activity,commodity,"delay"))
2654    = ceil(converter_coefficient(converter_techs,vintage,activity,commodity,"delay") / 1);
2656   
2657  * ==== prepare partial load behavior parameters ====
2658   
2659  * set disabled max load requirements to 1 to avoid excessive logical expressions later on
2660  alias(commodity, com);
2661  converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")
2662      $((converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad") = 0)
2663        and converter_usedAct(converter_techs,vintage,activity))
2664      = 1;
2665   
2666  * indicate that at least one activity of a technology makes use of partial load behavior
2667  set converter_hasMaxLoad(converter_techs,vintage);
2668  converter_hasMaxLoad(converter_techs,vintage)
2669    = smin((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2670              converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad")) < 1;
2671   
2672  set converter_hasMinLoad(converter_techs,vintage);
2673  converter_hasMinLoad(converter_techs,vintage)
2674    = smax((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2675              converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad")) > 0;
2676   
2677  set converter_hasConstantFluxInActivity(converter_techs,vintage);
2678  converter_hasConstantFluxInActivity(converter_techs,vintage)
2679    = sum((activity,commodity)$converter_usedAct(converter_techs,vintage,activity),
2680                          abs(converter_coefficient(converter_techs,vintage,activity,commodity,"constant"))) > 0;
2681   
2682  * setting up a requirements parameter to avoid having to cycle through commodities in equations
2683  set pc_converter_activityRequirements
2684      /
2685      minLoad             "Lower profile for converter activity"
2686      maxLoad             "Upper profile for converter activity"
2687      /;
2688  parameter converter_activityRequirements(converter_techs,vintage,activity,pc_converter_activityRequirements);
2689  converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
2690    = smax(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"minLoad"));
2691  converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
2692    = smin(commodity, converter_coefficient(converter_techs,vintage,activity,commodity,"maxLoad"));
2693   
2694  * ==== activate MIP units for MIP dispatch or partial load technologies ====
2695   
2696  set converter_hasMinUptime(converter_techs,vintage);
2697  converter_hasMinUptime(converter_techs,vintage)
2698    $(converter_techParam(converter_techs,vintage,"minUptime")
2699      and converter_techParam(converter_techs,vintage,"mipDispatch"))
2700    = yes;
2701   
2702  set converter_hasMinDowntime(converter_techs,vintage);
2703  converter_hasMinDowntime(converter_techs,vintage)
2704    $(converter_techParam(converter_techs,vintage,"minDowntime")
2705      and converter_techParam(converter_techs,vintage,"mipDispatch"))
2706    = yes;
2707   
2708  * require integer unit counts if online state is to be tracked
2709  converter_techParam(converter_techs,vintage,"mipUnits")
2710      $(converter_techParam(converter_techs,vintage,"mipDispatch")
2711        or converter_hasMinLoad(converter_techs, vintage)
2712        or converter_hasMaxLoad(converter_techs, vintage)
2713        or converter_hasConstantFluxInActivity(converter_techs,vintage))
2714      = 1;
2715   
2716  * ==== floor mip converter units to integer values ====
2717  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit")
2718      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
2719      = floor(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsLowerLimit"));
2720  converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit")
2721      $sum(vintage, converter_techParam(converter_techs,vintage,"mipUnits"))
2722      = ceil(converter_capacityParam(nodesModelToCalc,yearsToCalc,converter_techs,"unitsUpperLimit"));
2723   
2724  * ==== scalars and sets for minUptime and minDowntime ====
2725   
2726  scalar converter_maxUptimeReq;
2727  converter_maxUptimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minUptime"));
2728  set uptimeSearchRange(timeModelToCalc);
2729  uptimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxUptimeReq;
2730   
2731  scalar converter_maxDowntimeReq;
2732  converter_maxDowntimeReq = smax((converter_techs,vintage), converter_techParam(converter_techs,vintage,"minDowntime"));
2733  set downtimeSearchRange(timeModelToCalc);
2734  downtimeSearchRange(timeModelToCalc) = ord(timeModelToCalc) <= converter_maxDowntimeReq;
2735   
2736  * ==== definition of variables ====
2737   
2738  converter_unitsTotal_MIP.up(nodesModelToCalc,years,converter_techs,vintage)
2739      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
2740        and converter_techParam(converter_techs,vintage,"mipUnits") = 1)
2741      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
2742  converter_unitsOnline_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage)
2743      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
2744        and converter_techParam(converter_techs,vintage,"mipDispatch") = 1)
2745      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
2746  converter_unitsUsingActivity_MIP.up(timeModelToCalc,nodesModelToCalc,years,converter_techs,vintage,activity)
2747      $(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
2748        and (converter_hasMinLoad(converter_techs, vintage)
2749              or converter_hasMaxLoad(converter_techs, vintage)))
2750      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit");
2751   
2752   
2753  * Initialise variables for unitsBuild
2754  converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
2755      $converter_availTech(nodesModel,years,converter_techs,vintage)
2756      = converter_capacityParam(nodesModel,years,converter_techs,"unitsBuild");
2757  converter_unitsBuild.lo(nodesModel,yearsToCalc,converter_techs,vintage)
2758      $converter_availTech(nodesModel,yearsToCalc,converter_techs,vintage)
2759      = converter_unitsBuild.l(nodesModel,yearsToCalc,converter_techs,vintage);
2760  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
2761      $converter_capacityParam(nodesModel,years,converter_techs,"noExpansion")
2762      = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
2763   
2764  * Initialise variables for unitsDecom
2765  converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
2766    $(converter_decomTech(nodesModel,years,converter_techs,vintage)
2767      and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
2768    = sum((years_a,years_aa)$(sameas(years-1, years_aa)
2769                        and years_a.val > years_aa.val - converter_techParam(converter_techs,vintage,'lifeTime')
2770                        and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')
2771                        and converter_availTech(nodesModel,years_a,converter_techs,vintage)),
2772          converter_unitsBuild.l(nodesModel,years_a,converter_techs,vintage));
2773   
2774  converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage)
2775    $converter_decomTech(nodesModel,yearsToCalc,converter_techs,vintage)
2776    = sum(years$
2777          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
2778            and converter_availTech(nodesModel,years,converter_techs,vintage)
2779            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
2780            and years.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
2781        converter_unitsBuild.l(nodesModel,years,converter_techs,vintage))
2782      + sum(yearsToCalc_a$
2783          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
2784            and converter_availTech(nodesModel,yearsToCalc_a,converter_techs,vintage)
2785            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - converter_techParam(converter_techs,vintage,'lifeTime')
2786            and yearsToCalc_a.val <= yearsToCalc.val - converter_techParam(converter_techs,vintage,'lifeTime')),
2787        converter_unitsBuild.l(nodesModel,yearsToCalc_a,converter_techs,vintage));
2788        ;
2789   
2790  converter_unitsDecom.lo(nodesModel,yearsToCalc,converter_techs,vintage)
2791      $(converter_usedTech(nodesModel,yearsToCalc,converter_techs,vintage)
2792          and not converter_techParam(converter_techs,vintage,"freeDecom"))
2793      = converter_unitsDecom.l(nodesModel,yearsToCalc,converter_techs,vintage);
2794   
2795   
2797   
2798   
2799  * Calculate planned unit expansion
2800  parameter converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
2801  converter_unitsPlanned(nodesModel,years,converter_techs,vintage) = 0;
2802  loop(years,
2803    converter_unitsPlanned(nodesModel,years,converter_techs,vintage)
2804      =
2805      converter_unitsPlanned(nodesModel,years-1,converter_techs,vintage)
2806          $converter_usedTech(nodesModel,years-1,converter_techs,vintage)
2807      + converter_unitsBuild.l(nodesModel,years,converter_techs,vintage)
2808          $converter_availTech(nodesModel,years,converter_techs,vintage)
2809      - converter_unitsDecom.l(nodesModel,years,converter_techs,vintage)
2810          $converter_decomTech(nodesModel,years,converter_techs,vintage);
2811  );
2812   
2813  * Set initial state for planned units
2814  converter_unitsTotal.l(nodesModel,years,converter_techs,vintage)
2815    = converter_unitsPlanned(nodesModel,years,converter_techs,vintage);
2816   
2817   
2818  * // ## Load units from gdx file
2820   
2821  * Calculate if planned unit expansion is bounded by upper and lower limits
2822  set converter_unitBoundsFixed(nodesModel,years,converter_techs);
2823  converter_unitBoundsFixed(nodesModel,years,converter_techs)
2824    $(not sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
2825          converter_techParam(converter_techs,vintage,"freeDecom"))
2826    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
2827          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
2828      = converter_capacityParam(nodesModel,years,converter_techs,"unitsUpperLimit")
2829    and sum(vintage$converter_usedTech(nodesModel,years,converter_techs,vintage),
2830          converter_unitsPlanned(nodesModel,years,converter_techs,vintage))
2831      = converter_capacityParam(nodesModel,years,converter_techs,"unitsLowerLimit"))
2832    = yes;
2833   
2834  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
2835  converter_unitsBuild.fx(nodesModel,years,converter_techs,vintage)
2836    $(converter_availTech(nodesModel,years,converter_techs,vintage)
2837      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
2838    = converter_unitsBuild.l(nodesModel,years,converter_techs,vintage);
2839  converter_unitsDecom.fx(nodesModel,years,converter_techs,vintage)
2840    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2841      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
2842    = converter_unitsDecom.l(nodesModel,years,converter_techs,vintage);
2843  converter_unitsTotal.fx(nodesModel,years,converter_techs,vintage)
2844    $(converter_usedTech(nodesModel,years,converter_techs,vintage)
2845      and converter_unitBoundsFixed(nodesModel,years,converter_techs))
2846    = converter_unitsTotal.l(nodesModel,years,converter_techs,vintage);
2847   
2848   
2849  * Add parameter for fixing capacities during myopic runs
2850  parameter converter_unitsDelta_upper(nodesModel,years,converter_techs);
2851  parameter converter_unitsDelta_lower(nodesModel,years,converter_techs);
2852  parameter converter_unitsDelta_decom(nodesModel,years,converter_techs,vintage);
2853   
2854  * Fix activities of upper limit if upper limit is zero
2855  converter_activity.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
2856    $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
2857      and not converter_activityProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"upper"))
2858      = 0;
2859   
2860   
2861  * ==== declaration of equations ====
2862   
2863  equations
2864    Eq_converter_unitsBalance(nodesModel,years,converter_techs,vintage
2865      ) "Ensures the units balance over the planning period."
2866    Eq_converter_unitsBalanceFreeDecom(nodesModel,years,converter_techs,vintage
2867      ) "Ensures the units balance over the planning period."
2868    Eq_converter_unitsFreeDecom(nodesModel,years,converter_techs,vintage
2869      ) "Restricts the free decommissioning of units over the planning period."
2870    Eq_converter_unitsUpperLimit(nodesModel,years,converter_techs
2871      ) "Upper bound for the total number of units."
2872    Eq_converter_unitsLowerLimit(nodesModel,years,converter_techs
2873      ) "Lower bound for the total number of units."
2874    Eq_converter_unitsFixedLimit(nodesModel,years,converter_techs
2875      ) "Fixed bound for the total number of units."
2876    Eq_converter_unitsTotalMIP(nodesModel,years,converter_techs,vintage
2877      ) "Fixes the total number of units to the corresponding integer variable."
2878    Eq_converter_unitsOnlineMIP(timeModel,nodesModel,years,converter_techs,vintage
2879      ) "Fixes the number of online units to the corresponding integer variable."
2880   
2881    Eq_converter_activityLowerLimit(timeModel,nodesModel,years,converter_techs,vintage
2882      ) "Lower limit on the activity."
2883    Eq_converter_activityUpperLimit(timeModel,nodesModel,years,converter_techs,vintage
2884      ) "Upper limit on the activity."
2885   
2886    Eq_converter_activityFixedLimit(timeModel,nodesModel,years,converter_techs,vintage
2887      ) "Fixed limit on the activity."
2888    Eq_converter_rampPos(timeModel,nodesModel,years,converter_techs,vintage
2889      ) "Positive ramping of unit activity."
2890    Eq_converter_rampNeg(timeModel,nodesModel,years,converter_techs,vintage
2891      ) "Negative ramping of unit activity."
2892    Eq_converter_rampLimit(timeModel,nodesModel,years,converter_techs,vintage
2893      ) "Restrict ramping up of unit activity."
2894   
2895    Eq_converter_unitsOnline(timeModel,nodesModel,years,converter_techs,vintage
2896      ) "Set online units to total number of operational units."
2897    Eq_converter_unitsOnlineUC(timeModel,nodesModel,years,converter_techs,vintage
2898      ) "Allow shutting down units."
2899    Eq_converter_activityStartups(timeModel,nodesModel,years,converter_techs,vintage
2900      ) "Variable counting the number of unit startups."
2901    Eq_converter_activityShutdowns(timeModel,nodesModel,years,converter_techs,vintage
2902      ) "Variable tracking the number of unit shutdowns."
2903    Eq_converter_limitStartups(nodesModel,years,converter_techs,vintage
2904      ) "Limit the number of startup cycles a unit can perform."
2905    Eq_converter_minUptime(timeModel,nodesModel,years,converter_techs,vintage
2906      ) "Require recently started units to remain online for their respective minimum uptime."
2907    Eq_converter_minDowntime(timeModel,nodesModel,years,converter_techs,vintage
2908      ) "Require recently shut down units to remain offline for their respective minimum downtime."
2909    Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
2910      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
2911    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModel,nodesModel,years,converter_techs,vintage,activity
2912      ) "Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes."
2913    Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModel,nodesModel,years,converter_techs,vintage,activity
2914      ) "Enforce sufficient activity coefficients of activities to justify all active modes."
2915    Eq_converter_noOnlineIdle(timeModel,nodesModel,years,converter_techs,vintage
2916      ) "Prevent the circumvention of requirements by keeping units online without using any modes."
2917    Eq_converter_noOnlineIdleDetailedPartLoad(timeModel,nodesModel,years,converter_techs,vintage
2918      ) "Prevent the circumvention of requirements by keeping units online without using any modes. Allow more than one mode activation per unit."
2919    Eq_converter_activityUpperLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
2920      ) "Limit usage of an activity to corresponding units."
2921    Eq_converter_activityLowerLimitPartLoad(timeModel,nodesModel,years,converter_techs,vintage,activity
2922      ) "Limit usage of an activity to corresponding units."
2923    Eq_converter_activityModeLimit(timeModel,nodesModel,years,converter_techs,vintage,activity
2924      ) "Limit the number of units in one particular mode to the number of operational units."
2925    ;
2926   
2927  * ==== equation definition ====
2928  * // ## Equations
2929  * // ### Converter Units Balance
2930  * // Ensures that the total units are consistent with the built and decommissioned units.
2931  * // {Eq_converter_unitsBalance}
2932   
2933  * Equation using build only
2934  Eq_converter_unitsBalance(nodesModelSel,yearsSel,converter_techs,vintage)
2935      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
2936            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
2937          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
2938          and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
2939      ..
2940      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
2941      =e=
2942      sum ((years_a)
2943              $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
2944                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
2945                  and years_a.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
2946                  and years_a.val <= yearsSel.val ),
2947            converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage))
2948   
2949      + sum ((yearsToCalc)
2950              $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
2951                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
2952                  and yearsToCalc.val + converter_techParam(converter_techs,vintage,'lifeTime') > yearsSel.val
2953                  and yearsToCalc.val <= yearsSel.val ),
2954            converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
2955   
2956  * Equation using build and decom
2957  Eq_converter_unitsBalanceFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
2958      $((converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
2959            or sum(years$sameas(years,yearsSel), converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
2960          and not converter_unitBoundsFixed(nodesModelSel,yearsSel,converter_techs)
2961          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
2962      ..
2963      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
2964      =e=
2965      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
2966        sum(years$sameas(years, yearsToCalc),
2967          converter_unitsTotal(nodesModelSel,years-1,converter_techs,vintage)
2968            $converter_usedTech(nodesModelSel,years-1,converter_techs,vintage)))
2969      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
2970        converter_unitsTotal(nodesModelSel,yearsToCalc-1,converter_techs,vintage)
2971          $converter_usedTech(nodesModelSel,yearsToCalc-1,converter_techs,vintage))
2972      + converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
2973          $converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
2974      - converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
2975          $converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
2976      + converter_unitsDelta_decom(nodesModelSel,yearsSel,converter_techs,vintage)
2977          ;
2978   
2979  * // ### Converter Units Free Decommission
2980  * // Restricts the free decommissioning of units over the planning period.
2981  * // {Eq_converter_unitsFreeDecom}
2982  Eq_converter_unitsFreeDecom(nodesModelSel,yearsSel,converter_techs,vintage)
2983      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
2984          and converter_techParam(converter_techs,vintage,"freeDecom") = 1)
2985      ..
2986      sum(years$
2987            ((converter_decomTech(nodesModelSel,years,converter_techs,vintage))
2988              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
2989          converter_unitsDecom(nodesModelSel,years,converter_techs,vintage))
2990      + sum(yearsToCalc$
2991            ((converter_decomTech(nodesModelSel,yearsToCalc,converter_techs,vintage))
2992              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
2993              and yearsToCalc.val <= yearsSel.val),
2994          converter_unitsDecom(nodesModelSel,yearsToCalc,converter_techs,vintage))
2995      =g=
2996      sum(years$
2997            (converter_availTech(nodesModelSel,years,converter_techs,vintage)
2998              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
2999              and years.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3000          converter_unitsBuild(nodesModelSel,years,converter_techs,vintage))
3001      + sum(yearsToCalc$
3002            (converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
3003              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
3004              and yearsToCalc.val <= yearsSel.val - converter_techParam(converter_techs,vintage,'lifeTime')),
3005          converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage));
3006   
3007  * // ### Converter Units Upper Limit
3008  * // Upper bound for the total number of units.
3009  * // {Eq_converter_unitsUpperLimit}
3010  Eq_converter_unitsUpperLimit(nodesModelSel,yearsSel,converter_techs)
3011      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') >= 0
3012          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit') < +inf
3013          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit')
3014              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit'))
3015      ..
3016      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3017          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3018      =l=
3019      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3020   
3021  * // ### Converter Units Lower Limit
3022  * // Lower bound for the total number of units.
3023  * // {Eq_converter_unitsLowerLimit}
3024  Eq_converter_unitsLowerLimit(nodesModelSel,yearsSel,converter_techs)
3025      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit') > 0
3026          and converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3027              <> converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3028      ..
3029      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3030          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3031      =g=
3032      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsLowerLimit");
3033   
3034  Eq_converter_unitsFixedLimit(nodesModelSel,yearsSel,converter_techs)
3035      $(converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsLowerLimit')
3036          = converter_capacityParam(nodesModelSel,yearsSel,converter_techs,'unitsUpperLimit'))
3037      ..
3038      sum(vintage$converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
3039          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage))
3040      =e=
3041      converter_capacityParam(nodesModelSel,yearsSel,converter_techs,"unitsUpperLimit");
3042   
3043  * // ### Converter Units Total MIP
3044  * // Fixes the total number of units to the corresponding integer variable.
3045  * // {Eq_converter_unitsTotalMIP}
3046  Eq_converter_unitsTotalMIP(nodesModelSel,yearsSel,converter_techs,vintage)
3047      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3048          and converter_techParam(converter_techs,vintage,"mipUnits") = 1 )
3049      ..
3050      converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3051      =e=
3052      converter_unitsTotal_MIP(nodesModelSel,yearsSel,converter_techs,vintage);
3053   
3054  * // ### Converter Units Online MIP
3055  * // Fixes the number of online units to the corresponding integer variable.
3056  * // {Eq_converter_unitsOnlineMIP}
3057  Eq_converter_unitsOnlineMIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3058      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3059          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3060      ..
3061      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3062      =e=
3063      converter_unitsOnline_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3064   
3065  * // ### Converter Activity Lower Limit
3066  * // Lower limit on the activity.
3067  * // {Eq_converter_activityLowerLimit}
3068  Eq_converter_activityLowerLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3069      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3070          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower") > 0
3071          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3072              <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3073          and not converter_hasMinLoad(converter_techs, vintage))
3074      ..
3075      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3076          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3077      )
3078      =g=
3079      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3082      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3085   
3086  * // ### Converter Activity Upper Limit
3087  * // Upper limit on the activity.
3088  * // {Eq_converter_activityUpperLimit}
3089  Eq_converter_activityUpperLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3090      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3091          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper") >= 0
3092          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3093               <> converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3094      ..
3095      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3096          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3097      )
3098      =l=
3099      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3102      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3105   
3106  Eq_converter_activityFixedLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3107      $(converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3108          and converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower")
3109               = converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3110      ..
3111      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3112          converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3113      )
3114      =e=
3115      converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3118      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3121   
3122  * // ### Converter Positive Ramping
3123  * // Positive ramping of unit activity.
3124  * // {Eq_converter_rampPos}
3125  Eq_converter_rampPos(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3126    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3127        and converter_useRampPos(nodesModelSel,yearsSel,converter_techs,vintage))
3128      ..
3129      converter_rampPos(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3130      =g=
3131      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3132              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3133              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3134   
3135  * // ### Converter Negative Ramping
3136  * // Negative ramping of unit activity.
3137  * // {Eq_converter_rampNeg}
3138  Eq_converter_rampNeg(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3139    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3140        and converter_useRampNeg(nodesModelSel,yearsSel,converter_techs,vintage))
3141      ..
3142      converter_rampNeg(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3143      =g=
3144      - sum(activity$converter_usedAct(converter_techs,vintage,activity),
3145              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3146              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3147   
3148  * // ### Converter Ramping Limit
3149  * // Restrict ramping up of unit activity.
3150  * // {Eq_converter_rampLimit}
3151  Eq_converter_rampLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3152    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3153          and converter_techParam(converter_techs,vintage,"activityRampLimit") > 0)
3154      ..
3155      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3156              converter_activity(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3157              - converter_activity(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage,activity))
3158    =l=
3159    converter_techParam(converter_techs,vintage,"activityRampLimit")
3162      * converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage);
3165   
3168   
3169  * // ### Converter Units Online
3170  * // Set converter units online to total converter units for non-MIP case.
3171  * // {Eq_converter_unitsOnline}
3172  Eq_converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3173      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3174          and converter_techParam(converter_techs,vintage,"mipDispatch") = 0 )
3175    ..
3176    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3177    =e=
3178    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3179      ;
3180   
3181  * // ### Converter MIP Units Shutting Down
3182  * // Allow shutting down units.
3183  * // {Eq_converter_unitsOnlineUC}
3184  Eq_converter_unitsOnlineUC(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3185      $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3186          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3187    ..
3188    converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3189    =l=
3190    converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3191      ;
3194   
3195  * // ### Converter Activity Startups
3196  * // Variable counting the number of unit startups.
3197  * // {Eq_converter_activityStartups}
3198  Eq_converter_activityStartups(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3199    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3200          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1 )
3201      ..
3202      converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3203      =g=
3204          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3205      - converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage);
3206   
3207  * // ### Converter Activity Shutdowns
3208  * // Variable tracking the number of unit shutdowns.
3209  * // {Eq_converter_activityShutdowns}
3210  Eq_converter_activityShutdowns(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3211    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3212          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3213          and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3214      ..
3215      converter_unitShutdowns(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage)
3216      =g=
3217          converter_unitsOnline(timeModelToCalc--1,nodesModelSel,yearsSel,converter_techs,vintage)
3218      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3219   
3220  * // ### Converter Activity Startup Limit
3221  * // Limit the number of startup cycles a unit can perform.
3222  * // {Eq_converter_limitStartups}
3223  Eq_converter_limitStartups(nodesModelSel,yearsSel,converter_techs,vintage)
3224    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3225          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3226      and converter_techParam(converter_techs,vintage,"startupLimit") > 0)
3227      ..
3228      sum(timeModelToCalc, converter_unitStartups(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage))
3229    =l=
3230    converter_techParam(converter_techs,vintage,"startupLimit")
3231    * converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage);
3232   
3233  alias(timeModelToCalc,ttc);
3234   
3235  * // ### Converter Units Minimum Uptime
3236  * // Require recently started units to remain online for their respective minimum uptime.
3237  * // {Eq_converter_minUptime}
3238  Eq_converter_minUptime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3239    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3240          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3241      and converter_techParam(converter_techs,vintage,"minUptime") > 0)
3242      ..
3243      sum(ttc$[uptimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minUptime")],
3244          converter_unitStartups(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minUptime")],
3245              nodesModelSel,yearsSel,converter_techs,vintage))
3246          =l=
3247          converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3248   
3249  * // ### Converter Units Minimum Downtime
3250  * // Require recently shut down units to remain offline for their respective minimum downtime.
3251  * // {Eq_converter_minDowntime}
3252  Eq_converter_minDowntime(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,converter_techs,vintage)
3253    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3254          and converter_techParam(converter_techs,vintage,"mipDispatch") = 1
3255      and converter_techParam(converter_techs,vintage,"minDowntime") > 0)
3256      ..
3257      sum(ttc$[downtimeSearchRange(ttc) and ord(ttc)<=converter_techParam(converter_techs,vintage,"minDowntime")],
3258          converter_unitShutdowns(ttc+[ord(timeModelToCalc)-converter_techParam(converter_techs,vintage,"minDowntime")],
3259              nodesModelSel,yearsSel,converter_techs,vintage))
3260          =l=
3261          converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
3262      - converter_unitsOnline(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage);
3263   
3264  * This equation is meant to cause the units to activate particular mode counters to gain access to the corresponding activities.
3265  * Activities are allowed to be used on units with stricter activity requirements but not the other way around.
3266  alias(activity, act);
3267   
3268  * // ### Converter MIP Units Activity Upper Limit Minimum Required Load
3269  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3270  * // {Eq_converter_activityUpperLimitDetailedPartLoadMinReq}
3271  Eq_converter_activityUpperLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3272    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3273          and converter_hasMinLoad(converter_techs, vintage)
3274          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3275      ..
3276      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3277                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3278               and converter_usedAct(converter_techs,vintage,act)),
3279      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3280    =l=
3281    converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper")
3282      * sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3283                  >= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3284                 and converter_usedAct(converter_techs,vintage,act)),
3285      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3286   
3287  * // ### Converter MIP Units Activity Upper Limit Maximum Required Load
3288  * // Limit activity coefficients of activities with a given load requirement or stricter to the number of units in such modes.
3289  * // {Eq_converter_activityUpperLimitDetailedPartLoadMaxReq}
3290  Eq_converter_activityUpperLimitDetailedPartLoadMaxReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3291    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3292          and converter_hasMaxLoad(converter_techs,vintage)
3293          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3294      ..
3295      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3296                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3297               and converter_usedAct(converter_techs,vintage,act)),
3298      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3299    =l=
3300      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"maxLoad")
3301                  <= converter_activityRequirements(converter_techs,vintage,activity,"maxLoad")
3302               and converter_usedAct(converter_techs,vintage,act)),
3303      min(converter_activityRequirements(converter_techs,vintage,act,"maxLoad"),
3304            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3305            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3306   
3307  * This equation is meant to enforce the lower limit requirements of activities in use.
3308  * Loads produced by activities with less strict requirements can contribute to the minimum load requirement of strict activities but not the other way around,
3309  * because these activities can only run on units in the respectively strict activation state.
3310   
3311  * // ### Converter MIP Units Activity Lower Limit Minimum Required Load
3312  * // Enforce sufficient activity coefficients of activities to justify all active modes.
3313  * // {Eq_converter_activityLowerLimitDetailedPartLoadMinReq}
3314  Eq_converter_activityLowerLimitDetailedPartLoadMinReq(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3315    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3316          and converter_hasMinLoad(converter_techs, vintage)
3317          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3318      ..
3319      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3320                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3321               and converter_usedAct(converter_techs,vintage,act)),
3322      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act))
3323    =g=
3324      sum(act$(converter_activityRequirements(converter_techs,vintage,act,"minLoad")
3325                  <= converter_activityRequirements(converter_techs,vintage,activity,"minLoad")
3326               and converter_usedAct(converter_techs,vintage,act)),
3327      max(converter_activityRequirements(converter_techs,vintage,act,"minLoad"),
3328            converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3329            * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,act));
3330   
3331   
3332  * Simple one-activity-per-unit partial load equations
3333  * // ### Converter MIP Units Activity Upper Limit Partial Load Balance
3334  * // Enforce MIP units partial load upper limit.
3335  * // {Eq_converter_activityUpperLimitPartLoad}
3336  Eq_converter_activityUpperLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3337    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3338          and (converter_hasMinLoad(converter_techs, vintage)
3339                or converter_hasMaxLoad(converter_techs, vintage)
3340                or converter_hasConstantFluxInActivity(converter_techs, vintage))
3341          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3342      ..
3343      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3344    =l=
3345    min(converter_activityRequirements(converter_techs,vintage,activity,"maxLoad"),
3346          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"upper"))
3347          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3348   
3349  * // ### Converter MIP Units Activity Lower Limit Partial Load Balance
3350  * // Enforce MIP units partial load lower limit.
3351  * // {Eq_converter_activityLowerLimitPartLoad}
3352  Eq_converter_activityLowerLimitPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3353    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3354          and (converter_hasMinLoad(converter_techs, vintage)
3355                or converter_hasMaxLoad(converter_techs, vintage))
3356          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3357      ..
3358      converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3359    =g=
3360    max(converter_activityRequirements(converter_techs,vintage,activity,"minLoad"),
3361          converter_activityProfile(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,"lower"))
3362          * converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3363   
3364  * // ### Converter MIP Units Idle Online Units
3365  * // Counts idle online units at every time step
3366  * // {Eq_converter_noOnlineIdle}
3367  Eq_converter_noOnlineIdle(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3368    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3369          and (converter_hasMinLoad(converter_techs, vintage)
3370              or converter_hasMaxLoad(converter_techs, vintage)
3371              or converter_hasConstantFluxInActivity(converter_techs,vintage))
3372          and not converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3373      ..
3374      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3375      =e=
3376      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3377            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3378   
3379  * // ### Converter MIP Units Idle Online Units Partial load
3380  * // Counts idle online units at every time step
3381  * // {Eq_converter_noOnlineIdleDetailedPartLoad}
3382  Eq_converter_noOnlineIdleDetailedPartLoad(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3383    $( converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage)
3384          and (converter_hasMinLoad(converter_techs, vintage)
3385                  or converter_hasMaxLoad(converter_techs, vintage))
3386          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3387      ..
3388      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3389      =l=
3390      sum(activity$converter_usedAct(converter_techs,vintage,activity),
3391            converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity));
3392   
3393  * // ### Converter MIP activity model limit
3394  * // Converter activity model limit
3395  * // {Eq_converter_activityModeLimit}
3396  Eq_converter_activityModeLimit(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
3397    $( converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity)
3398          and (converter_hasMinLoad(converter_techs, vintage)
3399                or converter_hasMaxLoad(converter_techs, vintage))
3400          and converter_techParam(converter_techs,vintage,"mipDetailedPartialLoad"))
3401      ..
3402      converter_unitsOnline(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
3403      =g=
3404      converter_unitsUsingActivity_MIP(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity);
3405   
3406  * ==== model definition ====
3407   
3408  Model M_converter
3409  /
3410    Eq_converter_unitsBalance
3411    Eq_converter_unitsBalanceFreeDecom
3412    Eq_converter_unitsFreeDecom
3413    Eq_converter_unitsUpperLimit
3414    Eq_converter_unitsLowerLimit
3415    Eq_converter_unitsFixedLimit
3416    Eq_converter_unitsTotalMIP
3417    Eq_converter_unitsOnlineMIP
3418    Eq_converter_activityUpperLimit
3419    Eq_converter_activityLowerLimit
3420    Eq_converter_activityFixedLimit
3421    Eq_converter_rampPos
3422    Eq_converter_rampNeg
3423    Eq_converter_rampLimit
3426    Eq_converter_unitsOnline
3427    Eq_converter_unitsOnlineUC
3430    Eq_converter_activityStartups
3431    Eq_converter_activityShutdowns
3432    Eq_converter_limitStartups
3433    Eq_converter_minUptime
3434    Eq_converter_minDowntime
3435    Eq_converter_activityUpperLimitDetailedPartLoadMinReq
3436    Eq_converter_activityUpperLimitDetailedPartLoadMaxReq
3437    Eq_converter_activityLowerLimitDetailedPartLoadMinReq
3438    Eq_converter_activityUpperLimitPartLoad
3439    Eq_converter_activityLowerLimitPartLoad
3440    Eq_converter_noOnlineIdle
3441    Eq_converter_noOnlineIdleDetailedPartLoad
3442    Eq_converter_activityModeLimit
3443  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\storage.gms
3445  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
3446  * SPDX-License-Identifier: BSD-3-Clause
3447   
3448  * // # core_storage
3449  * // The equations in this file describe the storages in the model.
3450   
3451  * // ## Variables
3452  * // {special_table_storage_variables}
3706   
3707   
3708  * === SoC mappings ===
3709  set storage_usedTechSoCState(storage_techs,vintage,soc_statesIn);
3710  storage_usedTechSoCState(storage_techs,vintage,soc_states(soc_statesIn))
3711      $(storage_SoCParam(storage_techs,vintage,soc_states,"eRate") > 0
3712        and storage_SoCParam(storage_techs,vintage,soc_states,"cRate") > 0)
3713      = yes;
3714   
3715  set storage_validSoCRange(storage_techs,vintage);
3716  storage_validSoCRange(storage_techs,vintage)
3717      = smax(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 1
3718        and smin(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states), storage_SoCParam(storage_techs,vintage,soc_states,"SoC")) = 0;
3719   
3720  * === Translate SoC parameters to ordered SoC-set ===
3721  * set ordered_socs / soc1*soc20 /;
3722  * alias(soc_states, soc_states_c);
3723  * parameter storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam);
3724  * storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,pc_storage_SoCParam)
3725  *     $storage_validSoCRange(storage_techs,vintage)
3726  *     = sum(soc_states$(ord(ordered_socs) = sum(soc_states_c$(storage_SoCParam(storage_techs,vintage,soc_states_c,"SoC") <= storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
3727  *                                                            and storage_usedTechSoCState(storage_techs,vintage,soc_states_c)), 1)
3728  *                       and storage_usedTechSoCState(storage_techs,vintage,soc_states)),
3729  *           storage_SoCParam(storage_techs,vintage,soc_states,pc_storage_SoCParam));
3730  *
3731  * set storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs);
3732  * storage_usedTechSoCStateOrdered(storage_techs,vintage,ordered_socs)
3733  *     $(storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"eRate") > 0
3734  *       and storage_SoCParam_ordered(storage_techs,vintage,ordered_socs,"cRate") > 0)
3735  *     = yes;
3736   
3737  parameter storage_bigM(storage_techs,vintage);
3738  storage_bigM(storage_techs,vintage) = smax((nodesModel,years), storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
3739  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = INF) = 10000;
3740  storage_bigM(storage_techs,vintage)$(storage_bigM(storage_techs,vintage) = 0) = 10000;
3741   
3742  * === calculate the number of years represented by single year to calc ===
3743  alias(yearsToCalc, yearsToCalc_a)
3744  parameter representedYears(years);
3745  representedYears(years) = 0.5 *(smin(yearsToCalc$(yearsToCalc.val > years.val or yearsToCalc.val = smax(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val)
3746                                  - smax(yearsToCalc$(yearsToCalc.val < years.val or yearsToCalc.val = smin(yearsToCalc_a, yearsToCalc_a.val)), yearsToCalc.val));
3747   
3748  * ==== calculation of mappings ====
3749   
3750  * Technologies with a lifeTime > 0 are available
3751  set storage_availTech(nodesModel,years,storage_techs,vintage);
3752  storage_availTech(nodesModel,years,storage_techs,vintage)
3753      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
3754          and storage_techParam(storage_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
3755   
3756  * Technologies to optimize become unavailable if they have an unitsUpperLimit of 0
3757  storage_availTech(nodesModel,years,storage_techs,vintage)
3758      $(yearsToCalc(years) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit") = 0 ) = no;
3759   
3760  * Technologies already built become unavailable if they have an unitsBuild of 0
3761  storage_availTech(nodesModel,years,storage_techs,vintage)
3762      $( ( not yearsToCalc(years)) and storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild") = 0 ) = no;
3763   
3764  * Used technologies are available technologies over their technical lifeTime
3765  set storage_usedTech(nodesModel,years,storage_techs,vintage);
3766  storage_usedTech(nodesModel,years,storage_techs,vintage)
3767      $(vintage.val <= years.val
3768          and years.val < smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage),
3769                                years_a.val + storage_techParam(storage_techs,vintage,"lifeTime"))
3770          ) = yes;
3771   
3772  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
3773  set storage_decomTech(nodesModel,years,storage_techs,vintage);
3774  storage_decomTech(nodesModel,years,storage_techs,vintage)
3775    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
3776                    and not storage_techParam(storage_techs,vintage,"freeDecom")), 1)
3777      and sum(yearsToCalc
3778        $(sameas(years, yearsToCalc)
3779          and yearsToCalc.val >= smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
3780          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
3781    = yes;
3782   
3783  storage_decomTech(nodesModel,years,storage_techs,vintage)
3784    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)
3785                    and storage_techParam(storage_techs,vintage,"freeDecom")), 1)
3786      and sum(yearsToCalc
3787        $(sameas(years, yearsToCalc)
3788          and yearsToCalc.val > smin(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val)
3789          and yearsToCalc.val <= smax(years_a$storage_availTech(nodesModel,years_a,storage_techs,vintage), years_a.val) + storage_techParam(storage_techs,vintage,"lifeTime")), 1))
3790    = yes;
3791   
3792  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
3793  storage_decomTech(nodesModel,years,storage_techs,vintage)
3794    $(sum(years_a$(storage_usedTech(nodesModel,years_a,storage_techs,vintage)), 1)
3795      and sum(yearsToCalc
3796        $(sameas(years, yearsToCalc)
3797          and (vintage.val + storage_techParam(storage_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
3798    = yes;
3799   
3800  * Extend the decom frame to the year after the last year of usedTech
3801  storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
3802    $(storage_usedTech(nodesModel,yearsToCalc-1,storage_techs,vintage)
3803      and storage_decomTech(nodesModel,yearsToCalc-1,storage_techs,vintage))
3804    = yes;
3805   
3806  * Mapping for used commodities
3807  set storage_usedCom(storage_techs,vintage,commodity);
3808  option storage_usedCom < storage_sizeParam;
3809   
3810  set storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity);
3811  storage_usedTechCom(nodesModel,years,storage_techs,vintage,commodity)
3812      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
3813          and storage_usedCom(storage_techs,vintage,commodity))
3814      = yes;
3815   
3816   
3817  * // ## Load units from gdx file
3819   
3820   
3821  * ==== aggregation of profiles ====
3822  * derive upper and lower profiles then aggregate
3823  set storage_level_hasProfileIn(nodesData,years,storage_techs,pc_storage_levelProfile);
3824  option storage_level_hasProfileIn < storage_levelProfileIn;
3825   
3826  set storage_level_hasProfile(nodesModel,years,storage_techs,pc_storage_levelProfile);
3827  storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
3828      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3829              storage_level_hasProfileIn(nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile));
3830   
3831  * weighted average for a real sum of units upper limits, plain average if one region has an upper limit of inf
3832  parameter storage_levelProfile(timeModel,nodesModel,years,storage_techs,vintage,pc_storage_levelProfile);
3833  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"upper")
3834      = storage_techParam(storage_techs,vintage,"levelUpperLimit");
3835  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),"lower")
3836      = storage_techParam(storage_techs,vintage,"levelLowerLimit");
3837   
3838  set storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs);
3839  storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs) = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) > 0
3840                                                   and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc), storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) < inf;
3841   
3842  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
3843      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
3844          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
3845      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3846              sum(timeData$timeMapping(timeData,timeModelToCalc),
3847                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
3848                / timeLength(timeModelToCalc)
3849              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
3850      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3851              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
3852   
3853  storage_levelProfile(timeModelToCalc,storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),pc_storage_levelProfile)
3854      $( storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile)
3855          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3856                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
3857      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3858                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
3859              sum(timeData$timeMapping(timeData,timeModelToCalc),
3860                    storage_levelProfileIn(timeData,nodesDataToCalc,yearsToCalc,storage_techs,pc_storage_levelProfile))
3861                / timeLength(timeModelToCalc))
3862      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3863                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
3864   
3865  * for fixed profiles overwrite upper and lower profile
3866  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"lower")
3867      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
3868      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
3869   
3870  storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"upper")
3871      $storage_level_hasProfile(nodesModelToCalc,yearsToCalc,storage_techs,"fixed")
3872      = storage_levelProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"fixed");
3873   
3874  * storage initial level
3875   
3876  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
3877      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
3878          and storage_finiteUnitLimit(nodesModelToCalc,yearsToCalc,storage_techs))
3879      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3880            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel")
3881              * storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"))
3882      / sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3883              storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit"));
3884   
3885  storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
3886      $( storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
3887          and sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
3888                      storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit")) = inf )
3889      = sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3890                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ),
3891            storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"initialLevel"))
3892      / sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
3893                      and storage_reservoirParamIn(nodesDataToCalc,yearsToCalc,storage_techs,"unitsUpperLimit") = inf ), 1);
3894   
3895  * ==== parameter modifications ====
3896  storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit")
3897          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
3898      = floor(storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"));
3899  storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
3900          $sum(vintage, storage_techParam(storage_techs,vintage,"mipUnits"))
3901      = ceil(storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit"));
3902   
3903   
3904  * ==== definition of variables ====
3905   
3906  * Initialise variables for unitsBuild
3907  storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
3908      $storage_availTech(nodesModel,years,storage_techs,vintage)
3909      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsBuild");
3910  storage_unitsBuild.lo(nodesModel,yearsToCalc,storage_techs,vintage)
3911      $storage_availTech(nodesModel,yearsToCalc,storage_techs,vintage)
3912      = storage_unitsBuild.l(nodesModel,yearsToCalc,storage_techs,vintage);
3913  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
3914      $storage_reservoirParam(nodesModel,years,storage_techs,"noExpansion")
3915      = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
3916   
3917  * Initialise variables for unitsDecom
3918  storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
3919      $(storage_decomTech(nodesModel,years,storage_techs,vintage)
3920        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
3921      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
3922                        and years_a.val > years_aa.val - storage_techParam(storage_techs,vintage,'lifeTime')
3923                        and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')
3924                        and storage_availTech(nodesModel,years_a,storage_techs,vintage)),
3925          storage_unitsBuild.l(nodesModel,years_a,storage_techs,vintage));
3926   
3927  storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage)
3928    $storage_decomTech(nodesModel,yearsToCalc,storage_techs,vintage)
3929    = sum(years$
3930          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
3931            and storage_availTech(nodesModel,years,storage_techs,vintage)
3932            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
3933            and years.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
3934        storage_unitsBuild.l(nodesModel,years,storage_techs,vintage))
3935      + sum(yearsToCalc_a$
3936          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
3937            and storage_availTech(nodesModel,yearsToCalc_a,storage_techs,vintage)
3938            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - storage_techParam(storage_techs,vintage,'lifeTime')
3939            and yearsToCalc_a.val <= yearsToCalc.val - storage_techParam(storage_techs,vintage,'lifeTime')),
3940        storage_unitsBuild.l(nodesModel,yearsToCalc_a,storage_techs,vintage));
3941        ;
3942   
3943  storage_unitsDecom.lo(nodesModel,yearsToCalc,storage_techs,vintage)
3944      $(storage_usedTech(nodesModel,yearsToCalc,storage_techs,vintage)
3945        and not storage_techParam(storage_techs,vintage,"freeDecom"))
3946      = storage_unitsDecom.l(nodesModel,yearsToCalc,storage_techs,vintage);
3947   
3948   
3950   
3951   
3952  * Calculate planned unit expansion
3953  parameter storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
3954  storage_unitsPlanned(nodesModel,years,storage_techs,vintage) = 0;
3955  loop(years,
3956    storage_unitsPlanned(nodesModel,years,storage_techs,vintage)
3957      =
3958      storage_unitsPlanned(nodesModel,years-1,storage_techs,vintage)
3959          $storage_usedTech(nodesModel,years-1,storage_techs,vintage)
3960      + storage_unitsBuild.l(nodesModel,years,storage_techs,vintage)
3961          $storage_availTech(nodesModel,years,storage_techs,vintage)
3962      - storage_unitsDecom.l(nodesModel,years,storage_techs,vintage)
3963          $storage_decomTech(nodesModel,years,storage_techs,vintage);
3964  );
3965   
3966  * Set initial state for planned units
3967  storage_unitsTotal.l(nodesModel,years,storage_techs,vintage)
3968    = storage_unitsPlanned(nodesModel,years,storage_techs,vintage);
3969   
3970  * // ## Load units from gdx file
3972   
3973  * Calculate if planned unit expansion is bounded by upper and lower limits
3974  set storage_unitBoundsFixed(nodesModel,years,storage_techs);
3975  storage_unitBoundsFixed(nodesModel,years,storage_techs)
3976    $(not sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
3977          storage_techParam(storage_techs,vintage,"freeDecom"))
3978    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
3979          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
3980      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit")
3981    and sum(vintage$storage_usedTech(nodesModel,years,storage_techs,vintage),
3982          storage_unitsPlanned(nodesModel,years,storage_techs,vintage))
3983      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsLowerLimit"))
3984    = yes;
3985   
3986  * Fix unitsBuild, unitsDecom, unitsTotal if levels are predetermined by upper and lower limits
3987  storage_unitsBuild.fx(nodesModel,years,storage_techs,vintage)
3988    $(storage_availTech(nodesModel,years,storage_techs,vintage)
3989      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
3990    = storage_unitsBuild.l(nodesModel,years,storage_techs,vintage);
3991  storage_unitsDecom.fx(nodesModel,years,storage_techs,vintage)
3992    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
3993      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
3994    = storage_unitsDecom.l(nodesModel,years,storage_techs,vintage);
3995  storage_unitsTotal.fx(nodesModel,years,storage_techs,vintage)
3996    $(storage_usedTech(nodesModel,years,storage_techs,vintage)
3997      and storage_unitBoundsFixed(nodesModel,years,storage_techs))
3998    = storage_unitsTotal.l(nodesModel,years,storage_techs,vintage);
3999   
4000  storage_unitsTotal_MIP.up(nodesModel,years,storage_techs,vintage)
4001      $(storage_usedTech(nodesModel,years,storage_techs,vintage)
4002        and storage_techParam(storage_techs,vintage,"mipUnits") = 1)
4003      = storage_reservoirParam(nodesModel,years,storage_techs,"unitsUpperLimit");
4004   
4005  * Add parameter for fixing capacities during myopic runs
4006  parameter storage_unitsDelta_upper(nodesModel,years,storage_techs);
4007  parameter storage_unitsDelta_lower(nodesModel,years,storage_techs);
4008  parameter storage_unitsDelta_decom(nodesModel,years,storage_techs,vintage);
4009   
4010  * ==== declaration of equations ====
4011   
4012  equations
4013    Eq_storage_unitsBalance(nodesModel,years,storage_techs,vintage
4014      ) "Ensures the units balance over the planning period."
4015    Eq_storage_unitsBalanceFreeDecom(nodesModel,years,storage_techs,vintage
4016      ) "Ensures the units balance over the planning period."
4017    Eq_storage_unitsFreeDecom(nodesModel,years,storage_techs,vintage
4018      ) "Restricts the free decommissioning of units over the planning period."
4019    Eq_storage_unitsUpperLimit(nodesModel,years,storage_techs
4020      ) "Upper bound for the total number of units."
4021    Eq_storage_unitsLowerLimit(nodesModel,years,storage_techs
4022      ) "Lower bound for the total number of units."
4023    Eq_storage_unitsTotalMIP(nodesModel,years,storage_techs,vintage
4024      ) "Fixes the total number of units to the corresponding integer variable."
4025   
4026    Eq_storage_levelUpperLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4027      ) "Upper bound for the total number of units."
4028    Eq_storage_levelUpperLimit_degradation(timeModel,nodesModel,years,storage_techs,vintage,commodity
4029      ) "Upper bound for the total number of units if the storage technology accounts for degradation."
4030    Eq_storage_levelLowerLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4031      ) "Lower bound for the total number of units."
4032    Eq_storage_losses(timeModel,nodesModel,years,storage_techs,vintage,commodity
4033      ) "Stored commodities lost due to self discharge."
4034    Eq_storage_unitsBalanceStates(nodesModel,years,storage_techs,vintage
4035      ) "Currently available units must have been built at some point in time and have some state of degradation."
4036    Eq_storage_unitsUpperLimitPerState(nodesModel,years,yearsCom,storage_techs,vintage
4037      ) "There cannot be more units from a certain year than the amount built in that year."
4038    Eq_storage_unitsStatesNoRecovery(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4039      ) "There is no recovery."
4040    Eq_storage_cRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4041      ) "Limit charging rate based on unit capacity."
4042    Eq_storage_eRateLimit(timeModel,nodesModel,years,storage_techs,vintage,commodity
4043      ) "Limit discharging rate based on unit capacity."
4044    Eq_storage_charge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4045      ) "Positive change in state of charge is influx."
4046    Eq_storage_discharge(timeModel,nodesModel,years,storage_techs,vintage,commodity
4047      ) "Negative change in state of charge is outflux."
4048   
4049    Eq_storage_levelStateSum(timeModel,nodesModel,years,storage_techs,vintage,commodity
4050      ) "Sum of degradation class storage levels is the global level."
4051    Eq_storage_levelUpperLimitPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4052      ) "Upper bound for units of a certain state."
4053    Eq_storage_chargingPerAge(timeModel,nodesModel,years,yearsCom,storage_techs,vintage,commodity
4054      ) "Positive change in state of charge is influx for each degradation class."
4055    Eq_storage_chargeBasedDegradationDistribution(nodesModel,years,yearsCom,storage_techs,vintage,commodity
4056      ) "Determine degradation states of storage units."
4057    Eq_storage_unitsDecomStateSum(nodesModel,years,storage_techs,vintage
4058      ) "All decomminsioned units must have a degradation state."
4059    Eq_storage_unitsDegradation(nodesModel,years,yearsCom,storage_techs,vintage,degradation_states
4060      ) "Only allow one range of degradation states per year and age group."
4061    Eq_storage_unitsDegradation_onlyOneRange(nodesModel,years,yearsCom,storage_techs,vintage
4062      ) "Limit usable degradation states to one range, i.e., two neighboring states."
4063   
4064    Eq_storage_unitsSoC_sum(timeModel,nodesModel,years,storage_techs,vintage
4065      ) "Every unit has a state of charge."
4066    Eq_storage_levelSoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4067      ) "Every unit has a state of charge."
4068    Eq_storage_unitsSoC(timeModel,nodesModel,years,storage_techs,vintage,soc_statesIn
4069      ) "Number of units in particular SoC."
4070    Eq_storage_unitsSoC_onlyOneRange(timeModel,nodesModel,years,storage_techs,vintage
4071      ) "Limit usable SoC states to one range, i.e., two neighboring states."
4072   
4073    Eq_storage_cRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4074      ) "Limit charging rate based on unit capacity."
4075    Eq_storage_eRateLimit_SoC(timeModel,nodesModel,years,storage_techs,vintage,commodity
4076      ) "Limit discharging rate based on unit capacity."
4077    ;
4078   
4079  * ==== equation definition ====
4080  * // ## Equations
4081  * // ### Storage Units Balance
4082  * // Ensures that the total units are consistent with the built and decommissioned units.
4083  * // {Eq_storage_unitsBalance}
4084   
4085  * Equation using build only
4086  Eq_storage_unitsBalance(nodesModelSel,yearsSel,storage_techs,vintage)
4087      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4088            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4089          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4090          and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4091      ..
4092      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4093      =e=
4094      sum ((years_a)
4095                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
4096                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4097                          and years_a.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4098                          and years_a.val <= yearsSel.val ),
4099              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage))
4100   
4101      + sum ((yearsToCalc)
4102                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4103                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4104                          and yearsToCalc.val + storage_techParam(storage_techs,vintage,'LifeTime') > yearsSel.val
4105                          and yearsToCalc.val <= yearsSel.val ),
4106              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4107   
4108  * Equation using build and decom
4109  Eq_storage_unitsBalanceFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4110      $((storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4111            or sum(years$sameas(years,yearsSel), storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4112          and not storage_unitBoundsFixed(nodesModelSel,yearsSel,storage_techs)
4113          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4114      ..
4115      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4116      =e=
4117          sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
4118        sum(years$sameas(years, yearsToCalc),
4119          storage_unitsTotal(nodesModelSel,years-1,storage_techs,vintage)
4120            $storage_usedTech(nodesModelSel,years-1,storage_techs,vintage)))
4121      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
4122        storage_unitsTotal(nodesModelSel,yearsToCalc-1,storage_techs,vintage)
4123          $storage_usedTech(nodesModelSel,yearsToCalc-1,storage_techs,vintage))
4124      + storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
4125          $storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
4126      - storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4127          $storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4128      + storage_unitsDelta_decom(nodesModelSel,yearsSel,storage_techs,vintage)
4129          ;
4130   
4131  * // ### Storage Units Free Decommission
4132  * // Restricts the free decommissioning of storage units over the planning period.
4133  * // {Eq_storage_unitsFreeDecom}
4134  Eq_storage_unitsFreeDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4135      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
4136          and storage_techParam(storage_techs,vintage,"freeDecom") = 1)
4137      ..
4138      sum(years$
4139            (storage_decomTech(nodesModelSel,years,storage_techs,vintage)
4140              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
4141          storage_unitsDecom(nodesModelSel,years,storage_techs,vintage))
4142      + sum(yearsToCalc$
4143            (storage_decomTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4144              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4145              and yearsToCalc.val <= yearsSel.val),
4146          storage_unitsDecom(nodesModelSel,yearsToCalc,storage_techs,vintage))
4147      =g=
4148      sum(years$
4149            (storage_availTech(nodesModelSel,years,storage_techs,vintage)
4150              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
4151              and years.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4152          storage_unitsBuild(nodesModelSel,years,storage_techs,vintage))
4153      + sum(yearsToCalc$
4154            (storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
4155              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
4156              and yearsToCalc.val <= yearsSel.val - storage_techParam(storage_techs,vintage,'lifeTime')),
4157          storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage));
4158   
4159  * // ### Storage Units Lower Limit
4160  * // Lower bound for the total number of storage units.
4161  * // {Eq_storage_unitsLowerLimit}
4162  Eq_storage_unitsLowerLimit(nodesModelSel,yearsSel,storage_techs)
4163      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsLowerLimit') > 0 )
4164      ..
4165      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4166          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4167      =g=
4168      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsLowerLimit");
4169   
4170  * // ### Storage Units Upper Limit
4171  * // Upper bound for the total number of storage units.
4172  * // {Eq_storage_unitsUpperLimit}
4173  Eq_storage_unitsUpperLimit(nodesModelSel,yearsSel,storage_techs)
4174      $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') >= 0
4175          and storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,'unitsUpperLimit') < +inf )
4176      ..
4177      sum(vintage$storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
4178          storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4179      =l=
4180      storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"unitsUpperLimit");
4181   
4182  * // ### Storage Units Total MIP
4183  * // Fixes the total number of storage units to the corresponding integer variable.
4184  * // {Eq_storage_unitsTotalMIP}
4185  Eq_storage_unitsTotalMIP(nodesModelSel,yearsSel,storage_techs,vintage)
4186      $( storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4187          and storage_techParam(storage_techs,vintage,"mipUnits") = 1 )
4188      ..
4189      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4190      =e=
4191      storage_unitsTotal_MIP(nodesModelSel,yearsSel,storage_techs,vintage);
4192   
4193  * // ### Storage Level Lower Limit
4194  * // Lower limit on the storage level.
4195  * // {Eq_storage_levelLowerLimit}
4196  Eq_storage_levelLowerLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4197      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4198          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower") > 0)
4199      ..
4200      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4201      =g=
4202      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"lower")
4203      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4204      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4205   
4206  * // ### Storage Level Upper Limit
4207  * // Upper limit on the storage level.
4208  * // {Eq_storage_levelUpperLimit}
4209  Eq_storage_levelUpperLimit(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4210      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4211          and not storage_hasDegradation(storage_techs,vintage)
4212          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4213      ..
4214      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4215      =l=
4216      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4217      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4218      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4219   
4220  * // ### Storage Level Upper Limit (degradation)
4221  * // Upper limit on the storage level if the storage technology accounts for degradation.
4222  * // {Eq_storage_levelUpperLimit_degradation}
4223  Eq_storage_levelUpperLimit_degradation(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4224      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4225          and storage_hasDegradation(storage_techs,vintage)
4226          and storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper") >= 0)
4227      ..
4228      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4229      =l=
4230      storage_levelProfile(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,"upper")
4231      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4232      * sum((degradation_states,yearsCom)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4233              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4234                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4235                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4236   
4237  * // ### Storage Unit States Sum (degradation)
4238  * // The number of units in all degradation state must match the total unit number.
4239  * // {Eq_storage_unitsBalanceStates}
4240  Eq_storage_unitsBalanceStates(nodesModelSel,yearsSel,storage_techs,vintage)
4241      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4242        and storage_hasDegradation(storage_techs,vintage))
4243      ..
4244      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4245      =e=
4246      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4247            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4248   
4249  * // ### Storage Unit States Upper Limit(degradation)
4250  * // The states of all commissioned units in one year (unitsBuilt) must either still be tracked or have been decommissioned.
4251  * // {Eq_storage_unitsUpperLimitPerState}
4252  Eq_storage_unitsUpperLimitPerState(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4253      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4254          and storage_hasDegradation(storage_techs,vintage))
4255      ..
4256      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4257            storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4258            + sum(years$(years.val <= yearsSel.val),
4259                  storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,degradation_states)))
4260      =e=
4261      storage_unitsBuild(nodesModelSel,yearsCom,storage_techs,vintage)$(yearsCom.val <= yearsSel.val);
4262   
4263  * // ### Storage Unit States Progression (degradation)
4264  * // Unit recovery by reassigning the storage cycles to other units is disabled. Therefore, the number of units in a particular degradation state can only increase if the number in a less degraded state is decreased by at least the same amount.
4265  * // {Eq_storage_unitsStatesNoRecovery}
4266  alias(degradation_states, dc_states);
4267  Eq_storage_unitsStatesNoRecovery(nodesModelSel,yearsSel(yearsToCalc),yearsCom,storage_techs,vintage,degradation_states)
4268      $(storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage)
4269        and yearsToCalc.val > yearsCom.val
4270        and storage_usedDegradation(storage_techs,vintage,degradation_states))
4271      ..
4272      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4273                and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4274              storage_unitsStateTracker(nodesModelSel,yearsToCalc,yearsCom,storage_techs,vintage,dc_states)
4275              + sum(years$(years.val <= yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)))
4276      =l=
4277      sum(dc_states$(storage_usedDegradation(storage_techs,vintage,dc_states)
4278                      and storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles") <= storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")),
4279              storage_unitsStateTracker(nodesModelSel,yearsToCalc-1,yearsCom,storage_techs,vintage,dc_states)
4280              + sum(years$(years.val < yearsToCalc.val), storage_unitsStateTrackerDecom(nodesModelSel,years,yearsCom,storage_techs,vintage,dc_states)));
4281   
4282  * // ### Storage Losses
4283  * // Accumulation of storage losses.
4284  * // {Eq_storage_losses}
4285  Eq_storage_losses(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4286      $storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4287      ..
4288      storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4289      =e=
4290      -(storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4291          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4292        + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4293            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4294        + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4295            * storage_sizeParam(storage_techs,vintage,commodity,"size")
4296            * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4297            $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4298                and ord(timeModelToCalc)=1))
4299      * storage_sizeParam(storage_techs,vintage,commodity,"selfdischarge")
4300      + storage_sizeParam(storage_techs,vintage,commodity,"selfdischargeAbs")
4301      + (storage_techParam(storage_techs,vintage,"chargingLoss")
4302          /(1 - storage_techParam(storage_techs,vintage,"chargingLoss")))
4303        * storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4304          $(storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4305      + storage_techParam(storage_techs,vintage,"dischargingLoss")
4306        * storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4307          $(storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4308      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4309        * sum(soc_states$(storage_usedTechSoCState(storage_techs,vintage,soc_states)
4310                          and storage_validSoCRange(storage_techs,vintage)),
4311              storage_unitsSoC(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4312              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4313              * storage_SoCParam(storage_techs,vintage,soc_states,"selfdischarge"));
4314   
4315  * // ### C-Rate Limit
4316  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity.
4317  * // {Eq_storage_cRateLimit}
4318  Eq_storage_cRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4319      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4320        and storage_techParam(storage_techs,vintage,"maxCRate") > 0)
4321      ..
4322      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4323      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4324          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4325      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4326          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4327      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4328          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4329          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4330          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4331              and ord(timeModelToCalc)=1)
4332      =l=
4333      storage_techParam(storage_techs,vintage,"maxCRate")
4334      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4335      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4336   
4337  * // ### E-Rate Limit
4338  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity.
4339  * // {Eq_storage_eRateLimit}
4340  Eq_storage_eRateLimit(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4341      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4342        and storage_techParam(storage_techs,vintage,"maxERate") > 0)
4343      ..
4344      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4345      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4346          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4347      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4348          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4349      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4350          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4351          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4352          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4353              and ord(timeModelToCalc)=1)
4354      =g=
4355      - storage_techParam(storage_techs,vintage,"maxERate")
4356      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4357      * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage);
4358   
4359  * // ### Storage Charging
4360  * // Increases in storage levels are accounted as charging amounts.
4361  * // {Eq_storage_charge}
4362  Eq_storage_charge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4363      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4364        and storage_techParam(storage_techs,vintage,"chargingLoss") > 0)
4365      ..
4366      storage_charge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4367      =g=
4368      storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4369      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4370          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4371      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4372          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4373      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4374          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4375          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4376          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4377              and ord(timeModelToCalc)=1);
4378   
4379  * // ### Storage Discharging
4380  * // Decreases in storage levels are accounted as discharging amounts.
4381  * // {Eq_storage_discharge}
4382  Eq_storage_discharge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4383      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4384        and storage_techParam(storage_techs,vintage,"dischargingLoss") > 0)
4385      ..
4386      storage_discharge(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4387      =g=
4388      storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4389          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4390      + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4391          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4392      + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4393          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4394          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4395          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4396              and ord(timeModelToCalc)=1)
4397      - storage_level(timeModelToCalc,nodesModelSel,yearsSel,storage_techs,vintage,commodity);
4398   
4399  * // ### Storage Level Sum (degradation)
4400  * // The storage level is accounted individually by commissioning year in the case of degradation in order to prohibit the model to assign pre-existing storage cycles to newly built storage reservoirs and thereby avoiding degradation. All those storage levels represent the total storage level.
4401  * // {Eq_storage_levelStateSum}
4402  Eq_storage_levelStateSum(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4403      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4404        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4405      ..
4406      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4407      =e=
4408      sum(yearsCom, storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity));
4409   
4410  * // ### Storage Level Upper Limit per Age Group (degradation)
4411  * // Upper limit on the storage level per commissioning year if the storage technology accounts for degradation.
4412  * // {Eq_storage_levelUpperLimitPerAge}
4413  Eq_storage_levelUpperLimitPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4414      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4415        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4416      ..
4417      storage_levelPerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4418      =l=
4419      storage_techParam(storage_techs,vintage,"levelUpperLimit")
4420      * storage_sizeParam(storage_techs,vintage,commodity,"size")
4421      * sum(degradation_states,
4422              (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
4423                - (yearsSel.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
4424                * storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4425   
4426  * // ### Storage Cycle Distribution to Degradation States per Commissioning Year (degradation)
4427  * // The charging amounts are converted to equivalent full cycles which then must be represented by an adequate distribution of degradation states.
4428  * // {Eq_storage_chargeBasedDegradationDistribution}
4429  alias(years, prev_years);
4430  Eq_storage_chargeBasedDegradationDistribution(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4431      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4432        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4433      ..
4434      sum(prev_years$(prev_years.val <= yearsSel.val), representedYears(prev_years)
4435          * sum(timeModel, storage_chargePerAge(timeModel,nodesModelSel,prev_years,yearsCom,storage_techs,vintage,commodity)))
4436      =l=
4437      storage_sizeParam(storage_techs,vintage,commodity,"size")
4438      * sum(dc_states$storage_usedDegradation(storage_techs,vintage,dc_states),
4439          storage_degradationParam(storage_techs,vintage,dc_states,"maxFullCycles")
4440          * (storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,dc_states)
4441             + sum(prev_years$(prev_years.val <= yearsSel.val), storage_unitsStateTrackerDecom(nodesModelSel,prev_years,yearsCom,storage_techs,vintage,dc_states))));
4442   
4443  * // ### Storage Charging per Commissioning Year (degradation)
4444  * // Increases in storage levels are accounted as charging amounts.
4445  * // {Eq_storage_chargingPerAge}
4446  Eq_storage_chargingPerAge(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4447      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4448        and storage_techParam(storage_techs,vintage,"usageDegradation"))
4449      ..
4450      storage_chargePerAge(timeModelSel,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4451      =g=
4452      storage_levelPerAge(timeModelToCalc,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity)
4453      - storage_levelPerAge(timeModelToCalc--1,nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,commodity);
4454   
4455  * // ### Storage Unit Decommissioning States Sum (degradation)
4456  * // The number of decommissioned units in all degradation state must match the total decommissioning unit number.
4457  * // {Eq_storage_unitsDecomStateSum}
4458  Eq_storage_unitsDecomStateSum(nodesModelSel,yearsSel,storage_techs,vintage)
4459      $(storage_techParam(storage_techs,vintage,"usageDegradation"))
4460      ..
4461      storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
4462      =e=
4463      sum((yearsCom,degradation_states)$storage_usedDegradation(storage_techs,vintage,degradation_states),
4464          storage_unitsStateTrackerDecom(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states));
4465   
4466  * // ### Storage Unit Sequential Degradation (degradation)
4467  * // Only active degradation ranges, i.e., two neighboring degradation states, can be used.
4468  * // {Eq_storage_unitsDegradation}
4469  alias(degradation_states, degradation_states_a, degradation_states_b);
4470  Eq_storage_unitsDegradation(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states)
4471      $(storage_techParam(storage_techs,vintage,"usageDegradation")
4472        and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4473      ..
4474      sum(degradation_states_a$((storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles") = storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4475                        or storage_degradationParam(storage_techs,vintage,degradation_states_a,"maxFullCycles")
4476                                         = smax(degradation_states_b$(storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles") < storage_degradationParam(storage_techs,vintage,degradation_states,"maxFullCycles")
4477                                                              and storage_usedDegradation(storage_techs,vintage,degradation_states_b)),
4478                                                              storage_degradationParam(storage_techs,vintage,degradation_states_b,"maxFullCycles")))
4479                        and storage_usedDegradation(storage_techs,vintage,degradation_states_a)),
4480          storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states_a))
4481      * storage_bigM(storage_techs,vintage)
4482      =g=
4483      storage_unitsStateTracker(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states);
4484   
4485  * // ### Storage Unit Sequential Degradation Range (degradation)
4486  * // Only one degradation range can be active.
4487  * // {Eq_storage_unitsDegradation_onlyOneRange}
4488  Eq_storage_unitsDegradation_onlyOneRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage)
4489      $(storage_techParam(storage_techs,vintage,"usageDegradation") and storage_techParam(storage_techs,vintage,"sequentialDegradationStates"))
4490      ..
4491      sum(degradation_states$storage_usedDegradation(storage_techs,vintage,degradation_states),
4492            storage_unitsStateTracker_activeRange(nodesModelSel,yearsSel,yearsCom,storage_techs,vintage,degradation_states))
4493      =e= 1;
4494   
4495  * // ### Storage Unit Sequential State of Charge (SoC)
4496  * // Only active state of charge ranges, i.e., two neighboring states of charge, can be used.
4497  * // {Eq_storage_unitsSoC}
4498  alias(soc_states, soc_states_a, soc_states_b);
4499  Eq_storage_unitsSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4500      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4501      ..
4502      sum(soc_states_a$((storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC") = storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4503                        or storage_SoCParam(storage_techs,vintage,soc_states_a,"SoC")
4504                                         = smax(soc_states_b$(storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC") < storage_SoCParam(storage_techs,vintage,soc_states,"SoC")
4505                                                              and storage_usedTechSoCState(storage_techs,vintage,soc_states_b)),
4506                                                              storage_SoCParam(storage_techs,vintage,soc_states_b,"SoC")))
4507                        and storage_usedTechSoCState(storage_techs,vintage,soc_states_a)),
4508          storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states_a))
4509      * storage_bigM(storage_techs,vintage)
4510      =g=
4511      storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states);
4512   
4513  * // ### Storage Unit Sequential State of Charge Range (SoC)
4514  * // Only one state of charge range can be active.
4515  * // {Eq_storage_unitsSoC_onlyOneRange}
4516  Eq_storage_unitsSoC_onlyOneRange(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4517      $(storage_validSoCRange(storage_techs,vintage) and storage_techParam(storage_techs,vintage,"sequentialSoC"))
4518      ..
4519      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4520            storage_unitsSoC_activeRange(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)) =e= 1;
4521   
4522  * // ### Storage Unit State of Charge Sum (SoC)
4523  * // Each storage unit must have one state of charge.
4524  * // {Eq_storage_unitsSoC_sum}
4525  Eq_storage_unitsSoC_sum(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage)
4526      $storage_validSoCRange(storage_techs,vintage)
4527      ..
4528      storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
4529      =e=
4530      sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4531            storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4532   
4533  * // ### Storage Level State of Charge Sum (SoC)
4534  * // The total storage level must be represented by units in their specific states of charge.
4535  * // {Eq_storage_levelSoC}
4536  Eq_storage_levelSoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4537      $(storage_validSoCRange(storage_techs,vintage) and storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity))
4538      ..
4539      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4540      =e=
4541      storage_sizeParam(storage_techs,vintage,commodity,"size")
4542      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4543              storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states)
4544              * storage_SoCParam(storage_techs,vintage,soc_states,"SoC"));
4545   
4546  * // ### C-Rate Limit (SoC)
4547  * // The increase in storage level per time step, i.e., the charging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4548  * // {Eq_storage_cRateLimit_SoC}
4549  Eq_storage_cRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4550      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4551        and storage_validSoCRange(storage_techs,vintage)
4552        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"cRate")) < inf)
4553      ..
4554      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4555      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4556          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4557      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4558          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4559      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4560          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4561          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4562          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4563              and ord(timeModelToCalc)=1)
4564      =l=
4565      storage_sizeParam(storage_techs,vintage,commodity,"size")
4566      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4567                      storage_SoCParam(storage_techs,vintage,soc_states,"cRate")
4568                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4569   
4570  * // ### E-Rate Limit (SoC)
4571  * // The decrease in storage level per time step, i.e., the discharging rate, is limited relative to the storage capacity. The coefficients can vary between states of charge.
4572  * // {Eq_storage_cRateLimit_SoC}
4573  Eq_storage_eRateLimit_SoC(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4574      $(storage_usedTechCom(nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4575        and storage_validSoCRange(storage_techs,vintage)
4576        and sum(soc_states, storage_SoCParam(storage_techs,vintage,soc_states,"eRate")) < inf)
4577      ..
4578      storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4579      - storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4580          $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4581      - storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
4582          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
4583      - (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
4584          * storage_sizeParam(storage_techs,vintage,commodity,"size")
4585          * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
4586          $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
4587              and ord(timeModelToCalc)=1)
4588      =g=
4589      - storage_sizeParam(storage_techs,vintage,commodity,"size")
4590      * sum(soc_states$storage_usedTechSoCState(storage_techs,vintage,soc_states),
4591                      storage_SoCParam(storage_techs,vintage,soc_states,"eRate")
4592                      * storage_unitsSoC(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,soc_states));
4593   
4594   
4595  * ==== model definition ====
4596   
4597  Model M_storage
4598  /
4599    Eq_storage_unitsBalance
4600    Eq_storage_unitsBalanceFreeDecom
4601    Eq_storage_unitsFreeDecom
4602    Eq_storage_unitsLowerLimit
4603    Eq_storage_unitsUpperLimit
4604    Eq_storage_levelUpperLimit_degradation
4605    Eq_storage_unitsTotalMIP
4606    Eq_storage_levelLowerLimit
4607    Eq_storage_levelUpperLimit
4610    Eq_storage_losses
4613    Eq_storage_unitsBalanceStates
4614    Eq_storage_unitsUpperLimitPerState
4615    Eq_storage_unitsStatesNoRecovery
4616    Eq_storage_cRateLimit
4617    Eq_storage_eRateLimit
4618    Eq_storage_charge
4619    Eq_storage_discharge
4620    Eq_storage_levelStateSum
4621    Eq_storage_levelUpperLimitPerAge
4622    Eq_storage_chargeBasedDegradationDistribution
4623    Eq_storage_chargingPerAge
4624    Eq_storage_unitsDecomStateSum
4625    Eq_storage_unitsDegradation
4626    Eq_storage_unitsDegradation_onlyOneRange
4627   
4628    Eq_storage_unitsSoC
4629    Eq_storage_unitsSoC_sum
4630    Eq_storage_unitsSoC_onlyOneRange
4631    Eq_storage_levelSoC
4632    Eq_storage_cRateLimit_SoC
4633    Eq_storage_eRateLimit_SoC
4634  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\transfer.gms
4636  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
4637  * SPDX-License-Identifier: BSD-3-Clause
4638   
4639  * // # core_transfer
4640  * // The equations in this file describe the commodity transfer in the model.
4641   
4642  * // ## Variables
4643  * // {special_table_transfer_variables}
4646   
4651   
4847   
4848  parameter transfer_linksParam(linksModel,years,transfer_techs,pc_transfer_linksParam);
4849  transfer_linksParam(linksModelToCalc,years,transfer_techs,pc_transfer_linksParam)
4850      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,years,transfer_techs,pc_transfer_linksParam));
4851   
4852   
4853  * ==== calculation of mappings ====
4854   
4855  * Technologies with a lifeTime > 0 are available
4856  set transfer_availTech(linksModel,years,transfer_techs,vintage);
4857  transfer_availTech(linksModel,years,transfer_techs,vintage)
4858      $(vintage.val = smax(vintage_a$(vintage_a.val <= years.val
4859          and transfer_techParam(transfer_techs,vintage_a,"lifeTime") > 0), vintage_a.val)) = yes;
4860   
4861  * Technologies to optimize become unavailable if they have a linksUpperLimit of 0
4862  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
4863      $(yearsToCalc(years) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksUpperLimit") = 0 ) = no;
4864   
4865  * Technologies already built become unavailable if they have a linksBuild of 0
4866  transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
4867      $( ( not yearsToCalc(years)) and transfer_linksParam(linksModelToCalc,years,transfer_techs,"linksBuild") = 0 ) = no;
4868   
4869  * Used technologies are available technologies over their technical lifeTime
4870  set transfer_usedTech(linksModel,years,transfer_techs,vintage);
4871  transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage)
4872      $(vintage.val <= years.val
4873          and years.val < smax(years_a$transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage),
4874                               years_a.val + transfer_techParam(transfer_techs,vintage,"lifeTime"))
4875          ) = yes;
4876   
4877  * Technologies have to be decommissioned in the interval of first avail + lifetime to last avail + lifetime
4878  set transfer_decomTech(linksModel,years,transfer_techs,vintage);
4879  transfer_decomTech(linksModel,years,transfer_techs,vintage)
4880    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
4881                   and not transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
4882      and sum(yearsToCalc
4883        $(sameas(years, yearsToCalc)
4884          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
4885          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
4886    = yes;
4887   
4888  transfer_decomTech(linksModel,years,transfer_techs,vintage)
4889    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)
4890                   and transfer_techParam(transfer_techs,vintage,"freeDecom")), 1)
4891      and sum(yearsToCalc
4892        $(sameas(years, yearsToCalc)
4893          and yearsToCalc.val >= smin(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val)
4894          and yearsToCalc.val <= smax(years_a$transfer_availTech(linksModel,years_a,transfer_techs,vintage), years_a.val) + transfer_techParam(transfer_techs,vintage,"lifeTime")), 1))
4895    = yes;
4896   
4897  * decommission also when the first of yearsToCalc is further away than the end of the tech's lifeTime
4898  transfer_decomTech(linksModel,years,transfer_techs,vintage)
4899    $(sum(years_a$(transfer_usedTech(linksModel,years_a,transfer_techs,vintage)), 1)
4900      and sum(yearsToCalc
4901        $(sameas(years, yearsToCalc)
4902          and (vintage.val + transfer_techParam(transfer_techs,vintage,"lifeTime")) < smin(yearsToCalc_a, yearsToCalc_a.val)), 1))
4903    = yes;
4904   
4905  * Extend the decom frame to the year after the last year of usedTech
4906  transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
4907    $(transfer_usedTech(linksModel,yearsToCalc-1,transfer_techs,vintage)
4908      and transfer_decomTech(linksModel,yearsToCalc-1,transfer_techs,vintage))
4909    = yes;
4910   
4911   
4912  * // ## Load links from gdx file
4914   
4915   
4916  set transfer_hasflowProfileIn(linksData,years,transfer_techs,pc_transfer_flowProfile);
4917  option transfer_hasflowProfileIn < transfer_flowProfileIn;
4918   
4919  * === modify transfer_flowProfileIn vector to fill with default values, in case profile is not specified ===
4920  transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
4921      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
4922      = 1;
4923   
4924  transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
4925      $(not transfer_linksParamIn(linksData,years,transfer_techs,"limitFlows"))
4926      = 1;
4927   
4928  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"along")
4929      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"along"))
4930      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit");
4931   
4932  transfer_flowProfileIn(timeData,linksData,years,transfer_techs,"against")
4933      $(not transfer_hasflowProfileIn(linksData,years,transfer_techs,"against"))
4934      = transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit");
4935   
4936  * aggregate time dimension
4937  parameter transfer_flowProfileIn_aggTime(timeModel,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile);
4938  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
4939      $transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
4940      = sum(timeData$timeMapping(timeData,timeModelToCalc),
4941            transfer_flowProfileIn(timeData,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
4942            / timeLength(timeModelToCalc));
4943  option clear = transfer_flowProfileIn;
4944   
4945  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
4946      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile) and
4947        not transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
4948      = 1;
4949   
4950  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
4951      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"along") and
4952        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
4953      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAlongLimit");
4954   
4955  transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
4956      $(not transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,"against") and
4957        transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"limitFlows"))
4958      = transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"flowAgainstLimit");
4959   
4960  set transfer_finiteLinkLimit(linksModel,years,transfer_techs);
4961  transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
4962      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) > 0
4963          and sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) < inf;
4964   
4965  set transfer_infiniteLinkLimit(linksModel,years,transfer_techs);
4966  transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
4967      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")) = inf;
4969   
4970  parameter transfer_lengthParam(linksModel,link_types,pc_transfer_lengthParam);
4971  transfer_lengthParam(linksModelToCalc,link_types,pc_transfer_lengthParam)
4972      = sum(linksData$links_aggregate(linksModelToCalc,linksData), transfer_lengthParamIn(linksData,link_types,pc_transfer_lengthParam))
4973          / sum(linksData$links_aggregate(linksModelToCalc,linksData), 1);
4974   
4975  parameter transfer_gridSegments(linksModel,transfer_techs,gridSegments,pc_transfer_gridSegments);
4976  transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,pc_transfer_gridSegments)
4977      = smax(linksData$links_aggregate(linksModelToCalc,linksData), transfer_gridSegmentsIn(linksData,transfer_techs,gridSegments,pc_transfer_gridSegments));
4978   
4979  parameter transfer_dcopf_Xtech(linksModel,years,transfer_techs,vintage,gridSegments);
4980  transfer_dcopf_Xtech(linksModelToCalc,yearsToCalc,transfer_techs,vintage,gridSegments)
4981      $(transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
4982          and transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits") > 0
4983          and sum(link_types, transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength")) > 0 )
4984      = (1 / sum(linksData
4985                  $links_aggregate(linksModelToCalc,linksData),
4986              1 / ( sum(link_types,
4987                          transfer_lengthParamIn(linksData,link_types,"length")
4988                          * transfer_reactPerLength(transfer_techs,vintage,link_types,"reactPerLength"))
4989                      / transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"circuits"))));
4990   
4991  set transfer_hasflowProfile(linksModel,years,transfer_techs,pc_transfer_flowProfile);
4992  transfer_hasflowProfile(linksModelToCalc,yearsToCalc,transfer_techs,pc_transfer_flowProfile)
4993      = sum(linksData$links_aggregate(linksModelToCalc,linksData),
4994              transfer_hasflowProfileIn(linksData,yearsToCalc,transfer_techs,pc_transfer_flowProfile));
4995   
4996  * aggregate coefficient delays per link and reduce based on time resolution
4997  parameter transfer_delay(linksModel,transfer_techs,vintage,commodity);
4999  transfer_delay(linksModel,transfer_techs,vintage,commodity)
5000    $(transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5001      or sum(link_types,
5002          transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5003    = ceil((transfer_coefficient(transfer_techs,vintage,commodity,"delay")
5004            + sum(link_types,
5005                transfer_lengthParam(linksModel,link_types,"length")
5006                * transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"delayperlength")))
5007            / 1);
5009   
5010  * ==== parameter modifications ====
5011  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit")
5012      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5013      = floor(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksLowerLimit"));
5014  transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit")
5015      $sum(vintage, transfer_techParam(transfer_techs,vintage,"mipLinks"))
5016      = ceil(transfer_linksParam(linksModelToCalc,yearsToCalc,transfer_techs,"linksUpperLimit"));
5017   
5018   
5019  parameter transfer_flowProfile(timeModel,linksModel,years,transfer_techs,vintage,pc_transfer_flowProfile);
5020   
5021  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5022      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5023      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5024                       and transfer_incidenceData_flip(linksData) = 1),
5025              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5026              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5027          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5028                          and transfer_incidenceData_flip(linksData) = -1),
5029              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5030              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5031      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5032              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5033   
5034  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5035      $transfer_finiteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5036      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5037                       and transfer_incidenceData_flip(linksData) = 1),
5038              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")
5039              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"))
5040          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5041                          and transfer_incidenceData_flip(linksData) = -1),
5042              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")
5043              * transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit")))
5044      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5045              transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit"));
5046   
5047  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"along")
5048      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5049      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5050                       and transfer_incidenceData_flip(linksData) = 1
5051                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5052              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along"))
5053          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5054                          and transfer_incidenceData_flip(linksData) = -1
5055                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5056              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against")))
5057      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5058                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5059              1);
5060   
5061  transfer_flowProfile(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"against")
5062      $transfer_infiniteLinkLimit(linksModelToCalc,yearsToCalc,transfer_techs)
5063      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5064                       and transfer_incidenceData_flip(linksData) = 1
5065                       and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5066              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"against"))
5067          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5068                          and transfer_incidenceData_flip(linksData) = -1
5069                          and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5070              transfer_flowProfileIn_aggTime(timeModelToCalc,linksData,yearsToCalc,transfer_techs,"along")))
5071      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5072                      and transfer_linksParamIn(linksData,yearsToCalc,transfer_techs,"linksUpperLimit") = inf ),
5073              1);
5074  option clear = transfer_flowProfileIn_aggTime;
5075   
5076  * Orientation of links affects the flowAlongLimit/flowAgainstLimit
5077   
5078  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5079      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5080      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5081                       and transfer_incidenceData_flip(linksData) = 1),
5082              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5083              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5084          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5085                          and transfer_incidenceData_flip(linksData) = -1),
5086              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5087              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5088      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5089              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5090   
5091  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5092      $transfer_finiteLinkLimit(linksModelToCalc,years,transfer_techs)
5093      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5094                       and transfer_incidenceData_flip(linksData) = -1),
5095              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit")
5096              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"))
5097          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5098                          and transfer_incidenceData_flip(linksData) = 1),
5099              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")
5100              * transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit")))
5101      / sum(linksData$links_aggregate(linksModelToCalc,linksData),
5102              transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit"));
5103   
5104  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAlongLimit")
5105      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5106      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5107                       and transfer_incidenceData_flip(linksData) = 1
5108                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5109              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5110          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5111                          and transfer_incidenceData_flip(linksData) = -1
5112                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5113              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5114      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5115                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5116              1);
5117   
5118  transfer_linksParam(linksModelToCalc,years,transfer_techs,"flowAgainstLimit")
5119      $transfer_infiniteLinkLimit(linksModelToCalc,years,transfer_techs)
5120      = (sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5121                       and transfer_incidenceData_flip(linksData) = -1
5122                       and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5123              transfer_linksParamIn(linksData,years,transfer_techs,"flowAlongLimit"))
5124          + sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5125                          and transfer_incidenceData_flip(linksData) = 1
5126                          and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf),
5127              transfer_linksParamIn(linksData,years,transfer_techs,"flowAgainstLimit")))
5128      / sum(linksData$(links_aggregate(linksModelToCalc,linksData)
5129                      and transfer_linksParamIn(linksData,years,transfer_techs,"linksUpperLimit") = inf ),
5130              1);
5131   
5132  * Mapping for grid segments using DC optimal power flow
5133  set gridSegments_dcopf(linksModel,transfer_techs,gridSegments);
5134  gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5135      $transfer_gridSegments(linksModelToCalc,transfer_techs,gridSegments,"useDCopf")
5138      = yes;
5141   
5142  * Ensure each grid segment uses exactly one commodity
5143  parameter checkGridSegmentCommodities(gridSegments);
5144  checkGridSegmentCommodities(gridSegments)
5145      = sum (commodity$(sum((linksModelToCalc,transfer_techs,vintage)
5146                              $( transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") > 0
5147                                  and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)) , 1) > 0), 1);
5148   
5149  parameter transfer_incidenceSegments(nodesModel,linksModel,years,gridSegments);
5150  transfer_incidenceSegments(nodesModelToCalc,linksModelToCalc,yearsToCalc,gridSegments)
5151      $(sum((transfer_techs,vintage)$(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5152                                          and gridSegments_dcopf(linksModelToCalc,transfer_techs,gridSegments)
5153                                          and transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) <> 0), 1) > 0)
5154      = transfer_incidenceModel(nodesModelToCalc,linksModelToCalc);
5155   
5156   
5160   
5161  scalar transfer_enableMIP;
5162  transfer_enableMIP = sum(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)$transfer_techParam(transfer_techs,vintage,"mipLinks"), 1 );
5163   
5164   
5165  * ==== definition of variables ====
5166   
5167  * Initialise variables for linksBuild
5168  transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5169      $transfer_availTech(linksModel,years,transfer_techs,vintage)
5170      = transfer_linksParam(linksModel,years,transfer_techs,"linksBuild");
5171  transfer_linksBuild.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5172      $transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
5173      = transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage);
5174  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5175      $transfer_linksParam(linksModel,years,transfer_techs,"noExpansion")
5176      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5177   
5178  * Initialise variables for linksDecom
5179  transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5180      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
5181        and years.val < sum(yearsToCalc$(ord(yearsToCalc) = 1), yearsToCalc.val))
5182      = sum((years_a,years_aa)$(sameas(years-1, years_aa)
5183                        and years_a.val > years_aa.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5184                        and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')
5185                        and transfer_availTech(linksModel,years_a,transfer_techs,vintage)),
5186          transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
5187   
5188  transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
5189    $transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
5190    = sum(years$
5191          (years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a) = 1), yearsToCalc_a.val)
5192            and transfer_availTech(linksModel,years,transfer_techs,vintage)
5193            and years.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5194            and years.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5195        transfer_linksBuild.l(linksModel,years,transfer_techs,vintage))
5196      + sum(yearsToCalc_a$
5197          (yearsToCalc_a.val < sum(yearsToCalc_aa$(ord(yearsToCalc_aa) > 1), yearsToCalc_a.val)
5198            and transfer_availTech(linksModel,yearsToCalc_a,transfer_techs,vintage)
5199            and yearsToCalc_a.val > sum(years_a$sameas(years_a, yearsToCalc-1), years_a.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
5200            and yearsToCalc_a.val <= yearsToCalc.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5201        transfer_linksBuild.l(linksModel,yearsToCalc_a,transfer_techs,vintage));
5202   
5203  transfer_linksDecom.lo(linksModel,yearsToCalc,transfer_techs,vintage)
5204      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5205          and not transfer_techParam(transfer_techs,vintage,"freeDecom"))
5206      = transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage);
5207   
5208   
5210   
5211   
5212  * Calculate planned transfer links expansion
5213  parameter transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5214  transfer_linksPlanned(linksModel,years,transfer_techs,vintage) = 0;
5215  loop(years,
5216    transfer_linksPlanned(linksModel,years,transfer_techs,vintage)
5217      =
5218      transfer_linksPlanned(linksModel,years-1,transfer_techs,vintage)
5219          $transfer_usedTech(linksModel,years-1,transfer_techs,vintage)
5220      + transfer_linksBuild.l(linksModel,years,transfer_techs,vintage)
5221          $transfer_availTech(linksModel,years,transfer_techs,vintage)
5222      - transfer_linksDecom.l(linksModel,years,transfer_techs,vintage)
5223          $transfer_decomTech(linksModel,years,transfer_techs,vintage);
5224  );
5225   
5226  * Set initial state for planned units
5227  transfer_linksTotal.l(linksModel,years,transfer_techs,vintage)
5228    = transfer_linksPlanned(linksModel,years,transfer_techs,vintage);
5229   
5230  * // ## Load units from gdx file
5232   
5233  * Calculate if planned links expansion is bound by upper and lower limits
5234  set transfer_linkBoundsFixed(linksModel,years,transfer_techs);
5235  transfer_linkBoundsFixed(linksModel,years,transfer_techs)
5236    $(not sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5237          transfer_techParam(transfer_techs,vintage,"freeDecom"))
5238    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5239          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5240      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit")
5241    and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage),
5242          transfer_linksPlanned(linksModel,years,transfer_techs,vintage))
5243      = transfer_linksParam(linksModel,years,transfer_techs,"linksLowerLimit"))
5244    = yes;
5245   
5246  * Fix linksBuild, linksDecom, linksTotal if levels are predetermined by upper and lower limits
5247  transfer_linksBuild.fx(linksModel,years,transfer_techs,vintage)
5248    $(transfer_availTech(linksModel,years,transfer_techs,vintage)
5249      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5250    = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
5251  transfer_linksDecom.fx(linksModel,years,transfer_techs,vintage)
5252    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5253      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5254    = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
5255  transfer_linksTotal.fx(linksModel,years,transfer_techs,vintage)
5256    $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5257      and transfer_linkBoundsFixed(linksModel,years,transfer_techs))
5258    = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
5259   
5260  transfer_linksTotal_MIP.up(linksModel,years,transfer_techs,vintage)
5261      $(transfer_usedTech(linksModel,years,transfer_techs,vintage)
5262        and transfer_techParam(transfer_techs,vintage,"miplinks") = 1)
5263      = transfer_linksParam(linksModel,years,transfer_techs,"linksUpperLimit");
5264   
5265  * Add parameter for fixing capacities during myopic runs
5266  parameter transfer_linksDelta_upper(linksModel,years,transfer_techs);
5267  parameter transfer_linksDelta_lower(linksModel,years,transfer_techs);
5268  parameter transfer_linksDelta_decom(linksModel,years,transfer_techs,vintage);
5269   
5270  * ==== declaration of equations ====
5271   
5272  equations
5273    Eq_transfer_linksBalance(linksModel,years,transfer_techs,vintage
5274      ) "Ensures the links balance over the planning period."
5275    Eq_transfer_linksBalanceFreeDecom(linksModel,years,transfer_techs,vintage
5276      ) "Ensures the links balance over the planning period."
5277    Eq_transfer_linksFreeDecom(linksModel,years,transfer_techs,vintage
5278      ) "Restricts the free decommissioning of links over the planning period."
5279    Eq_transfer_linksUpperLimit(linksModel,years,transfer_techs
5280      ) "Upper bound for the total number of links."
5281    Eq_transfer_linksLowerLimit(linksModel,years,transfer_techs
5282      ) "Lower bound for the total number of links."
5283    Eq_transfer_linksTotalMIP(linksModel,years,transfer_techs,vintage
5284      ) "Fixes the total number of links to the corresponding integer variable."
5285   
5286    Eq_transfer_flowAlongUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5287      ) "Upper bound for the flow along the transfer links."
5288    Eq_transfer_flowAgainstUpperLimit(timeModel,linksModel,years,transfer_techs,vintage
5289      ) "Upper bound for the flow against the transfer links."
5290    Eq_transfer_dcopf_angleFlows(timeModel,linksModel,years,gridSegments
5291      )
5292    Eq_transfer_dcopf_cycleFlows(timeModel,years,cycles,gridSegments
5293      )
5294    ;
5295   
5296   
5297  * ==== equation definition ====
5298  * // ## Equations
5299  * // ### Transfer Links Balance
5300  * // Ensures that the transfer between nodes is balanced.
5301  * // {Eq_transfer_linksBalance}
5302   
5303  * Equation using build only
5304  Eq_transfer_linksBalance(linksModelToCalc,yearsSel,transfer_techs,vintage)
5305      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5306            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5307          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5308          and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5309      ..
5310      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5311      =e=
5312      sum ((years_a)
5313              $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
5314                  and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5315                  and years_a.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5316                  and years_a.val <= yearsSel.val ),
5317            transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage))
5318   
5319      + sum ((yearsToCalc)
5320              $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5321                  and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5322                  and yearsToCalc.val + transfer_techParam(transfer_techs,vintage,'lifeTime') > yearsSel.val
5323                  and yearsToCalc.val <= yearsSel.val ),
5324            transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5325   
5326  * Equation using build and decom
5327  Eq_transfer_linksBalanceFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5328      $((transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5329            or sum(years$sameas(years,yearsSel), transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5330          and not transfer_linkBoundsFixed(linksModelToCalc,yearsSel,transfer_techs)
5331          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5332      ..
5333      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5334      =e=
5335      sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
5336        sum(years$sameas(years, yearsToCalc),
5337          transfer_linksTotal(linksModelToCalc,years-1,transfer_techs,vintage)
5338            $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
5339      + sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
5340        transfer_linksTotal(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
5341          $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage))
5342      + transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
5343          $transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5344      - transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5345          $transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5346      + transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5347          ;
5348   
5349  * // ### Transfer Links Free Decommissioning
5350  * // Balances free link decommissioning.
5351  * // {Eq_transfer_linksFreeDecom}
5352  Eq_transfer_linksFreeDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
5353      $((transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5354          or transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage))
5355          and transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
5356      ..
5357      sum(years$
5358            ((transfer_decomTech(linksModelToCalc,years,transfer_techs,vintage)
5359              or transfer_usedTech(linksModelToCalc,years,transfer_techs,vintage))
5360              and years.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)),
5361          transfer_linksDecom(linksModelToCalc,years,transfer_techs,vintage))
5362      + sum(yearsToCalc$
5363            ((transfer_decomTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5364              or transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5365              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5366              and yearsToCalc.val <= yearsSel.val),
5367          transfer_linksDecom(linksModelToCalc,yearsToCalc,transfer_techs,vintage))
5368      =g=
5369      sum(years$
5370            (transfer_availTech(linksModelToCalc,years,transfer_techs,vintage)
5371              and years.val < sum(yearsToCalc$(ord(yearsToCalc)=1), yearsToCalc.val)
5372              and years.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5373          transfer_linksBuild(linksModelToCalc,years,transfer_techs,vintage))
5374      + sum(yearsToCalc$
5375            (transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
5376              and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
5377              and yearsToCalc.val <= yearsSel.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
5378          transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage));
5379   
5380  * // ### Transfer Links Lower Limit
5381  * // Ensures link capacity lower limits.
5382  * // {Eq_transfer_linksLowerLimit}
5383  Eq_transfer_linksLowerLimit(linksModelToCalc,yearsSel,transfer_techs)
5384      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksLowerLimit') > 0 )
5385      ..
5386      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5387          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5388      =g=
5389      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksLowerLimit");
5390   
5391  * // ### Transfer Links Upper Limit
5392  * // Ensures link capacity upper limits.
5393  * // {Eq_transfer_linksUpperLimit}
5394  Eq_transfer_linksUpperLimit(linksModelToCalc,yearsSel,transfer_techs)
5395      $(transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') >= 0
5396          and transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,'linksUpperLimit') < +inf )
5397      ..
5398      sum(vintage$transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage),
5399          transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage))
5400      =l=
5401      transfer_linksParam(linksModelToCalc,yearsSel,transfer_techs,"linksUpperLimit");
5402   
5403  * // ### Transfer Links Total MIP
5404  * // Ensures number of MIP links.
5405  * // {Eq_transfer_linksTotalMIP}
5406  Eq_transfer_linksTotalMIP(linksModelToCalc,yearsSel,transfer_techs,vintage)
5407      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5408          and transfer_techParam(transfer_techs,vintage,"mipLinks"))
5409      ..
5410      transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5411      =e=
5412      transfer_linksTotal_MIP(linksModelToCalc,yearsSel,transfer_techs,vintage);
5413   
5414  * // ### Transfer Links Flow Along Upper Limit
5415  * // Ensures links flow along upper limit.
5416  * // {Eq_transfer_flowAlongUpperLimit}
5417  Eq_transfer_flowAlongUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5418      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5419      ..
5420      transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5421      =l=
5422      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"along")
5423      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5424      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5425      ;
5426   
5427  * // ### Transfer Links Flow Against Upper Limit
5428  * // Ensures links flow against upper limit.
5429  * // {Eq_transfer_flowAgainstUpperLimit}
5430  Eq_transfer_flowAgainstUpperLimit(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5431      $transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
5432      ..
5433      transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5434      =l=
5435      transfer_flowProfile(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage,"against")
5436      * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
5437      * transfer_techParam(transfer_techs,vintage,"flowUpperLimit")
5438      ;
5439   
5440  set transfer_usedOpf(linksModel,years,gridSegments,transfer_techs,vintage);
5441  transfer_usedOpf(linksModel,yearsToCalc,gridSegments,transfer_techs,vintage)
5442      $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
5443          and gridSegments_dcopf(linksModel,transfer_techs,gridSegments))
5444      = yes;
5445   
5446  set transfer_usedOpfLinks(linksModel,years,gridSegments);
5447  option transfer_usedOpfLinks < transfer_usedOpf;
5448   
5449  set transfer_usedOpfSegments(years,gridSegments);
5450  option transfer_usedOpfSegments < transfer_usedOpf;
5451   
5455  * // ### Transfer DC optimal flow angle flows
5456  * // Angle flows.
5457  * // {Eq_transfer_dcopf_cycleFlows}
5458  Eq_transfer_dcopf_angleFlows(timeModelSel,linksModelToCalc,yearsSel,gridSegments)
5459      $transfer_usedOpfLinks(linksModelToCalc,yearsSel,gridSegments)
5460      ..
5461      sum ((transfer_techs,vintage)
5462              $transfer_usedOpf(linksModelToCalc,yearsSel,gridSegments,transfer_techs,vintage),
5463          ( transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
5464              - transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage) )
5465          * transfer_dcopf_Xtech(linksModelToCalc,yearsSel,transfer_techs,vintage,gridSegments) )
5466      =e=
5467      sum ( nodesModelSel,
5468          - transfer_incidenceModel(nodesModelSel,linksModelToCalc)
5469          * transfer_dcopf_voltageAngle(timeModelSel,nodesModelSel,yearsSel,gridSegments));
5473   
5474   
5475  * ==== model definition ====
5476   
5477  Model M_transfer
5478  /
5479    Eq_transfer_linksBalance
5480    Eq_transfer_linksBalanceFreeDecom
5481    Eq_transfer_linksFreeDecom
5482    Eq_transfer_linksLowerLimit
5483    Eq_transfer_linksUpperLimit
5484    Eq_transfer_linksTotalMIP
5485    Eq_transfer_flowAlongUpperLimit
5486    Eq_transfer_flowAgainstUpperLimit
5490    Eq_transfer_dcopf_angleFlows
5494  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
5496  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5497  * SPDX-License-Identifier: BSD-3-Clause
5498   
5499  * // # core_sourcesink
5500  * // The equations in this file describe the sources and sinks in the model.
5501   
5502  * // ## Variables
5503  * // {special_table_sourcesink_variables}
5619   
5620  * // ## Aggregation of profiles
5621  * // Profiles are rescaled based on the annual sum.
5622   
5623  set sourcesink_usesProfileScaling(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5624  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"fixed")
5625      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleFixProfileWithFixSum") = yes;
5626  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"lower")
5627      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleLowProfileWithLowSum") = yes;
5628  sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,"upper")
5629      $sourcesink_configIn(nodesDataToCalc,years,sourcesink_techs,commodity,"scaleUpProfileWithUpSum") = yes;
5630   
5631  parameter sourcesink_ProfileSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5632  sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5633      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5634      = sum(timeData, sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
5635   
5636  parameter sourcesink_ProfileAbsSum(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5637  sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5638      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5639      = sum(timeData, abs(sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)));
5640   
5641  set sourcesink_ProfileScaleError(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5642  sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5643      $(sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5644          and sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) = 0
5645          and sourcesink_ProfileAbsSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile) > 0)
5646      = yes;
5647   
5648  abort$sum((nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile),
5649              sourcesink_ProfileScaleError(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)) "One or more profiles cannot be rescaled as their annual sum equals zero!"
5650   
5651  * calculate scaling factor for each type
5652  parameter sourcesink_scalingFactor(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5653  sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5654      $(sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5655          and sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile))
5656      = sum(pc_sourcesink_annualSum$sameas(pc_sourcesink_profile,pc_sourcesink_annualSum),
5657          sourcesink_annualSumIn(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_annualSum)
5658              / sourcesink_ProfileSum(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile));
5659   
5660  * rescale profiles
5661  sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5662      $sourcesink_usesProfileScaling(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5663      = sourcesink_profileIn(timeData,nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5664          * sourcesink_scalingFactor(nodesDataToCalc,years,sourcesink_techs,commodity,pc_sourcesink_profile)
5665   
5666  * // ## Aggregation of profiles
5667  * // Profiles are aggregated based on the mapping from data nodes to model nodes.
5668   
5669  * ==== aggregation of profiles ====
5670  set sourcesink_usesProfileIn(nodesData,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5671  option sourcesink_usesProfileIn < sourcesink_profileIn
5672   
5673  set sourcesink_usesProfile(nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5674  sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5675      $sum(nodesDataToCalc$(aggregateNodesModel(nodesDataToCalc,nodesModelToCalc)
5676          and sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)), 1)
5677      = yes;
5678   
5679  * aagregate time dimension
5680  parameter sourcesink_profileIn_aggTime(timeModel,nodesData,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile);
5681  sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5682    $sourcesink_usesProfileIn(nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5683    = sum(timeMapping_t(timeModelToCalc,timeData),
5684            sourcesink_profileIn(timeData,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile))
5685      / timeLength(timeModelToCalc);
5686  option clear = sourcesink_profileIn;
5687   
5688  * sum up absolute profiles
5689  parameter sourcesink_profile(timeModel,nodesModel,years,sourcesink_techs,commodity,pc_sourcesink_profile);
5690  sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5691      $sourcesink_usesProfile(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile)
5692      = sum(nodesDataToCalc$aggregateNodesModel(nodesDataToCalc,nodesModelToCalc),
5693              sourcesink_profileIn_aggTime(timeModelToCalc,nodesDataToCalc,yearsToCalc,sourcesink_techs,commodity,pc_sourcesink_profile));
5694  option clear = sourcesink_profileIn_aggTime;
5695   
5696  set sourcesink_enabled(nodesModel,years,sourcesink_techs,commodity);
5697  option sourcesink_enabled < sourcesink_config;
5698   
5702   
5703  * ==== declaration of variables ====
5704  * // ## Bounding of variables
5705  * // Source-sink variables with either a lower, fixed, or upper profile are bounded to their respective profiles given by the input parameters.
5706  sourcesink_flow.lo(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5707      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5708          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesLowerProfile") = 1
5709          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower") > -inf )
5710      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"lower");
5711   
5712  sourcesink_flow.up(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5713      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5714          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesUpperProfile") = 1
5715          and sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper") < inf )
5716      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"upper");
5717   
5718  sourcesink_flow.fx(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5719      $( sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
5720          and sourcesink_config(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"usesFixedProfile") = 1 )
5721      = sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"fixed");
5722   
5723  option clear = sourcesink_profile;
5724   
5725   
5726  * ==== equation definition ====
5727  * // ## Equations
5728  equations
5729  Eq_sourcesink_useFixedSum(nodesModel,years,sourcesink_techs,commodity
5730      ) "Fixes the annual sum from sources / to sinks"
5731  Eq_sourcesink_useLowerSum(nodesModel,years,sourcesink_techs,commodity
5732      ) "Limits the lower sum from sources / to sinks"
5733  Eq_sourcesink_useUpperSum(nodesModel,years,sourcesink_techs,commodity
5734      ) "Limits the upper sum from sources / to sinks"
5735    ;
5736   
5737  * // ### Fixed annual sums for sources and sinks
5738  * // Ensures that the sources and sinks with annual sums given as fixed limits are balanced.
5739  * // {Eq_sourcesink_useFixedSum}
5740  Eq_sourcesink_useFixedSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5741      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5742          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesFixedSum") = 1 )
5743      ..
5744      sum(timeModelSel,
5745          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5746          * timeLength(timeModelSel))
5747      =e=
5748      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"fixed")
5749      * timefrac
5750      ;
5751   
5752  * // ### Lower annual sums for sources and sinks
5753  * // Ensures that the sources and sinks with annual sums given as lower limits are balanced.
5754  * // {Eq_sourcesink_useLowerSum}
5755  Eq_sourcesink_useLowerSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5756      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5757          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesLowerSum") = 1
5758          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower") > -inf )
5759      ..
5760      sum(timeModelSel,
5761          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5762          * timeLength(timeModelSel))
5763      =g=
5764      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"lower")
5765      * timefrac
5766      ;
5767   
5768  * // ### Upper annual sums for sources and sinks
5769  * // Ensures that the sources and sinks with annual sums given as upper limits are balanced.
5770  * // {Eq_sourcesink_useUpperSum}
5771  Eq_sourcesink_useUpperSum(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5772      $( sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity)
5773          and sourcesink_config(nodesModelSel,yearsSel,sourcesink_techs,commodity,"usesUpperSum") = 1
5774          and sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper") < inf )
5775      ..
5776      sum(timeModelSel,
5777          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5778          * timeLength(timeModelSel))
5779      =l=
5780      sourcesink_annualSum(nodesModelSel,yearsSel,sourcesink_techs,commodity,"upper")
5781      * timefrac
5782      ;
5783   
5784   
5785  * ==== model definition ====
5786   
5787  Model M_sourcesink
5788  /
5789    Eq_sourcesink_useFixedSum
5790    Eq_sourcesink_useLowerSum
5791    Eq_sourcesink_useUpperSum
5792  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\core\balance.gms
5794  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5795  * SPDX-License-Identifier: BSD-3-Clause
5796   
5797  * // # balance
5798  * // The equations in this file describe the commodity balancing in the model.
5799   
5800  Equations
5801    Eq_balance_commodities(timeModel,nodesModel,years,commodity
5802      ) "Balance for each commodity used in each time step, region, and year";
5803   
5804   
5805  * ==== calculation of mappings ====
5806   
5807  set balance_techComm(techs,commodity);
5808  balance_techComm(converter_techs(techs),commodity)
5809      $sum((vintage,activity)$converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"), 1) = yes;
5810  balance_techComm(storage_techs(techs),commodity)
5811      $sum((vintage)$storage_sizeParam(storage_techs,vintage,commodity,"size"), 1) = yes;
5812  balance_techComm(transfer_techs(techs),commodity)
5813      $sum((vintage)$transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"), 1) = yes;
5814  balance_techComm(sourcesink_techs(techs),commodity)
5815      $sum((nodesModelToCalc,yearsToCalc)$sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 1) = yes;
5816   
5817  set balance_usedConverter(nodesModel,years,commodity);
5818  set balance_usedStorage(nodesModel,years,commodity);
5819  set balance_usedTransfer(nodesModel,years,commodity);
5820  set balance_usedSourceSink(nodesModel,years,commodity);
5821  set balance_usedBalance(nodesModel,years,commodity);
5822   
5823  balance_usedConverter(nodesModel,years,commodity)
5824      = sum ((converter_techs,vintage,activity)
5825              $( converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient") <> 0
5826                  and converter_usedTech(nodesModel,years,converter_techs,vintage) ), 1);
5827   
5828  balance_usedStorage(nodesModel,years,commodity)
5829      = sum ((storage_techs,vintage,activity)
5830              $(storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
5831                  and storage_usedTech(nodesModel,years,storage_techs,vintage) ), 1);
5832   
5833  balance_usedTransfer(nodesModel,years,commodity)
5834      = sum ((linksModel,transfer_techs,vintage)
5835              $(transfer_coefficient(transfer_techs,vintage,commodity,"coefficient") <> 0
5836                  and transfer_incidenceModel(nodesModel,linksModel) <> 0), 1);
5837   
5838  option balance_usedSourceSink < sourcesink_enabled;
5839   
5840  balance_usedBalance(nodesModel,years,commodity)
5841      $(balance_usedConverter(nodesModel,years,commodity)
5842          or balance_usedStorage(nodesModel,years,commodity)
5843          or balance_usedTransfer(nodesModel,years,commodity)
5844          or balance_usedSourceSink(nodesModel,years,commodity) )
5845      = yes;
5846   
5847   
5848  * ==== equation definition ====
5849   
5850  * // ### Balance commodities
5851  * // Balancing of commodities for all model regions, time steps, and years
5852  * // {Eq_balance_commodities}
5853  Eq_balance_commodities(timeModelSel(timeModelToCalc),nodesModelSel,yearsSel,commodity)
5854      $balance_usedBalance(nodesModelSel,yearsSel,commodity)
5855      ..
5856  * converter
5857      sum((converter_techs,vintage,activity)
5858              $( converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity) <> 0
5859                  AND converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage) ),
5860          converter_activity(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
5861              * converter_coefficientProfile(timeModelToCalc,nodesModelSel,yearsSel,converter_techs,vintage,activity,commodity)
5862              * timeLength(timeModelToCalc)
5863          + converter_unitsUsingActivity_MIP(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelSel,yearsSel,converter_techs,vintage,activity)
5864              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant")
5865              * timeLength(timeModelToCalc))
5866   
5867  * storages
5868      + sum((storage_techs,vintage)
5869              $( storage_sizeParam(storage_techs,vintage,commodity,"size") <> 0
5870                  and storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage) ),
5871          storage_level(timeModelToCalc--1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5872              $(not storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5873          + storage_level(timeModelToCalc-1,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5874              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular"))
5875          + (storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"initialLevel")
5876              * storage_sizeParam(storage_techs,vintage,commodity,"size")
5877              * storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage))
5878              $(storage_reservoirParam(nodesModelSel,yearsSel,storage_techs,"nonCircular")
5879                  and ord(timeModelToCalc)=1)
5880          - storage_level(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5883          - storage_losses(timeModelSel,nodesModelSel,yearsSel,storage_techs,vintage,commodity)
5884          * timeLength(timeModelSel)
5887          )
5888   
5889  * incoming transfer
5890      + sum((linksModel,transfer_techs,vintage)
5891              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
5892                  and linksModelToCalc(linksModel)),
5893          (   transfer_flowAlong(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
5894                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0)
5895            + transfer_flowAgainst(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsSel,transfer_techs,vintage)
5896                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0) )
5897          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
5898          * timeLength(timeModelToCalc))
5899   
5900  * outgoing transfer
5901      - sum((linksModel,transfer_techs,vintage)
5902              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
5903                  and linksModelToCalc(linksModel)),
5904          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
5905                  $(transfer_incidenceModel(nodesModelSel,linksModel) < 0)
5906            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
5907                  $(transfer_incidenceModel(nodesModelSel,linksModel) > 0) )
5908          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
5909          * timeLength(timeModelSel))
5910   
5911  * transfer losses
5912      + 0.5 * sum((linksModel,transfer_techs,vintage)
5913              $(transfer_usedTech(linksModel,yearsSel,transfer_techs,vintage)
5914                  AND linksModelToCalc(linksModel)),
5915          (   transfer_flowAlong(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
5916                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0)
5917            + transfer_flowAgainst(timeModelSel,linksModel,yearsSel,transfer_techs,vintage)
5918                  $(transfer_incidenceModel(nodesModelSel,linksModel) <> 0) )
5919          * timeLength(timeModelSel)
5920          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
5921              + sum(link_types,
5922                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
5923                  * transfer_lengthParam(linksModel,link_types,"length"))))
5924   
5925  * sourcesink
5926      + sum((sourcesink_techs)
5927              $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
5928          sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
5929          * timeLength(timeModelSel))
5930      =e=
5931      0;
5932   
5933   
5934  * ==== model definition ====
5935   
5936  Model M_balance
5937  /
5938    Eq_balance_commodities
5939  /;
5940   
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\equations.gms
5942  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
5943  * SPDX-License-Identifier: BSD-3-Clause
5944   
5945  * // # accounting_equations
5946   
5947  * ==== declaration of variables ====
5948   
5949  variables
5950  accounting_indicator(accNodesModel,accYears,indicator)
5951  accounting_indicator_links(linksModel,years,indicator)
5952  accounting_objective
5953  ;
5954   
5955   
5956  * ==== definition of variables ====
5957   
5958  accounting_indicator.lo(accNodesModel,accYears,indicator)
5959      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
5960          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
5961      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
5962   
5963  accounting_indicator.up(accNodesModel,accYears,indicator)
5964      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
5965          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
5966      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
5967   
5968  accounting_indicator.fx(accNodesModel,accYears,indicator)
5969      $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed")
5970          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"isVariable"))
5971      = accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
5972   
5973   
5974  * set the variable levels to be fixed for years before the optimization years
5975  accounting_indicator.l(accNodesModel,accYears,indicator)
5976      $activeIndicators(accNodesModel,accYears,indicator)
5977      = 0;
5978   
5979   
5980  * ==== declaration of equations ====
5981   
5982  equations
5983  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYears,indicator
5984      ) "Ensures the fixed value of an indicator per accounting region"
5985  Eq_accounting_indicatorCalc_upper(accNodesModel,accYears,indicator
5986      ) "Ensures the upper limit of an indicator per accounting region"
5987  Eq_accounting_indicatorCalc_lower(accNodesModel,accYears,indicator
5988      ) "Ensures the lower limit of an indicator per accounting region"
5989  Eq_accounting_indicatorCalc_links_fixed(linksModel,years,indicator
5990      ) "Ensures the fixed value of an indicator per model link"
5991  Eq_accounting_indicatorCalc_links_upper(linksModel,years,indicator
5992      ) "Ensures the upper limit of an indicator per model link"
5993  Eq_accounting_indicatorCalc_links_lower(linksModel,years,indicator
5994      ) "Ensures the lower limit of an indicator per model link"
5995  Eq_accounting_objective "Calculates the objective value based on the specified indicator"
5996    ;
5997   
5998   
5999  * ==== equations definition ====
6000  * // ## Equations
6001  * // ### Accounting Indicator Calculation
6002  * // Calculates the fixed limit for accounting indicators.
6003  * // {Eq_accounting_indicatorCalc_fixed}
6004  Eq_accounting_indicatorCalc_fixed(accNodesModel,accYearsSel(accYears),indicator)
6005      $(activeIndicators(accNodesModel,accYears,indicator)
6006          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6007      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6009  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6010  * SPDX-License-Identifier: BSD-3-Clause
6011   
6012  * == variable indicators ==
6013      sum((accNodesModel_a,accYears_a,indicator_a)
6014          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6015              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6016          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6017          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6018          )
6019   
6020  * == converters ==
6021      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6022              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6023                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6024          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6025          *
6026          ( sum ((converter_techs,vintage)
6027                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6028                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6029              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6030              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6031              )
6032   
6033          + sum ((years_a,converter_techs,vintage)
6034                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6035                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6036                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6037                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6038                          and years_a.val <= yearsSel.val ),
6039              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6040              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6041              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6042              )
6043   
6044          + sum ((yearsToCalc,converter_techs,vintage)
6045                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6046                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6047                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6048                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6049                          and yearsToCalc.val <= yearsSel.val ),
6050              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6051              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6052              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6053              )
6054   
6055          + sum ((converter_techs,vintage)
6056                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6057                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6058              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6059              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6060   
6061          + sum ((converter_techs,vintage)
6062                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6063              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6064              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6065   
6066          + sum ((timeModelSel,converter_techs,vintage,activity)
6067                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6068              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6069              * timeLength(timeModelSel)
6070              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6071          / timefrac
6072   
6073          + sum ((timeModelSel,converter_techs,vintage)
6074                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6075              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6076              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6077          / timefrac
6078   
6079          + sum ((timeModelSel,converter_techs,vintage)
6080                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6081              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6082              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6083                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6084   
6085              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6086              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6087                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6088          / timefrac
6089          )
6090      )
6091   
6092  * == storage ==
6093      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6094              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6095                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6096          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6097          *
6098          ( sum ((storage_techs,vintage)
6099                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6100                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6101              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6102              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6103              )
6104   
6105          + sum ((years_a,storage_techs,vintage)
6106                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6107                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6108                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6109                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6110                          and years_a.val <= yearsSel.val ),
6111              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6112              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6113              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6114              )
6115   
6116          + sum ((yearsToCalc,storage_techs,vintage)
6117                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6118                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6119                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6120                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6121                          and yearsToCalc.val <= yearsSel.val ),
6122              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6123              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6124              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6125              )
6126   
6127          + sum ((storage_techs,vintage)
6128                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6129                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6130              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6131              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6132   
6133          + sum ((storage_techs,vintage)
6134                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6135              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6136              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6137          )
6138      )
6139   
6140   
6141  * == transfer ==
6142      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6143              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6144                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6145          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6146          *
6147          ( sum ((linksModelToCalc,transfer_techs,vintage)
6148                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6149                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6150                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6151              0.5
6152              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6153              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6154   
6155          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6156                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6157                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6158                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6159                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6160                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6161                          and years_a.val <= yearsSel.val ),
6162              0.5
6163              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6164              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6165              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6166   
6167          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6168                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6169                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6170                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6171                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6172                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6173                          and yearsToCalc.val <= yearsSel.val ),
6174              0.5
6175              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6176              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6177              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6178   
6179          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6180                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6181                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6182                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6183              0.5
6184              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6185              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6186              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6187   
6188          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6189                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6190                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6191                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6192                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6193                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6194                          and years_a.val <= yearsSel.val ),
6195              0.5
6196              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6197              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6198              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6199              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6200   
6201          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6202                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6203                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6204                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6205                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6206                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6207                          and yearsToCalc.val <= yearsSel.val ),
6208              0.5
6209              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6210              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6211              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6212              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6213   
6214          + sum ((linksModelToCalc,transfer_techs,vintage)
6215                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6216                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6217                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6218              0.5
6219              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6220              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6221   
6222              + 0.5
6223              * sum (link_types,
6224                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6225                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6226                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6227              ) )
6228   
6229          + sum ((linksModelToCalc,transfer_techs,vintage)
6230                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6231                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6232              0.5
6233              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6234              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6235   
6236              + 0.5
6237              * sum (link_types,
6238                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6239                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6240                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6241   
6242              + 0.5
6243              * sum (timeModelSel,
6244                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6245                  * timeLength(timeModelSel)
6246                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6247                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6248   
6249                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6250                  * timeLength(timeModelSel)
6251                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6252                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6253                  / timefrac
6254   
6255              + 0.5
6256              * sum ((timeModelSel, link_types),
6257                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6258                  * timeLength(timeModelSel)
6259                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6260                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6261                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6262   
6263                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6264                  * timeLength(timeModelSel)
6265                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6266                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6267                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6268                  / timefrac
6269              )
6270          )
6271      )
6272   
6273   
6274  * == sources / sinks ==
6275      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6276              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6277                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6278          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6279          *
6280          sum ((timeModelSel,sourcesink_techs,commodity)
6281                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6282              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6283              * timeLength(timeModelSel)
6284              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6285          / timefrac
6286      )
6287      =e=
6288      accounting_indicatorBounds(accNodesModel,accYears,indicator,"fixedValue");
6289   
6290  * // ### Accounting Indicator Calculation
6291  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6292  * // {Eq_accounting_indicatorCalc_upper}
6293  Eq_accounting_indicatorCalc_upper(accNodesModel,accYearsSel(accYears),indicator)
6294      $(activeIndicators(accNodesModel,accYears,indicator)
6295          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useUpper")
6296          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6297      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6299  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6300  * SPDX-License-Identifier: BSD-3-Clause
6301   
6302  * == variable indicators ==
6303      sum((accNodesModel_a,accYears_a,indicator_a)
6304          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6305              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6306          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6307          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6308          )
6309   
6310  * == converters ==
6311      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6312              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6313                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6314          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6315          *
6316          ( sum ((converter_techs,vintage)
6317                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6318                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6319              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6320              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6321              )
6322   
6323          + sum ((years_a,converter_techs,vintage)
6324                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6325                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6326                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6327                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6328                          and years_a.val <= yearsSel.val ),
6329              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6330              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6331              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6332              )
6333   
6334          + sum ((yearsToCalc,converter_techs,vintage)
6335                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6336                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6337                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6338                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6339                          and yearsToCalc.val <= yearsSel.val ),
6340              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6341              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6342              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6343              )
6344   
6345          + sum ((converter_techs,vintage)
6346                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6347                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6348              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6349              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6350   
6351          + sum ((converter_techs,vintage)
6352                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6353              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6354              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6355   
6356          + sum ((timeModelSel,converter_techs,vintage,activity)
6357                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6358              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6359              * timeLength(timeModelSel)
6360              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6361          / timefrac
6362   
6363          + sum ((timeModelSel,converter_techs,vintage)
6364                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6365              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6366              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6367          / timefrac
6368   
6369          + sum ((timeModelSel,converter_techs,vintage)
6370                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6371              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6372              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6373                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6374   
6375              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6376              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6377                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6378          / timefrac
6379          )
6380      )
6381   
6382  * == storage ==
6383      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6384              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6385                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6386          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6387          *
6388          ( sum ((storage_techs,vintage)
6389                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6390                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6391              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6392              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6393              )
6394   
6395          + sum ((years_a,storage_techs,vintage)
6396                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6397                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6398                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6399                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6400                          and years_a.val <= yearsSel.val ),
6401              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6402              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6403              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6404              )
6405   
6406          + sum ((yearsToCalc,storage_techs,vintage)
6407                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6408                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6409                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6410                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6411                          and yearsToCalc.val <= yearsSel.val ),
6412              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6413              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6414              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6415              )
6416   
6417          + sum ((storage_techs,vintage)
6418                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6419                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6420              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6421              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6422   
6423          + sum ((storage_techs,vintage)
6424                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6425              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6426              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6427          )
6428      )
6429   
6430   
6431  * == transfer ==
6432      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6433              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6434                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6435          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6436          *
6437          ( sum ((linksModelToCalc,transfer_techs,vintage)
6438                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6439                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6440                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6441              0.5
6442              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6443              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6444   
6445          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6446                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6447                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6448                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6449                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6450                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6451                          and years_a.val <= yearsSel.val ),
6452              0.5
6453              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6454              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6455              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6456   
6457          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6458                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6459                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6460                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6461                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6462                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6463                          and yearsToCalc.val <= yearsSel.val ),
6464              0.5
6465              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6466              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6467              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6468   
6469          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6470                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6471                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6472                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6473              0.5
6474              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6475              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6476              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6477   
6478          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6479                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6480                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6481                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6482                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6483                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6484                          and years_a.val <= yearsSel.val ),
6485              0.5
6486              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6487              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6488              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6489              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6490   
6491          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6492                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6493                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6494                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6495                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6496                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6497                          and yearsToCalc.val <= yearsSel.val ),
6498              0.5
6499              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6500              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6501              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6502              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6503   
6504          + sum ((linksModelToCalc,transfer_techs,vintage)
6505                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6506                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6507                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6508              0.5
6509              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6510              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6511   
6512              + 0.5
6513              * sum (link_types,
6514                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6515                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6516                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6517              ) )
6518   
6519          + sum ((linksModelToCalc,transfer_techs,vintage)
6520                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6521                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6522              0.5
6523              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6524              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6525   
6526              + 0.5
6527              * sum (link_types,
6528                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6529                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6530                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6531   
6532              + 0.5
6533              * sum (timeModelSel,
6534                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6535                  * timeLength(timeModelSel)
6536                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6537                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6538   
6539                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6540                  * timeLength(timeModelSel)
6541                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6542                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6543                  / timefrac
6544   
6545              + 0.5
6546              * sum ((timeModelSel, link_types),
6547                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6548                  * timeLength(timeModelSel)
6549                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6550                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6551                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6552   
6553                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6554                  * timeLength(timeModelSel)
6555                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6556                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6557                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6558                  / timefrac
6559              )
6560          )
6561      )
6562   
6563   
6564  * == sources / sinks ==
6565      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6566              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6567                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6568          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6569          *
6570          sum ((timeModelSel,sourcesink_techs,commodity)
6571                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6572              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6573              * timeLength(timeModelSel)
6574              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6575          / timefrac
6576      )
6577      =l=
6578      accounting_indicatorBounds(accNodesModel,accYears,indicator,"upperValue");
6579   
6580  * // ### Accounting Indicator Calculation
6581  * // Calculates the indicators for each model node for converters, sources and sinks, transfer, storage and variable indicators.
6582  * // {Eq_accounting_indicatorCalc_lower}
6583  Eq_accounting_indicatorCalc_lower(accNodesModel,accYearsSel(accYears),indicator)
6584      $(activeIndicators(accNodesModel,accYears,indicator)
6585          and accounting_indicatorBounds(accNodesModel,accYears,indicator,"useLower")
6586          and not accounting_indicatorBounds(accNodesModel,accYears,indicator,"useFixed"))
6587      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
6589  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6590  * SPDX-License-Identifier: BSD-3-Clause
6591   
6592  * == variable indicators ==
6593      sum((accNodesModel_a,accYears_a,indicator_a)
6594          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6595              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
6596          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
6597          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
6598          )
6599   
6600  * == converters ==
6601      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6602              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6603                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6604          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6605          *
6606          ( sum ((converter_techs,vintage)
6607                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
6608                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
6609              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
6610              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
6611              )
6612   
6613          + sum ((years_a,converter_techs,vintage)
6614                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
6615                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6616                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
6617                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
6618                          and years_a.val <= yearsSel.val ),
6619              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
6620              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
6621              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
6622              )
6623   
6624          + sum ((yearsToCalc,converter_techs,vintage)
6625                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
6626                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6627                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
6628                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
6629                          and yearsToCalc.val <= yearsSel.val ),
6630              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
6631              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
6632              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
6633              )
6634   
6635          + sum ((converter_techs,vintage)
6636                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
6637                          and converter_techParam(converter_techs,vintage,"freeDecom")),
6638              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
6639              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
6640   
6641          + sum ((converter_techs,vintage)
6642                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6643              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
6644              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
6645   
6646          + sum ((timeModelSel,converter_techs,vintage,activity)
6647                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
6648              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
6649              * timeLength(timeModelSel)
6650              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
6651          / timefrac
6652   
6653          + sum ((timeModelSel,converter_techs,vintage)
6654                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6655              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6656              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
6657          / timefrac
6658   
6659          + sum ((timeModelSel,converter_techs,vintage)
6660                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
6661              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6662              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6663                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
6664   
6665              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
6666              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
6667                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
6668          / timefrac
6669          )
6670      )
6671   
6672  * == storage ==
6673      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6674              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6675                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6676          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6677          *
6678          ( sum ((storage_techs,vintage)
6679                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
6680                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
6681              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
6682              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
6683              )
6684   
6685          + sum ((years_a,storage_techs,vintage)
6686                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
6687                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6688                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
6689                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
6690                          and years_a.val <= yearsSel.val ),
6691              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
6692              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
6693              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
6694              )
6695   
6696          + sum ((yearsToCalc,storage_techs,vintage)
6697                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
6698                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6699                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
6700                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
6701                          and yearsToCalc.val <= yearsSel.val ),
6702              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
6703              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
6704              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
6705              )
6706   
6707          + sum ((storage_techs,vintage)
6708                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
6709                          and storage_techParam(storage_techs,vintage,"freeDecom")),
6710              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
6711              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
6712   
6713          + sum ((storage_techs,vintage)
6714                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
6715              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
6716              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
6717          )
6718      )
6719   
6720   
6721  * == transfer ==
6722      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6723              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6724                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6725          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6726          *
6727          ( sum ((linksModelToCalc,transfer_techs,vintage)
6728                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6729                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6730                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6731              0.5
6732              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6733              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6734   
6735          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
6736                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6737                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6738                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6739                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6740                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6741                          and years_a.val <= yearsSel.val ),
6742              0.5
6743              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6744              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6745              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
6746   
6747          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6748                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6749                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6750                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6751                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
6752                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
6753                          and yearsToCalc.val <= yearsSel.val ),
6754              0.5
6755              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6756              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
6757              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
6758   
6759          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
6760                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6761                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6762                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6763              0.5
6764              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6765              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6766              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6767   
6768          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
6769                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6770                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6771                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6772                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6773                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6774                          and years_a.val <= yearsSel.val ),
6775              0.5
6776              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6777              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6778              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6779              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6780   
6781          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
6782                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6783                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
6784                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6785                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
6786                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6787                          and yearsToCalc.val <= yearsSel.val ),
6788              0.5
6789              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
6790              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6791              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
6792              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
6793   
6794          + sum ((linksModelToCalc,transfer_techs,vintage)
6795                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6796                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
6797                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6798              0.5
6799              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6800              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6801   
6802              + 0.5
6803              * sum (link_types,
6804                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6805                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6806                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6807              ) )
6808   
6809          + sum ((linksModelToCalc,transfer_techs,vintage)
6810                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6811                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
6812              0.5
6813              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6814              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6815   
6816              + 0.5
6817              * sum (link_types,
6818                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6819                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6820                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6821   
6822              + 0.5
6823              * sum (timeModelSel,
6824                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6825                  * timeLength(timeModelSel)
6826                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6827                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6828   
6829                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6830                  * timeLength(timeModelSel)
6831                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6832                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6833                  / timefrac
6834   
6835              + 0.5
6836              * sum ((timeModelSel, link_types),
6837                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6838                  * timeLength(timeModelSel)
6839                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6840                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6841                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6842   
6843                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6844                  * timeLength(timeModelSel)
6845                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
6846                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6847                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6848                  / timefrac
6849              )
6850          )
6851      )
6852   
6853   
6854  * == sources / sinks ==
6855      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
6856              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6857                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
6858          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
6859          *
6860          sum ((timeModelSel,sourcesink_techs,commodity)
6861                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
6862              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
6863              * timeLength(timeModelSel)
6864              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
6865          / timefrac
6866      )
6867      =g=
6868      accounting_indicatorBounds(accNodesModel,accYears,indicator,"lowerValue");
6869   
6870   
6871  * // ### Accounting Indicator Calculation Links
6872  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
6873  * // {Eq_accounting_indicatorCalc_links_fixed}
6874  Eq_accounting_indicatorCalc_links_fixed(linksModelToCalc,yearsSel,indicator)
6875      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
6876          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
6877      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
6879  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6880  * SPDX-License-Identifier: BSD-3-Clause
6881   
6882      sum ((transfer_techs,vintage)
6883                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6884                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6885          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6886          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6887   
6888      + sum ((years_a,transfer_techs,vintage)
6889                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6890                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6891                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6892                      and years_a.val <= yearsSel.val ),
6893          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6894          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6895          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
6896   
6897      + sum ((transfer_techs,vintage,link_types)
6898                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6899                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6900          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6901          * transfer_lengthParam(linksModelToCalc,link_types,"length")
6902          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6903   
6904      + sum ((years_a,transfer_techs,vintage,link_types)
6905                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6906                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
6907                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
6908                      and years_a.val <= yearsSel.val ),
6909          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6910          * transfer_lengthParam(linksModelToCalc,link_types,"length")
6911          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
6912          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
6913   
6914      + sum ((transfer_techs,vintage)
6915                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6916                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
6917          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6918          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
6919   
6920          + sum (link_types,
6921              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
6922              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6923              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
6924          ) )
6925   
6926      + sum ((transfer_techs,vintage)
6927                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
6928          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6929          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
6930   
6931          + sum (link_types,
6932              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
6933              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6934              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
6935   
6936          + sum (timeModelSel,
6937              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6938              * timeLength(timeModelSel)
6939              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6940                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
6941   
6942              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6943              * timeLength(timeModelSel)
6944              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
6945                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
6946              / timefrac
6947   
6948          + sum ((timeModelSel, link_types),
6949              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6950              * timeLength(timeModelSel)
6951              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6952              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6953                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
6954   
6955              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
6956              * timeLength(timeModelSel)
6957              * transfer_lengthParam(linksModelToCalc,link_types,"length")
6958              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
6959                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
6960              / timefrac
6961          )
6962      =e=
6963  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"fixedValue");
6964   
6965  * // ### Accounting Indicator Calculation Links
6966  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
6967  * // {Eq_accounting_indicatorCalc_links_upper}
6968  Eq_accounting_indicatorCalc_links_upper(linksModelToCalc,yearsSel,indicator)
6969      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
6970          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useUpper")
6971          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
6972      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
6974  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
6975  * SPDX-License-Identifier: BSD-3-Clause
6976   
6977      sum ((transfer_techs,vintage)
6978                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6979                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
6980          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6981          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
6982   
6983      + sum ((years_a,transfer_techs,vintage)
6984                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
6985                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
6986                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
6987                      and years_a.val <= yearsSel.val ),
6988          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
6989          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
6990          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
6991   
6992      + sum ((transfer_techs,vintage,link_types)
6993                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
6994                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
6995          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
6996          * transfer_lengthParam(linksModelToCalc,link_types,"length")
6997          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
6998   
6999      + sum ((years_a,transfer_techs,vintage,link_types)
7000                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7001                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7002                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7003                      and years_a.val <= yearsSel.val ),
7004          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7005          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7006          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7007          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7008   
7009      + sum ((transfer_techs,vintage)
7010                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7011                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7012          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7013          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7014   
7015          + sum (link_types,
7016              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7017              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7018              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7019          ) )
7020   
7021      + sum ((transfer_techs,vintage)
7022                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7023          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7024          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7025   
7026          + sum (link_types,
7027              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7028              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7029              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7030   
7031          + sum (timeModelSel,
7032              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7033              * timeLength(timeModelSel)
7034              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7035                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7036   
7037              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7038              * timeLength(timeModelSel)
7039              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7040                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7041              / timefrac
7042   
7043          + sum ((timeModelSel, link_types),
7044              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7045              * timeLength(timeModelSel)
7046              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7047              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7048                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7049   
7050              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7051              * timeLength(timeModelSel)
7052              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7053              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7054                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7055              / timefrac
7056          )
7057      =l=
7058  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"upperValue");
7059   
7060  * // ### Accounting Indicator Calculation Links
7061  * // Calculates the indicators for each transfer for converters, sources and sinks, transfer, storage and variable indicators.
7062  * // {Eq_accounting_indicatorCalc_links_lower}
7063  Eq_accounting_indicatorCalc_links_lower(linksModelToCalc,yearsSel,indicator)
7064      $(activeIndicators_links(linksModelToCalc,yearsSel,indicator)
7065          and accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useLower")
7066          and not accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"useFixed"))
7067      ..
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
7069  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7070  * SPDX-License-Identifier: BSD-3-Clause
7071   
7072      sum ((transfer_techs,vintage)
7073                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7074                      and accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7075          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7076          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7077   
7078      + sum ((years_a,transfer_techs,vintage)
7079                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7080                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7081                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7082                      and years_a.val <= yearsSel.val ),
7083          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7084          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7085          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
7086   
7087      + sum ((transfer_techs,vintage,link_types)
7088                  $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7089                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7090          transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7091          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7092          * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7093   
7094      + sum ((years_a,transfer_techs,vintage,link_types)
7095                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7096                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7097                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7098                      and years_a.val <= yearsSel.val ),
7099          transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7100          * transfer_lengthParam(linksModelToCalc,link_types,"length")
7101          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7102          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7103   
7104      + sum ((transfer_techs,vintage)
7105                  $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7106                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7107          transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7108          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7109   
7110          + sum (link_types,
7111              transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7112              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7113              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7114          ) )
7115   
7116      + sum ((transfer_techs,vintage)
7117                  $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)),
7118          + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7119          * accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7120   
7121          + sum (link_types,
7122              + transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7123              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7124              * accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7125   
7126          + sum (timeModelSel,
7127              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7128              * timeLength(timeModelSel)
7129              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7130                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7131   
7132              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7133              * timeLength(timeModelSel)
7134              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7135                  + accounting_transferLinks(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7136              / timefrac
7137   
7138          + sum ((timeModelSel, link_types),
7139              transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7140              * timeLength(timeModelSel)
7141              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7142              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7143                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7144   
7145              + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7146              * timeLength(timeModelSel)
7147              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7148              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7149                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7150              / timefrac
7151          )
7152      =g=
7153  accounting_indicatorBounds_links(linksModelToCalc,yearsSel,indicator,"lowerValue");
7154   
7155   
7156  * // ### Accounting Objective
7157  * // Calculates the indicators for the objective.
7158  * // {Eq_accounting_objective}
7159  Eq_accounting_objective
7160      ..
7161      accounting_objective
7162      =e=
7163      sum ((accNodesModel,accYears,indicator)
7164              $(accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj") <> 0 ),
7165          (-1 * accounting_indicatorBounds(accNodesModel,accYears,indicator,"obj"))
7166          *
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
7168  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7169  * SPDX-License-Identifier: BSD-3-Clause
7170   
7171  * == variable indicators ==
7172      sum((accNodesModel_a,accYears_a,indicator_a)
7173          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7174              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
7175          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
7176          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
7177          )
7178   
7179  * == converters ==
7180      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7181              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7182                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7183          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7184          *
7185          ( sum ((converter_techs,vintage)
7186                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
7187                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
7188              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
7189              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
7190              )
7191   
7192          + sum ((years_a,converter_techs,vintage)
7193                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
7194                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7195                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
7196                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
7197                          and years_a.val <= yearsSel.val ),
7198              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
7199              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
7200              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
7201              )
7202   
7203          + sum ((yearsToCalc,converter_techs,vintage)
7204                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
7205                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7206                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
7207                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
7208                          and yearsToCalc.val <= yearsSel.val ),
7209              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
7210              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
7211              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
7212              )
7213   
7214          + sum ((converter_techs,vintage)
7215                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
7216                          and converter_techParam(converter_techs,vintage,"freeDecom")),
7217              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
7218              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
7219   
7220          + sum ((converter_techs,vintage)
7221                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7222              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
7223              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
7224   
7225          + sum ((timeModelSel,converter_techs,vintage,activity)
7226                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
7227              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
7228              * timeLength(timeModelSel)
7229              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
7230          / timefrac
7231   
7232          + sum ((timeModelSel,converter_techs,vintage)
7233                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7234              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7235              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
7236          / timefrac
7237   
7238          + sum ((timeModelSel,converter_techs,vintage)
7239                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
7240              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7241              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7242                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
7243   
7244              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
7245              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
7246                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
7247          / timefrac
7248          )
7249      )
7250   
7251  * == storage ==
7252      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7253              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7254                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7255          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7256          *
7257          ( sum ((storage_techs,vintage)
7258                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
7259                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
7260              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
7261              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
7262              )
7263   
7264          + sum ((years_a,storage_techs,vintage)
7265                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
7266                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7267                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
7268                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
7269                          and years_a.val <= yearsSel.val ),
7270              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
7271              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
7272              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
7273              )
7274   
7275          + sum ((yearsToCalc,storage_techs,vintage)
7276                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
7277                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7278                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
7279                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
7280                          and yearsToCalc.val <= yearsSel.val ),
7281              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
7282              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
7283              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
7284              )
7285   
7286          + sum ((storage_techs,vintage)
7287                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
7288                          and storage_techParam(storage_techs,vintage,"freeDecom")),
7289              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
7290              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
7291   
7292          + sum ((storage_techs,vintage)
7293                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
7294              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
7295              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
7296          )
7297      )
7298   
7299   
7300  * == transfer ==
7301      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7302              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7303                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7304          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7305          *
7306          ( sum ((linksModelToCalc,transfer_techs,vintage)
7307                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7308                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7309                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
7310              0.5
7311              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7312              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
7313   
7314          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
7315                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7316                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7317                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7318                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
7319                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
7320                          and years_a.val <= yearsSel.val ),
7321              0.5
7322              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7323              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
7324              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
7325   
7326          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7327                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7328                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7329                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7330                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
7331                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
7332                          and yearsToCalc.val <= yearsSel.val ),
7333              0.5
7334              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7335              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
7336              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
7337   
7338          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
7339                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7340                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7341                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
7342              0.5
7343              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
7344              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7345              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
7346   
7347          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
7348                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
7349                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7350                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7351                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
7352                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7353                          and years_a.val <= yearsSel.val ),
7354              0.5
7355              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
7356              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7357              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
7358              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
7359   
7360          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
7361                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7362                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
7363                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7364                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
7365                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
7366                          and yearsToCalc.val <= yearsSel.val ),
7367              0.5
7368              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
7369              * transfer_lengthParam(linksModelToCalc,link_types,"length")
7370              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
7371              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
7372   
7373          + sum ((linksModelToCalc,transfer_techs,vintage)
7374                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7375                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
7376                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
7377              0.5
7378              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7379              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
7380   
7381              + 0.5
7382              * sum (link_types,
7383                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7384                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7385                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
7386              ) )
7387   
7388          + sum ((linksModelToCalc,transfer_techs,vintage)
7389                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
7390                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
7391              0.5
7392              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7393              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
7394   
7395              + 0.5
7396              * sum (link_types,
7397                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
7398                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7399                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
7400   
7401              + 0.5
7402              * sum (timeModelSel,
7403                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7404                  * timeLength(timeModelSel)
7405                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7406                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
7407   
7408                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7409                  * timeLength(timeModelSel)
7410                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
7411                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
7412                  / timefrac
7413   
7414              + 0.5
7415              * sum ((timeModelSel, link_types),
7416                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7417                  * timeLength(timeModelSel)
7418                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7419                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7420                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
7421   
7422                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
7423                  * timeLength(timeModelSel)
7424                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
7425                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
7426                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
7427                  / timefrac
7428              )
7429          )
7430      )
7431   
7432   
7433  * == sources / sinks ==
7434      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
7435              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7436                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
7437          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
7438          *
7439          sum ((timeModelSel,sourcesink_techs,commodity)
7440                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
7441              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
7442              * timeLength(timeModelSel)
7443              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
7444          / timefrac
7445      )
7446      )
7447   
7448   
7449  * ==== model definition ====
7450   
7451  Model M_accounting
7452  /
7453  Eq_accounting_indicatorCalc_fixed
7454  Eq_accounting_indicatorCalc_upper
7455  Eq_accounting_indicatorCalc_lower
7456  Eq_accounting_indicatorCalc_links_fixed
7457  Eq_accounting_indicatorCalc_links_upper
7458  Eq_accounting_indicatorCalc_links_lower
7459  Eq_accounting_objective
7460  /;
INCLUDE    C:\Local\framework\remix\framework\model\source\optiframe.gms
7462  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7463  * SPDX-License-Identifier: BSD-3-Clause
7464   
7465  * ==== optimization frames ====
7467   
7468  * mapping from optimization frame to years
7470  set optiframe / of1 * of1 /;
7471  set optiframeToCalc(optiframe);
7472   
7474  set map_optiframe(optiframe,years) / of1 . #yearsToCalc /;
7476   
7478   
7479  option optiframeToCalc < map_optiframe;
INCLUDE    C:\Local\framework\remix\framework\model\source\model_properties.gms
7481  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7482  * SPDX-License-Identifier: BSD-3-Clause
7483   
7484  * ==== Overview of model dimensions ====
7485  parameters  acts(converter_techs) "active technologies"
7486              asts(storage_techs) "active storage technologies"
7487              atts(transfer_techs) "active transfer technologies"
7488   
7489  scalars nd "number of dispatch time steps per year"
7490          nn "number of network nodes"
7491          nl "number of network links"
7492          nt "number of converter, storage and transfer technologies"
7493          nc "number of commodities"
7494          ny "number of years of the capacity planning horizon";
7495   
7496  option acts < converter_availTech;
7497  option asts < storage_availTech;
7498  option atts < transfer_availTech;
7499   
7500  nd = sum (timeModel $timeModelToCalc(timeModel), 1);
7501  nn = sum (nodesModel $nodesModelToCalc(nodesModel), 1);
7502  nl = sum (linksModel $linksModelToCalc(linksModel), 1);
7503  nt = sum (storage_techs $asts(storage_techs), 1)
7504      + sum (converter_techs $acts(converter_techs), 1)
7505      + sum (transfer_techs $atts(transfer_techs), 1);
7506  nc = card(commodity);
7507  ny = sum (years $yearsToCalc(years), 1);
7508   
7509  file props / '' /;
7510  put props;
7511  put "### Model properties  ###" /;
7512  put "Number of active dispatch time steps per year: " nd:0:0  /;
7513  put "Number of active network nodes: " nn:0:0  /;
7514  put "Number of active network links: " nl:0:0  /;
7515  put "Number of active converter, storage and transfer technologies: " nt:0:0  /;
7516  put "Number of commodities: " nc:0:0  /;
7517  put "Number of years considered for capacity expansion: " ny:0:0  /;
7518  putclose;
7519   
7520  Model remix /
7521    M_converter
7522    M_storage
7523    M_transfer
7524    M_sourcesink
7525    M_balance
7526    M_accounting
7527  /;
7528   
7532   
7533  * ==== include methods  ====
7536   
7537  * check if the method is valid
7542   
7543   
7544  * if method is pips write the checkanno tool
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
7546  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7547  * SPDX-License-Identifier: BSD-3-Clause
7548   
7551   
7554   
7555  * if method is pips generate the annotated gdx file
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pips.gms
7557  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7558  * SPDX-License-Identifier: BSD-3-Clause
7559   
7563   
7564  * if method is solve run the model with commercial solvers
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\solve.gms
7566  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7567  * SPDX-License-Identifier: BSD-3-Clause
7568   
7572   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
7574  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7575  * SPDX-License-Identifier: BSD-3-Clause
7576   
7578   
7580   
7581  * ==== GAMS solver options ====
7587   
7588  * ==== REMix debug options ====
7592   
7593  * ==== REMix solver defaults ====
7601   
7609   
7619   
7627   
7636   
7637   
7638  * ==== setup optimization ====
7639  if ((sum(nodesModelToCalc, 1)>40 or sum(timeModelToCalc, 1)>50) and not 0,
7640     option limRow=0, limCol=0, solPrint=off;
7641  else
7642     option limRow=100000, limCol=100000, solPrint=on;
7643  );
7644   
7645   
7646  * ==== Solver specific default values ====
7647   
7667   
7668   
7670   
7671   
7673   
7674  option mip = cplex;
7675  option reslim = 1209600;
7676  option optcr = 1e-3;
7677  remix.threads = 8;
7678  remix.optFile = 1;
7679  remix.solveLink = 0;
7680  remix.holdFixed = 1;
7681   
INCLUDE    C:\Local\framework\remix\framework\model\source\solver_options\write.gms
7684  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7685  * SPDX-License-Identifier: BSD-3-Clause
7686   
7688   
7690  file opt / "cplex.opt" /;
7691  put opt;
7692  put "names no" /;
7693  put "rerun no" /;
7694   
7695  put "lpmethod 4" /;
7696  put "threads 8" /;
7697  put "barorder 3" /;
7698   
7700  put "scaind 0" /;
7701  put "predual -1" /;
7702   
7705  put "barepcomp 1e-6" /;
7707  put "solutiontype 2" /;
7708  put "epgap 1e-3" /;
7709   
7711  put "iis 0" /;
7712  put "quality 1" /;
7713   
7716  putclose;
7718   
7719   
7721   
7722   
7724   
7725   
7727   
7728   
7730   
7731   
7733   
7734   
7736   
7737   
7739   
7741   
7742   
7743  * ==== solve the problem ====
7744   
7745  loop ( optiframeToCalc,
7746      yearsSel(years) = no;
7747      yearsSel(years)$map_optiframe(optiframeToCalc,years) = yes;
7748      yearsToFix(years) = no;
7749      yearsToFix(years)$(years.val < smin(years_a$yearsSel(years_a), years_a.val)) = yes;
7750      accYearsSel(accYears) = no;
7751      accYearsSel("horizon") = yes;
7752      accYearsSel(accYears)$(sum(yearsSel$sameas(accYears,yearsSel), 1)) = yes;
7753      accYearsToFix(accYears) = no;
7754      accYearsToFix(accYears)$(sum(years$(sameas(years,accYears) and years.val < smin(years_a$yearsSel(years_a), years_a.val)), 1) > 0) = yes;
7755      timeModelSel(timeModel) = no;
7756      timeModelSel(timeModel)$timeModelToCalc(timeModel) = yes;
7757      nodesModelSel(nodesModel) = no;
7758      nodesModelSel(nodesModel)$nodesModelToCalc(nodesModel) = yes;
7759   
7760  * Fix decision for years previously optimized in case of myopic or foresight
7761      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
7762          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7763          = sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage))
7764              - converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsUpperLimit");
7765      converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs)
7766          $(converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7767   
7768      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
7769          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7770          = converter_capacityParam(nodesModelToCalc,yearsToFix,converter_techs,"unitsLowerLimit")
7771              - sum(vintage, converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage));
7772      converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs)
7773          $(converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs) < 0) = 0;
7774   
7775      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
7776          = converter_unitsDecom.lo(nodesModelToCalc,yearsSel,converter_techs,vintage)
7777              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7778                  sum(years$sameas(years, yearsToCalc),
7779                      converter_unitsTotal.l(nodesModelToCalc,years-1,converter_techs,vintage)
7780                      $converter_usedTech(nodesModelToCalc,years-1,converter_techs,vintage)))
7781              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7782                  converter_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage)
7783                      $converter_usedTech(nodesModelToCalc,yearsToCalc-1,converter_techs,vintage));
7784      converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage)
7785          $(converter_unitsDelta_decom(nodesModelToCalc,yearsSel,converter_techs,vintage) < 0) = 0;
7786   
7787      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7788          $converter_availTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7789          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7790              - converter_unitsDelta_upper(nodesModelToCalc,yearsToFix,converter_techs);
7791   
7792      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7793          $converter_usedTech(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7794          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7795              - converter_unitsDelta_lower(nodesModelToCalc,yearsToFix,converter_techs);
7796   
7797      converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7798          $(converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7799      converter_unitsBuild.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7800          = converter_unitsBuild.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7801      converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7802          $(converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage) < 0) = 0;
7803      converter_unitsDecom.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7804          = converter_unitsDecom.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7805      converter_unitsTotal.fx(nodesModelToCalc,yearsToFix,converter_techs,vintage)
7806          = converter_unitsTotal.l(nodesModelToCalc,yearsToFix,converter_techs,vintage);
7807   
7808   
7809      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
7810          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7811          = sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage))
7812              - storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsUpperLimit");
7813      storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs)
7814          $(storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7815   
7816      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
7817          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7818          = storage_reservoirParam(nodesModelToCalc,yearsToFix,storage_techs,"unitsLowerLimit")
7819              - sum(vintage, storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage));
7820      storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs)
7821          $(storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs) < 0) = 0;
7822   
7823      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
7824          = storage_unitsDecom.lo(nodesModelToCalc,yearsSel,storage_techs,vintage)
7825              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7826                  sum(years$sameas(years, yearsToCalc),
7827                      storage_unitsTotal.l(nodesModelToCalc,years-1,storage_techs,vintage)
7828                      $storage_usedTech(nodesModelToCalc,years-1,storage_techs,vintage)))
7829              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7830                  storage_unitsTotal.l(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage)
7831                      $storage_usedTech(nodesModelToCalc,yearsToCalc-1,storage_techs,vintage));
7832      storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage)
7833          $(storage_unitsDelta_decom(nodesModelToCalc,yearsSel,storage_techs,vintage) < 0) = 0;
7834   
7835      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7836          $storage_availTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7837          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7838              - storage_unitsDelta_upper(nodesModelToCalc,yearsToFix,storage_techs);
7839   
7840      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7841          $storage_usedTech(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7842          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7843              - storage_unitsDelta_lower(nodesModelToCalc,yearsToFix,storage_techs);
7844   
7845      storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7846          $(storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7847      storage_unitsBuild.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7848          = storage_unitsBuild.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7849      storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7850          $(storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage) < 0) = 0;
7851      storage_unitsDecom.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7852          = storage_unitsDecom.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7853      storage_unitsTotal.fx(nodesModelToCalc,yearsToFix,storage_techs,vintage)
7854          = storage_unitsTotal.l(nodesModelToCalc,yearsToFix,storage_techs,vintage);
7855   
7856   
7857      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
7858          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7859          = sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage))
7860              - transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksUpperLimit");
7861      transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs)
7862          $(transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7863   
7864      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
7865          $(sum(yearsToCalc$sameas(yearsToFix, yearsToCalc), 1))
7866          = transfer_linksParam(linksModelToCalc,yearsToFix,transfer_techs,"linksLowerLimit")
7867              - sum(vintage, transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage));
7868      transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs)
7869          $(transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs) < 0) = 0;
7870   
7871      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7872          = transfer_linksDecom.lo(linksModelToCalc,yearsSel,transfer_techs,vintage)
7873              - sum(yearsToCalc$(ord(yearsToCalc) = 1 and sameas(yearsToCalc, yearsSel)),
7874                  sum(years$sameas(years, yearsToCalc),
7875                      transfer_linksTotal.l(linksModelToCalc,years-1,transfer_techs,vintage)
7876                      $transfer_usedTech(linksModelToCalc,years-1,transfer_techs,vintage)))
7877              - sum((yearsToCalc)$(ord(yearsToCalc) > 1 and sameas(yearsToCalc, yearsSel)),
7878                  transfer_linksTotal.l(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage)
7879                      $transfer_usedTech(linksModelToCalc,yearsToCalc-1,transfer_techs,vintage));
7880      transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage)
7881          $(transfer_linksDelta_decom(linksModelToCalc,yearsSel,transfer_techs,vintage) < 0) = 0;
7882   
7883      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7884          $transfer_availTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7885          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7886              - transfer_linksDelta_upper(linksModelToCalc,yearsToFix,transfer_techs);
7887   
7888      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7889          $transfer_usedTech(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7890          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7891              - transfer_linksDelta_lower(linksModelToCalc,yearsToFix,transfer_techs);
7892   
7893      transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7894          $(transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7895      transfer_linksBuild.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7896          = transfer_linksBuild.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7897      transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7898          $(transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage) < 0) = 0;
7899      transfer_linksDecom.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7900          = transfer_linksDecom.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7901      transfer_linksTotal.fx(linksModelToCalc,yearsToFix,transfer_techs,vintage)
7902          = transfer_linksTotal.l(linksModelToCalc,yearsToFix,transfer_techs,vintage);
7903   
7904      accounting_indicator.fx(accNodesModel,accYearsToFix,indicator)
7905          = accounting_indicator.l(accNodesModel,accYearsToFix,indicator);
7906   
7907  * Optimize and log values
7908      solve remix minimizing accounting_objective using mip;
7909      put_utility 'log' / 'Model status ' remix.modelstat:0:0;
7910      put_utility 'log' / 'Objective value ' accounting_objective.l:0:3;
7911   
7912  );
7913   
7917   
7918  * if method is pareto solve the model once and afterwards run multiple points along the pareto front
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\pareto.gms
7920  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7921  * SPDX-License-Identifier: BSD-3-Clause
7922   
7926   
7927  * if method is mga solve the model once and afterwards maximize the length metric of indicators
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\mga.gms
7929  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7930  * SPDX-License-Identifier: BSD-3-Clause
7931   
7935   
7936  * if method is iternodes run the model by iterating through all nodesToCalc
INCLUDE    C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
7938  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7939  * SPDX-License-Identifier: BSD-3-Clause
7940   
7944   
7945  * if postcalc is one write the results gdx
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
7947  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
7948  * SPDX-License-Identifier: BSD-3-Clause
7949   
7952   
7953  * ==== indicator accounting ====
7954   
7955  indicator_accounting_detailed(indicator,nodesModelToCalc,yearsToCalc,techs)
7956      =
7957  * == converters ==
7958      sum ((converter_techs(techs),vintage)
7959                  $(converter_availTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7960                      and accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"useAnnuity") = 0),
7961          converter_unitsBuild.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7962          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitBuild"))
7963   
7964      + sum ((years_a,converter_techs(techs),vintage)
7965                  $(converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
7966                      and accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"useAnnuity") = 1
7967                      and years_a.val + accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"amorTime") > yearsToCalc.val
7968                      and years_a.val <= yearsToCalc.val ),
7969          converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage)
7970          * accounting_converterUnits(indicator,nodesModelToCalc,years_a,converter_techs,vintage,"perUnitBuild")
7971          * accounting_annuityFactor_converter(indicator,nodesModelToCalc,years_a,converter_techs,vintage) )
7972   
7973      + sum ((converter_techs(techs),vintage)
7974                  $(converter_decomTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7975                      and converter_techParam(converter_techs,vintage,"freeDecom")),
7976          converter_unitsDecom.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7977          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitDecom") )
7978   
7979      + sum ((converter_techs(techs),vintage)
7980                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7981          + converter_unitsTotal.l(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7982          * accounting_converterUnits(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perUnitTotal") )
7983   
7984      + sum ((timeModelToCalc,converter_techs(techs),vintage,activity)
7985                  $converter_usedTechAct(nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity),
7986          converter_activity.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
7987          * timeLength(timeModelToCalc)
7988          * accounting_converterActivity(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,"perActivity") )
7989          / timefrac
7990   
7991      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7992                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7993          converter_unitStartups.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
7994          * accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perStartup") )
7995          / timefrac
7996   
7997      + sum ((timeModelToCalc,converter_techs(techs),vintage)
7998                  $converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage),
7999          converter_rampPos.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8000          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8001              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampPos"))
8002   
8003          + converter_rampNeg.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8004          * (accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRamp")
8005              + accounting_converterStartup(indicator,nodesModelToCalc,yearsToCalc,converter_techs,vintage,"perRampNeg")))
8006          / timefrac
8007   
8008  * == storage ==
8009      + sum ((storage_techs(techs),vintage)
8010                  $(storage_availTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8011                      and accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"useAnnuity") = 0),
8012          storage_unitsBuild.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8013          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitBuild") )
8014   
8015      + sum ((years_a,storage_techs(techs),vintage)
8016                  $(storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8017                      and accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"useAnnuity") = 1
8018                      and years_a.val + accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"amorTime") > yearsToCalc.val
8019                      and years_a.val <= yearsToCalc.val ),
8020          storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage)
8021          * accounting_storageUnits(indicator,nodesModelToCalc,years_a,storage_techs,vintage,"perUnitBuild")
8022          * accounting_annuityFactor_storage(indicator,nodesModelToCalc,years_a,storage_techs,vintage) )
8023   
8024      + sum ((storage_techs(techs),vintage)
8025                  $(storage_decomTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8026                      and storage_techParam(storage_techs,vintage,"freeDecom")),
8027          storage_unitsDecom.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8028          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitDecom"))
8029   
8030      + sum ((storage_techs(techs),vintage)
8031                  $storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage),
8032          storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8033          * accounting_storageUnits(indicator,nodesModelToCalc,yearsToCalc,storage_techs,vintage,"perUnitTotal") )
8034   
8035  * == transfer ==
8036      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8037                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8038                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8039                      and accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8040          0.5
8041          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8042          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8043   
8044      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage)
8045                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8046                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8047                      and accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"useAnnuity") = 1
8048                      and years_a.val + accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8049                      and years_a.val <= yearsToCalc.val ),
8050          0.5
8051          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8052          * accounting_transferLinks(indicator,linksModel,years_a,transfer_techs,vintage,"perLinkBuild")
8053          * accounting_annuityFactor_transferLink(indicator,linksModel,years_a,transfer_techs,vintage) )
8054   
8055      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage,link_types)
8056                  $(transfer_availTech(linksModel,yearsToCalc,transfer_techs,vintage)
8057                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8058                      and accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8059          0.5
8060          * transfer_linksBuild.l(linksModel,yearsToCalc,transfer_techs,vintage)
8061          * transfer_lengthParam(linksModel,link_types,"length")
8062          * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8063   
8064      + sum ((linksModelToCalc(linksModel),years_a,transfer_techs(techs),vintage,link_types)
8065                  $(transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8066                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8067                      and accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8068                      and years_a.val + accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8069                      and years_a.val <= yearsToCalc.val ),
8070          0.5
8071          * transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage)
8072          * transfer_lengthParam(linksModel,link_types,"length")
8073          * accounting_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8074          * accounting_annuityFactor_transferPerLength(indicator,linksModel,years_a,transfer_techs,vintage,link_types) )
8075   
8076      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8077                  $(transfer_decomTech(linksModel,yearsToCalc,transfer_techs,vintage)
8078                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0
8079                      and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8080          0.5
8081          * transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8082          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8083   
8084          + 0.5
8085          * sum (link_types,
8086              transfer_linksDecom.l(linksModel,yearsToCalc,transfer_techs,vintage)
8087              * transfer_lengthParam(linksModel,link_types,"length")
8088              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8089          ) )
8090   
8091   
8092      + sum ((linksModelToCalc(linksModel),transfer_techs(techs),vintage)
8093                  $(transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8094                      and transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0 ),
8095          + 0.5
8096          * transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8097          * accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8098   
8099          + 0.5
8100          * sum (link_types,
8101              + transfer_linksTotal.l(linksModel,yearsToCalc,transfer_techs,vintage)
8102              * transfer_lengthParam(linksModel,link_types,"length")
8103              * accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8104   
8105          + 0.5
8106          * sum (timeModelToCalc,
8107              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8108              * timeLength(timeModelToCalc)
8109              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8110                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8111   
8112              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8113              * timeLength(timeModelToCalc)
8114              * ( accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlow")
8115                  + accounting_transferLinks(indicator,linksModel,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8116              / timefrac
8117   
8118          + 0.5
8119          * sum ((timeModelToCalc, link_types),
8120              transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8121              * timeLength(timeModelToCalc)
8122              * transfer_lengthParam(linksModel,link_types,"length")
8123              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8124                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8125   
8126              + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8127              * timeLength(timeModelToCalc)
8128              * transfer_lengthParam(linksModel,link_types,"length")
8129              * (accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8130                  + accounting_transferPerLength(indicator,linksModel,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8131              / timefrac
8132          )
8133   
8134   
8135  * == sources / sinks ==
8136      + sum ((timeModelToCalc,sourcesink_techs(techs),commodity)
8137              $sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity),
8138          sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8139          * timeLength(timeModelToCalc)
8140          * accounting_sourcesinkFlow(indicator,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity,"perFlow"))
8141      / timefrac
8142      ;
8143   
8144   
8145  * ==== full set of main indicators ====
8146   
8147  indicator_accounting(accNodesModel,accYears,indicator)
8148      $sum((accNodesModel_a,accYears_a,indicator_a)
8149              $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a), 1)
8150      =
8151      + sum((accNodesModel_a,accYears_a,indicator_a)
8152              $(compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8153                  and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8154          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8155          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a))
8156   
8157      + sum((accNodesModel_a,accYears_a,indicator_a)
8158              $(compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)),
8159          compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8160          * (sum((nodesModelToCalc,yearsToCalc,techs)
8161                  $(sameas(accNodesModel_a, nodesModelToCalc)
8162                      and sameas(accYears_a, yearsToCalc)),
8163                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs))))
8164      ;
8165   
8166  indicator_accounting_comp(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8167      $compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8168      =
8169          compoundIndicatorsFullExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8170          * accounting_indicator.l(accNodesModel_a,accYears_a,indicator_a)
8171              $variableIndicators(accNodesModel_a,accYears_a,indicator_a)
8172   
8173          + compoundIndicatorsFull(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8174          * (sum((nodesModelToCalc,yearsToCalc,techs)
8175                  $(sameas(accNodesModel_a, nodesModelToCalc)
8176                      and sameas(accYears_a, yearsToCalc)),
8177                  indicator_accounting_detailed(indicator_a,nodesModelToCalc,yearsToCalc,techs)))
8178      ;
8179   
8180  indicator_accounting_var(accNodesModel,accYears,indicator)
8181      $accounting_indicator.l(accNodesModel,accYears,indicator)
8182      = accounting_indicator.l(accNodesModel,accYears,indicator);
8183   
8184  indicator_accounting_ref(accNodesModel,accYears,indicator)
8185      =
INCLUDE    C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
8188  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
8189  * SPDX-License-Identifier: BSD-3-Clause
8190   
8191  * == variable indicators ==
8192      sum((accNodesModel_a,accYears_a,indicator_a)
8193          $(compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8194              and variableIndicators(accNodesModel_a,accYears_a,indicator_a)),
8195          compoundIndicatorsExt(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a,accNodesModel_a,accYears_a,indicator_a)
8196          * accounting_indicator(accNodesModel_a,accYears_a,indicator_a)
8197          )
8198   
8199  * == converters ==
8200      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8201              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8202                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8203          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8204          *
8205          ( sum ((converter_techs,vintage)
8206                      $(converter_availTech(nodesModelSel,yearsSel,converter_techs,vintage)
8207                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"useAnnuity") = 0),
8208              converter_unitsBuild(nodesModelSel,yearsSel,converter_techs,vintage)
8209              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitBuild")
8210              )
8211   
8212          + sum ((years_a,converter_techs,vintage)
8213                      $(converter_availTech(nodesModelSel,years_a,converter_techs,vintage)
8214                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8215                          and accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"useAnnuity") = 1
8216                          and years_a.val + accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"amorTime") > yearsSel.val
8217                          and years_a.val <= yearsSel.val ),
8218              converter_unitsBuild(nodesModelSel,years_a,converter_techs,vintage)
8219              * accounting_converterUnits(indicator_a,nodesModelSel,years_a,converter_techs,vintage,"perUnitBuild")
8220              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,years_a,converter_techs,vintage)
8221              )
8222   
8223          + sum ((yearsToCalc,converter_techs,vintage)
8224                      $(converter_availTech(nodesModelSel,yearsToCalc,converter_techs,vintage)
8225                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8226                          and accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"useAnnuity") = 1
8227                          and yearsToCalc.val + accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"amorTime") > yearsSel.val
8228                          and yearsToCalc.val <= yearsSel.val ),
8229              converter_unitsBuild(nodesModelSel,yearsToCalc,converter_techs,vintage)
8230              * accounting_converterUnits(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage,"perUnitBuild")
8231              * accounting_annuityFactor_converter(indicator_a,nodesModelSel,yearsToCalc,converter_techs,vintage)
8232              )
8233   
8234          + sum ((converter_techs,vintage)
8235                      $(converter_decomTech(nodesModelSel,yearsSel,converter_techs,vintage)
8236                          and converter_techParam(converter_techs,vintage,"freeDecom")),
8237              converter_unitsDecom(nodesModelSel,yearsSel,converter_techs,vintage)
8238              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitDecom"))
8239   
8240          + sum ((converter_techs,vintage)
8241                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8242              + converter_unitsTotal(nodesModelSel,yearsSel,converter_techs,vintage)
8243              * accounting_converterUnits(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perUnitTotal"))
8244   
8245          + sum ((timeModelSel,converter_techs,vintage,activity)
8246                      $converter_usedTechAct(nodesModelSel,yearsSel,converter_techs,vintage,activity),
8247              converter_activity(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage,activity)
8248              * timeLength(timeModelSel)
8249              * accounting_converterActivity(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,activity,"perActivity") )
8250          / timefrac
8251   
8252          + sum ((timeModelSel,converter_techs,vintage)
8253                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8254              converter_unitStartups(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8255              * accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perStartup") )
8256          / timefrac
8257   
8258          + sum ((timeModelSel,converter_techs,vintage)
8259                      $converter_usedTech(nodesModelSel,yearsSel,converter_techs,vintage),
8260              converter_rampPos(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8261              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8262                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampPos"))
8263   
8264              + converter_rampNeg(timeModelSel,nodesModelSel,yearsSel,converter_techs,vintage)
8265              * (accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRamp")
8266                 + accounting_converterStartup(indicator_a,nodesModelSel,yearsSel,converter_techs,vintage,"perRampNeg")))
8267          / timefrac
8268          )
8269      )
8270   
8271  * == storage ==
8272      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8273              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8274                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8275          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8276          *
8277          ( sum ((storage_techs,vintage)
8278                      $(storage_availTech(nodesModelSel,yearsSel,storage_techs,vintage)
8279                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"useAnnuity") = 0),
8280              storage_unitsBuild(nodesModelSel,yearsSel,storage_techs,vintage)
8281              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitBuild")
8282              )
8283   
8284          + sum ((years_a,storage_techs,vintage)
8285                      $(storage_availTech(nodesModelSel,years_a,storage_techs,vintage)
8286                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8287                          and accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"useAnnuity") = 1
8288                          and years_a.val + accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"amorTime") > yearsSel.val
8289                          and years_a.val <= yearsSel.val ),
8290              storage_unitsBuild(nodesModelSel,years_a,storage_techs,vintage)
8291              * accounting_storageUnits(indicator_a,nodesModelSel,years_a,storage_techs,vintage,"perUnitBuild")
8292              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,years_a,storage_techs,vintage)
8293              )
8294   
8295          + sum ((yearsToCalc,storage_techs,vintage)
8296                      $(storage_availTech(nodesModelSel,yearsToCalc,storage_techs,vintage)
8297                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8298                          and accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"useAnnuity") = 1
8299                          and yearsToCalc.val + accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"amorTime") > yearsSel.val
8300                          and yearsToCalc.val <= yearsSel.val ),
8301              storage_unitsBuild(nodesModelSel,yearsToCalc,storage_techs,vintage)
8302              * accounting_storageUnits(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage,"perUnitBuild")
8303              * accounting_annuityFactor_storage(indicator_a,nodesModelSel,yearsToCalc,storage_techs,vintage)
8304              )
8305   
8306          + sum ((storage_techs,vintage)
8307                      $(storage_decomTech(nodesModelSel,yearsSel,storage_techs,vintage)
8308                          and storage_techParam(storage_techs,vintage,"freeDecom")),
8309              storage_unitsDecom(nodesModelSel,yearsSel,storage_techs,vintage)
8310              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitDecom"))
8311   
8312          + sum ((storage_techs,vintage)
8313                      $storage_usedTech(nodesModelSel,yearsSel,storage_techs,vintage),
8314              + storage_unitsTotal(nodesModelSel,yearsSel,storage_techs,vintage)
8315              * accounting_storageUnits(indicator_a,nodesModelSel,yearsSel,storage_techs,vintage,"perUnitTotal"))
8316          )
8317      )
8318   
8319   
8320  * == transfer ==
8321      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8322              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8323                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8324          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8325          *
8326          ( sum ((linksModelToCalc,transfer_techs,vintage)
8327                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8328                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8329                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"useAnnuity") = 0),
8330              0.5
8331              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8332              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkBuild") )
8333   
8334          + sum ((linksModelToCalc,years_a,transfer_techs,vintage)
8335                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8336                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8337                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8338                          and accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8339                          and years_a.val + accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsSel.val
8340                          and years_a.val <= yearsSel.val ),
8341              0.5
8342              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8343              * accounting_transferLinks(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8344              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage) )
8345   
8346          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8347                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8348                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8349                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8350                          and accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 1
8351                          and yearsToCalc.val + accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"amorTime") > yearsSel.val
8352                          and yearsToCalc.val <= yearsSel.val ),
8353              0.5
8354              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8355              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild")
8356              * accounting_annuityFactor_transferLink(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage) )
8357   
8358          + sum ((linksModelToCalc,transfer_techs,vintage,link_types)
8359                      $(transfer_availTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8360                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8361                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8362              0.5
8363              * transfer_linksBuild(linksModelToCalc,yearsSel,transfer_techs,vintage)
8364              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8365              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthBuild") )
8366   
8367          + sum ((linksModelToCalc,years_a,transfer_techs,vintage,link_types)
8368                      $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8369                          and years_a.val < sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8370                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8371                          and accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8372                          and years_a.val + accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8373                          and years_a.val <= yearsSel.val ),
8374              0.5
8375              * transfer_linksBuild(linksModelToCalc,years_a,transfer_techs,vintage)
8376              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8377              * accounting_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8378              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8379   
8380          + sum ((linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types)
8381                      $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8382                          and yearsToCalc.val >= sum(yearsToCalc_a$(ord(yearsToCalc_a)=1), yearsToCalc_a.val)
8383                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8384                          and accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 1
8385                          and yearsToCalc.val + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"amorTime") > yearsSel.val
8386                          and yearsToCalc.val <= yearsSel.val ),
8387              0.5
8388              * transfer_linksBuild(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8389              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8390              * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild")
8391              * accounting_annuityFactor_transferPerLength(indicator_a,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types) )
8392   
8393          + sum ((linksModelToCalc,transfer_techs,vintage)
8394                      $(transfer_decomTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8395                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0
8396                          and transfer_techParam(transfer_techs,vintage,'freeDecom')),
8397              0.5
8398              * transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8399              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkDecom")
8400   
8401              + 0.5
8402              * sum (link_types,
8403                  transfer_linksDecom(linksModelToCalc,yearsSel,transfer_techs,vintage)
8404                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8405                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthDecom")
8406              ) )
8407   
8408          + sum ((linksModelToCalc,transfer_techs,vintage)
8409                      $(transfer_usedTech(linksModelToCalc,yearsSel,transfer_techs,vintage)
8410                          and transfer_incidenceModel(nodesModelSel,linksModelToCalc) <> 0 ),
8411              0.5
8412              * transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8413              * accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perLinkTotal")
8414   
8415              + 0.5
8416              * sum (link_types,
8417                  transfer_linksTotal(linksModelToCalc,yearsSel,transfer_techs,vintage)
8418                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8419                  * accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perLengthTotal"))
8420   
8421              + 0.5
8422              * sum (timeModelSel,
8423                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8424                  * timeLength(timeModelSel)
8425                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8426                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAlong"))
8427   
8428                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8429                  * timeLength(timeModelSel)
8430                  * ( accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlow")
8431                      + accounting_transferLinks(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,"perFlowAgainst")))
8432                  / timefrac
8433   
8434              + 0.5
8435              * sum ((timeModelSel, link_types),
8436                  transfer_flowAlong(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8437                  * timeLength(timeModelSel)
8438                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8439                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8440                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAlong"))
8441   
8442                  + transfer_flowAgainst(timeModelSel,linksModelToCalc,yearsSel,transfer_techs,vintage)
8443                  * timeLength(timeModelSel)
8444                  * transfer_lengthParam(linksModelToCalc,link_types,"length")
8445                  * (accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlow")
8446                      + accounting_transferPerLength(indicator_a,linksModelToCalc,yearsSel,transfer_techs,vintage,link_types,"perFlowAgainst")))
8447                  / timefrac
8448              )
8449          )
8450      )
8451   
8452   
8453  * == sources / sinks ==
8454      + sum ((accNodesModel_a,nodesModelSel,accYears_a,yearsSel,indicator_a)
8455              $( compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8456                  and sameas(nodesModelSel,accNodesModel_a) and sameas(yearsSel,accYears_a)),
8457          compoundIndicators(accNodesModel,accYears,indicator,accNodesModel_a,accYears_a,indicator_a)
8458          *
8459          sum ((timeModelSel,sourcesink_techs,commodity)
8460                  $sourcesink_enabled(nodesModelSel,yearsSel,sourcesink_techs,commodity),
8461              sourcesink_flow(timeModelSel,nodesModelSel,yearsSel,sourcesink_techs,commodity)
8462              * timeLength(timeModelSel)
8463              * accounting_sourcesinkFlow(indicator_a,nodesModelSel,yearsSel,sourcesink_techs,commodity,"perFlow") )
8464          / timefrac
8465      )
8467  ;
8468   
8469   
8470  * ==== link-specific indicator accounting ====
8471   
8472  indicator_accounting_links(indicator,nodesModelToCalc,nodesModelToCalc_a,linksModelToCalc,yearsToCalc,techs)
8473      $(transfer_incidenceModel(nodesModelToCalc,linksModelToCalc) < 0
8474          and transfer_incidenceModel(nodesModelToCalc_a,linksModelToCalc) > 0)
8475      =
8476      sum ((transfer_techs(techs),vintage)
8477                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8478                      and accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"useAnnuity") = 0),
8479          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8480          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkBuild") )
8481   
8482      + sum ((years_a,transfer_techs(techs),vintage)
8483                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8484                      and accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"useAnnuity") = 1
8485                      and years_a.val + accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"amorTime") > yearsToCalc.val
8486                      and years_a.val <= yearsToCalc.val ),
8487          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8488          * accounting_transferLinks(indicator,linksModelToCalc,years_a,transfer_techs,vintage,"perLinkBuild")
8489          * accounting_annuityFactor_transferLink(indicator,linksModelToCalc,years_a,transfer_techs,vintage) )
8490   
8491      + sum ((transfer_techs(techs),vintage,link_types)
8492                  $(transfer_availTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8493                      and accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"useAnnuity") = 0 ),
8494          transfer_linksBuild.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8495          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8496          * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthBuild") )
8497   
8498      + sum ((years_a,transfer_techs(techs),vintage,link_types)
8499                  $(transfer_availTech(linksModelToCalc,years_a,transfer_techs,vintage)
8500                      and accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"useAnnuity") = 1
8501                      and years_a.val + accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"amorTime") > yearsToCalc.val
8502                      and years_a.val <= yearsToCalc.val ),
8503          transfer_linksBuild.l(linksModelToCalc,years_a,transfer_techs,vintage)
8504          * transfer_lengthParam(linksModelToCalc,link_types,"length")
8505          * accounting_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types,"perLengthBuild")
8506          * accounting_annuityFactor_transferPerLength(indicator,linksModelToCalc,years_a,transfer_techs,vintage,link_types) )
8507   
8508      + sum ((transfer_techs(techs),vintage)
8509                  $(transfer_usedTech(linksModelToCalc,yearsToCalc,transfer_techs,vintage)),
8510          transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8511          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkDecom")
8512   
8513          + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8514          * accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perLinkTotal")
8515   
8516          + sum (link_types,
8517              transfer_linksDecom.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8518              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8519              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthDecom")
8520   
8521              + transfer_linksTotal.l(linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8522              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8523              * accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perLengthTotal"))
8524   
8525          + sum (timeModelToCalc,
8526              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8527              * timeLength(timeModelToCalc)
8528              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8529                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAlong"))
8530   
8531              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8532              * timeLength(timeModelToCalc)
8533              * ( accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlow")
8534                  + accounting_transferLinks(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,"perFlowAgainst")))
8535              / timefrac
8536   
8537          + sum ((timeModelToCalc, link_types),
8538              transfer_flowAlong.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8539              * timeLength(timeModelToCalc)
8540              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8541              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8542                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAlong"))
8543   
8544              + transfer_flowAgainst.l(timeModelToCalc,linksModelToCalc,yearsToCalc,transfer_techs,vintage)
8545              * timeLength(timeModelToCalc)
8546              * transfer_lengthParam(linksModelToCalc,link_types,"length")
8547              * (accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlow")
8548                  + accounting_transferPerLength(indicator,linksModelToCalc,yearsToCalc,transfer_techs,vintage,link_types,"perFlowAgainst")))
8549              / timefrac
8550      );
8551   
8552   
8553  * == converter capacities ==
8554   
8555  converter_ratedInput(converter_techs,vintage,commodity)
8556      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8557      = smin(activity$converter_usedAct(converter_techs,vintage,activity),
8558              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8559  converter_ratedInput(converter_techs,vintage,commodity)
8560      $(converter_ratedInput(converter_techs,vintage,commodity) > 0)
8561      = 0;
8562   
8563  converter_ratedOutput(converter_techs,vintage,commodity)
8564      $(converter_techParam(converter_techs,vintage,"lifeTime") > 0)
8565      = smax(activity$converter_usedAct(converter_techs,vintage,activity),
8566              converter_coefficient(converter_techs,vintage,activity,commodity,"coefficient"));
8567  converter_ratedOutput(converter_techs,vintage,commodity)
8568      $(converter_ratedOutput(converter_techs,vintage,commodity) < 0)
8569      = 0;
8570   
8571  converter_ratedOutput_min(nodesModelToCalc,years,converter_techs(techs),commodity)
8572      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8573          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8574      = smin(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8575              and converter_ratedOutput(converter_techs,vintage,commodity)),
8576          converter_ratedOutput(converter_techs,vintage,commodity));
8577   
8578  converter_ratedOutput_max(nodesModelToCalc,years,converter_techs(techs),commodity)
8579      $sum(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8580          and converter_ratedOutput(converter_techs,vintage,commodity)), 1)
8581      = smax(vintage$(converter_usedTech(nodesModelToCalc,years,converter_techs,vintage)
8582              and converter_ratedOutput(converter_techs,vintage,commodity)),
8583          converter_ratedOutput(converter_techs,vintage,commodity));
8584   
8585  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"build")
8586      = converter_unitsBuild.l(nodesModelToCalc,years,converter_techs,vintage);
8587   
8588  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8589      = converter_unitsDecom.l(nodesModelToCalc,years,converter_techs,vintage);
8590   
8591  * // Update decommissioned units for units build during yearsToCalc (=after initialising converter_unitsDecom)
8592  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"decom")
8593      $(converter_decomTech(nodesModelToCalc,years,converter_techs,vintage)
8594       and not converter_techParam(converter_techs,vintage,"freeDecom") = 1)
8595      = sum(years_a$
8596            (converter_availTech(nodesModelToCalc,years_a,converter_techs,vintage)
8597             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - converter_techParam(converter_techs,vintage,'lifeTime')
8598             and years_a.val <= years.val - converter_techParam(converter_techs,vintage,'lifeTime')),
8599        converter_unitsBuild.l(nodesModelToCalc,years_a,converter_techs,vintage));
8600   
8601  converter_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,"total")
8602      = converter_unitsTotal.l(nodesModelToCalc,years,converter_techs,vintage);
8603   
8604  converter_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),vintage,commodity,capType)
8605      $(converter_ratedOutput(converter_techs,vintage,commodity))
8606      = converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,techs,vintage,capType)
8607          * converter_ratedOutput(converter_techs,vintage,commodity);
8608   
8609  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,capType)
8610      = sum(vintage,
8611          converter_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,commodity,capType));
8612  option clear = converter_caps_ext;
8613   
8614  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"lowerLimit")
8615      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
8616          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit") > 0
8617          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8618      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsLowerLimit")
8619          * converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity);
8620   
8621  converter_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),converter_techs(techs),commodity,"upperLimit")
8622      $(sum(vintage$converter_usedTech(nodesModelToCalc,years,converter_techs,vintage),1)
8623          and converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit") < inf
8624          and converter_ratedOutput_min(nodesModelToCalc,years,converter_techs,commodity))
8625      = converter_capacityParam(nodesModelToCalc,years,converter_techs,"unitsUpperLimit")
8626          * converter_ratedOutput_max(nodesModelToCalc,years,converter_techs,commodity);
8627   
8628  converter_caps(accNodesModel,accYears,converter_techs(techs),commodity,capType)
8629      = sum((nodesModelToCalc,years)
8630              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8631                  and map_accYearsPostCalc(accYears,years)),
8632          converter_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,commodity,capType));
8633  option clear = converter_caps_novintage_ext;
8634   
8635  converter_units(accNodesModel,accYears,converter_techs(techs),vintage,capType)
8636      = sum((nodesModelToCalc,years)
8637              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8638                  and map_accYearsPostCalc(accYears,years)),
8639          converter_units_ext(accNodesModel,nodesModelToCalc,accYears,years,converter_techs,vintage,capType));
8640  option clear = converter_units_ext;
8641   
8642  * ==== transfer capacities ====
8643   
8644  max_transfer_coefficient(transfer_techs(techs),commodity)
8645          $(smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8646          = smax(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8647   
8648  min_transfer_coefficient(transfer_techs(techs),commodity)
8649          $(smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")) > 0)
8650          = smin(vintage, transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8651   
8652  transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8653      $(transfer_incidenceModel(nodesModelToCalc_start,linksModel) < 0
8654          and transfer_incidenceModel(nodesModelToCalc_end,linksModel) > 0
8655          and sum(vintage$transfer_usedTech(linksModel,years,transfer_techs,vintage), 1))
8656      = yes;
8657   
8658  transfer_links(linksModel,years,transfer_techs,vintage,"build")
8659      = transfer_linksBuild.l(linksModel,years,transfer_techs,vintage);
8660   
8661  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8662      = transfer_linksDecom.l(linksModel,years,transfer_techs,vintage);
8663   
8664  * // Update decommissioned links for links build during yearsToCalc (=after initialising transfer_linksDecom)
8665  transfer_links(linksModel,years,transfer_techs,vintage,"decom")
8666      $(transfer_decomTech(linksModel,years,transfer_techs,vintage)
8667       and not transfer_techParam(transfer_techs,vintage,"freeDecom") = 1)
8668      = sum(years_a$
8669            (transfer_availTech(linksModel,years_a,transfer_techs,vintage)
8670             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - transfer_techParam(transfer_techs,vintage,'lifeTime')
8671             and years_a.val <= years.val - transfer_techParam(transfer_techs,vintage,'lifeTime')),
8672        transfer_linksBuild.l(linksModel,years_a,transfer_techs,vintage));
8673   
8674  transfer_links(linksModel,years,transfer_techs,vintage,"total")
8675      = transfer_linksTotal.l(linksModel,years,transfer_techs,vintage);
8676   
8677  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,capType)
8678      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8679          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8680                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8681      = sum(vintage,
8682          transfer_links(linksModel,years,transfer_techs,vintage,capType)
8683          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8684   
8685  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"lowerLimit")
8686      $(transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit') > 0
8687          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8688          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8689                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8690      = transfer_linksParam(linksModel,years,transfer_techs,'linksLowerLimit')
8691          * min_transfer_coefficient(transfer_techs,commodity);
8692   
8693  transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs(techs),commodity,"upperLimit")
8694      $(transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit') < inf
8695          and transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,years,transfer_techs)
8696          and sum(vintage$(transfer_usedTech(linksModel,years,transfer_techs,vintage)
8697                              and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1))
8698      = transfer_linksParam(linksModel,years,transfer_techs,'linksUpperLimit')
8699          * max_transfer_coefficient(transfer_techs,commodity);
8700   
8701   
8702  * ==== transfer flows ====
8703   
8704  transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8705      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8706      = sum(vintage,
8707          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8708              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8709          * timeLength(timeModelToCalc)
8710          * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient"));
8711   
8712  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
8713      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8714      = sum(timeModelToCalc,
8715          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8716   
8717  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"positive")
8718      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8719      = sum(timeModelToCalc
8720              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) > 0),
8721          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8722   
8723  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"negative")
8724      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8725      = sum(timeModelToCalc
8726              $(transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity) < 0),
8727          transfer_flows(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8728   
8729  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"gross")
8730      $transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8731      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"positive")
8732          - transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"negative");
8733   
8734  transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"flh")
8735      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8736          and transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross") > 0
8737          and transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total") > 0)
8738      = transfer_flows_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"gross")
8739          / transfer_caps(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity,"total");
8740   
8741  transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity)
8742      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8743          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
8744              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
8745      = -1 * abs(sum(vintage,
8746          ( transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8747              - transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage) )
8748          * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8749              + sum(link_types,
8750                  transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8751                  * transfer_lengthParam(linksModel,link_types,"length")))))
8752          * timeLength(timeModelToCalc);
8753   
8754  transfer_losses_annual(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs(techs),commodity,"net")
8755      $(transfer_usedStartEnd(nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs)
8756          and (sum(vintage$transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow"), 1)
8757              or sum((vintage, link_types)$transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength"), 1)))
8758      = sum(timeModelToCalc,
8759          transfer_losses(timeModelToCalc,nodesModelToCalc_start,nodesModelToCalc_end,linksModel,yearsToCalc,transfer_techs,commodity));
8760   
8761   
8762  * ==== storage capacities ====
8763   
8764  storage_size_max(nodesModelToCalc,years,storage_techs(techs),commodity)
8765      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8766              and storage_usedCom(storage_techs,vintage,commodity)
8767              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8768      = smax(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8769              and storage_usedCom(storage_techs,vintage,commodity)
8770              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8771          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8772   
8773  storage_size_min(nodesModelToCalc,years,storage_techs(techs),commodity)
8774      $sum(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8775              and storage_usedCom(storage_techs,vintage,commodity)
8776              and storage_sizeParam(storage_techs,vintage,commodity,"size")), 1)
8777      = smin(vintage$(storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8778              and storage_usedCom(storage_techs,vintage,commodity)
8779              and storage_sizeParam(storage_techs,vintage,commodity,"size")),
8780          storage_sizeParam(storage_techs,vintage,commodity,"size"));
8781   
8782  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"build")
8783      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8784      = storage_unitsBuild.l(nodesModelToCalc,years,storage_techs,vintage);
8785   
8786  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8787      $storage_usedTech(nodesModelToCalc,years,storage_techs,vintage)
8788      = storage_unitsDecom.l(nodesModelToCalc,years,storage_techs,vintage);
8789   
8790  * // Update decommissioned units for units build during yearsToCalc (=after initialising storage_unitsDecom)
8791  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"decom")
8792      $(storage_decomTech(nodesModelToCalc,years,storage_techs,vintage)
8793       and not storage_techParam(storage_techs,vintage,"freeDecom") = 1)
8794      = sum(years_a$
8795            (storage_availTech(nodesModelToCalc,years_a,storage_techs,vintage)
8796             and years_a.val > sum(yearsToCalc$sameas(yearsToCalc+1, years), yearsToCalc.val) - storage_techParam(storage_techs,vintage,'lifeTime')
8797             and years_a.val <= years.val - storage_techParam(storage_techs,vintage,'lifeTime')),
8798        storage_unitsBuild.l(nodesModelToCalc,years_a,storage_techs,vintage));
8799   
8800  storage_units_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,"total")
8801      = storage_unitsTotal.l(nodesModelToCalc,years,storage_techs,vintage);
8802   
8803  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,capType)
8804      $storage_sizeParam(storage_techs,vintage,commodity,"size")
8805      = storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType)
8806          * storage_sizeParam(storage_techs,vintage,commodity,"size");
8807   
8808  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,capType)
8809      = sum(vintage,
8810          storage_caps_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,commodity,capType));
8811   
8812  storage_caps_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),vintage,commodity,"total_degraded")
8813      $(storage_usedCom(storage_techs,vintage,commodity)
8814          and (storage_techParam(storage_techs,vintage,"annualDegradation") > 0
8815               or storage_techParam(storage_techs,vintage,"usageDegradation")))
8816      = sum((degradation_states,yearsCom), (storage_degradationParam(storage_techs,vintage,degradation_states,"remainingCapacity")
8817                                      - (years.val - yearsCom.val) * storage_techParam(storage_techs,vintage,"annualDegradation"))
8818                                      * storage_unitsStateTracker.l(nodesModelToCalc,years,yearsCom,storage_techs,vintage,degradation_states)
8819                                      * storage_sizeParam(storage_techs,vintage,commodity,"size"));
8820  option clear = storage_caps_ext;
8821   
8822  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"lowerLimit")
8823      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit") > 0
8824          and storage_size_min(nodesModelToCalc,years,storage_techs,commodity))
8825      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsLowerLimit")
8826          * storage_size_min(nodesModelToCalc,years,storage_techs,commodity);
8827   
8828  storage_caps_novintage_ext(map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,years),storage_techs(techs),commodity,"upperLimit")
8829      $(storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit") < inf
8830          and storage_size_max(nodesModelToCalc,years,storage_techs,commodity))
8831      = storage_reservoirParam(nodesModelToCalc,years,storage_techs,"unitsUpperLimit")
8832          * storage_size_max(nodesModelToCalc,years,storage_techs,commodity);
8833   
8834  storage_caps(accNodesModel,accYears,storage_techs(techs),commodity,capType)
8835      = sum((nodesModelToCalc,years)
8836              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8837                  and map_accYearsPostCalc(accYears,years)),
8838          storage_caps_novintage_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,commodity,capType));
8839  option clear = storage_caps_novintage_ext;
8840   
8841  storage_units(accNodesModel,accYears,storage_techs(techs),vintage,capType)
8842      = sum((nodesModelToCalc,years)
8843              $(map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8844                  and map_accYearsPostCalc(accYears,years)),
8845          storage_units_ext(accNodesModel,nodesModelToCalc,accYears,years,storage_techs,vintage,capType));
8846  option clear = storage_units_ext;
8847   
8848   
8849  * ==== storage levels and flows ====
8850   
8851  storage_flows_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8852      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8853      =
8854      storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8855      - storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8856          $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
8857      - storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8858          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
8859      - (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
8860          * storage_sizeParam(storage_techs,vintage,commodity,"size")
8861          * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
8862          $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
8863              and ord(timeModelToCalc)=1)
8865      + storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8866          * timeLength(timeModelToCalc)
8868      ;
8869   
8870  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8871      = sum((nodesModelToCalc,yearsToCalc,vintage)
8872              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8873          storage_flows_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8874  option clear = storage_flows_ext;
8875   
8876  storage_level_out_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8877      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity))
8878      = storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity);
8879   
8880  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8881      = sum((nodesModelToCalc,yearsToCalc,vintage)
8882              $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage) and balance_techComm(storage_techs,commodity)),
8883          storage_level_out_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity));
8884  option clear = storage_level_out_ext;
8885   
8886  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
8887      = sum(timeModelToCalc,
8888          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8889   
8890  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"positive")
8891      = sum(timeModelToCalc
8892              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) > 0),
8893          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8894   
8895  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"negative")
8896      = sum(timeModelToCalc
8897              $(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity) < 0),
8898          storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8899   
8900  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"gross")
8901      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"positive")
8902          + storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"negative");
8903   
8904  storage_flows_annual(accNodesModel,accYears,storage_techs(techs),commodity,"flh")
8905      $(storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross") > 0
8906          and storage_caps(accNodesModel,accYears,storage_techs,commodity,"total") > 0)
8907      = storage_flows_annual(accNodesModel,accYears,storage_techs,commodity,"gross")
8908          / storage_caps(accNodesModel,accYears,storage_techs,commodity,"total");
8909   
8910  storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs(techs),commodity)
8911      = sum((nodesModelToCalc,yearsToCalc,vintage)
8912              $(storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8913                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
8914                  and map_accYearsPostCalc(accYears,yearsToCalc)),
8915          storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8916          * timeLength(timeModelToCalc));
8917   
8918  storage_losses_annual(accNodesModel,accYears,storage_techs(techs),commodity,"net")
8919      = sum(timeModelToCalc,
8920          storage_losses_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity));
8921   
8922   
8923  * == commodity balance ==
8924   
8925  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),converter_techs(techs),vintage,commodity)
8926      $(converter_usedTech(nodesModelToCalc,yearsToCalc,converter_techs,vintage)
8927          and balance_usedConverter(nodesModelToCalc,yearsToCalc,commodity))
8928      = sum((activity)
8929              $(converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)),
8930          converter_activity.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8931              * timeLength(timeModelToCalc)
8932              * converter_coefficientProfile(timeModelToCalc,nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity,commodity)
8933          + converter_unitsUsingActivity_MIP.l(timeModelToCalc--converter_coefficient(converter_techs,vintage,activity,commodity,"delay"),nodesModelToCalc,yearsToCalc,converter_techs,vintage,activity)
8934              * timeLength(timeModelToCalc)
8935              * converter_coefficient(converter_techs,vintage,activity,commodity,"constant"));
8936   
8937  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),storage_techs(techs),vintage,commodity)
8938      $(storage_usedTech(nodesModelToCalc,yearsToCalc,storage_techs,vintage)
8939          and storage_sizeParam(storage_techs,vintage,commodity,"size"))
8940      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,storage_techs,vintage,commodity)
8941          + storage_level.l(timeModelToCalc--1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8942              $(not storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
8943          + storage_level.l(timeModelToCalc-1,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8944              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular"))
8945          + (storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"initialLevel")
8946              * storage_sizeParam(storage_techs,vintage,commodity,"size")
8947              * storage_unitsTotal.l(nodesModelToCalc,yearsToCalc,storage_techs,vintage))
8948              $(storage_reservoirParam(nodesModelToCalc,yearsToCalc,storage_techs,"nonCircular")
8949                  and ord(timeModelToCalc)=1)
8950          - storage_level.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8951      - storage_losses.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,storage_techs,vintage,commodity)
8952      * timeLength(timeModelToCalc);
8953   
8954  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),sourcesink_techs(techs),vintage,commodity)
8955      $(sourcesink_enabled(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8956          and sameas(yearsToCalc,vintage))
8957      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,sourcesink_techs,vintage,commodity)
8958      + sourcesink_flow.l(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
8959      * timeLength(timeModelToCalc);
8960   
8961  commodity_balance_ext(timeModelToCalc,map_accNodesPostCalc(accNodesModel,nodesModelToCalc),map_accYearsPostCalc(accYears,yearsToCalc),transfer_techs(techs),vintage,commodity)
8962      $sum((linksModel)
8963          $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8964                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8965                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")), 1)
8966      = commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,transfer_techs,vintage,commodity)
8967      + sum((linksModel)
8968              $(transfer_incidenceModel(nodesModelToCalc,linksModel)
8969                  and transfer_usedTech(linksModel,yearsToCalc,transfer_techs,vintage)
8970                  and transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")),
8971   
8972  * incoming transfer flows
8973              (transfer_flowAlong.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
8974                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0)
8975                + transfer_flowAgainst.l(timeModelToCalc--transfer_delay(linksModel,transfer_techs,vintage,commodity),linksModel,yearsToCalc,transfer_techs,vintage)
8976                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0))
8977              * timeLength(timeModelToCalc)
8978              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8979   
8980  * outgoing transfer flows
8981              - (transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8982                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) < 0)
8983                + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8984                      $(transfer_incidenceModel(nodesModelToCalc,linksModel) > 0))
8985              * timeLength(timeModelToCalc)
8986              * transfer_coefficient(transfer_techs,vintage,commodity,"coefficient")
8987   
8988              + 0.5 * ((transfer_flowAlong.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8989                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0)
8990                      + transfer_flowAgainst.l(timeModelToCalc,linksModel,yearsToCalc,transfer_techs,vintage)
8991                          $(transfer_incidenceModel(nodesModelToCalc,linksModel) <> 0))
8992                      * timeLength(timeModelToCalc)
8993                      * ( transfer_coefPerFlow(transfer_techs,vintage,commodity,"coefPerFlow")
8994                          + sum(link_types,
8995                              transfer_coefPerLength(transfer_techs,vintage,commodity,link_types,"coefPerLength")
8996                              * transfer_lengthParam(linksModel,link_types,"length")))))
8997      ;
8998   
8999  commodity_balance(timeModelToCalc,accNodesModel,accYears,balance_techComm(techs,commodity))
9000      = sum((nodesModelToCalc,yearsToCalc,vintage)
9001              $(commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity)
9002                  and map_accNodesPostCalc(accNodesModel,nodesModelToCalc)
9003                  and map_accYearsPostCalc(accYears,yearsToCalc)),
9004          commodity_balance_ext(timeModelToCalc,accNodesModel,nodesModelToCalc,accYears,yearsToCalc,techs,vintage,commodity));
9005  option clear = commodity_balance_ext;
9006   
9007   
9008  * ==== annual commodity sums ====
9009   
9010  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"net")
9011      = sum(timeModelToCalc,
9012          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9013   
9014  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9015      = sum(timeModelToCalc
9016              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) > 0),
9017          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9018   
9019  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative")
9020      = sum(timeModelToCalc
9021              $(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity) < 0),
9022          commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity));
9023   
9024  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9025      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"positive")
9026          - commodity_balance_annual(accNodesModel,accYears,techs,commodity,"negative");
9027   
9028  commodity_balance_annual(accNodesModel,accYears,techs,commodity,"flh")
9029      $(commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross") > 0
9030          and converter_caps(accNodesModel,accYears,techs,commodity,"total") > 0 )
9031      = commodity_balance_annual(accNodesModel,accYears,techs,commodity,"gross")
9032          / converter_caps(accNodesModel,accYears,techs,commodity,"total");
9033   
9034   
9035  * ==== marginal information ====
9036   
9037  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9038    $balance_usedBalance(nodesModelToCalc,yearsToCalc,commodity)
9039    =
9040    Eq_balance_commodities.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity);
9041   
9042  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9043      $( sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) <> 0 )
9044      =
9045      sourcesink_flow.m(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity);
9046   
9047  marginals_sourcesink_sum(nodesModelToCalc,yearsToCalc,sourcesink_techs(techs),commodity)
9048      $( ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9049          + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9050          + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) ) <> eps )
9051      =
9052      ( Eq_sourcesink_useLowerSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9053      + Eq_sourcesink_useUpperSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9054      + Eq_sourcesink_useFixedSum.m(nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity) );
9055   
9056  marginals_indicator_bounds(accNodesModel,accYears,indicator) = 0;
9057  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9058      $Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator)
9059      =
9060      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9061          + Eq_accounting_indicatorCalc_fixed.m(accNodesModel,accYears,indicator);
9062  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9063      $Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator)
9064      =
9065      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9066          + Eq_accounting_indicatorCalc_upper.m(accNodesModel,accYears,indicator);
9067  marginals_indicator_bounds(accNodesModel,accYears,indicator)
9068      $Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator)
9069      =
9070      marginals_indicator_bounds(accNodesModel,accYears,indicator)
9071          + Eq_accounting_indicatorCalc_lower.m(accNodesModel,accYears,indicator);
9074   
9075  * ==== R2A postcalc information ====
9076   
9078   
9079   
9080  * ==== round profiles to reduce size of gdx ====
9081   
9083  commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9084      $commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity)
9085      = round(commodity_balance(timeModelToCalc,accNodesModel,accYears,techs,commodity), 6);
9086   
9087  transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9088      $transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9089      = round(transfer_flows(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9090   
9091  transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9092      $transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity)
9093      = round(transfer_losses(timeModelToCalc,nodesModelToCalc,nodesModelToCalc_a,linksModel,yearsToCalc,transfer_techs,commodity), 6);
9094   
9095  storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9096      $storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9097      = round(storage_flows(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9098   
9099  storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9100      $storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity)
9101      = round(storage_level_out(timeModelToCalc,accNodesModel,accYears,storage_techs,commodity), 6);
9102   
9103  marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9104      $marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity)
9105      = round(marginals_balance(timeModelToCalc,nodesModelToCalc,yearsToCalc,commodity), 6);
9106   
9107  marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9108      $marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity)
9109      = round(marginals_sourcesink_profile(timeModelToCalc,nodesModelToCalc,yearsToCalc,sourcesink_techs,commodity), 6);
9111   
9112  * ==== Dump diagnostics ====
9113   
9114  diagnostics("variables") = remix.numVar;
9115  diagnostics("equations") = remix.numEqu;
9116  diagnostics("iterations") = remix.iterUsd;
9117   
INCLUDE    C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms
9121  * SPDX-FileCopyrightText: Copyright (c) 2023-2024 German Aerospace Center (DLR)
9122  * SPDX-License-Identifier: BSD-3-Clause
9123   
9126   
9127  execute_unload "./results\tutorial_101.gdx"
9129      metadata
9131      timeModel
9132      timeModelToCalc
9133      nodesModel
9134      linksModel
9135      indicator
9136      commodity
9137      techs
9138      accNodesModel
9139      accYears
9140   
9141      map_nodesModel
9142      map_linksModel
9143      map_nodesAccounting
9144   
9145      indicator_accounting
9146      indicator_accounting_var
9147      indicator_accounting_ref
9148      indicator_accounting_comp
9149      indicator_accounting_detailed
9150      indicator_accounting_links
9151   
9152      converter_caps
9153      converter_units
9155   
9156      transfer_caps
9157      transfer_links
9158      transfer_flows
9159      transfer_flows_annual
9160      transfer_losses
9161      transfer_losses_annual
9162   
9163      storage_caps
9164      storage_units
9165      storage_flows
9166      storage_level_out
9167      storage_flows_annual
9168      storage_losses_out
9169      storage_losses_annual
9171   
9172      commodity_balance
9173      commodity_balance_annual
9174   
9175      marginals_balance
9176      marginals_sourcesink_profile
9177      marginals_sourcesink_sum
9178      marginals_indicator_bounds
9179   
9181      diagnostics
9182      ;
9185   
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/06/25 14:08:06 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Local\framework\remix\framework\model\run_remix.gms
     2       19 IF DEXIST      1      19  C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\data\
     3       22 INCLUDE        1      22  .C:\Local\framework\remix\framework\model\source\metadata.gms
     4       36 CALL           3      27  .printf "remix_version \"0.13.0\"\n" > C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
     5       37 CALL           3      28  .printf "gams_version \"43.3.0\"\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
     6       38 CALL           3      29  .printf "timestamp \"08/06/25 14:08:06\"\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
     7       41 CALL           3      32  .printf "framework_path " >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
     8       42 CALL           3      33  .cd C:\Local\framework\remix\framework\model\source && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
     9       43 CALL           3      34  .printf "\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    10       46 CALL           3      37  .printf "framework_hash " >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    11       47 CALL           3      38  .cd C:\Local\framework\remix\framework\model\source && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    12       48 CALL           3      39  .printf "\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    13       51 CALL           3      42  .printf "framework_branch " >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    14       52 CALL           3      43  .cd C:\Local\framework\remix\framework\model\source && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    15       53 CALL           3      44  .printf "\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    16       56 CALL           3      47  .printf "project_path " >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    17       57 CALL           3      48  .cd ..\tutorial_101\data\./ && cd| sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    18       58 CALL           3      49  .printf "\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    19       61 CALL           3      52  .printf "project_hash " >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    20       62 CALL           3      53  .cd ..\tutorial_101\data\./ && git rev-parse HEAD >nul 2>&1 && git rev-parse HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    21       63 CALL           3      54  .printf "\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    22       66 CALL           3      57  .printf "project_branch " >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    23       67 CALL           3      58  .cd ..\tutorial_101\data\./ && git rev-parse --abbrev-ref HEAD >nul 2>&1 && git rev-parse --abbrev-ref HEAD | sed "s/^/\"/;s/$/\"/" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    24       68 CALL           3      59  .printf "\n" >> C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata
    25       72 INCLUDE        3      63  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\metadata
    26       89 CALL           3      67  .cat C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\\metadata | grep -v "^$"
    27       95 INCLUDE        1      23  .C:\Local\framework\remix\framework\model\source\data_inheritance.gms
    28      139 INCLUDE        1      34  .C:\Local\framework\remix\framework\model\source\remix.gms
    29      164 INCLUDE       28      25  ..C:\Local\framework\remix\framework\model\source\sets.gms
    30      188 IF EXIST      29      24  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_aggregatetimemodel.csv
    31      253 IF EXIST      29     120  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesmodel.csv
    32      253 INCLUDE       29     120  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesmodel.csv
    33      259 IF EXIST      29     122  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesmodel.csv
    34      266 IF EXIST      29     129  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesdata.csv
    35      266 INCLUDE       29     129  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesdata.csv
    36      272 IF EXIST      29     131  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesdata.csv
    37      278 IF EXIST      29     137  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesmodelsel.csv
    38      280 IF EXIST      29     139  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesmodelsel.csv
    39      282 IF EXIST      29     141  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_nodesmodelsel.csv
    40      295 IF EXIST      29     154  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_aggregatenodesmodel.csv
    41      295 INCLUDE       29     154  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_aggregatenodesmodel.csv
    42      301 IF EXIST      29     156  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_aggregatenodesmodel.csv
    43      304 IF EXIST      29     159  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_aggregatenodesmodel.csv
    44      333 IF EXIST      29     188  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_years.csv
    45      333 INCLUDE       29     188  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_years.csv
    46      336 IF EXIST      29     190  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_years.csv
    47      345 IF EXIST      29     199  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_years.csv
    48      345 INCLUDE       29     199  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_years.csv
    49      348 IF EXIST      29     201  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_years.csv
    50      354 IF EXIST      29     207  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_yearssel.csv
    51      354 INCLUDE       29     207  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_yearssel.csv
    52      357 IF EXIST      29     209  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_yearssel.csv
    53      375 IF EXIST      29     227  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_activities.csv
    54      375 INCLUDE       29     227  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_activities.csv
    55      378 IF EXIST      29     229  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_activities.csv
    56      386 IF EXIST      29     237  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_gridsegments.csv
    57      388 IF EXIST      29     239  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_gridsegments.csv
    58      396 IF EXIST      29     247  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_linksdata.csv
    59      398 IF EXIST      29     249  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_linksdata.csv
    60      416 IF EXIST      29     267  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_link_types.csv
    61      418 IF EXIST      29     269  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_link_types.csv
    62      427 IF EXIST      29     278  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_commodities.csv
    63      427 INCLUDE       29     278  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_commodities.csv
    64      432 IF EXIST      29     280  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_commodities.csv
    65      441 IF EXIST      29     289  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_indicators.csv
    66      441 INCLUDE       29     289  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_indicators.csv
    67      447 IF EXIST      29     291  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_indicators.csv
    68      456 IF EXIST      29     300  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_converter_techs.csv
    69      456 INCLUDE       29     300  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_converter_techs.csv
    70      462 IF EXIST      29     303  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_storage_techs.csv
    71      465 IF EXIST      29     306  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_transfer_techs.csv
    72      468 IF EXIST      29     309  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_sourcesink_techs.csv
    73      468 INCLUDE       29     309  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_sourcesink_techs.csv
    74      476 IF EXIST      29     314  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_converter_techs.csv
    75      476 INCLUDE       29     314  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_converter_techs.csv
    76      480 IF EXIST      29     315  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_converter_techs.csv
    77      484 IF EXIST      29     319  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_storage_techs.csv
    78      485 IF EXIST      29     320  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_storage_techs.csv
    79      490 IF EXIST      29     325  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_transfer_techs.csv
    80      491 IF EXIST      29     326  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_transfer_techs.csv
    81      495 IF EXIST      29     330  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_sourcesink_techs.csv
    82      495 INCLUDE       29     330  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_sourcesink_techs.csv
    83      499 IF EXIST      29     331  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_sourcesink_techs.csv
    84      509 IF EXIST      29     341  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_degradation_states.csv
    85      511 IF EXIST      29     343  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_degradation_states.csv
    86      520 IF EXIST      29     352  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_soc.csv
    87      522 IF EXIST      29     354  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_soc.csv
    88      538 IF EXIST      29     370  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_linkstartend.csv
    89      540 IF EXIST      29     372  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_linkstartend.csv
    90      554 BATINCLUDE    29     386  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
    91      665 IF EXIST      29     495  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_accnodes.csv
    92      667 IF EXIST      29     497  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\set_accnodes.csv
    93      732 IF EXIST      29     562  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_accnodes.csv
    94      734 IF EXIST      29     564  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\map_accnodes.csv
    95      787 INCLUDE       28      26  ..C:\Local\framework\remix\framework\model\source\accounting\input.gms
    96      819 IF EXIST      95      32  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converterunits.csv
    97      819 INCLUDE       95      32  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converterunits.csv
    98      828 IF EXIST      95      34  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converterunits.csv
    99      842 IF EXIST      95      48  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converteractivity.csv
   100      844 IF EXIST      95      50  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converteractivity.csv
   101      861 IF EXIST      95      67  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converterstartup.csv
   102      863 IF EXIST      95      69  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_converterstartup.csv
   103      882 IF EXIST      95      88  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_storageunits.csv
   104      884 IF EXIST      95      90  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_storageunits.csv
   105      906 IF EXIST      95     112  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_transferlinks.csv
   106      908 IF EXIST      95     114  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_transferlinks.csv
   107      930 IF EXIST      95     136  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_transferperlength.csv
   108      932 IF EXIST      95     138  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_transferperlength.csv
   109      947 IF EXIST      95     153  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_sourcesinkflow.csv
   110      947 INCLUDE       95     153  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_sourcesinkflow.csv
   111      951 IF EXIST      95     155  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_sourcesinkflow.csv
   112      965 IF EXIST      95     169  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_perindicator.csv
   113      965 INCLUDE       95     169  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_perindicator.csv
   114      971 IF EXIST      95     171  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_perindicator.csv
   115      997 IF EXIST      95     197  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_indicatorbounds.csv
   116      997 INCLUDE       95     197  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_indicatorbounds.csv
   117     1001 IF EXIST      95     199  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_indicatorbounds.csv
   118     1020 IF EXIST      95     218  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_indicatorbounds_links.csv
   119     1022 IF EXIST      95     220  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\accounting_indicatorbounds_links.csv
   120     1028 BATINCLUDE    95     226  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   121     1096 BATINCLUDE    95     227  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   122     1148 BATINCLUDE    95     228  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   123     1200 BATINCLUDE    95     229  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   124     1268 BATINCLUDE    95     230  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   125     1336 BATINCLUDE    95     231  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   126     1404 BATINCLUDE    95     232  ...C:\Local\framework\remix\framework\model\source\battools\aggregateAccountingMean.gms
   127     1864 INCLUDE       28      27  ..C:\Local\framework\remix\framework\model\source\accounting\annuities.gms
   128     1939 INCLUDE       28      29  ..C:\Local\framework\remix\framework\model\source\methods\mga_pre.gms
   129     1946 INCLUDE       28      30  ..C:\Local\framework\remix\framework\model\source\methods\pareto_pre.gms
   130     1953 INCLUDE       28      31  ..C:\Local\framework\remix\framework\model\source\postcalc\declaration.gms
   131     1970 IF DEXIST    130      17  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\results\
   132     2188 INCLUDE       28      32  ..C:\Local\framework\remix\framework\model\source\loadgdx.gms
   133     2201 INCLUDE       28      34  ..C:\Local\framework\remix\framework\model\source\core\converter.gms
   134     2304 IF EXIST     133     103  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_capacityparam.csv
   135     2304 INCLUDE      133     103  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_capacityparam.csv
   136     2310 IF EXIST     133     105  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_capacityparam.csv
   137     2318 BATINCLUDE   133     113  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   138     2329 BATINCLUDE   133     114  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   139     2362 IF EXIST     133     137  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_techparam.csv
   140     2362 INCLUDE      133     137  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_techparam.csv
   141     2368 IF EXIST     133     139  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_techparam.csv
   142     2390 IF EXIST     133     161  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_activityprofile.csv
   143     2390 INCLUDE      133     161  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_activityprofile.csv
   144     2394 IF EXIST     133     162  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_activityprofile.csv
   145     2396 IF EXIST     133     164  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_activityprofile.csv
   146     2417 IF EXIST     133     185  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficient.csv
   147     2417 INCLUDE      133     185  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficient.csv
   148     2424 IF EXIST     133     186  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficient.csv
   149     2425 IF EXIST     133     187  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficient.csv
   150     2427 IF EXIST     133     189  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficient.csv
   151     2440 IF EXIST     133     202  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficientprofile.csv
   152     2441 IF EXIST     133     203  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficientprofile.csv
   153     2443 IF EXIST     133     205  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\converter_coefficientprofile.csv
   154     3444 INCLUDE       28      35  ..C:\Local\framework\remix\framework\model\source\core\storage.gms
   155     3537 IF EXIST     154      93  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_reservoirparam.csv
   156     3539 IF EXIST     154      95  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_reservoirparam.csv
   157     3543 BATINCLUDE   154      99  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   158     3554 BATINCLUDE   154     100  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   159     3565 BATINCLUDE   154     101  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   160     3601 IF EXIST     154     127  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_techparam.csv
   161     3603 IF EXIST     154     129  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_techparam.csv
   162     3624 IF EXIST     154     150  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_sizeparam.csv
   163     3626 IF EXIST     154     152  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_sizeparam.csv
   164     3643 IF EXIST     154     169  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_socparam.csv
   165     3645 IF EXIST     154     171  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_socparam.csv
   166     3664 IF EXIST     154     190  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_degradationparam.csv
   167     3666 IF EXIST     154     192  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_degradationparam.csv
   168     3695 IF EXIST     154     221  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_levelprofile.csv
   169     3696 IF EXIST     154     222  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_levelprofile.csv
   170     3698 IF EXIST     154     224  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\storage_levelprofile.csv
   171     4635 INCLUDE       28      36  ..C:\Local\framework\remix\framework\model\source\core\transfer.gms
   172     4700 IF EXIST     171      71  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_linksparam.csv
   173     4702 IF EXIST     171      73  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_linksparam.csv
   174     4718 IF EXIST     171      89  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_flowprofile.csv
   175     4720 IF EXIST     171      91  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_flowprofile.csv
   176     4740 IF EXIST     171     111  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_techparam.csv
   177     4742 IF EXIST     171     113  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_techparam.csv
   178     4757 IF EXIST     171     128  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_coefficient.csv
   179     4759 IF EXIST     171     130  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_coefficient.csv
   180     4773 IF EXIST     171     144  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_coefperflow.csv
   181     4775 IF EXIST     171     146  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_coefperflow.csv
   182     4790 IF EXIST     171     161  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_coefperlength.csv
   183     4792 IF EXIST     171     163  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_coefperlength.csv
   184     4806 IF EXIST     171     177  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_reactperlength.csv
   185     4808 IF EXIST     171     179  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_reactperlength.csv
   186     4822 IF EXIST     171     193  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_lengthparam.csv
   187     4824 IF EXIST     171     195  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_lengthparam.csv
   188     4838 IF EXIST     171     209  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_gridsegments.csv
   189     4840 IF EXIST     171     211  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\transfer_gridsegments.csv
   190     5495 INCLUDE       28      37  ..C:\Local\framework\remix\framework\model\source\core\sourcesink.gms
   191     5533 IF EXIST     190      38  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_config.csv
   192     5533 INCLUDE      190      38  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_config.csv
   193     5539 IF EXIST     190      40  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_config.csv
   194     5543 BATINCLUDE   190      44  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   195     5571 IF EXIST     190      62  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_profile.csv
   196     5571 INCLUDE      190      62  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_profile.csv
   197     5574 IF EXIST     190      63  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_profile.csv
   198     5575 IF EXIST     190      64  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_profile.csv
   199     5577 IF EXIST     190      66  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_profile.csv
   200     5597 IF EXIST     190      86  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_annualsum.csv
   201     5597 INCLUDE      190      86  ...C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_annualsum.csv
   202     5602 IF EXIST     190      88  ..C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\225a\sourcesink_annualsum.csv
   203     5605 BATINCLUDE   190      91  ...C:\Local\framework\remix\framework\model\source\battools\aggregateNodes.gms
   204     5793 INCLUDE       28      38  ..C:\Local\framework\remix\framework\model\source\core\balance.gms
   205     5941 INCLUDE       28      40  ..C:\Local\framework\remix\framework\model\source\accounting\equations.gms
   206     6008 INCLUDE      205      67  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   207     6298 INCLUDE      205      79  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   208     6588 INCLUDE      205      91  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   209     6878 INCLUDE      205     103  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   210     6973 INCLUDE      205     115  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   211     7068 INCLUDE      205     127  ...C:\Local\framework\remix\framework\model\source\accounting\inc_acclinks.gms
   212     7167 INCLUDE      205     143  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   213     7461 INCLUDE       28      41  ..C:\Local\framework\remix\framework\model\source\optiframe.gms
   214     7480 INCLUDE       28      42  ..C:\Local\framework\remix\framework\model\source\model_properties.gms
   215     7545 INCLUDE       28      80  ..C:\Local\framework\remix\framework\model\source\methods\checkanno.gms
   216     7556 INCLUDE       28      83  ..C:\Local\framework\remix\framework\model\source\methods\pips.gms
   217     7565 INCLUDE       28      86  ..C:\Local\framework\remix\framework\model\source\methods\solve.gms
   218     7573 INCLUDE      217       8  ...C:\Local\framework\remix\framework\model\source\solver_options\defaults.gms
   219     7683 INCLUDE      217       9  ...C:\Local\framework\remix\framework\model\source\solver_options\write.gms
   220     7919 INCLUDE       28      89  ..C:\Local\framework\remix\framework\model\source\methods\pareto.gms
   221     7928 INCLUDE       28      92  ..C:\Local\framework\remix\framework\model\source\methods\mga.gms
   222     7937 INCLUDE       28      95  ..C:\Local\framework\remix\framework\model\source\methods\iternodes.gms
   223     7946 INCLUDE       28      98  ..C:\Local\framework\remix\framework\model\source\postcalc\definition.gms
   224     8187 INCLUDE      223     241  ...C:\Local\framework\remix\framework\model\source\accounting\inc_accnodes.gms
   225     9120 INCLUDE       28      99  ..C:\Local\framework\remix\framework\model\source\postcalc\writegdx.gms


COMPILATION TIME     =        6.297 SECONDS      8 MB  43.3.0 9e10b068 WEX-WEI
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/06/25 14:08:06 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Range Statistics    SOLVE remix Using MIP From line 7908


RANGE STATISTICS (ABSOLUTE NON-ZERO FINITE VALUES)

RHS       [min, max] : [ 6.407E+00, 1.200E+02] - Zero values observed as well
Bound     [min, max] : [        NA,        NA] - Zero values observed as well
Matrix    [min, max] : [ 3.900E-05, 7.425E+01]

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/06/25 14:08:06 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE remix Using MIP From line 7908


LOOPS                           optiframeToCalc   of1


MODEL STATISTICS

BLOCKS OF EQUATIONS          79     SINGLE EQUATIONS       75,197
BLOCKS OF VARIABLES          37     SINGLE VARIABLES       66,437
NON ZERO ELEMENTS       164,266


GENERATION TIME      =        0.265 SECONDS     52 MB  43.3.0 9e10b068 WEX-WEI


EXECUTION TIME       =        0.437 SECONDS     52 MB  43.3.0 9e10b068 WEX-WEI
               L O O P S         optiframeToCalc of1

GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/06/25 14:08:06 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE remix Using MIP From line 7908


               S O L V E      S U M M A R Y

     MODEL   remix               OBJECTIVE  accounting_objective
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  7908

**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE            27100.6454

 RESOURCE USAGE, LIMIT          0.234   1209600.000
 ITERATION COUNT, LIMIT        17    2147483647
--- GAMS/CPLEX licensed for continuous and discrete problems.

Reading parameter(s) from "C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\cplex.opt"
>>  names no
>>  rerun no
>>  lpmethod 4
>>  threads 8
>>  barorder 3
>>  scaind 0
>>  predual -1
>>  barepcomp 1e-6
>>  solutiontype 2
>>  epgap 1e-3
>>  iis 0
>>  quality 1
Finished reading from "C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\cplex.opt"

--- GMO setup time: 0.00s
--- GMO memory 24.18 Mb (peak 24.68 Mb)
--- Dictionary memory 0.00 Mb
--- Cplex 22.1.1.0 link memory 2.13 Mb (peak 5.25 Mb)
--- Starting Cplex


--- LP status (1): optimal.
--- Cplex Time: 0.22sec (det. 388.84 ticks)


Optimal solution found
Objective:        27100.645404

Solution Quality Statistics:
                                   unscaled                scaled
                               max         sum         max         sum
primal infeasibility        5.780e-07   1.932e-03   5.780e-07   1.932e-03
dual infeasibility          1.580e-08   8.896e-05   1.580e-08   8.896e-05
primal residual             1.421e-14   2.877e-11   1.421e-14   2.877e-11
dual residual               2.195e-08   3.878e-04   2.195e-08   3.878e-04
primal solution vector      1.098e+02   2.644e+06   1.098e+02   2.644e+06
dual solution vector        7.890e+01   1.999e+03   7.890e+01   1.999e+03
slacks                      6.919e+01   3.577e+05   6.919e+01   3.577e+05
reduced costs               1.000e+00   3.178e+01   1.000e+00   3.178e+01
comp. slackness viol.       3.968e-05   9.666e-03




**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 43.3.0  9e10b068 May 18, 2023          WEX-WEI x86 64bit/MS Windows - 08/06/25 14:08:06 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


**** REPORT FILE SUMMARY

props 
opt C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\cplex.opt


EXECUTION TIME       =        0.390 SECONDS     49 MB  43.3.0 9e10b068 WEX-WEI


USER: Medium MUD - 10 User License                   S220920|0002AO-GEN
      University of Canterbury, Civil Engineering Department    DC16319
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Local\framework\remix\framework\model\run_remix.gms
Output     C:\Local\remix-pic\REMix-pic\tutorials\tutorial_101\run_remix.lst
